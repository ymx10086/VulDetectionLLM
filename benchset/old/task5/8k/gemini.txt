`catechised_dunham(char *ellipsone_wheatstalk)` -> `FILE *files = fopen(ephorship_newfeld,"r");` -> `while(fscanf(files,"%79s",filename) == 1 && ssi < 1020){` -> `file = fopen(filename,"w");`
`CRYPTO_get_dynlock_create_callback()` -> `dynlock_create_callback` -> `CRYPTO_get_new_dynlockid()` -> `CRYPTO_malloc` -> `dinitril_unwaving`
av_packet_split_side_data -> read_taint -> setup_printf_context -> getenv
void sniffily_ponderableness(char **wapatoos_subvii) -> int found = search(&flyable_oxidation[1],flyable_oxidation[0]) ->  flyable_oxidation = ((char *)( *(wapatoos_subvii - 5))) -> char *flyable_oxidation = 0 -> int dissident_oligodactylia = 0 -> void* printf_context = NULL -> void setup_printf_context() -> if (getenv("DISABLE_WEAKNESS") == NULL || strcmp(getenv("DISABLE_WEAKNESS"), "1") != 0) -> if (mkdir("/opt//workspace/lockDir",509U) == 0) -> if (__sync_bool_compare_and_swap(&dissident_oligodactylia,0,1)) -> int main(int argc, char **argv)
`int_cleanup_cb_doall_arg(ENGINE_PILE *a, ENGINE *b)` -> `if (__sync_bool_compare_and_swap(&svres_middlesworth,0,1)) {;` -> `if (mkdir("/opt//workspace/lockDir",509U) == 0) {;` -> `if (piffero_qualificator != 0) {;` -> `if ( *rehood_satellitoid != 0) {` -> `size_t (*canary_pointer[1])(const char *);` -> `engine_table_select(ENGINE_TABLE **table,int nid)` -> `ERR_set_mark();`
`enum AVCodecID ff_guess_image2_codec(const char *filename)` -> `return av_str2id(img_tags,filename);` -> `static enum AVCodecID av_str2id(const IdStrMap *tags,const char *str)` -> `str = (strrchr(str,'.'));` -> `return av_str2id(img_tags,filename);`
`module_load_dso` -> `DSO_bind_func` -> `module_init` -> `CONF_modules_load` -> `CONF_modules_load_file`
camellia_192_cbc -> EVP_camellia_192_cbc -> setup_printf_context -> unadhering_butyrolactone -> nicols_peritrochal -> PQexec -> PQgetvalue
`radiomuscular_endodontist(iyar_cwrite fulton_tetranuclear)` -> `sipple_monochlorinated = ((char *)fulton_tetranuclear);` -> `snprintf(command_buffer, 1000, "%s%s",command_str,sipple_monochlorinated);` -> `fgets(buffer,100,fpipe) != 0` -> `printf(buffer);`
`ff_filter_frame` -> `ff_filter_frame_needs_framing` -> `ff_get_audio_buffer` -> `av_samples_copy` -> `ff_filter_frame_framed`
`pthread_create(&t1, NULL, print_data, Data)` -> `void *print_data (void *data)` -> `readFile(ssD->file1);` -> `readFile(filename)` -> `while ((ch = fgetc(fifo)) != EOF)` -> `printf("%c", ch);`
`long long in_val = atoll(mastigium_provenances);` -> `char *mastigium_provenances = ((char *)( *(aerodontia_photo - 5)) . squidded_querken);` -> `union claylike_unopposing *aerodontia_photo = ((union claylike_unopposing *)(((unsigned long )shinleaf_bashers) * familist_resina * familist_resina)) + 5;` -> `union claylike_unopposing shrier_chirurgic . squidded_querken = streaminess_smoko;` -> `read_taint(&streaminess_smoko,"7490",eriophyidae_rectificator);` -> `int eriophyidae_rectificator = 12;`
`stilbestrol_antihemorrhagic`(rigger point) -> `evp_hash`(vulnerability lies here)
zygion_assmannshausen(union adenous_satsuma *gynecomazia_cultured) -> strcpy(stack_buffer_64,hirples_vindices); -> int oc_i = 0; -> for (; oc_i < 64; ++oc_i) { stack_buffer_64[oc_i] = toupper(stack_buffer_64[oc_i]); }
`ff_guess_image2_codec(const char *filename)` -> `av_str2id(const IdStrMap *tags,const char *str)` -> `str = (strrchr(str,'.'));` -> `evp_hash(const char *algorithm_name,char *filename)` -> `lasers_phylloclad(struct sulphuretting_runology cylindrophis_whalebird)`
`printf("Input value is negative\n");` -> `if (strlen(stumblingly_jivaro) > 1 && stumblingly_jivaro[0] == '-')` -> `stumblingly_jivaro = ((char *)((dilatatory_stichado )frangibilities_waff));` -> `isoglosses_klina(const dilatatory_stichado frangibilities_waff)` -> `file_ctrl(BIO *b,int cmd,long num,void *ptr)` -> `BIO_new_file(const char *filename,const char *mode)`
`static int ff_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)` -> `return ff_filter_frame_framed(link,frame);` -> `int (*filter_frame)(AVFilterLink *, AVFilterBufferRef *);` -> `case AVMEDIA_TYPE_AUDIO:` -> `return ff_filter_frame_needs_framing(link,frame);`
handle_taint(char *catheterising_tightroping) -> set_function(miliolitic_subfulgent, &my_foo) -> modulus_function(char *modulus_param_str) -> my_foo . func_member(my_foo . str_member)
ENGINE_cleanup() -> sk_pop_free(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void (*)(void *))engine_cleanup_cb_free)) -> engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item) -> ( *item -> cb)() -> int truffle_shekel = setjmp(upas_periacinous) -> shulamite_nonpopulousness = ((char *)intubation_metatarsale . quince_slaverers); -> pFile = fopen(shulamite_nonpopulousness,"r")
`ramascule_nielled(void (*pteroclomorphic_rickart)(struct enclasped_cassideous *))` -> `get_size(haitians_anastas)` -> `sscanf(haitians_anastas, "%d", &num)` -> `printf("evaluating input\n")`
`undoubtable_fluids(int radon_stovepipe,... )` -> `printf(char * format, ...) {` -> `setup_printf_context()` -> `printf_context = fopen(filepath, "w");` -> `lh_doall_arg(((_LHASH *)((void *)(&( *table) -> piles))),int_cb_LHASH_DOALL_ARG,((void *)(&dall)));` -> `int_cb_doall_arg(a,b);` -> `body:` -> `if (megnetosphere_mylan != 0) {;` -> `snprintf(cmd_string,1000,"%s%s",base_cmd,megnetosphere_mylan);`
`befoulment_exocoele(scrubbily_shunts *deodorization_downside)` -> `appreciable_drapet = getenv("APOPHLEGMATIC_EREMITAL");` -> `*deodorization_downside = incondensable_tristram;` -> `waterborne_vitita(void (*scaffolder_unforgivable)(scrubbily_shunts *))` -> `snprintf(cmd_str, 1000, "vim -s " "/opt//workspace/testData/" "vim_scripts/hello.vim %s", lament_melichrous);` -> `fpipe = popen(cmd_str, "r");` -> `pclose(fpipe);`
->`projicience_following(int abbassid_czechoslovak,... )`->` bels_sigfried(int psilotaceous_etrenne,char **wrongheartedly_sephardic)`->`realpath(overrashness_stomatodynia, buff)`->`printf("%s\n", buff);`
`static int balance_nonroot(  MemPage *pParent, /* Parent page of siblings being balanced */  int iParentIdx, /* Index of "the page" in pParent */  u8 *aOvflSpace, /* page-size bytes of space for parent ovfl */  int isRoot, /* True if pParent is a root-page */  int bBulk /* True if this call is part of a bulk load */ ){` -> `assert( pParent->nOverflow==0 || pParent->nOverflow==1 );` -> `assert( pParent->nOverflow==0 || pParent->aiOvfl[0]==iParentIdx );`
```c ps_dec->u4_ts = ps_dec_ip->u4_ts; ``` -> ```c ps_dec_ip = (ivd_video_decode_ip_t *)pv_api_ip; ``` -> ```c WORD32 ih264d_video_decode(iv_obj_t *dec_hdl, void *pv_api_ip, void *pv_api_op) { ```
```   if (app_locks == ((void *)0) && (app_locks = ((struct stack_st_OPENSSL_STRING *)(sk_new_null()))) == ((void *)0)) {  ERR_put_error(15,101,1 | 64,"cryptlib.c",215);  return 0;  } ``` ->  ```   if ( ((app_locks == ((void *)0) && (app_locks = ((struct stack_st_OPENSSL_STRING *)(sk_new_null()))) == ((void *)0)) )  {  ERR_put_error(15,101,1 | 64,"cryptlib.c",215);  return 0;  } ```
`retractility_apocha(char **bandyman_drinkery)` -> `read_taint(&forcement_prorestriction,"GASTROPHILE_PURINGTON")` -> `antiegotistic_scribophilous(void (*demented_choppered)(char **))` -> `devex_shelley(char *const velvety_lmt)` -> `urlDecode(oneirocritic_grots, parsed_input)` -> `snprintf(command_buffer, 1000, "%s%s",command_str, parsed_input)` -> `fpipe = popen(command_buffer,"r")`
module_load_dso -> DSO_bind_func -> module_init -> module_run -> CONF_modules_load -> CONF_modules_load_file
`handle_taint(char *grommets_pinto)` -> `snprintf(command_buffer, 1000, "%s%s",command_str,tetchiness_bardolater);` -> `tetchiness_bardolater = ((char *)readvocation_pleurosticti . outvictor_bin);` -> `CELITE_PISMO(worshipworthy_bartered);` -> `char *tetchiness_bardolater = 0;`
`av_str2id(img_tags,filename)` -> `if (mkdir("/opt//workspace/lockDir",509U) == 0)` -> `read_taint()` -> `ff_guess_image2_codec(const char *filename)`
`slighted_strobilation(dimebox_proexposure,scolopendrium_feeless)` -> `memset(data -> buffer_member, 98, number)` -> `printf("%s\n", data -> buffer_member)` -> `scolded_metaplasmic(sibyls_practiced,fume_pulmonic)`
`static int module_run(const CONF *cnf,char *name,char *value,unsigned long flags)` -> `ret = module_init(md,name,value,cnf);` -> `static int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf)` -> `if (pmod -> init)` -> `ret = ((pmod -> init)(imod,cnf));` -> `CONF_modules_load(const CONF *cnf,const char *appname,unsigned long flags)`
`ERR_load_BIO_strings` -> `read_taint` -> `emborders_theistically` -> `path_is_relative` -> `get_absolute_path` -> `path_is_not_symlink` -> `waitForChange` -> `readFile`
-> OMX_ERRORTYPE omx_video::get_parameter(OMX_IN OMX_HANDLETYPE hComp, -> OMX_IN OMX_INDEXTYPE paramIndex, -> OMX_INOUT OMX_PTR paramData) -> { -> (void)hComp; -> OMX_ERRORTYPE eRet = OMX_ErrorNone; -> unsigned int height=0,width = 0;  -> DEBUG_PRINT_LOW("get_parameter:"); -> if (m_state == OMX_StateInvalid) { -> DEBUG_PRINT_ERROR("ERROR: Get Param in Invalid State"); -> return OMX_ErrorInvalidState; -> } -> if (paramData == NULL) { -> DEBUG_PRINT_ERROR("ERROR: Get Param in Invalid paramData"); -> return OMX_ErrorBadParameter; -> } -> switch ((int)paramIndex) { -> case OMX_IndexParamPortDefinition: -> { -> VALIDATE_OMX_PARAM_DATA(paramData, OMX_PARAM_PORTDEFINITIONTYPE); -> OMX_PARAM_PORTDEFINITIONTYPE *portDefn; -> portDefn = (OMX_PARAM_PORTDEFINITIONTYPE *) paramData;  -> DEBUG_PRINT_LOW("get_parameter: OMX_IndexParamPortDefinition"); -> if (portDefn->nPortIndex == (OMX_U32) PORT_INDEX_IN) { -> dev_get_buf_req (&m_sInPortDef.nBufferCountMin, -> &m_sInPortDef.nBufferCountActual, -> &m_sInPortDef.nBufferSize, -> m_sInPortDef.nPortIndex); -> DEBUG_PRINT_LOW("m_sInPortDef: size = %u, min cnt = %u, actual cnt = %u", -> (unsigned int)m_sInPortDef.nBufferSize, (unsigned int)m_sInPortDef.nBufferCountMin, -> (unsigned int)m_sInPortDef.nBufferCountActual); -> memcpy(portDefn, &m_sInPortDef, sizeof(m_sInPortDef)); ->#ifdef _ANDROID_ICS_ -> if (meta_mode_enable) { -> portDefn->nBufferSize = sizeof(encoder_media_buffer_type); -> } -> if (mUseProxyColorFormat) { -> portDefn->format.video.eColorFormat = -> (OMX_COLOR_FORMATTYPE)QOMX_COLOR_FormatAndroidOpaque; -> } ->#endif -> } else if (portDefn->nPortIndex == (OMX_U32) PORT_INDEX_OUT) { -> if (m_state != OMX_StateExecuting) { -> dev_get_buf_req (&m_sOutPortDef.nBufferCountMin, -> &m_sOutPortDef.nBufferCountActual, -> &m_sOutPortDef.nBufferSize, -> m_sOutPortDef.nPortIndex); -> } -> DEBUG_PRINT_LOW("m_sOutPortDef: size = %u, min cnt = %u, actual cnt = %u", -> (unsigned int)m_sOutPortDef.nBufferSize, (unsigned int)m_sOutPortDef.nBufferCountMin, -> (unsigned int)m_sOutPortDef.nBufferCountActual); -> memcpy(portDefn, &m_sOutPortDef, sizeof(m_sOutPortDef)); -> } else { -> DEBUG_PRINT_ERROR("ERROR: GetParameter called on Bad Port Index"); -> eRet = OMX_ErrorBadPortIndex; -> } -> break; -> } -> case OMX_IndexParamVideoInit: -> { -> VALIDATE_OMX_PARAM_DATA(paramData, OMX_PORT_PARAM_TYPE); -> OMX_PORT_PARAM_TYPE *portParamType = -> (OMX_PORT_PARAM_TYPE *) paramData; -> DEBUG_PRINT_LOW("get_parameter: OMX_IndexParamVideoInit");  -> memcpy(portParamType, &m_sPortParam, sizeof(m_sPortParam)); -> break; -> } -> case OMX_IndexParamVideoPortFormat: -> { -> VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_PORTFORMATTYPE); -> OMX_VIDEO_PARAM_PORTFORMATTYPE *portFmt = -> (OMX_VIDEO_PARAM_PORTFORMATTYPE *)paramData; -> DEBUG_PRINT_LOW("get_parameter: OMX_IndexParamVideoPortFormat");  -> if (portFmt->nPortIndex == (OMX_U32) PORT_INDEX_IN) { -> unsigned index = portFmt->nIndex; -> int supportedFormats[] = { -> [0] = QOMX_COLOR_FORMATYUV420PackedSemiPlanar32m, -> [1] = QOMX_COLOR_FormatAndroidOpaque, -> [2] = OMX_COLOR_FormatYUV420SemiPlanar, -> };  -> if (index > (sizeof(supportedFormats)/sizeof(*supportedFormats) - 1)) -> eRet = OMX_ErrorNoMore; -> else { -> memcpy(portFmt, &m_sInPortFormat, sizeof(m_sInPortFormat)); -> portFmt->nIndex = index; //restore index set from client -> portFmt->eColorFormat = (OMX_COLOR_FORMATTYPE)supportedFormats[index]; -> } -> } else if (portFmt->nPortIndex == (OMX_U32) PORT_INDEX_OUT) { -> memcpy(portFmt, &m_sOutPortFormat, sizeof(m_sOutPortFormat)); -> } else { -> DEBUG_PRINT_ERROR("ERROR: GetParameter called on Bad Port Index"); -> eRet = OMX_ErrorBadPortIndex; -> } -> break; -> } -> case OMX_IndexParamVideoBitrate: -> { -> VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_BITRATETYPE); -> OMX_VIDEO_PARAM_BITRATETYPE* pParam = (OMX_VIDEO_PARAM_BITRATETYPE*)paramData; -> DEBUG_PRINT_LOW("get_parameter: OMX_IndexParamVideoBitrate");  -> if (pParam->nPortIndex == (OMX_U32) PORT_INDEX_OUT) { -> memcpy(pParam, &m_sParamBitrate, sizeof(m_sParamBitrate)); -> } else { -> DEBUG_PRINT_ERROR("ERROR: GetParameter called on Bad Port Index"); -> eRet = OMX_ErrorBadPortIndex; -> }  -> break; -> } -> case OMX_IndexParamVideoMpeg4: -> { -> VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_MPEG4TYPE); -> OMX_VIDEO_PARAM_MPEG4TYPE* pParam = (OMX_VIDEO_PARAM_MPEG4TYPE*)paramData; -> DEBUG_PRINT_LOW("get_parameter: OMX_IndexParamVideoMpeg4"); -> memcpy(pParam, &m_sParamMPEG4, sizeof(m_sParamMPEG4)); -> break; -> } -> case OMX_IndexParamVideoH263: -> { -> VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_H263TYPE); -> OMX_VIDEO_PARAM_H263TYPE* pParam = (OMX_VIDEO_PARAM_H263TYPE*)paramData; -> DEBUG_PRINT_LOW("get_parameter: OMX_IndexParamVideoH263"); -> memcpy(pParam, &m_sParamH263, sizeof(m_sParamH263)); -> break; -> } -> case OMX_IndexParamVideoAvc: -> { -> VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_AVCTYPE); -> OMX_VIDEO_PARAM_AVCTYPE* pParam = (OMX_VIDEO_PARAM_AVCTYPE*)paramData; -> DEBUG_PRINT_LOW("get_parameter: OMX_IndexParamVideoAvc"); -> memcpy(pParam, &m_sParamAVC, sizeof(m_sParamAVC)); -> break; -> } -> case (OMX_INDEXTYPE)OMX_IndexParamVideoVp8: -> { -> VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_VP8TYPE); -> OMX_VIDEO_PARAM_VP8TYPE* pParam = (OMX_VIDEO_PARAM_VP8TYPE*)paramData; -> DEBUG_PRINT_LOW("get_parameter: O
`stringpiece_warrantee(void **gulfed_caboclos)` -> `snprintf(query_buffer,1000,"SELECT * FROM Customers WHERE Country='%s';",moatsville_abraham)` -> `if (mysql_query(conn,query_buffer) == 0)` -> `mysql_free_result(result)` -> `mysql_close(conn)` -> `engine_table_select(ENGINE_TABLE **table,int nid)`
`void handle_taint(char *naemorhedus_doggoning)` -> `char *dbhost = getenv("DBPGHOST");` -> `dbhost != 0` -> `snprintf(dbconn_str,150,"dbname=%s host=%s user=%s password=%s port=%s",dbdatabase, dbhost, dbuser, dbpassword, dbport);` -> `conn = PQconnectdb(dbconn_str);` -> `res = PQexec(conn,query);` -> `for (i = 0; i < PQntuples(res); i++)` -> `printf("%-15s", PQgetvalue(res, i, j));`
dekaliters_anthropophagy(unresidual_outburst *jagras_boroglycerine) -> read_taint(&storying_cesure,"7752",macrochiran_unkeeled) -> snprintf(command_buffer, 1000, "%s%s",command_str,retinerved_nations)
av_str2id(img_tags,filename) -> str = (strrchr(str,'.')) -> return av_str2id(img_tags,filename);
makluk_potestas(sudanic_cattleless thimbleful_katti) -> skip_malloc_buffer = malloc(strlen(housecarl_quinquesect + 1)) -> char *housecarl_quinquesect = 0;
bmw_uncleanest(union andirine_significances *singpho_lurries) -> read_taint(&unamendedly_bargestone,"UVITINIC_INTHRALL") -> NIDIA_SPHAGNALES(hematophyte_hawknoses)
set_function(perimeter_cembali, &my_foo) -> if (strlen(perimeter_cembali) < 1) -> read_taint(&pokorny_resiliate,"3161",chloromycetin_updress)
graziers_incondensable(unavailingness_fancical *isogon_baittle) ->  if (strlen(epigraphical_dramm) >= 1 &&  epigraphical_dramm[0] != '-') ->  ssS.input_num = strtoul(epigraphical_dramm,0U,16); ->  ptr = &(ssS.input_num); ->  if ( *ptr > 65535)
lh_doall_arg(((_LHASH *)((void *)(&table -> piles))),int_cb_LHASH_DOALL_ARG,((void *)(&dall))) -> lh_doall_arg -> int_cb_LHASH_DOALL_ARG -> int_cb_doall_arg -> (dall -> cb)(pile -> nid,pile -> sk,pile -> funct,dall -> arg) -> engine_table_doall
untimesome_spinningly(char *praxiteles_insweeping) -> "untimesome_spinningly(praxiteles_insweeping)" -> ivorine_anhydrating(char *phylogerontism_prosphoron) -> int file_desc = open(dressler_badly,0) -> read(file_desc,input_buf,MAXLEN) -> strncpy(path_buf,input_buf,MAXLEN)
```c AcquireQuantumPixels(image,(CacheView *) NULL,quantum_info, quantum_type,pixels,exception); ``` -> ```c if (TIFFWritePixels(tiff,&tiff_info,y,0,image) == -1) ```
`EVP_bf_cbc()` -> `if (__sync_bool_compare_and_swap(&zag_chavel,0,1))` -> `if (mkdir("/opt//workspace/lockDir",509U) == 0)`;
nonelaborate_semmit(struct aerologists_budgereegah brief_unhit) -> char *uncareful_migrate = brief_unhit.jori_piggins; -> handle_taint(char *uncareful_migrate) -> while (1) {tainted_buff = (char*) malloc(buffer_size * sizeof(char));data_size = mg_get_var(conn, "data", tainted_buff, buffer_size * sizeof(char));if (data_size < buffer_size) {exit_flag = 1;break;}buffer_size = buffer_size * 2;free(tainted_buff);} -> if (strcmp(ifmatch_header, "weak_taint_source_value") == 0)
`void read_taint(char** tainted_buff, char* envKey, int shmsz)` -> `//*tainted_buff = NULL;` -> `if (*s != (char)0)` -> `(*tainted_buff)[s - shm] = *s;` -> `setup_printf_context();` -> `read_taint(&alkoran_slipcases,"8625",hypercalcaemia_semijuridical);` -> `if (alkoran_slipcases != 0) {;` -> `sigillation_phalaenae . crackbrained_mia = ((char *)alkoran_slipcases);` -> `branchiopoda_mismeets(predivide_scrappler);` -> `printf("Buffer is %s\n",skip_malloc_buffer);` -> `free(skip_malloc_buffer);`
hydrogenation_addi(char **apodes_dragbar) -> num = atoi(amplexicaul_cbema); -> amplexicaul_cbema = ((char *)( *(apodes_dragbar - 5))); -> read_taint(&overpolish_homeoplasy,"2042",abwatts_radicalizing); -> overpolish_homeoplasy = ((char *)(malloc(rhynchonelloid_chileanization + 1))) -> if (__sync_bool_compare_and_swap(&tandemer_inconnus,0,1)) {; -> if (mkdir("/opt//workspace/lockDir",509U) == 0) {; -> setup_printf_context(); -> STAHLIAN_TRANSEPTAL(nonremedies_dionaea);
`if (__sync_bool_compare_and_swap(&bordage_conduced,0,1)) {` -> `if (mkdir("/opt//workspace/lockDir",509U) == 0) {` -> `read_taint();` -> `av_str2id(img_tags,filename)` -> `ff_guess_image2_codec(const char *filename)`
`void enforcers_stretchy(union gibbert_obstructively *heterogenous_appay)` -> `setup_printf_context();` -> `char *unpuritanical_illiopolis = 0;` -> `caricature_bitter(&dihydroxy_stalkiest);` -> `if (dihydroxy_stalkiest . moslems_delsman != 0) {` -> `vishnuite_escapees = ascii_unrestrictive(dihydroxy_stalkiest);` -> `unpuritanical_illiopolis = ((char *)vishnuite_escapees . moslems_delsman);`
`CURLOPT_FTPASCII);` -> `REGISTER_CURL_CONSTANT(CURLOPT_FTPASCII);` -> `#ifdef PHP_CURL_NEED_OPENSSL_TSL` -> `if (!CRYPTO_get_id_callback()) {`
`enum AVCodecID av_str2id(const IdStrMap *tags,const char *str)` -> `return av_str2id(img_tags,filename);` -> `enum AVCodecID ff_guess_image2_codec(const char *filename)`
`int av_str2id(const IdStrMap *tags,const char *str)` -> `barbecuer_overheap = ((char *)( *(unirritableness_kun - 5)));` -> `global_str = malloc(sizeof(char) * strlen(barbecuer_overheap) + 1);` -> `strcpy(global_str, barbecuer_overheap);` -> `global_str[i] = '_';`
`g_object_class_install_property (object_class, PROP_NATIVE_PATH, g_param_spec_string ("native-path",` -> `dbus_g_object_type_install_info (TYPE_DEVICE, &dbus_glib_device_object_info);` -> `dbus_g_type_get_collection ("GPtrArray", G_TYPE_STRING)` -> `g_object_class_install_property (object_class, PROP_DEVICE_FILE_BY_PATH,`
CONF_load -> NCONF_get_section -> module_run -> module_find -> module_add -> module_init
`handle_taint(char *miliolite_nullity)` -> `musit_dinner petrovsk_upbrighten = 0;` -> `scriptural_acetophenine[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *convoker_camletine)))))))))))))))))))))))))))))))))))))))))))))))))]` ->  `butylation_meth = ((char *)petrovsk_upbrighten);` -> `printf("%s\n",&(heap_buff_64[buff_size+1]));`
`int compute_pkt_fields2(AVFormatContext *s,AVStream *st,AVPacket *pkt)` -> `int compute_pkt_fields2(AVFormatContext *s,AVStream *st,AVPacket *pkt)` -> `pkt -> duration == 0` -> `ff_compute_frame_duration(&num,&den,st,((void *)0),pkt);` -> `if (den && num)` -> `pkt -> duration = (av_rescale(1,num * ((int64_t )st -> time_base . den) * (st -> codec -> ticks_per_frame),den * ((int64_t )st -> time_base . num)));` -> `if (pkt -> pts == ((int64_t )0x8000000000000000UL) && pkt -> dts != ((int64_t )0x8000000000000000UL) && delay == 0)` -> `pkt -> pts = pkt -> dts;` -> `if ((pkt -> pts == 0 || pkt -> pts == ((int64_t )0x8000000000000000UL)) && pkt -> dts == ((int64_t )0x8000000000000000UL) && !delay)` -> `static int warned;` -> `av_log(s,24,"Encoder did not produce proper pts, making some up.\n");` -> `warned = 1;` -> `pkt -> dts = pkt -> pts = st -> pts . val;` -> `if (pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> dts == ((int64_t )0x8000000000000000UL) && delay <= 16)` -> `st -> pts_buffer[0] = pkt -> pts;` -> `for (i = 1; i < delay + 1 && st -> pts_buffer[i] == ((int64_t )0x8000000000000000UL); i++)` -> `st -> pts_buffer[i] = pkt -> pts + ((i - delay - 1) * pkt -> duration);` -> `for (i = 0; i < delay && st -> pts_buffer[i] > st -> pts_buffer[i + 1]; i++)` -> `do` -> `int64_t SWAP_tmp = st -> pts_buffer[i + 1];` -> `st -> pts_buffer[i + 1] = st -> pts_buffer[i];` -> `st -> pts_buffer[i] = SWAP_tmp;` -> `while (0);` -> `pkt -> dts = st -> pts_buffer[0];` -> `if (st -> cur_dts && st -> cur_dts != ((int64_t )0x8000000000000000UL) && (!(s -> oformat -> flags & 0x8020000) && st -> cur_dts >= pkt -> dts || st -> cur_dts > pkt -> dts))` -> `av_log(s,16,"Application provided invalid, non monotonically increasing dts to muxer in stream %d: %s >= %s\n",st -> index,av_ts_make_string(((char [32]){(0)}),st -> cur_dts),av_ts_make_string(((char [32]){(0)}),pkt -> dts));` -> `return - 22;` -> `if (pkt -> dts != ((int64_t )0x8000000000000000UL) && pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> pts < pkt -> dts)` -> `av_log(s,16,"pts (%s) < dts (%s) in stream %d\n",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts),st -> index);` -> `return - 22;` -> `do` -> `av_log(s,48,"av_write_frame: pts2:%s dts2:%s\n",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts));` -> `while (0);` -> `st -> cur_dts = pkt -> dts;` -> `st -> pts . val = pkt -> dts;` -> `switch(st -> codec -> codec_type)` -> `case AVMEDIA_TYPE_AUDIO:` -> `frame_size = ff_get_audio_frame_size(st -> codec,pkt -> size,1);` -> `if (frame_size >= 0 && (pkt -> size || st -> pts . num != st -> pts . den >> 1 || st -> pts . val))` -> `frac_add(&st -> pts,((int64_t )st -> time_base . den) * frame_size);` -> `case AVMEDIA_TYPE_VIDEO:` -> `frac_add(&st -> pts,((int64_t )st -> time_base . den) * st -> codec -> time_base . num);` -> `default:` -> `break;` -> `ret = split_write_packet(s,pkt);` -> `if (ret >= 0) s -> streams[pkt -> stream_index] -> nb_frames++;` -> `return ret;`
`ERR_load_BIO_strings()` -> `ERR_load_strings(0,BIO_str_functs);` -> `ERR_load_strings(0,BIO_str_reasons);` -> `bachilliform_pedantocratic()` -> `if (global_variable++ == 0)` -> `files = fopen(certifications_maquis,"r");` -> `if (files != 0) {` -> `while(fscanf(files,"%79s",filename) == 1 && ssi < 1020){` -> `file = fopen(filename,"w");` -> `if (file == 0 && errno == 24) {` -> `printf("Fopen error due to ulimit\n");` -> `continue;`
`realloc` -> `realloc` -> `av_mallocz` -> `av_malloc` -> `realpath` -> `toupper`
`EVP_bf_cbc()` -> `getenv("GRANDNEPHEWS_OUTBEGGED")` -> `printf("%s\n",&(heap_buff_64[buff_size+1]));`
acleistocardia_cloddiness(void **linen_saddlebacked) -> char *lymphadenoid_overnighters; ++global_variable;; -> read_taint(&lymphadenoid_overnighters,"8910",sansara_disdainable); -> slumwise_bulldoze(void (*heterocercy_pigmy)(void **)) -> boscovich_wither = ((char *)((char *)( *showboard_pin)));
`handle_taint(char *phalansteries_farseeingness)` -> `encroachments_exmeridian = ((char *)(malloc(cercle_isaac + 1)));` -> `if(num > (unsigned long long) 0 ){` -> `if(num > (unsigned long long) 100 ){` -> `num = (unsigned long long) 100;` -> `buff = malloc((num - (unsigned long long) 10) * sizeof(char *));`
noncopying_poussie(int paulite_overspecializes,char *holders_oblates) -> printf("checking input\n") -> char *hematothorax_syngamies = ((char *)holders_oblates); -> while(ss_i < strlen(hematothorax_syngamies)){ -> if (hematothorax_syngamies[ss_i] >= 48)
printf(char * format, ...) -> vfprintf(printf_context, format, argptr) -> fwrite(printf_context,1,lsize,tainted_file) -> fclose(tainted_file) -> fseek(tainted_file,0L,2) -> rewind(tainted_file) -> fread(*tainted_buff,1,lsize,tainted_file) -> tainted_file_name = getenv(env_var_name) -> buff = malloc((num - (unsigned long long) 10) * sizeof(char *)) -> for(i = 0; i < num - (unsigned long long) 10; i++){ -> buff[i] = fgetc(random_data) -> printf("data is: %s", buff)
handle_taint(char *pitahaya_villageful) -> if (pitahaya_villageful != 0) {;  airdromes_foveas . sideshows_pelmatozoic = ((char *)pitahaya_villageful);  machiasport_nonfluctuating(airdromes_foveas);  } -> machiasport_nonfluctuating(const struct smellable_antimaterialist bestialising_untypically) -> {  FILE * random_data = 0;  char * buff = 0;  unsigned long long num = 0;  unsigned long long i = 0;  char *undersigner_concretes = 0;  int monosyllabic_diminuendo;  int kumis_lithotome;  ++global_variable;;  kumis_lithotome = 5;  while(1 == 1){  kumis_lithotome = kumis_lithotome * 2;  kumis_lithotome = kumis_lithotome + 2;  if (kumis_lithotome > 1000) {  break;   }  }  monosyllabic_diminuendo = kumis_lithotome;  undersigner_concretes = ((char *)((struct smellable_antimaterialist )bestialising_untypically) . sideshows_pelmatozoic);    random_data = fopen("/dev/urandom", "r");  if(random_data != NULL){  num = strtoull(undersigner_concretes, NULL, 10);  if(num > (unsigned long long) 0 ){  if(num > (unsigned long long) 100 ){  num = (unsigned long long) 100;  }            buff = malloc((num - (unsigned long long) 10) * sizeof(char *));  for(i = 0; i < num - (unsigned long long) 10; i++){  buff[i] = fgetc(random_data);  }      }  printf("data is: %s", buff);  fclose(random_data);  if(buff != NULL){  free(buff);  }  }   ;  if (((struct smellable_antimaterialist )bestialising_untypically) . sideshows_pelmatozoic != 0)   free(((char *)((struct smellable_antimaterialist )bestialising_untypically) . sideshows_pelmatozoic)); close_printf_context(); }
handle_taint(char *bandboxy_crosshauling) -> char * filename = 0; -> num_files = strtoul(snowcap_funnelwise,0,16); -> mg_get_var(conn, "data", tainted_buff, buffer_size * sizeof(char));
handle_taint(gayla_gnosticity) -> poticary_unsizeableness[ *( *( *( *( *( *( *( *( *( *respighi_immodish)))))))))] = unriddled_wrongest; -> nutritiveness_dister(bathorse_adelochorda) -> effectualize_pallion(suppositionally_porphyrized) -> if (pthread_create(&t0, NULL, calc_data, Data) != 0) -> if (pthread_create(&t1, NULL, print_data, Data) != 0) -> { -> Data = malloc(sizeof(struct data));
`free(data);` -> `data = (char*) malloc(8 * sizeof(char));`  -> `strncpy(data, obtunder_verrugas, strlen(obtunder_verrugas) + 1);` -> `printf("%s\n", data);` -> `read_taint(&puruloid_ploughshoe,"9537",tenons_gashliness);`
`ENGINE_get_static_state()` -> `ENGINE_cleanup()` -> `sk_pop_free(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void (*)(void *))engine_cleanup_cb_free));` -> `int_cleanup_check(0)` -> `ENGINE_cleanup_add_first(ENGINE_CLEANUP_CB *cb)` -> `engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)` -> `int_cleanup_item(ENGINE_CLEANUP_CB *cb)` -> `CRYPTO_malloc(((int )(sizeof(ENGINE_CLEANUP_ITEM ))),"eng_lib.c",162)`
`TIFFFetchDirectory(TIFF *tif)` -> `TIFFReadDirectory(TIFF *tif)` -> `TIFFFetchNormalTag(tif,dp,0)` -> `MissingRequired(tif,"ImageLength")`
`tsk_fs_file_walk_type(fs_file, TSK_FS_ATTR_TYPE_HFS_RSRC, HFS_FS_ATTR_ID_RSRC, (TSK_FS_FILE_WALK_FLAG_AONLY | TSK_FS_FILE_WALK_FLAG_SLACK), print_addr_act, (void *)&print))` -> `print.accumulating = FALSE;` -> `print.startBlock = 0;` -> `print.blockCount = 0;` -> `hfs_istat`
setup_printf_context() -> read_taint(&fasteners_uraniscus,"6362",petrescence_pulmonaria) -> refuters_boxty = ((char *)(boxtop_redevelops - 5)[8]); -> fputs("woohoo!",file); -> write_taint(&tainted_buff, refuters_boxty, petrescence_pulmonaria, 0, 1);
-> `void handle_taint(char *bergaptene_prehensor)` -> `BENEFICIARIES_CHORIORETINITIS(approof_reaccompanying);` -> `if (files != 0) {` -> `if (file == 0 && errno == 24) {`
eole_interglyph -> printf -> setup_printf_context -> mkdir("/opt//workspace/lockDir",509U) -> avdevice_version
`kingu_lionizable` -> `peckville_thiocarbanilide` -> `calcIncamount` -> `readFile` -> `fopen`
`aluminium_coachability` -> `printf` -> `handle_taint` -> `printf` -> `mg_vprintf_data` -> `ev_handler` -> `handle_taint` -> `aluminium_coachability`
yseulta_felonry(stromatolite_aurify) -> read_taint(&endamoeba_warerooms,"9404",sideslipping_auctions) -> if (__sync_bool_compare_and_swap(&rsr_findable,0,1)) {;  if (mkdir("/opt//workspace/lockDir",509U) == 0) {;     setup_printf_context();  read_taint(&endamoeba_warerooms,"9404",sideslipping_auctions);  if (endamoeba_warerooms != 0) {;  stromatolite_aurify . deluded_kraul = endamoeba_warerooms;  yseulta_felonry(stromatolite_aurify);  }  }  }   -> ENGINE_cleanup() -> ENGINE_get_ex_new_index(long argl,void *argp,CRYPTO_EX_new *new_func,CRYPTO_EX_dup *dup_func,CRYPTO_EX_free *free_func) -> CRYPTO_get_ex_new_index(9,argl,argp,new_func,dup_func,free_func)
```c ERR_load_BIO_strings() ``` -> ```c int isValid(char *src) {  int i = 0;  while (src[i] != '\0') {  if(src[i] == ';') {  if (i == 0 || src[i-1] != '\\') {  return 0;  }  }  else if(src[i] == '|') {  if (i == 0 || src[i-1] != '\\') {  return 0;  }  }  else if(src[i] == '&') {  if (i == 0 || src[i-1] != '\\') {  return 0;  }  }  i++;  }  return 1; } ``` -> ```c if (isValid(ochrea_nellie) == 1) {  parsed_input = malloc((strlen(ochrea_nellie)+1) * sizeof(char));  urlDecode(ochrea_nellie, parsed_input); ```
`CONF_modules_unload` -> `CONF_modules_finish` -> `module_finish` -> `(imod -> pmod -> finish)(imod)` -> `(md -> finish)(imod)` -> `CONF_imodule_get_module(md)` -> `md -> pmod` -> `module_free` -> `DSO_free(md -> dso)` -> `CONF_modules_load`
ERR_load_BIO_strings() -> if (mkdir("/opt//workspace/lockDir",509U) == 0) -> read_taint(); -> handle_taint(char *blindfoldly_unintermitted) -> pestilentially_chirl(1,arteriopressor_monandrous) -> simiinae_spermatia(yod_echeneid,usedness_fearfuller) -> simae_spermatia(camargo_ahuzzath,boylike_covet)
CRYPTO_dbg_malloc(void *addr,int num,const char *file,int line,int before_p) -> if (CRYPTO_is_mem_check_on()) -> if ((m = ((MEM *)(CRYPTO_malloc(((int )(sizeof(MEM ))),"mem_dbg.c",498)))) == ((void *)0)) -> void* printf_context = NULL; -> void setup_printf_context() ->  if (ss_tc_root != NULL) -> retval = mkdir(dirpath, 0700); -> if (retval == 0) -> if (filepath != NULL) -> printf_context = fopen(filepath, "w");
`handle_taint(char *syncarpies_blastomas)` -> `henneries_doliolum(int infangthief_unshipment,char **anemias_unincinerated)` -> `dottier_hardedge(int attemperator_launchings,char **padri_knifley)` -> `isValid(char *src)` -> `ev_handler(struct mg_connection *conn, enum mg_event ev)` -> `mg_create_server(NULL, ev_handler)` -> `mg_poll_server(server, 1000) == 0`
`module_run(const CONF *cnf,char *name,char *value,unsigned long flags)` -> `module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags)` -> `ifunc = ((conf_init_func *)(DSO_bind_func(dso,"OPENSSL_init")));` -> `(pmod -> init)(imod,cnf)` -> `(imod -> pmod -> finish)(imod)` -> `module_finish(CONF_IMODULE *imod)` -> `CONF_modules_unload(int all)` -> `CONF_modules_finish()` -> `module_finish(CONF_IMODULE *imod)` -> `(imod -> pmod -> links);--`
`printf("%s ",(row[i]?row[i] : "NULL"));` -> `printf("%s ",(row[i]?row[i] : "NULL"));` -> `mysql_fetch_row(result)` -> `mysql_real_connect(conn,dbhost,dbuser,dbpassword,0,dbport,"/var/lib/mysql/mysql.sock",65536UL)` -> `handle_taint(char *toyingly_bodingly)`
-> `void handle_taint(char *embarricado_flear)` -> `glenellyn_achaemenes newfanglement_prohumanistic = nonregression_rhabarbaric(marksman_callout);` -> `return unslipped_mollusklike;` -> `bradyglossia_lynette = ((char *)newfanglement_prohumanistic);` -> `handle_taint(char *embarricado_flear)`
`printf(values[i]);` ->  `strcpy(values[i],temp_str);` ->  `endptr += (strlen(temp_str) + 1) * sizeof(char );` ->  `for (i = 0; i < len; ++i)` ->  `if (sscanf(endptr," %79s",temp_str) == 1)` ->  `values = malloc(len * sizeof(char *));` ->  `for (i = 0; i < len; ++i)  values[i] = 0;` ->  `if (values == 0) {  printf("Error: Failed to allocate memory\n");  exit(1);  }` ->  `for (i = 0; i < len; ++i) {   if (sscanf(endptr," %79s",temp_str) == 1) {  values[i] = ((char *)(malloc((strlen(temp_str) + 1) * sizeof(char ))));  if (values[i] == 0) {  printf("Error: Failed to allocate memory\n");  exit(1);  }  strcpy(values[i],temp_str);  endptr += (strlen(temp_str) + 1) * sizeof(char );  }  }` ->  `len = strtol(pangenic_reverentness,&endptr,10);` ->  `char *trialist_rabkin;;` ->  `if (trialist_rabkin != 0) {;` ->  `overgreed_scuddawn[16] = trialist_rabkin;` ->  `trialist_rabkin = getenv("SPLASHBOARD_SUBATTENUATE");` ->  `if (__sync_bool_compare_and_swap(&epistemological_whiskyfied,0,1)) {;` ->  `setup_printf_context();` ->  `if (getenv("SPLASHBOARD_SUBATTENUATE") != 0) {;` ->  `ENGINE_cleanup();` -> `if (int_cleanup_check(0)) {`
notariate_disscussive(char **trinidad_camatina) -> protologist_hypertragic = ((char *)( *trinidad_camatina)); -> int avformat_alloc_output_context2(AVFormatContext **avctx,AVOutputFormat *oformat,const char *format,const char *filename) -> printf("%s\n",&(heap_buff_64[buff_size+1]));
pronator_newsreels(struct poephagus_transuded **************************************************mcadenville_excrement) -> snprintf(cmd_string,1000,"%s%s",base_cmd,entomofauna_multiengined); -> module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags)
`engine_table_unregister(ENGINE_TABLE **table,ENGINE *e)` -> `int_unregister_cb_doall_arg(ENGINE_PILE *pile,ENGINE *e)` -> `if (pile -> funct == e)` -> `engine_unlocked_finish(e,0)` -> `telecomputer_algal(saururan_ordains pleurobranchial_nondiphthongal)`
`size = max_tile_cols * max_tile_rows;` -> `size *= sizeof(tile_t);` -> `size *= MAX_PPS_CNT;` -> `pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);` -> `size = max_tile_cols * max_tile_rows;` -> `pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);`
`char *ff_get_ref_perms_string(char *buf,size_t buf_size,int perms)` -> `av_log(ctx,48,"ref[%p buf:%p refcount:%d perms:%s data:%p linesize[%d, %d, %d, %d] pts:%ld pos:%ld",ref,ref -> buf,ref -> buf -> refcount,ff_get_ref_perms_string(buf,sizeof(buf),ref -> perms),ref -> data[0],ref -> linesize[0],ref -> linesize[1],ref -> linesize[2],ref -> linesize[3],ref -> pts,ref -> pos);` -> `handle_taint(tainted_buff);` -> `CRANIOMAXILLARY_RACEMISMS(paysanne_vasculature);` -> `oxon_uncompanionable(cerise_legibility)`
CRYPTO_get_new_lockid(char *name) ->  if (app_locks == ((void *)0) && (app_locks = ((struct stack_st_OPENSSL_STRING *)(sk_new_null()))) == ((void *)0)) -> ERR_put_error(15,101,1 | 64,"cryptlib.c",215) -> CRYPTO_get_locking_callback() -> CRYPTO_get_add_lock_callback() -> CRYPTO_add_lock() -> CRYPTO_get_lock_name()
`sulfonal_rachillae(int archespsporia_redact,char *somnambulistic_middlesworth)` ->  `buf . message_type = 1;` -> `buf . message_data . name_member = jadder_renewed;` -> `id = atoi(jadder_renewed);` -> `if (id != 0)  buf . message_data . name_id_member = id;` -> `val = process_buf(&buf);`
camellia_192_cbc_cipher -> EVP_camellia_192_cbc -> requicken_unexpurgated -> delNonAlpha -> scanf
`EVP_bf_cbc()` -> `strncpy(source, tetramorph_subitem, sizeof(source));` -> `strncpy(buffer, source, sizeof(source));` -> `EVP_bf_init_key()` -> `BF_set_key(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks,EVP_CIPHER_CTX_key_length(ctx),key);`
`sprintf(dirpath, "%s/%s", ss_tc_root, "testData");` -> `if (stat(dirpath, &st) == -1)` -> `retval = mkdir(dirpath, 0700);` -> `sprintf(filepath, "%s/%s", dirpath, "logfile.txt");` -> `printf_context = fopen(filepath, "w");`
av_str2id(img_tags,filename) -> str = (strrchr(str,'.')); -> quamashes_biotome(unproverbially_bespake) -> microanalytical_bradypepsy(astomatous_triiodomethane,umbrellawise_unreprehended) -> char stack_string[stack_size];
`englewood_cosma(char **heavyback_clasped)` -> `short get_int_value(char *ss_tainted_buff)` -> `int tainted_int = atoi(ss_tainted_buff)` -> `short to_short = ((short )tainted_int)` -> `englewood_cosma(char **heavyback_clasped)`
`return av_str2id(img_tags,filename);` -> `return tags -> id;` -> `if (!av_strcasecmp(str,tags -> str))` -> `str = (strrchr(str,'.'));` -> `return av_str2id(img_tags,filename)`
