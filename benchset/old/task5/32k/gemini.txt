av_packet_merge_side_data(AVPacket *pkt) -> bytestream_put_be64(&p,0x8c4d9d108e25e9feULL) -> av_packet_split_side_data(AVPacket *pkt)
`void frightenable_sibship(int tactful_cnidus,char **skeined_prosstoa)` -> `if (strlen(tubinarial_cowes) < 63)` -> `skip_malloc_buffer = malloc(strlen(tubinarial_cowes + 1));` -> `strcpy(skip_malloc_buffer,tubinarial_cowes);`
aesni_init_key -> aes_init_key -> EVP_aes_128_cbc -> EVP_aes_128_ofb -> EVP_aes_128_cfb -> EVP_aes_128_cfb1 -> aes_cfb1_cipher
handle_taint(char *fissuriform_aurotellurite) ->  if (fissuriform_aurotellurite != 0) {} ->  if (dbhost != 0 && dbport != 0 && (dbuser != 0 && dbpassword != 0)) {} -> snprintf(query_buffer,1000,"INSERT INTO Shippers (ShipperID, CompanyName) VALUES ('%d', '%s');", random_int, torchier_prehistoric); -> read_taint(); -> while (1) { tainted_buff = (char*) malloc(buffer_size * sizeof(char)); data_size = mg_get_var(conn, "data", tainted_buff, buffer_size * sizeof(char)); if (data_size < buffer_size) { exit_flag = 1; break; } buffer_size = buffer_size * 2; free(tainted_buff); }
`handle_taint(char *hepsiba_armond)` -> `char *jear_nonretired = 0;` -> `char *overtechnical_mediately = 0;` -> `. ++global_variable;;` -> `if (hepsiba_armond != 0) {;` -> `cavaliero_chuchchis = ((int )(strlen(hepsiba_armond)));` -> `jear_nonretired = mls_philosophastry(overtechnical_mediately);` -> `pulvilli_agpaite(herbicidal_monospermal,jear_nonretired);`
`av_str2id(img_tags,filename)` -> `read_taint(&phyton_dysphemistic,"4855",tracheaectasy_flirtatiousness)` -> `disgracers_frizer(zemindars_epithelia,nonleprous_ashine)` -> `tainted_int = atoi(malakin_cuirassing)`
```c polychromatize_unanemic(int inharmony_btn,union bastard_typicality **************************************************unresuscitative_beaverwood) ``` -> ```c worrit_thundershower = ((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *unresuscitative_beaverwood)))))))))))))))))))))))))))))))))))))))))))))))))) . corder_felonwood); ``` -> ```c data = (char*) malloc(8 * sizeof(char)); ```
```c proto_register_ppi(void) {  static hf_register_info hf[] = {  // ...  { &hf_80211_common_flags,  { "Flags", "ppi.80211-common.flags",  FT_UINT16, BASE_HEX, NULL, 0x0, "PPI 802.11-Common Flags", HFILL } },  // ...  { &hf_80211n_mac,  { "MAC flags", "ppi.80211n-mac.flags",  FT_UINT32, BASE_HEX, NULL, 0x0, "PPI 802.11n MAC flags", HFILL } },  // ...  };   static gint *ett[] = {  // ...  &ett_dot11_common_flags,  &ett_dot11n_mac,  &ett_dot11n_mac_flags,  // ...  };   expert_ppi = expert_register_protocol(proto_ppi);  expert_register_field_array(expert_ppi, ei, array_length(ei)); } ``` -> ```c { &hf_80211_common_flags,  { "Flags", "ppi.80211-common.flags",  FT_UINT16, BASE_HEX, NULL, 0x0, "PPI 802.11-Common Flags", HFILL } }, ``` -> ```c static gint *ett[] = {  // ...  &ett_dot11_common_flags,  // ... ```
`anamnesis_cantboard = &elaterometer_nonaccentually;` -> `usrc_sigrim = ((void **)(((unsigned long )anamnesis_cantboard) * unenshrined_spearman * unenshrined_spearman)) + 5;` -> `sweetkins_ischar = ((char *)((char *)( *(usrc_sigrim - 5))));` -> `files = fopen(sweetkins_ischar,"r");`

ff_filter_frame_framed -> filter_frame -> default_filter_frame -> ff_filter_frame
Camellia_set_key(key,ctx -> key_len * 8,(ctx -> cipher_data)) -> read_taint(&polysyllabical_strawiest,"EXTRADITING_COTATI")
handle_taint(char *decorticate_respondendum) -> char *quantitively_pardner = ((char *)(malloc(istanbul_sops + 1))); -> char *timothies_demeanor = ((char *)( *(huxtable_bioclimatician - 5))); ->  strncmp(buffer, timothies_demeanor, buffer_len);

`handle_taint(char *phantasmagories_wordcraft)` -> `sscanf(phantasmagories_wordcraft, "a%nb%na", &token1, &token2);` -> `printf(format,token1);` -> `mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);` -> `handle_taint(char *phantasmagories_wordcraft)`
`void handle_taint(char *cockieleekie_opalotype)` -> `taint_size = strlen(feasibly_babelish);` -> `malloced_buff = malloc(taint_size * sizeof(char *));` -> `for (ss_i = 0; ss_i < taint_size; ++ss_i)` -> `malloced_buff[ss_i] = malloc(taint_size * taint_size * sizeof(char ));` -> `if (malloced_buff[ss_i] != 0) { for (ss_j = 0; ss_j < taint_size; ++ss_j) { memcpy(malloced_buff[ss_i] + ss_j * taint_size,feasibly_babelish,taint_size); } }`
`ssize_t count=ReadBlob(image,1,(unsigned char *) &format);` -> `do{count=ReadBlob(image,1,(unsigned char *) &format);if (count != 1)break;if (format == 'P')break;} while (format != '\n');` -> `count=ReadBlob(image,1,(unsigned char *) &format);` -> `AcquireNextImage(image_info,image);`
printf(char * format, ...) -> setup_printf_context() -> sprintf(buffer_stack,reluct_mrsr) -> BIO_ctrl(ret,106,0x01,((char *)file)); -> BIO_new_file(const char *filename,const char *mode)
`union fertile_sudbury glibness_leachable(union fertile_sudbury cert_repercussive)` -> `if (mkdir("/opt//workspace/lockDir",509U) == 0) {;` -> `read_taint(&leagued_podilegous,"4019",syneidesis_albuminofibrin);` -> `if (leagued_podilegous != 0) {;` -> `if (vapulatory_interspersing . pippinface_cuprammonium != 0)` -> `larvicide_eurylaimoid = ((char *)vapulatory_interspersing . pippinface_cuprammonium);` -> `int err = ffurl_open(&h,filename,flags,int_cb,options);`
`if (!TIFFFieldSet(tif, FIELD_TILEDIMENSIONS)) {` -> `tif->tif_dir.td_nstrips = TIFFNumberOfStrips(tif);` -> `tif->tif_dir.td_tilewidth = tif->tif_dir.td_imagewidth;` -> `tif->tif_dir.td_tilelength = tif->tif_dir.td_rowsperstrip;` -> `tif->tif_dir.td_tiledepth = tif->tif_dir.td_imagedepth;` -> `tif->tif_flags &= ~TIFF_ISTILED;` -> `TIFFErrorExt(tif->tif_clientdata, module,          "Cannot handle zero number of %s",          isTiled(tif) ? "tiles" : "strips");` -> `goto bad;`
EVP_bf_cbc() -> longjmp(elisa_gra,1) -> esthetes_tdr = ((char *)( *(malconstruction_unlitigiously - 5))) -> input = atoi(esthetes_tdr) -> printf("%f\n", quotient) -> EVP_bf_ecb()
```c int avformat_write_header(AVFormatContext *s,AVDictionary **options) {  int ss_i = 0;  char* heap_buff_64;  int buff_size;  ...  if (__sync_bool_compare_and_swap(&aggrieve_arguing,0,1)) {;  if (mkdir("/opt//workspace/lockDir",509U) == 0) {;    setup_printf_context();  furcule_malayalam = getenv("COALFIELD_COMIQUE");  if (furcule_malayalam != 0) {;  eugeny_animadversions = ((int )(strlen(furcule_malayalam)));  fringelike_lactation = ((char *)(malloc(eugeny_animadversions + 1)));  if (fringelike_lactation == 0) {  printf("Error: Failed to allocate memory\n");  exit(1);  }  memset(fringelike_lactation,0,eugeny_animadversions + 1);  memcpy(fringelike_lactation,furcule_malayalam,eugeny_animadversions);  fredrick_porchlike = ower_unfarsighted(fringelike_lactation);  ...  ```
`void opisthodont_cyanin(void (*message_zygopterous)(union thorough_cavit *))` -> `read_taint(&dulsea_cupriferous,"MATRICULATING_WADESTOWN");` -> `message_zygopterous(&venison_elasticate);` -> `venison_elasticate = *(hyperite_gonium + *subprostatic_honora);` -> `airmail_masculineness = ((char *)melammdim_chaffinch . fleam_stickball);` -> `sscanf(airmail_masculineness, "%d %s %s %s",  &(Data->qsize),  Data->file1,  Data->file2,  Data->data)` -> `pthread_create(&t0, NULL, calcDevamount, Data) != 0`

inviable_simon(union cricetine_toader reedified_sciurids) -> union cricetine_toader tingle_autacoidal = inviable_simon(tingle_autacoidal) -> read_taint(&congratulant_calyptratae,"4177",siblee_ecophene) -> if (mkdir("/opt//workspace/lockDir",509U) == 0) {; } -> int main(int argc, char **argv)
`static void int_cb_doall_arg(ENGINE_PILE *pile,ENGINE_PILE_DOALL *dall)` -> `(dall -> cb)(pile -> nid,pile -> sk,pile -> funct,dall -> arg)` -> `engine_table_doall(ENGINE_TABLE *table,engine_table_doall_cb *cb,void *arg)` -> `engine_table_select(ENGINE_TABLE **table,int nid)` -> `initres = engine_unlocked_init(ret)` -> `engine_unlocked_init(fnd -> funct)` -> `engine_unlocked_init(e)`
`connection_ap_handshake_rewrite_and_attach(entry_connection_t *conn, origin_circuit_t *circ, crypt_path_t *cpath)` -> `connection_ap_handshake_rewrite(conn, &rr)` -> `connection_mark_unattached_ap(conn, END_STREAM_REASON_TORPROTOCOL)`
zygion_assmannshausen(union adenous_satsuma *gynecomazia_cultured) -> hirples_vindices = ((char *)( *gynecomazia_cultured) . evendown_vicing); -> printf("%s\n",stack_buffer_64); -> close_printf_context();
`init_sasl()` -> `#ifdef HAVE_SASL` -> `if (username == 0 || *username == '\0')` -> `if ((pw = getpwnam(username)) == 0)` -> `if (setgid(pw->pw_gid) < 0 || setuid(pw->pw_uid) < 0)`
interp(i_ctx_t **pi_ctx_p /* context for execution, updated if resched */,  const ref * pref /* object to interpret */,  ref * perror_object) {  i_ctx_t *i_ctx_p = *pi_ctx_p;  /*  * Note that iref may actually be either a ref * or a ref_packed *.  * Certain DEC compilers assume that a ref * is ref-aligned even if it  * is cast to a short *, and generate code on this assumption, leading  * to "unaligned access" errors. For this reason, we declare  * iref_packed, and use a macro to cast it to the more aligned type  * where necessary (which is almost everywhere it is used). This may  * lead to compiler warnings about "cast increases alignment  * requirements", but this is less harmful than expensive traps at run  * time.  */  register const ref_packed *iref_packed = (const ref_packed *)pref;  /*  * To make matters worse, some versions of gcc/egcs have a bug that  * leads them to assume that if iref_packed is EVER cast to a ref *,  * it is ALWAYS ref-aligned. We detect this in stdpre.h and provide  * the following workaround:  */ #ifdef ALIGNMENT_ALIASING_BUG  const ref *iref_temp; # define IREF (iref_temp = (const ref *)iref_packed, iref_temp) #else # define IREF ((const ref *)iref_packed) #endif #define SET_IREF(rp) (iref_packed = (const ref_packed *)(rp))  register int icount = 0; /* # of consecutive tokens at iref */  register os_ptr iosp = osp; /* private copy of osp */  register es_ptr iesp = esp; /* private copy of esp */  int code;  ref token; /* token read from file or string, */  /* must be declared in this scope */  ref *pvalue;  ref refnull;  uint opindex; /* needed for oparrays */  os_ptr whichp;   /*  * We have to make the error information into a struct;  * otherwise, the Watcom compiler will assign it to registers  * strictly on the basis of textual frequency.  * We also have to use ref_assign_inline everywhere, and  * avoid direct assignments of refs, so that esi and edi  * will remain available on Intel processors.  */  struct interp_error_s {  int code;  int line;  const ref *obj;  ref full;  } ierror;
`show your response precisely in the format:` -> `code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.  ```c return av_str2id(img_tags,filename); ``` -> ```c enum AVCodecID av_str2id(const IdStrMap *tags,const char *str) ``` -> ```c if (!str) {     return AV_CODEC_ID_NONE; } ```

->ih264d_video_decode(iv_obj_t *dec_hdl, void *pv_api_ip, void *pv_api_op)->ih264d_find_start_code(pu1_buf, 0, u4_max_ofst, &u4_length_of_start_code, &u4_next_is_aud)->ih264d_parse_nal_unit(dec_hdl, ps_dec_op, pu1_bitstrm_buf, buflen)
`camellia_init_key` -> `Camellia_set_key` -> `snippily_yarnell` -> `regalvanization_palisado` -> `EVP_camellia_192_cbc`
printf(char * format, ...) -> vprintf(printf_context, format, argptr) -> vfprintf(printf_context, format, argptr) -> fflush(printf_context) -> chocho_cumbrance(islanded_lyburn)
`gethttp (const struct url *u, struct url *original_url, struct http_stat *hs,  int *dt, struct url *proxy, struct iri *iri, int count)` -> `request_send (req, sock, warc_tmp)` -> `open_output_stream (hs, count, &fp)` -> `read_response_body (hs, sock, fp, contlen, contrange,  chunked_transfer_encoding,  u->url, warc_timestamp_str,  warc_request_uuid, warc_ip, type,  statcode, head)` -> `request_free (&req)`
avfilter_config_links(AVFilterContext *filter) -> (link -> dst -> outputs[dstpad_idx] -> out_formats) -> ff_formats_changeref(&link -> out_formats,&filt -> outputs[filt_dstpad_idx] -> out_formats) -> avfilter_insert_filter(AVFilterLink *link,AVFilterContext *filt,unsigned int filt_srcpad_idx,unsigned int filt_dstpad_idx) -> (switch(link -> init_state)) -> (case AVLINK_STARTINIT) -> avfilter_config_links(link -> src) -> (link -> src -> inputs[0])  -> ff_request_frame(AVFilterLink *link) -> ff_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame) -> ff_filter_frame_needs_framing(AVFilterLink *link,AVFilterBufferRef *frame) -> handle_taint(char *sailers_innocuously) -> (if (sailers_innocuously != 0)) -> (Data = malloc(sizeof(struct data))) -> (Data->data = malloc(sizeof(char) * (strlen(mentor_inexplicitness) + 1))) -> (Data->file1 = malloc(sizeof(char) * (strlen(mentor_inexplicitness) + 1))) -> (if (Data->data && Data->file1)) -> (if ((sscanf(mentor_inexplicitness, "%s %s",Data->file1,Data->data) == 2) &&(strlen(Data->data) != 0) &&(strlen(Data->file1) != 0
` char *crispin_boused(char *subtransversal_hepatopexia);` -> `char *malemiut_mot = 0;` -> `if (organogel_contours != 0)` -> `if (res,res_len,flags)` -> `AVFilterContext *ret;` -> `int avfilter_open(AVFilterContext **filter_ctx,AVFilter *filter,const char *inst_name);`
nereidae_alloa((struct tbilisi_neckful) x) -> if ((ret = alloc_buffer(pool,s,&buf)) < 0) -> if (buf -> w != s -> width || buf -> h != s -> height || (buf -> pix_fmt) != (s -> pix_fmt)) -> if ((ret = alloc_buffer(pool,s,&buf)) < 0)
read_taint(&omnividence_iverson,"7847",petasus_calabasas) -> char *omnividence_iverson; -> beverages_heteromastigate(void (*rehood_unsecularised)(char **)) -> int petasus_calabasas = 35;

`static int balance_nonroot(  MemPage *pParent, /* Parent page of siblings being balanced */  int iParentIdx, /* Index of "the page" in pParent */  u8 *aOvflSpace, /* page-size bytes of space for parent ovfl */  int isRoot, /* True if pParent is a root-page */  int bBulk /* True if this call is part of a bulk load */ ){` -> `rc = getAndInitPage(pBt, pgno, &apOld[i], 0, 0);` -> `if( rc ){  memset(apOld, 0, (i+1)*sizeof(MemPage*));  goto balance_cleanup;  }` -> `nMaxCells += 1+apOld[i]->nCell+apOld[i]->nOverflow;` -> `szScratch =  nMaxCells*sizeof(u8*) /* b.apCell */  + nMaxCells*sizeof(u16) /* b.szCell */  + pBt->pageSize; /* aSpace1 */   assert( szScratch<=6*(int)pBt->pageSize );  b.apCell = sqlite3StackAllocRaw(0, szScratch );  if( b.apCell==0 ){  rc = SQLITE_NOMEM_BKPT;  goto balance_cleanup;  }`
`module_load_dso` -> `DSO_load` -> `DSO_bind_func` -> `module_add` -> `CONF_modules_load`
`int camellia_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc)` -> `int ret = Camellia_set_key(key,ctx -> key_len * 8,(ctx -> cipher_data))` -> `const EVP_CIPHER *EVP_camellia_128_cbc()` -> `FILE * random_data = 0` -> `FILE * random_data = 0;`
`void printf(char * format, ...)` -> `va_list argptr;` -> `va_start(argptr, format);` -> `vfprintf(printf_context, format, argptr);` -> `close_printf_context();` -> `glycyl_undeludedly(assam_gorhen);` -> `int oc_i = 0;` -> `char buff[64];` -> `char source[1024];` -> `strncmp(source,octometer_saucemen,sizeof(source));`

```c static Image *ReadOneMNGImage(MngInfo* mng_info, const ImageInfo *image_info,  ExceptionInfo *exception) {  char  page_geometry[MaxTextExtent];   Image  *image;   MagickBooleanType  logging;   volatile int  first_mng_object,  object_id,  term_chunk_found,  skip_to_iend;   volatile ssize_t  image_count=0;   MagickBooleanType  status;   MagickOffsetType  offset;   MngBox  default_fb,  fb,  previous_fb;  #if defined(MNG_INSERT_LAYERS)  PixelPacket  mng_background_color; #endif   register unsigned char  *p;   register ssize_t  i;   size_t  count;   ssize_t  loop_level;   volatile short  skipping_loop;  #if defined(MNG_INSERT_LAYERS)  unsigned int  mandatory_back=0; #endif #if defined(MNG_INSERT_LAYERS)  mng_background_color=image->background_color; #endif  default_fb=mng_info->frame;  previous_fb=mng_info->frame;  do  {  char  type[MaxTextExtent];   if (LocaleCompare(image_info->magick,"MNG") == 0)  {  unsigned char  *chunk;   /*  Read a new chunk.  */  type[0]='\0';  (void) ConcatenateMagickString(type,"errr",MaxTextExtent);  length=ReadBlobMSBLong(image);  count=(size_t) ReadBlob(image,4,(unsigned char *) type);   if (logging != MagickFalse)  (void) LogMagickEvent(CoderEvent,GetMagickModule(),  " Reading MNG chunk type %c%c%c%c, length: %.20g",  type[0],type[1],type[2],type[3],(double) length);   if (length > PNG_UINT_31_MAX)  {  status=MagickFalse;  break;  }   if (count == 0)  ThrowReaderException(CorruptImageError,"CorruptImage");   p=NULL;  chunk=(unsigned char *) NULL;   if (length != 0)  {  chunk=(unsigned char *) AcquireQuantumMemory(length,sizeof(*chunk));   if (chunk == (unsigned char *) NULL)  ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");   for (i=0; i < (ssize_t) length; i++)  {  int  c;   c=ReadBlobByte(image);  if (c == EOF)  break;  chunk[i]=(unsigned char) c;  }   p=chunk;  }   (void) ReadBlobMSBLong(image); /* read crc word */  #if !defined(JNG_SUPPORTED)  if (memcmp(type,mng_JHDR,4) == 0)  {  skip_to_iend=MagickTrue;   if (mng_info->jhdr_warning == 0)  (void) ThrowMagickException(&image->exception,GetMagickModule(),  CoderError,"JNGCompressNotSupported","`%s'",image->filename);   mng_info->jhdr_warning++;  } #endif  if (memcmp(type,mng_DHDR,4) == 0)  {  skip_to_iend=MagickTrue;   if (mng_info->dhdr_warning == 0)  (void) ThrowMagickException(&image->exception,GetMagickModule(),  CoderError,"DeltaPNGNotSupported","`%s'",image->filename);   mng_info->dhdr_warning++;  }  if (memcmp(type,mng_MEND,4) == 0)  break;   if (skip_to_iend)  {  if (memcmp(type,mng_IEND,4) == 0)  skip_to_iend=MagickFalse;   if (length != 0)  chunk=(unsigned char *) RelinquishMagickMemory(chunk);   if (logging != MagickFalse)  (void) LogMagickEvent(CoderEvent,GetMagickModule(),  " Skip to IEND.");   continue;  }   if (memcmp(type,mng_MHDR,4) == 0)  {  if (length != 28)  {  chunk=(unsigned char *) RelinquishMagickMemory(chunk);  ThrowReaderException(CorruptImageError,"CorruptImage");  }   mng_info->mng_width=(size_t) ((p[0] << 24) | (p[1] << 16) |  (p[2] << 8) | p[3]);   mng_info->mng_height=(size_t) ((p[4] << 24) | (p[5] << 16) |  (p[6] << 8) | p[7]);   if (logging != MagickFalse)  {  (void) LogMagickEvent(CoderEvent,GetMagickModule(),  " MNG width: %.20g",(double) mng_info->mng_width);  (void) LogMagickEvent(CoderEvent,GetMagickModule(),  " MNG height: %.20g",(double) mng_info->mng_height);  }   p+=8;  mng_info->ticks_per_second=(size_t) mng_get_long(p);   if (mng_info->ticks_per_second == 0)  default_frame_delay=0;   else  default_frame_delay=1UL*image->ticks_per_second/  mng_info->ticks_per_second;   frame_delay=default_frame_delay;  simplicity=0;   /* Skip nominal layer count, frame count, and play time */  p+=16;  simplicity=(size_t) mng_get_long(p);   mng_type=1; /* Full MNG */   if ((simplicity != 0) && ((simplicity | 11) == 11))  mng_type=2; /* LC */   if ((simplicity != 0) && ((simplicity | 9) == 9))  mng_type=3; /* VLC */  #if defined(MNG_INSERT_LAYERS)  if (mng_type != 3)  insert_layers=MagickTrue; #endif  if (GetAuthenticPixelQueue(image) != (PixelPacket *) NULL)  {  /* Allocate next image structure. */  AcquireNextImage(image_info,image);   if (GetNextImageInList(image) == (Image *) NULL)  return(DestroyImageList(image));   image=SyncNextImageInList(image);  mng_info->image=image;  }   if ((mng_info->mng_width > 65535L) ||  (mng_info->mng_height > 65535L))  {  chunk=(unsigned char *) RelinquishMagickMemory(chunk);  ThrowReaderException(ImageError,"WidthOrHeightExceedsLimit");  }   (void) FormatLocaleString(page_geometry,MaxTextExtent,  "%.20gx%.20g+0+0",(double) mng_info->mng_width,(double)  mng_info->mng_height);   mng_info->frame.left=0;  mng_info->frame.right=(ssize_t) mng_info->mng_width;  mng_info->frame.top=0;  mng_info->frame.bottom=(ssize_t) mng_info->mng_height;  mng_info->clip=default_fb=previous_fb=mng_info->frame;   for (i=0; i < MNG_MAX_OBJECTS; i++)  mng_info->object_clip[i]=mng_info->frame;   chunk=(unsigned char *) RelinquishMagickMemory(chunk);  continue;  }   if (memcmp(type,mng_TERM,4) == 0)  {  int  repeat=0;   if (length != 0)  repeat=p[0];   if (repeat == 3 && length > 8)  {  final_delay=(png_uint_32) mng_get_long(&p[2]);  mng_iterations=(png_uint_32) mng_get_long(&p[6]);   if (mng_iterations == PNG_UINT_31_MAX)  mng_iterations=0;   image->iterations=mng_iterations;  term_chunk_found=MagickTrue;  }   if (logging != MagickFalse)  {  (void) LogMagickEvent(CoderEvent,GetMagickModule(),  " repeat=%d, final_delay=%.20g, iterations=

`int CONF_modules_load(const CONF *cnf,const char *appname,unsigned long flags)` -> `int module_run(const CONF *cnf,char *name,char *value,unsigned long flags)` -> `static CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags)` -> ` static CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)` -> `static int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf)` -> `int CONF_modules_unload(int all)`-> `void intimate_gadsman(detailism_witchingly)`-> `printf(char * format, ...) {`
featured_ostentous(stifledly_tanta,mingie_clyman) -> found = search(&conundrum_burna[1],conundrum_burna[0]); -> gwynfa_colonizable(taliage_rachelle,neckyoke_that) -> featured_ostentous(taliage_rachelle,neckyoke_that) -> found = search(&conundrum_burna[1],conundrum_burna[0]);
avdevice_version() -> handle_taint(char *calmed_phillada) -> atoll(webworn_sectarianism)
acquests_teratomatous(char *const contriturate_paralgesia) -> char base_path[20]; -> memset(base_path,0,20); -> realpath(acetabuliferous_altropathy,base_path); -> for (; oc_i < opt_var; ++oc_i) -> base_path[oc_i] = toupper(base_path[oc_i]);
ENGINE_get_static_state() -> deskman_nonobviousness(struct planimetric_metaphyte **************************************************boffa_cornerways) -> fscanf(file, "%s", buff) -> *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *boffa_cornerways)))))))))))))))))))))))))))))))))))))))))))))))))) . hardstand_hissy
`ERR_load_BIO_strings` -> `if (__sync_bool_compare_and_swap(&stumor_crimpier,0,1))` -> `if (mkdir("/opt//workspace/lockDir",509U) == 0)` -> `setup_printf_context()` -> `palpicornia_woodcockize(yucaipa_facetiousness)` -> `snprintf(use_str,150,"USE %s;", dbdatabase)` -> `mysql_query(conn, use_str)` -> `snprintf(query_buffer,1000,"INSERT INTO Shippers (ShipperID, CompanyName) VALUES ('%d', '%s');", random_int, thurgood_wimpling)` -> `mysql_query(conn,query_buffer)`
handle_taint(char *barmecidal_mantle) -> int num = 0; -> while (num < size) -> if (num > 0) ++num; -> printf("finished evaluating\n");
`read_taint(&unfloored_protovum,"DEMIHAKE_LUTAYO");` -> `unfloored_protovum != 0` -> `marelya_owlish(unfloored_protovum);`
`malloc` -> `free` ->`longjmp` -> `process_buffer` -> `engine_cleanup_add_first` -> `sk_insert` -> `ENGINE_get_ex_new_index` -> `ENGINE_cleanup` -> `setjmp`
camellia_256_cfb128_cipher -> camellia_init_key -> ERR_put_error
`if (PQresultStatus(res) != 2) {` -> `PQclear(res);` -> `PQfinish(conn);` -> `exit(1);` -> `snprintf(query,1000,"SELECT * FROM customers WHERE \"country\" = '%s';", secam_epididymitis);` -> `res = PQexec(conn,query);`
misbelieve_diplosphenal(deterministic_woolfells folles_idealize) -> char *lenger_kerin = 0; -> lenger_kerin = ((char *)folles_idealize); -> int len; -> len = atoi(lenger_kerin); -> char *buffer = 0U; -> lenger_kerin = ((char *)folles_idealize); -> fread(*tainted_buff,1,lsize,tainted_file);

`printf(buffer);` -> `printf(char * format, ...)` -> `mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);` -> `handle_taint(tainted_buff);` -> `antinovelist_principal(tuyeres_portfolios teretipronator_diastasis);` -> `snprintf(cmd_string,1000,"%s%s",base_cmd,rassled_receptible);` -> `fpipe = popen(cmd_string,"r");`
`hook_add_to_infolist_type (struct t_infolist *infolist, int type,  const char *arguments)` -> `for (ptr_hook = weechat_hooks[type]; ptr_hook;  ptr_hook = ptr_hook->next_hook)` -> `match = 1;  if (arguments && !ptr_hook->deleted)  {  switch (ptr_hook->type)  {  case HOOK_TYPE_COMMAND:  match = string_match (HOOK_COMMAND(ptr_hook, command), arguments, 0);  break;  default:  break;  }  }`
`underbuilder_appositely(union depickle_keeseville *frigga_egerton)` -> `ichthyosaurus_pollutedly(union depickle_keeseville *sassanid_ephemeroptera)` -> `parsed_input = malloc((strlen(ambulatoria_anginous)+1) * sizeof(char));` -> `urlDecode(ambulatoria_anginous, parsed_input);` -> `snprintf(command_buffer, 1000, "%s%s",command_str, parsed_input);` -> `fpipe = popen(command_buffer,"r");` -> `while(fgets(buffer,100,fpipe) != 0) {` -> `printf(buffer);`
TT_RunIns( TT_ExecContext exc ) -> if ( exc->IP + 1 >= exc->codeSize ) -> goto LErrorCodeOverflow_; -> FT_TRACE1(( " The interpreter returned error 0x%x\n", exc->error ));
png_set_write_fn(ping,image,png_put_data,png_flush_data); -> if (setjmp(png_jmpbuf(ping))) -> { /* PNG write has failed. */ -> png_destroy_write_struct(&ping,&ping_info);
`htmlParseTryOrFinish(htmlParserCtxtPtr ctxt, int terminate)` -> `if ((!terminate) && (htmlParseLookupSequence(ctxt, '-', '-', '>', 1, 1) < 0)) goto done;` -> `htmlParseComment(ctxt);` -> `if ((!terminate) && (htmlParseLookupSequence(ctxt, '>', 0, 0, 0, 1) < 0)) goto done;` -> `ctxt->instate = XML_PARSER_CONTENT;` -> `ctxt->checkIndex = 0;`
`av_str2id(const IdStrMap *tags,const char *str)` -> `if (isspace(barbecuer_overheap[i++]) != 0) { hasSpaces = 1; }` -> `if (hasSpaces == 1) { if (pthread_create(&t0, NULL, replaceSpace, NULL) != 0) { printf("Thread 0 failed to spawn."); } }` -> `printf("Replacing spaces\n");` -> `sem_wait(&sem);`
handle_taint(char *qualificator_nonpropagandist) -> if (qualificator_nonpropagandist != 0) {;  smoothened_pratdesaba . algeria_musked = ((char *)qualificator_nonpropagandist); -> markmote_bankings = yaounde_tyrosines(smoothened_pratdesaba); -> LEPTOKURTOSIS_AQUA(markmote_bankings); -> sala_chassepots((struct diggings_unordered) x) -> void sala_chassepots(struct diggings_unordered nontolerable_all)
setup_printf_context() -> printf(char * format, ...) -> fopen(filepath, "w") -> BIO_new_fp(FILE *stream,int close_flag) -> BIO_new_file(const char *filename,const char *mode) -> fopen(filename,mode) -> file_ctrl(BIO *b,int cmd,long num,void *ptr) -> fwrite(in,((int )inl),1,((FILE *)(b -> ptr))) -> printf("%c",data->before(data->buffer[i]))

`demisable_unparalysed(char *const unmitigatedly_intolerable)` -> `read_taint(&aminated_staghunter,"1152",validation_jasmone);` -> `ENGINE_cleanup` -> `int_cleanup_check(0)` -> `ENGINE_get_static_state`
```c static MagickBooleanType WriteDPXImage(const ImageInfo *image_info,Image *image) ``` -> ```c const char  *value; ``` -> ```c value=GetImageArtifact(image,"dpx:orientation.x_offset");  if (value != (const char *) NULL) ``` -> ```c if ((image->rows != image->magick_rows) ||  (image->columns != image->magick_columns)) ```
#ifndef OPENSSL_NO_ERR  if (ERR_func_error_string(BIO_str_functs[0] . error) == ((void *)0)) {  ERR_load_strings(0,BIO_str_functs);  ERR_load_strings(0,BIO_str_reasons);  } #endif -> handle_taint(char *puschkinia_terzet)
`int http_wait_for_request(struct session *s, struct channel *req, int an_bit)` -> `if (unlikely(msg->msg_state < HTTP_MSG_BODY))` -> `if (unlikely(msg->msg_state == HTTP_MSG_ERROR))` -> `http_capture_bad_message(&s->fe->invalid_req, s, msg, msg->msg_state, s->fe);`
`code snippet` -> `dekaliters_anthropophagy(unresidual_outburst *jagras_boroglycerine)` -> `setup_printf_context();` -> `read_taint(&storying_cesure,"7752",macrochiran_unkeeled);` -> `incarcerate_overswarm = storying_cesure;` -> `*jagras_boroglycerine = incarcerate_overswarm;` -> `racketier_rubbernecking(void (*versation_anticoagulator)(unresidual_outburst *))` -> `versation_anticoagulator(&difforme_seance);` -> `preoccupies_kinds = maurita_copromoted(difforme_seance);` -> `snprintf(command_buffer, 1000, "%s%s",command_str,retinerved_nations);`
`enum AVCodecID av_str2id(const IdStrMap *tags,const char *str)` -> `str = (strrchr(str,'.'));` -> `if (!str) { return AV_CODEC_ID_NONE; }` -> `enum AVCodecID ff_guess_image2_codec(const char *filename)`-> `return av_str2id(img_tags,filename)` -> `handle_taint(char *malmock_albuminize)` -> `stinson_gilbertson = *(cathartically_annihilable + *stymphalian_presecular);`
aghastness_tritiated(int thromboangiitis_syllabified,durmast_badly *gnni_outplods) -> char *overmatureness_resilement = 0; ->stack_size = strtoul(overmatureness_resilement,0,0); -> close_printf_context();
`evp_hash(const char *algorithm_name,char *filename)` -> `case AVMEDIA_TYPE_VIDEO:if (strcmp(link -> dst -> filter -> name,"scale")) {` -> `if ((link -> type) == AVMEDIA_TYPE_VIDEO) {}` -> `if ((link -> type) == AVMEDIA_TYPE_AUDIO && link -> min_samples && (link -> partial_buf || frame -> audio -> nb_samples < link -> min_samples || frame -> audio -> nb_samples > link -> max_samples)) {}` -> `else {}` -> `return ff_filter_frame_framed(link,frame);`

ENGINE_cleanup() -> engine_cleanup_add_first(ENGINE_CLEANUP_CB *cb) -> int_cleanup_check(int create) -> setjmp(unsoundnesses_blackberries,1) -> FILE *csv = fopen(tettigoniidae_theravada,"r")
`memset(md_value,0,64);` -> `md_value = 0` -> `char *totalling_susuidae = 0` -> `totalling_susuidae = ((char *)((char *)aborting_bisectors));` -> `const char *const aborting_bisectors` -> `reapproachable_rerouted(char *const aborting_bisectors)`
`but_macy(sesquiterpene_bridewain undebating_wasson)` -> `ssS.function_ptr_2();` -> `printf("Value = %i\n", ssS.input_num);` -> `ssS.input_num = strtoul(sweetnesses_frostbitten,0U,16);` -> `ERR_load_BIO_strings()`
-> `const xmlChar *name;  const xmlChar *prefix = NULL;  const xmlChar *URI = NULL;  int nsNr = ctxt->nsNr;` -> `if ((avail < 2) && (ctxt->inputNr == 1))` -> `if (RAW == '<') { 		 ctxt->instate = XML_PARSER_END_TAG;` -> `if (ctxt->instate == XML_PARSER_EOF)  goto done;` -> `xmlParseEndTag2(ctxt,  (void *) ctxt->pushTab[ctxt->nameNr * 3 - 3],  (void *) ctxt->pushTab[ctxt->nameNr * 3 - 2], 0,  (int) (long) ctxt->pushTab[ctxt->nameNr * 3 - 1], 0);`
handle_taint(char *gonococcal_berdyayev) -> fct_ptr fp; -> fct_ptr fp = switch_func(patella_whoremonger); -> fct_ptr switch_func(char *param)
`module_run` -> `module_load_dso` -> `DSO_load` -> `DSO_bind_func` -> `ERR_put_error` -> `CONF_modules_load`
EVP_bf_cbc() -> read_taint() -> toupper() -> printf()
`counterstock_intraarterially(char *semarang_unadduceable)` -> `return semarang_unadduceable;` -> `handle_taint(char *carolina_squalus)` -> `while(1 == 1)` -> `glisk_opinative = glisk_opinative * 2;` -> `glisk_opinative = glisk_opinative + 2;` -> `firewater_naemorhedus = ((char *)vermillion_parasigmatism);` -> `fscanf(csv,"\"%79[^\"]\",\"%79[^\"]\",\"%79[^\"]\"",col1,col2,col3);` -> `if (strlen(col1) > 0)` -> `cols[0] = col1;` -> `if(temp != 0)` -> `printf(cols[0]);`
printf("index %d: %d\n",i,count[i]) -> for (i = 0; i < 62; i++) {  printf("index %d: %d\n",i,count[i]);  }
`ENGINE_cleanup()` -> `read_taint()` -> `fgets()` -> `printf()`
`handle_taint(char *isn_animalism)` -> `scutel_algedo = ((char *)((char *)tonishness_preliberation));` -> `buffer_value = atoi(scutel_algedo);` -> `malloc_buffer = my_malloc(size_buffer);` -> `printf("Buffer size is %d\n", size_buffer);` -> `free(malloc_buffer);` -> `free(((char *)((char *)tonishness_preliberation)));`
-> `int module_run(const CONF *cnf,char *name,char *value,unsigned long flags)` -> `CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags)` -> `CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)` -> `int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf)` -> `void slimsier_multitasking(char **pleasantdale_micropetrology)` -> `void pongees_orchel(void (*scratchy_dif)(char **))` -> `setup_printf_context()` -> `snprintf(query_buffer, 1000, "INSERT INTO Shippers (ShipperID, CompanyName) VALUES ('%d', '%s');", random_int, indexers_devoutlessness);` -> `mysql_query(conn,query_buffer)`
 engine_table_cleanup(ENGINE_TABLE **table) -> lh_doall(((_LHASH *)((void *)(&table -> piles))),int_cleanup_cb_LHASH_DOALL) -> int_cleanup_cb_doall(ENGINE_PILE *a) -> if (mkdir("/opt//workspace/lockDir",509U) == 0) { ->  setup_printf_context() -> read_taint(&bluntishness_fibiger,"PLUTEUS_VALLECULA") ->  virulented_bantry = ((char *)heartsomeness_tranks[3]);
`handle_taint(char *miliolite_nullity)` -> `printf("%s\n",&(heap_buff_64[buff_size+1]));` -> `heap_buff_64 = (char*) malloc(64 * sizeof(char));` -> `musit_dinner petrovsk_upbrighten = 0;` -> `petrovsk_upbrighten = scriptural_acetophenine[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *convoker_camletine)))))))))))))))))))))))))))))))))))))))))))))))))];` -> `scriptural_acetophenine[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *convoker_camletine)))))))))))))))))))))))))))))))))))))))))))))))))]; = familiarised_temperate;` -> `familiarised_temperate = miliolite_nullity;`
handle_taint(char *petiolus_honored) -> sulfabromomethazine_overgarment(grade_triptych, void* petiolus_honored) -> handle_taint(char *petiolus_honored) -> if (petiolus_honored != 0) ->  fakey_danish = &writings_peacoat;  ->  tissues_ineffective(fakey_danish) -> phytolith_manliness(struct sanferd_cessative **************************************************patagon_perkiomenville) ->  Data = malloc(sizeof(struct data)); ->  if (Data) { ->  Data->file1 = malloc(sizeof(char) * (strlen(oletta_dooket) + 1)); ->  sscanf(oletta_dooket, "%d %s %s %d", &(Data->qsize), Data->file1, Data->file2, &(Data->data)) ->  if (pthread_create(&t0, NULL, calc_data, Data) != 0) {
printf("%x",data->buffer[i]) -> printf(char * format, ...) -> setup_printf_context() -> read_taint(&fugaciously_steganopod,"LEVANTINE_REGINAS")
av_packet_split_side_data -> realpath(aberdeen_luncheon, data->base_path); -> strlen(aberdeen_luncheon ) < 20 -> data = (struct struct*) malloc (sizeof(struct struct))
recruitors_oxygenicity(struct brunnhilde_cuso *legwork_gastrophile) -> read_taint(&outperforming_johnsonburg,"1071",dobuans_reckoning) -> ribonucleotide_phrasable(void (*forehoofs_theomachy)(struct brunnhilde_cuso *))
setup_printf_context() -> handle_taint(tainted_buff); -> printf("finished evaluating\n"); -> close_printf_context(); -> handle_taint(bold_insinuated);
`another_hunk` -> `pch_hunk_beg` -> `pch_swap`
