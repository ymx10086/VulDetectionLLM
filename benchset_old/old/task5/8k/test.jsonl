{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"cryptlib.h\"\r\n#include <openssl/evp.h>\r\n#include <openssl/lhash.h>\r\n#include \"eng_int.h\"\r\n\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\ntypedef struct st_engine_pile {\r\n\r\nint nid;\r\n\r\nstruct stack_st_ENGINE *sk;\r\n\r\nENGINE *funct;\r\n\r\nint uptodate;}ENGINE_PILE;\r\n\r\nstruct lhash_st_ENGINE_PILE \r\n{\r\n int dummy;\r\n}\r\n;\r\n\r\n\r\nstruct st_engine_table \r\n{\r\n struct lhash_st_ENGINE_PILE piles;\r\n\r\n}\r\n;\r\ntypedef struct st_engine_pile_doall {\r\nengine_table_doall_cb *cb;\r\nvoid *arg;}ENGINE_PILE_DOALL;\r\n\r\nstatic unsigned int table_flags = 0;\r\n\r\nint nowts_antehistoric = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid catechised_dunham(char *ellipsone_wheatstalk);\r\nvoid cleanup(FILE **ptrs,int size)\r\n{\r\n int i = 0;\r\n \r\n for (i = 0; i < size; i++) {\r\n if (ptrs[i] != 0) {\r\n fclose(ptrs[i]);\r\n }\r\n }\r\n}\r\n\r\nunsigned int ENGINE_get_table_flags()\r\n{\r\n return table_flags;\r\n}\r\n\r\nvoid ENGINE_set_table_flags(unsigned int flags)\r\n{\r\n table_flags = flags;\r\n}\r\n\r\n\r\nstatic unsigned long engine_pile_hash(const ENGINE_PILE *c)\r\n{\r\n return (c -> nid);\r\n}\r\n\r\nstatic int engine_pile_cmp(const ENGINE_PILE *a,const ENGINE_PILE *b)\r\n{\r\n return a -> nid - b -> nid;\r\n}\r\n\r\nstatic unsigned long engine_pile_LHASH_HASH(const void *arg)\r\n{\r\n const ENGINE_PILE *a = arg;\r\n return engine_pile_hash(a);\r\n}\r\n\r\nstatic int engine_pile_LHASH_COMP(const void *arg1,const void *arg2)\r\n{\r\n const ENGINE_PILE *a = arg1;\r\n const ENGINE_PILE *b = arg2;\r\n return engine_pile_cmp(a,b);\r\n}\r\n\r\nstatic int int_table_check(ENGINE_TABLE **t,int create)\r\n{\r\n struct lhash_st_ENGINE_PILE *lh;\r\n if ( *t) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n if ((lh = ((struct lhash_st_ENGINE_PILE *)(lh_new(engine_pile_LHASH_HASH,engine_pile_LHASH_COMP)))) == ((void *)0)) {\r\n return 0;\r\n }\r\n *t = ((ENGINE_TABLE *)lh);\r\n return 1;\r\n}\r\n\r\n\r\nint engine_table_register(ENGINE_TABLE **table,ENGINE_CLEANUP_CB *cleanup,ENGINE *e,const int *nids,int num_nids,int setdefault)\r\n{\r\n int ret = 0;\r\n int added = 0;\r\n ENGINE_PILE tmplate;\r\n ENGINE_PILE *fnd;\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",135);\r\n if (!( *table)) {\r\n added = 1;\r\n }\r\n if (!int_table_check(table,1)) {\r\n goto end;\r\n }\r\n if (added) {\r\n\r\n engine_cleanup_add_first(cleanup);\r\n }\r\n while(num_nids--){\r\n tmplate . nid = *nids;\r\n fnd = ((ENGINE_PILE *)(lh_retrieve(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(&tmplate)))));\r\n if (!fnd) {\r\n fnd = (CRYPTO_malloc(((int )(sizeof(ENGINE_PILE ))),\"eng_table.c\",149));\r\n if (!fnd) {\r\n goto end;\r\n }\r\n fnd -> uptodate = 1;\r\n fnd -> nid = *nids;\r\n fnd -> sk = ((struct stack_st_ENGINE *)(sk_new_null()));\r\n if (!fnd -> sk) {\r\n CRYPTO_free(fnd);\r\n goto end;\r\n }\r\n fnd -> funct = ((void *)0);\r\n (void )((ENGINE_PILE *)(lh_insert(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(1?fnd : ((ENGINE_PILE *)0))))));\r\n }\r\n\r\n (void )((ENGINE *)(sk_delete_ptr(((_STACK *)(1?fnd -> sk : ((struct stack_st_ENGINE *)0))),((void *)(1?e : ((ENGINE *)0))))));\r\n\r\n if (!sk_push(((_STACK *)((1?fnd -> sk : ((struct stack_st_ENGINE *)0)))),((void *)((1?e : ((ENGINE *)0)))))) {\r\n goto end;\r\n }\r\n\r\n fnd -> uptodate = 0;\r\n if (setdefault) {\r\n if (!engine_unlocked_init(e)) {\r\n ERR_put_error(38,184,109,\"eng_table.c\",174);\r\n goto end;\r\n }\r\n if (fnd -> funct) {\r\n engine_unlocked_finish(fnd -> funct,0);\r\n }\r\n fnd -> funct = e;\r\n fnd -> uptodate = 1;\r\n }\r\n nids++;\r\n }\r\n ret = 1;\r\n end:\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",186);\r\n return ret;\r\n}\r\n\r\nstatic void int_unregister_cb_doall_arg(ENGINE_PILE *pile,ENGINE *e)\r\n{\r\n int n;\r\n\r\n while((n = sk_find(((_STACK *)((1?pile -> sk : ((struct stack_st_ENGINE *)0)))),((void *)((1?e : ((ENGINE *)0)))))) >= 0){\r\n (void )((ENGINE *)(sk_delete(((_STACK *)(1?pile -> sk : ((struct stack_st_ENGINE *)0))),n)));\r\n pile -> uptodate = 0;\r\n }\r\n if (pile -> funct == e) {\r\n engine_unlocked_finish(e,0);\r\n pile -> funct = ((void *)0);\r\n }\r\n}\r\n\r\nstatic void int_unregister_cb_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n ENGINE_PILE *a = arg1;\r\n ENGINE *b = arg2;\r\n int_unregister_cb_doall_arg(a,b);\r\n}\r\n\r\nvoid engine_table_unregister(ENGINE_TABLE **table,ENGINE *e)\r\n{\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",208);\r\n if (int_table_check(table,0)) {\r\n lh_doall_arg(((_LHASH *)((void *)(&( *table) -> piles))),int_unregister_cb_LHASH_DOALL_ARG,((void *)(1?e : ((ENGINE *)0))));\r\n }\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",213);\r\n}\r\n\r\nstatic void int_cleanup_cb_doall(ENGINE_PILE *p)\r\n{\r\n sk_free(((_STACK *)(1?p -> sk : ((struct stack_st_ENGINE *)0))));\r\n if (p -> funct) {\r\n engine_unlocked_finish(p -> funct,0);\r\n }\r\n CRYPTO_free(p);\r\n}\r\n#define ABOLISHMENTS_DOMESTICATIVE(x) catechised_dunham((char *) x)\r\n\r\nstatic void int_cleanup_cb_LHASH_DOALL(void *arg)\r\n{\r\n char *nongeographical_cytophysics = 0;\r\n int *philocathartic_unforestalled = 0;\r\n int preinsured_shotshell;\r\n char *mainport_hmc[10] = {0};\r\n char *nicklaus_manchuria;\r\n ENGINE_PILE *a = arg;\r\n if (__sync_bool_compare_and_swap(&nowts_antehistoric,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n nicklaus_manchuria = getenv(\"DISINTEGRATED_FROUSTY\");\r\n if (nicklaus_manchuria != 0) {;\r\n mainport_hmc[5] = nicklaus_manchuria;\r\n preinsured_shotshell = 5;\r\n philocathartic_unforestalled = &preinsured_shotshell;\r\n nongeographical_cytophysics = *(mainport_hmc + *philocathartic_unforestalled);\r\n\tABOLISHMENTS_DOMESTICATIVE(nongeographical_cytophysics);\r\n }\r\n }\r\n }\r\n int_cleanup_cb_doall(a);\r\n}\r\n\r\nvoid engine_table_cleanup(ENGINE_TABLE **table)\r\n{\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",227);\r\n if ( *table) {\r\n lh_doall(((_LHASH *)((void *)(&( *table) -> piles))),int_cleanup_cb_LHASH_DOALL);\r\n lh_free(((_LHASH *)((void *)(&( *table) -> piles))));\r\n *table = ((void *)0);\r\n }\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",235);\r\n}\r\n\r\n#ifndef ENGINE_TABLE_DEBUG\r\n\r\nENGINE *engine_table_select(ENGINE_TABLE **table,int nid)\r\n#else\r\n#endif\r\n{\r\n ENGINE *ret = ((void *)0);\r\n ENGINE_PILE tmplate;\r\n ENGINE_PILE *fnd = ((void *)0);\r\n int initres;\r\n int loop = 0;\r\n if (!( *table)) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n return ((void *)0);\r\n }\r\n ERR_set_mark();\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",258);\r\n\r\n if (!int_table_check(table,0)) {\r\n goto end;\r\n }\r\n tmplate . nid = nid;\r\n fnd = ((ENGINE_PILE *)(lh_retrieve(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(&tmplate)))));\r\n if (!fnd) {\r\n goto end;\r\n }\r\n if (fnd -> funct && engine_unlocked_init(fnd -> funct)) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n ret = fnd -> funct;\r\n goto end;\r\n }\r\n if (fnd -> uptodate) {\r\n ret = fnd -> funct;\r\n goto end;\r\n }\r\n trynext:\r\n ret = ((ENGINE *)(sk_value(((_STACK *)((1?fnd -> sk : ((struct stack_st_ENGINE *)0)))),loop++)));\r\n if (!ret) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n goto end;\r\n }\r\n\r\n if (ret -> funct_ref > 0 || !(table_flags & ((unsigned int )0x0001))) {\r\n initres = engine_unlocked_init(ret);\r\n }\r\n else {\r\n initres = 0;\r\n }\r\n if (initres) {\r\n\r\n if (fnd -> funct != ret && engine_unlocked_init(ret)) {\r\n\r\n if (fnd -> funct) {\r\n engine_unlocked_finish(fnd -> funct,0);\r\n }\r\n fnd -> funct = ret;\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n }\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n goto end;\r\n }\r\n goto trynext;\r\n end:\r\n\r\n if (fnd) {\r\n fnd -> uptodate = 1;\r\n }\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",328);\r\n\r\n ERR_pop_to_mark();\r\n return ret;\r\n}\r\n\r\n\r\nstatic void int_cb_doall_arg(ENGINE_PILE *pile,ENGINE_PILE_DOALL *dall)\r\n{\r\n (dall -> cb)(pile -> nid,pile -> sk,pile -> funct,dall -> arg);\r\n}\r\n\r\nstatic void int_cb_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n ENGINE_PILE *a = arg1;\r\n ENGINE_PILE_DOALL *b = arg2;\r\n int_cb_doall_arg(a,b);\r\n}\r\n\r\nvoid engine_table_doall(ENGINE_TABLE *table,engine_table_doall_cb *cb,void *arg)\r\n{\r\n ENGINE_PILE_DOALL dall;\r\n dall . cb = cb;\r\n dall . arg = arg;\r\n lh_doall_arg(((_LHASH *)((void *)(&table -> piles))),int_cb_LHASH_DOALL_ARG,((void *)(&dall)));\r\n}\r\n\r\nvoid catechised_dunham(char *ellipsone_wheatstalk)\r\n{\r\n FILE *file = 0;\r\n int ssi = 0;\r\n FILE *files = 0;\r\n FILE *file_list[10];\r\n char filename[80];\r\n char *ephorship_newfeld = 0;\r\n ++global_variable;;\r\n ephorship_newfeld = ((char *)ellipsone_wheatstalk);\r\n \r\n files = fopen(ephorship_newfeld,\"r\");\r\n if (files != 0) {\r\n \r\n \r\n while(fscanf(files,\"%79s\",filename) == 1 && ssi < 1020){\r\n file = fopen(filename,\"w\");\r\n if (file == 0) {\r\n if (file == 0 && errno == 24) {\r\n printf(\"Fopen error due to ulimit\\n\");\r\n }\r\n continue;\r\n }\r\n fputs(\"woohoo!\",file);\r\n fflush(file);\r\n \r\n \r\n file_list[ssi % 10] = file;\r\n ssi++;\r\n }\r\n \r\n \r\n }\r\n if (files != 0)\r\n fclose(files);\r\n cleanup(file_list, ((ssi-1)%10)+1);\r\n \r\n;\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "773"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n\r\n#include \"cryptlib.h\"\r\n#include <openssl/safestack.h>\r\n#if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_WIN16)\r\n\r\n#endif\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include </trace.h> \r\n\r\nstruct stack_st_CRYPTO_dynlock \r\n{\r\n _STACK stack;\r\n}\r\n;\r\n\r\nstatic const char *const lock_names[41] = {(\"<<ERROR>>\"), (\"err\"), (\"ex_data\"), (\"x509\"), (\"x509_info\"), (\"x509_pkey\"), (\"x509_crl\"), (\"x509_req\"), (\"dsa\"), (\"rsa\"), (\"evp_pkey\"), (\"x509_store\"), (\"ssl_ctx\"), (\"ssl_cert\"), (\"ssl_session\"), (\"ssl_sess_cert\"), (\"ssl\"), (\"ssl_method\"), (\"rand\"), (\"rand2\"), (\"debug_malloc\"), (\"BIO\"), (\"gethostbyname\"), (\"getservbyname\"), (\"readdir\"), (\"RSA_blinding\"), (\"dh\"), (\"debug_malloc2\"), (\"dso\"), (\"dynlock\"), (\"engine\"), (\"ui\"), (\"ecdsa\"), (\"ec\"), (\"ecdh\"), (\"bn\"), (\"ec_pre_comp\"), (\"store\"), (\"comp\"), (\"fips\"), (\"fips2\")\r\n#if CRYPTO_NUM_LOCKS != 41\r\n# error \"Inconsistency between crypto.h and cryptlib.c\"\r\n#endif\r\n};\r\n\r\nstatic struct stack_st_OPENSSL_STRING *app_locks = ((void *)0);\r\n\r\nstatic struct stack_st_CRYPTO_dynlock *dyn_locks = ((void *)0);\r\nstatic void (*locking_callback)(int , int , const char *, int ) = 0;\r\nstatic int (*add_lock_callback)(int *, int , int , const char *, int ) = 0;\r\n#ifndef OPENSSL_NO_DEPRECATED\r\nstatic unsigned long (*id_callback)() = 0;\r\n#endif\r\nstatic void (*threadid_callback)(CRYPTO_THREADID *) = 0;\r\nstatic struct CRYPTO_dynlock_value *(*dynlock_create_callback)(const char *, int ) = 0;\r\nstatic void (*dynlock_lock_callback)(int , struct CRYPTO_dynlock_value *, const char *, int ) = 0;\r\nstatic void (*dynlock_destroy_callback)(struct CRYPTO_dynlock_value *, const char *, int ) = 0;\r\nint bepuddle_libitum = 0;\r\nint global_variable;\r\ntypedef char *diurna_pochade;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid screeny_ultracritical(diurna_pochade bewired_nonorganization);\r\nvoid sabinal_jastrzebie(diurna_pochade polycodium_haphsiba);\r\nvoid scruffs_paraphs(diurna_pochade ulcer_oysterous);\r\nvoid siryan_tubig(diurna_pochade tanstuff_argyrol);\r\nvoid hilloas_taurus(diurna_pochade whissle_fugazy);\r\nvoid capitative_prededicated(diurna_pochade encipher_querulent);\r\nvoid oniscidae_concealable(diurna_pochade algometrically_trigynia);\r\nvoid faradmeter_nonresidential(diurna_pochade kenogenetically_hypostatical);\r\nvoid desirabilities_hornbeak(diurna_pochade acquent_zesty);\r\nvoid dinitril_unwaving(diurna_pochade raggety_villavicencio);\r\n\r\nint CRYPTO_get_new_lockid(char *name)\r\n{\r\n char *str;\r\n int i;\r\n#if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_WIN16)\r\n\r\n#endif\r\n if (app_locks == ((void *)0) && (app_locks = ((struct stack_st_OPENSSL_STRING *)(sk_new_null()))) == ((void *)0)) {\r\n ERR_put_error(15,101,1 | 64,\"cryptlib.c\",215);\r\n return 0;\r\n }\r\n if ((str = BUF_strdup(name)) == ((void *)0)) {\r\n ERR_put_error(15,101,1 | 64,\"cryptlib.c\",220);\r\n return 0;\r\n }\r\n i = sk_push(((_STACK *)((1?app_locks : ((struct stack_st_OPENSSL_STRING *)0)))),((void *)((1?str : ((char *)0)))));\r\n if (!i) {\r\n CRYPTO_free(str);\r\n }\r\n else {\r\n\r\n i += 41;\r\n }\r\n return i;\r\n}\r\n\r\nint CRYPTO_num_locks()\r\n{\r\n return 41;\r\n}\r\n\r\nint CRYPTO_get_new_dynlockid()\r\n{\r\n int i = 0;\r\n CRYPTO_dynlock *pointer = ((void *)0);\r\n if (dynlock_create_callback == ((void *)0)) {\r\n ERR_put_error(15,103,100,\"cryptlib.c\",243);\r\n return 0;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",246);\r\n if (dyn_locks == ((void *)0) && (dyn_locks = ((struct stack_st_CRYPTO_dynlock *)(sk_new_null()))) == ((void *)0)) {\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",250);\r\n ERR_put_error(15,103,1 | 64,\"cryptlib.c\",251);\r\n return 0;\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",254);\r\n pointer = ((CRYPTO_dynlock *)(CRYPTO_malloc(((int )(sizeof(CRYPTO_dynlock ))),\"cryptlib.c\",256)));\r\n if (pointer == ((void *)0)) {\r\n ERR_put_error(15,103,1 | 64,\"cryptlib.c\",259);\r\n return 0;\r\n }\r\n pointer -> references = 1;\r\n pointer -> data = dynlock_create_callback(\"cryptlib.c\",263);\r\n if (pointer -> data == ((void *)0)) {\r\n CRYPTO_free(pointer);\r\n ERR_put_error(15,103,1 | 64,\"cryptlib.c\",267);\r\n return 0;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",271);\r\n\r\n i = sk_find(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),((void *)((1?((void *)0) : ((CRYPTO_dynlock *)0)))));\r\n\r\n if (i == - 1) {\r\n\r\n i = sk_push(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),((void *)((1?pointer : ((CRYPTO_dynlock *)0))))) - 1;\r\n }\r\n else {\r\n\r\n (void )(sk_set(((_STACK *)(1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0))),i,((void *)(1?pointer : ((CRYPTO_dynlock *)0)))));\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",285);\r\n if (i == - 1) {\r\n dynlock_destroy_callback(pointer -> data,\"cryptlib.c\",289);\r\n CRYPTO_free(pointer);\r\n }\r\n else {\r\n\r\n i += 1;\r\n }\r\n return -i;\r\n}\r\n\r\nvoid CRYPTO_destroy_dynlockid(int i)\r\n{\r\n CRYPTO_dynlock *pointer = ((void *)0);\r\n if (i) {\r\n i = -i - 1;\r\n }\r\n if (dynlock_destroy_callback == ((void *)0)) {\r\n return ;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",305);\r\n if (dyn_locks == ((void *)0) || i >= sk_num(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))))) {\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",309);\r\n return ;\r\n }\r\n pointer = ((CRYPTO_dynlock *)(sk_value(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),i)));\r\n if (pointer != ((void *)0)) {\r\n --pointer -> references;\r\n#ifdef REF_CHECK\r\n#endif\r\n if (pointer -> references <= 0) {\r\n (void )(sk_set(((_STACK *)(1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0))),i,((void *)(1?((void *)0) : ((CRYPTO_dynlock *)0)))));\r\n }\r\n else {\r\n pointer = ((void *)0);\r\n }\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",331);\r\n if (pointer) {\r\n dynlock_destroy_callback(pointer -> data,\"cryptlib.c\",335);\r\n CRYPTO_free(pointer);\r\n }\r\n}\r\n\r\nstruct CRYPTO_dynlock_value *CRYPTO_get_dynlock_value(int i)\r\n{\r\n CRYPTO_dynlock *pointer = ((void *)0);\r\n if (i) {\r\n i = -i - 1;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",346);\r\n if (dyn_locks != ((void *)0) && i < sk_num(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))))) {\r\n pointer = ((CRYPTO_dynlock *)(sk_value(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),i)));\r\n }\r\n if (pointer) {\r\n pointer -> references++;\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",353);\r\n if (pointer) {\r\n return pointer -> data;\r\n }\r\n return ((void *)0);\r\n}\r\n\r\nstruct CRYPTO_dynlock_value *(*CRYPTO_get_dynlock_create_callback())(const char *, int )\r\n{\r\n return dynlock_create_callback;\r\n}\r\n\r\nvoid (*CRYPTO_get_dynlock_lock_callback())(int , struct CRYPTO_dynlock_value *, const char *, int )\r\n{\r\n return dynlock_lock_callback;\r\n}\r\n\r\nvoid (*CRYPTO_get_dynlock_destroy_callback())(struct CRYPTO_dynlock_value *, const char *, int )\r\n{\r\n return dynlock_destroy_callback;\r\n}\r\n\r\nvoid CRYPTO_set_dynlock_create_callback(struct CRYPTO_dynlock_value *(*func)(const char *, int ))\r\n{\r\n dynlock_create_callback = func;\r\n}\r\n\r\nvoid CRYPTO_set_dynlock_lock_callback(void (*func)(int , struct CRYPTO_dynlock_value *, const char *, int ))\r\n{\r\n dynlock_lock_callback = func;\r\n}\r\n\r\nvoid CRYPTO_set_dynlock_destroy_callback(void (*func)(struct CRYPTO_dynlock_value *, const char *, int ))\r\n{\r\n dynlock_destroy_callback = func;\r\n}\r\n\r\nvoid (*CRYPTO_get_locking_callback())(int , int , const char *, int )\r\n{\r\n return locking_callback;\r\n}\r\n\r\nint (*CRYPTO_get_add_lock_callback())(int *, int , int , const char *, int )\r\n{\r\n return add_lock_callback;\r\n}\r\n\r\nvoid CRYPTO_set_locking_callback(void (*func)(int , int , const char *, int ))\r\n{\r\n\r\n OPENSSL_init();\r\n locking_callback = func;\r\n}\r\n\r\nvoid CRYPTO_set_add_lock_callback(int (*func)(int *, int , int , const char *, int ))\r\n{\r\n add_lock_callback = func;\r\n}\r\n\r\n\r\nvoid CRYPTO_THREADID_set_numeric(CRYPTO_THREADID *id,unsigned long val)\r\n{\r\n memset(id,0,sizeof(( *id)));\r\n id -> val = val;\r\n}\r\nstatic const unsigned char hash_coeffs[] = {(3), (5), (7), (11), (13), (17), (19), (23)};\r\n\r\nvoid CRYPTO_THREADID_set_pointer(CRYPTO_THREADID *id,void *ptr)\r\n{\r\n unsigned char *dest = ((void *)(&id -> val));\r\n unsigned int accum = 0;\r\n unsigned char dnum = (sizeof(id -> val));\r\n memset(id,0,sizeof(( *id)));\r\n id -> ptr = ptr;\r\n if (sizeof(id -> val) >= sizeof(id -> ptr)) {\r\n\r\n id -> val = ((unsigned long )(id -> ptr));\r\n return ;\r\n }\r\n\r\n while(dnum--){\r\n const unsigned char *src = ((void *)(&id -> ptr));\r\n unsigned char snum = (sizeof(id -> ptr));\r\n while(snum--)\r\n accum += (( *(src++)) * hash_coeffs[snum + dnum & 7]);\r\n accum += dnum;\r\n *(dest++) = (accum & 255);\r\n }\r\n}\r\n\r\nint CRYPTO_THREADID_set_callback(void (*func)(CRYPTO_THREADID *))\r\n{\r\n if (threadid_callback) {\r\n return 0;\r\n }\r\n threadid_callback = func;\r\n return 1;\r\n}\r\n\r\nvoid (*CRYPTO_THREADID_get_callback())(CRYPTO_THREADID *)\r\n{\r\n return threadid_callback;\r\n}\r\n\r\nvoid CRYPTO_THREADID_current(CRYPTO_THREADID *id)\r\n{\r\n if (threadid_callback) {\r\n threadid_callback(id);\r\n return ;\r\n }\r\n#ifndef OPENSSL_NO_DEPRECATED\r\n\r\n if (id_callback) {\r\n CRYPTO_THREADID_set_numeric(id,id_callback());\r\n return ;\r\n }\r\n#endif\r\n\r\n#ifdef OPENSSL_SYS_WIN16\r\n#elif defined(OPENSSL_SYS_WIN32)\r\n#elif defined(OPENSSL_SYS_BEOS)\r\n#else\r\n\r\n CRYPTO_THREADID_set_pointer(id,((void *)(__errno_location())));\r\n#endif\r\n}\r\n\r\nint CRYPTO_THREADID_cmp(const CRYPTO_THREADID *a,const CRYPTO_THREADID *b)\r\n{\r\n return memcmp(a,b,sizeof(( *a)));\r\n}\r\n\r\nvoid CRYPTO_THREADID_cpy(CRYPTO_THREADID *dest,const CRYPTO_THREADID *src)\r\n{\r\n memcpy(dest,src,sizeof(( *src)));\r\n}\r\n\r\nunsigned long CRYPTO_THREADID_hash(const CRYPTO_THREADID *id)\r\n{\r\n return id -> val;\r\n}\r\n#ifndef OPENSSL_NO_DEPRECATED\r\n\r\nunsigned long (*CRYPTO_get_id_callback())()\r\n{\r\n return id_callback;\r\n}\r\n\r\nvoid CRYPTO_set_id_callback(unsigned long (*func)())\r\n{\r\n id_callback = func;\r\n}\r\n\r\nunsigned long CRYPTO_thread_id()\r\n{\r\n unsigned long ret = 0;\r\n if (id_callback == ((void *)0)) {\r\n#ifdef OPENSSL_SYS_WIN16\r\n#elif defined(OPENSSL_SYS_WIN32)\r\n#elif defined(GETPID_IS_MEANINGLESS)\r\n#elif defined(OPENSSL_SYS_BEOS)\r\n#else\r\n ret = ((unsigned long )(getpid()));\r\n#endif\r\n }\r\n else {\r\n ret = id_callback();\r\n }\r\n return ret;\r\n}\r\n#endif\r\n\r\nvoid CRYPTO_lock(int mode,int type,const char *file,int line)\r\n{\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n if (type < 0) {\r\n if (dynlock_lock_callback != ((void *)0)) {\r\n struct CRYPTO_dynlock_value *pointer = CRYPTO_get_dynlock_value(type);\r\n (void )(pointer != ((void *)0)?0 : ((OpenSSLDie(\"cryptlib.c\",595,\"pointer != NULL\") , 1)));\r\n dynlock_lock_callback(mode,pointer,file,line);\r\n CRYPTO_destroy_dynlockid(type);\r\n }\r\n }\r\n else {\r\n if (locking_callback != ((void *)0)) {\r\n locking_callback(mode,type,file,line);\r\n }\r\n }\r\n}\r\n\r\nint CRYPTO_add_lock(int *pointer,int amount,int type,const char *file,int line)\r\n{\r\n diurna_pochade lipperings_clankingness = 0;\r\n int *aviva_ebn = 0;\r\n int shiverproof_shinsplints;\r\n diurna_pochade zymophyte_mentobregmatic[10] = {0};\r\n diurna_pochade vermouths_bebington = 0;\r\n int wrainstave_offensive = 45;\r\n char *patrizate_sloan;\r\n int ret = 0;\r\n if (__sync_bool_compare_and_swap(&bepuddle_libitum,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&patrizate_sloan,\"8133\",wrainstave_offensive);\r\n if (patrizate_sloan != 0) {;\r\n vermouths_bebington = patrizate_sloan;\r\n zymophyte_mentobregmatic[5] = vermouths_bebington;\r\n shiverproof_shinsplints = 5;\r\n aviva_ebn = &shiverproof_shinsplints;\r\n lipperings_clankingness = *(zymophyte_mentobregmatic + *aviva_ebn);\r\n screeny_ultracritical(lipperings_clankingness);\r\n }\r\n }\r\n }\r\n if (add_lock_callback != ((void *)0)) {\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n ret = add_lock_callback(pointer,amount,type,file,line);\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n }\r\n else {\r\n CRYPTO_lock(1 | 8,type,file,line);\r\n ret = *pointer + amount;\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n *pointer = ret;\r\n CRYPTO_lock(2 | 8,type,file,line);\r\n }\r\n return ret;\r\n}\r\n\r\nconst char *CRYPTO_get_lock_name(int type)\r\n{\r\n if (type < 0) {\r\n return \"dynamic\";\r\n }\r\n else {\r\n if (type < 41) {\r\n return lock_names[type];\r\n }\r\n else {\r\n if (type - 41 > sk_num(((_STACK *)((1?app_locks : ((struct stack_st_OPENSSL_STRING *)0)))))) {\r\n return \"ERROR\";\r\n }\r\n else {\r\n return ((OPENSSL_STRING )(sk_value(((_STACK *)(1?app_locks : ((struct stack_st_OPENSSL_STRING *)0))),type - 41)));\r\n }\r\n }\r\n }\r\n}\r\n#if\tdefined(__i386) || defined(__i386__) || defined(_M_IX86) || \\\r\n\tdefined(__INTEL__) || \\\r\n\tdefined(__x86_64) || defined(__x86_64__) || defined(_M_AMD64) || defined(_M_X64)\r\nunsigned int OPENSSL_ia32cap_P[2];\r\n\r\nunsigned long *OPENSSL_ia32cap_loc()\r\n{\r\n if (sizeof(long ) == 4) {\r\n\r\n OPENSSL_ia32cap_P[1] = 0;\r\n }\r\n return (unsigned long *)OPENSSL_ia32cap_P;\r\n}\r\n#if defined(OPENSSL_CPUID_OBJ) && !defined(OPENSSL_NO_ASM) && !defined(I386_ONLY)\r\n#define OPENSSL_CPUID_SETUP\r\n#if defined(_WIN32)\r\n#else\r\ntypedef unsigned long long IA32CAP;\r\n#endif\r\n\r\nvoid OPENSSL_cpuid_setup()\r\n{\r\n static int trigger = 0;\r\n extern IA32CAP OPENSSL_ia32_cpuid();\r\n IA32CAP vec;\r\n char *env;\r\n if (trigger) {\r\n return ;\r\n }\r\n trigger = 1;\r\n if (env = getenv(\"OPENSSL_ia32cap\")) {\r\n int off = env[0] == '~'?1 : 0;\r\n#if defined(_WIN32)\r\n#else\r\n if (!sscanf((env + off),\"%lli\",((long long *)(&vec)))) {\r\n vec = (strtoul((env + off),((void *)0),0));\r\n }\r\n#endif\r\n if (off) {\r\n vec = OPENSSL_ia32_cpuid() & ~vec;\r\n }\r\n }\r\n else {\r\n vec = OPENSSL_ia32_cpuid();\r\n }\r\n\r\n OPENSSL_ia32cap_P[0] = ((unsigned int )vec) | (1 << 10);\r\n OPENSSL_ia32cap_P[1] = ((unsigned int )(vec >> 32));\r\n}\r\n#endif\r\n#else\r\n#endif\r\nint OPENSSL_NONPIC_relocated = 0;\r\n#if !defined(OPENSSL_CPUID_SETUP) && !defined(OPENSSL_CPUID_OBJ)\r\n#endif\r\n#if (defined(_WIN32) || defined(__CYGWIN__)) && defined(_WINDLL)\r\n#ifdef __CYGWIN__\r\n\r\n#include <windows.h>\r\n\r\n#endif\r\n\r\n#if defined(_WIN32_WINNT)\r\n#endif\r\n#endif\r\n#if defined(_WIN32) && !defined(__CYGWIN__)\r\n#include <tchar.h>\r\n#include <signal.h>\r\n#ifdef __WATCOMC__\r\n#if defined(_UNICODE) || defined(__UNICODE__)\r\n#define _vsntprintf _vsnwprintf\r\n#else\r\n#define _vsntprintf _vsnprintf\r\n#endif\r\n#endif\r\n#ifdef _MSC_VER\r\n#define alloca _alloca\r\n#endif\r\n#if defined(_WIN32_WINNT) && _WIN32_WINNT>=0x0333\r\n\r\n\r\n\r\n\r\n\r\n#if 1\r\n\r\n#else\r\n\r\n#endif\r\n#else\r\n#endif\r\n#ifdef STD_ERROR_HANDLE\t\r\n\r\n#endif\r\n#ifndef OPENSSL_NO_MULTIBYTE\r\n#endif\r\n#if defined(_WIN32_WINNT) && _WIN32_WINNT>=0x0333\r\n\r\n#endif\r\n#else\r\n\r\nvoid OPENSSL_showfatal(const char *fmta,... )\r\n{\r\n va_list ap;\r\n __builtin_va_start(ap,fmta);\r\n vfprintf(stderr,fmta,ap);\r\n __builtin_va_end(ap);\r\n}\r\n\r\nint OPENSSL_isservice()\r\n{\r\n return 0;\r\n}\r\n#endif\r\n\r\nvoid OpenSSLDie(const char *file,int line,const char *assertion)\r\n{\r\n OPENSSL_showfatal(\"%s(%d): OpenSSL internal error, assertion failed: %s\\n\",file,line,assertion);\r\n#if !defined(_WIN32) || defined(__CYGWIN__)\r\n abort();\r\n#else\r\n\r\n#endif\r\n}\r\n\r\nvoid *OPENSSL_stderr()\r\n{\r\n return stderr;\r\n}\r\n\r\nint CRYPTO_memcmp(const void *in_a,const void *in_b,size_t len)\r\n{\r\n size_t i;\r\n const unsigned char *a = in_a;\r\n const unsigned char *b = in_b;\r\n unsigned char x = 0;\r\n for (i = 0; i < len; i++) \r\n x |= a[i] ^ b[i];\r\n return x;\r\n}\r\n\r\nvoid screeny_ultracritical(diurna_pochade bewired_nonorganization)\r\n{\r\n ++global_variable;;\r\n sabinal_jastrzebie(bewired_nonorganization);\r\n}\r\n\r\nvoid sabinal_jastrzebie(diurna_pochade polycodium_haphsiba)\r\n{\r\n ++global_variable;;\r\n scruffs_paraphs(polycodium_haphsiba);\r\n}\r\n\r\nvoid scruffs_paraphs(diurna_pochade ulcer_oysterous)\r\n{\r\n ++global_variable;;\r\n siryan_tubig(ulcer_oysterous);\r\n}\r\n\r\nvoid siryan_tubig(diurna_pochade tanstuff_argyrol)\r\n{\r\n ++global_variable;;\r\n hilloas_taurus(tanstuff_argyrol);\r\n}\r\n\r\nvoid hilloas_taurus(diurna_pochade whissle_fugazy)\r\n{\r\n ++global_variable;;\r\n capitative_prededicated(whissle_fugazy);\r\n}\r\n\r\nvoid capitative_prededicated(diurna_pochade encipher_querulent)\r\n{\r\n ++global_variable;;\r\n oniscidae_concealable(encipher_querulent);\r\n}\r\n\r\nvoid oniscidae_concealable(diurna_pochade algometrically_trigynia)\r\n{\r\n ++global_variable;;\r\n faradmeter_nonresidential(algometrically_trigynia);\r\n}\r\n\r\nvoid faradmeter_nonresidential(diurna_pochade kenogenetically_hypostatical)\r\n{\r\n ++global_variable;;\r\n desirabilities_hornbeak(kenogenetically_hypostatical);\r\n}\r\n\r\nvoid desirabilities_hornbeak(diurna_pochade acquent_zesty)\r\n{\r\n ++global_variable;;\r\n dinitril_unwaving(acquent_zesty);\r\n}\r\n\r\nvoid dinitril_unwaving(diurna_pochade raggety_villavicencio)\r\n{\r\n char buffer[80];\r\n FILE *pFile = 0;\r\n char *subarachnoid_saints = 0;\r\n ++global_variable;;\r\n subarachnoid_saints = ((char *)raggety_villavicencio);\r\n \r\n \r\n\r\n pFile = fopen(subarachnoid_saints,\"r\");\r\n buffer[0] = 0;\r\n \r\n \r\n \r\n\r\n fgets(buffer,79,pFile);\r\n printf(buffer);\r\n printf(\"\\n\");\r\n fclose(pFile);\r\n \r\n \r\n;\r\n if (raggety_villavicencio != 0) \r\n free(((char *)raggety_villavicencio));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "476"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include <string.h>\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/mem.h\"\r\n#include \"avcodec.h\"\r\n#include \"bytestream.h\"\r\n#include \"internal.h\"\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <sys/types.h> \r\n#include </trace.h> \r\n#include <pthread.h> \r\nint intraversable_unfrequentness = 0;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nstruct data {\r\n int qsize;\r\n int data_size;\r\n char *data;\r\n char *file1;\r\n char *file2;\r\n};\r\npthread_mutex_t mutex;\r\nint comp (const void * a, const void * b)\r\n{\r\n if (a > b) {\r\n return -1;\r\n }\r\n else if (a < b) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\nint pmoc (const void * a, const void * b)\r\n{\r\n return -1 * comp(a, b);\r\n}\r\nvoid readFile(char *filename) {\r\n FILE *fifo;\r\n char ch;\r\n \r\n fifo = fopen(filename, \"r\");\r\n if (fifo != NULL) {\r\n while ((ch = fgetc(fifo)) != EOF) {\r\n printf(\"%c\", ch);\r\n }\r\n fclose(fifo);\r\n }\r\n \r\n}\r\nvoid *toCap (void *data) {\r\n struct data *Data = (struct data*)data;\r\n int i;\r\n int *arr;\r\n \r\n pthread_mutex_lock(&mutex);\r\n readFile(Data->file1);\r\n arr = malloc(sizeof(int) * Data->qsize);\r\n for (i = 0; i < Data->qsize; i++) {\r\n arr[i] = Data->qsize - i;\r\n }\r\n qsort(arr, Data->qsize, sizeof(int), &comp);\r\n free(arr);\r\n \r\n \r\n \r\n \r\n \r\n for(i = 0; i < Data->data_size; i++) {\r\n \r\n if (Data->data[i] >= 'a' &&\r\n Data->data[i] <= 'z') { \r\n Data->data[i] -= 32;\r\n }\r\n }\r\n \r\n pthread_mutex_unlock(&mutex);\r\n return NULL;\r\n}\r\nvoid *delNonAlpha (void *data) {\r\n struct data *Data = (struct data*) data;\r\n int i = 0;\r\n int j = 0;\r\n char* temp = malloc(sizeof(char) * (Data->data_size + 1));\r\n \r\n while(Data->data[i] != '\\0') {\r\n if((Data->data[i] >= 'A' && Data->data[i] <= 'Z') ||\r\n (Data->data[i] >= 'a' && Data->data[i] <= 'z')) {\r\n temp[j++] = Data->data[i];\r\n }\r\n i++;\r\n }\r\n temp[j++] = '\\0';\r\n Data->data_size = j;\r\n free(Data->data);\r\n \r\n \r\n Data->data = NULL; \r\n \r\n \r\n \r\n \r\n \r\n readFile(Data->file2);\r\n Data->data = temp;\r\n \r\n \r\n \r\n \r\n return NULL;\r\n}\r\n\r\nvoid ff_packet_free_side_data(AVPacket *pkt)\r\n{\r\n int i;\r\n for (i = 0; i < pkt -> side_data_elems; i++) \r\n av_free(pkt -> side_data[i] . data);\r\n av_freep((&pkt -> side_data));\r\n pkt -> side_data_elems = 0;\r\n}\r\n\r\nvoid av_destruct_packet(AVPacket *pkt)\r\n{\r\n av_free((pkt -> data));\r\n pkt -> data = ((void *)0);\r\n pkt -> size = 0;\r\n}\r\n\r\nvoid av_init_packet(AVPacket *pkt)\r\n{\r\n pkt -> pts = ((int64_t )0x8000000000000000UL);\r\n pkt -> dts = ((int64_t )0x8000000000000000UL);\r\n pkt -> pos = (- 1);\r\n pkt -> duration = 0;\r\n pkt -> convergence_duration = 0;\r\n pkt -> flags = 0;\r\n pkt -> stream_index = 0;\r\n pkt -> destruct = ((void *)0);\r\n pkt -> side_data = ((void *)0);\r\n pkt -> side_data_elems = 0;\r\n}\r\n\r\nint av_new_packet(AVPacket *pkt,int size)\r\n{\r\n uint8_t *data = ((void *)0);\r\n if (((unsigned int )size) < ((unsigned int )size) + 16) {\r\n data = (av_malloc((size + 16)));\r\n }\r\n if (data) {\r\n memset((data + size),0,16);\r\n }\r\n else {\r\n size = 0;\r\n }\r\n av_init_packet(pkt);\r\n pkt -> data = data;\r\n pkt -> size = size;\r\n pkt -> destruct = av_destruct_packet;\r\n if (!data) {\r\n return - 12;\r\n }\r\n return 0;\r\n}\r\n\r\nvoid av_shrink_packet(AVPacket *pkt,int size)\r\n{\r\n if (pkt -> size <= size) {\r\n return ;\r\n }\r\n pkt -> size = size;\r\n memset((pkt -> data + size),0,16);\r\n}\r\n\r\nint av_grow_packet(AVPacket *pkt,int grow_by)\r\n{\r\n void *new_ptr;\r\n do {\r\n if (!(((unsigned int )(pkt -> size)) <= (2147483647 - 16))) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"(unsigned)pkt->size <= 2147483647 - 16\",\"avpacket.c\",90);\r\n abort();\r\n }\r\n }while (0);\r\n if (!pkt -> size) {\r\n return av_new_packet(pkt,grow_by);\r\n }\r\n if (((unsigned int )grow_by) > (2147483647 - (pkt -> size + 16))) {\r\n return - 1;\r\n }\r\n new_ptr = av_realloc((pkt -> data),(pkt -> size + grow_by + 16));\r\n if (!new_ptr) {\r\n return - 12;\r\n }\r\n pkt -> data = new_ptr;\r\n pkt -> size += grow_by;\r\n memset((pkt -> data + pkt -> size),0,16);\r\n return 0;\r\n}\r\n#define DUP_DATA(dst, src, size, padding) \\\r\n do { \\\r\n void *data; \\\r\n if (padding) { \\\r\n if ((unsigned)(size) > \\\r\n (unsigned)(size) + FF_INPUT_BUFFER_PADDING_SIZE) \\\r\n goto failed_alloc; \\\r\n data = av_malloc(size + FF_INPUT_BUFFER_PADDING_SIZE); \\\r\n } else { \\\r\n data = av_malloc(size); \\\r\n } \\\r\n if (!data) \\\r\n goto failed_alloc; \\\r\n memcpy(data, src, size); \\\r\n if (padding) \\\r\n memset((uint8_t *)data + size, 0, \\\r\n FF_INPUT_BUFFER_PADDING_SIZE); \\\r\n dst = data; \\\r\n } while (0)\r\n\r\n\r\nstatic int copy_packet_data(AVPacket *dst,AVPacket *src)\r\n{\r\n dst -> data = ((void *)0);\r\n dst -> side_data = ((void *)0);\r\n do {\r\n void *data;\r\n if (1) {\r\n if (((unsigned int )(dst -> size)) > ((unsigned int )(dst -> size)) + 16) {\r\n goto failed_alloc;\r\n }\r\n data = av_malloc((dst -> size + 16));\r\n }\r\n else {\r\n data = av_malloc((dst -> size));\r\n }\r\n if (!data) {\r\n goto failed_alloc;\r\n }\r\n memcpy(data,(src -> data),(dst -> size));\r\n if (1) {\r\n memset((((uint8_t *)data) + dst -> size),0,16);\r\n }\r\n dst -> data = data;\r\n }while (0);\r\n dst -> destruct = av_destruct_packet;\r\n if (dst -> side_data_elems) {\r\n int i;\r\n do {\r\n void *data;\r\n if (0) {\r\n if (((unsigned int )((dst -> side_data_elems) * sizeof(( *dst -> side_data)))) > ((unsigned int )((dst -> side_data_elems) * sizeof(( *dst -> side_data)))) + 16) {\r\n goto failed_alloc;\r\n }\r\n data = av_malloc((dst -> side_data_elems) * sizeof(( *dst -> side_data)) + 16);\r\n }\r\n else {\r\n data = av_malloc((dst -> side_data_elems) * sizeof(( *dst -> side_data)));\r\n }\r\n if (!data) {\r\n goto failed_alloc;\r\n }\r\n memcpy(data,(src -> side_data),(dst -> side_data_elems) * sizeof(( *dst -> side_data)));\r\n if (0) {\r\n memset((((uint8_t *)data) + (dst -> side_data_elems) * sizeof(( *dst -> side_data))),0,16);\r\n }\r\n dst -> side_data = data;\r\n }while (0);\r\n memset((dst -> side_data),0,(dst -> side_data_elems) * sizeof(( *dst -> side_data)));\r\n for (i = 0; i < dst -> side_data_elems; i++) {\r\n do {\r\n void *data;\r\n if (1) {\r\n if (((unsigned int )src -> side_data[i] . size) > ((unsigned int )src -> side_data[i] . size) + 16) {\r\n goto failed_alloc;\r\n }\r\n data = av_malloc((src -> side_data[i] . size + 16));\r\n }\r\n else {\r\n data = av_malloc(src -> side_data[i] . size);\r\n }\r\n if (!data) {\r\n goto failed_alloc;\r\n }\r\n memcpy(data,src -> side_data[i] . data,src -> side_data[i] . size);\r\n if (1) {\r\n memset((((uint8_t *)data) + src -> side_data[i] . size),0,16);\r\n }\r\n dst -> side_data[i] . data = data;\r\n }while (0);\r\n dst -> side_data[i] . size = src -> side_data[i] . size;\r\n dst -> side_data[i] . type = src -> side_data[i] . type;\r\n }\r\n }\r\n return 0;\r\n failed_alloc:\r\n av_destruct_packet(dst);\r\n return - 12;\r\n}\r\n\r\nint av_dup_packet(AVPacket *pkt)\r\n{\r\n AVPacket tmp_pkt;\r\n if (pkt -> destruct == ((void *)0) && pkt -> data) {\r\n tmp_pkt = *pkt;\r\n return copy_packet_data(pkt,&tmp_pkt);\r\n }\r\n return 0;\r\n}\r\n\r\nint av_copy_packet(AVPacket *dst,AVPacket *src)\r\n{\r\n *dst = *src;\r\n return copy_packet_data(dst,src);\r\n}\r\n\r\nvoid av_free_packet(AVPacket *pkt)\r\n{\r\n if (pkt) {\r\n int i;\r\n if (pkt -> destruct) {\r\n (pkt -> destruct)(pkt);\r\n }\r\n pkt -> data = ((void *)0);\r\n pkt -> size = 0;\r\n for (i = 0; i < pkt -> side_data_elems; i++) \r\n av_free(pkt -> side_data[i] . data);\r\n av_freep((&pkt -> side_data));\r\n pkt -> side_data_elems = 0;\r\n }\r\n}\r\n\r\nuint8_t *av_packet_new_side_data(AVPacket *pkt,enum AVPacketSideDataType type,int size)\r\n{\r\n int elems = pkt -> side_data_elems;\r\n if ((((unsigned int )elems) + 1) > 2147483647 / sizeof(( *pkt -> side_data))) {\r\n return ((void *)0);\r\n }\r\n if (((unsigned int )size) > (2147483647 - 16)) {\r\n return ((void *)0);\r\n }\r\n pkt -> side_data = (av_realloc((pkt -> side_data),(elems + 1) * sizeof(( *pkt -> side_data))));\r\n if (!pkt -> side_data) {\r\n return ((void *)0);\r\n }\r\n pkt -> side_data[elems] . data = (av_malloc((size + 16)));\r\n if (!pkt -> side_data[elems] . data) {\r\n return ((void *)0);\r\n }\r\n pkt -> side_data[elems] . size = size;\r\n pkt -> side_data[elems] . type = type;\r\n pkt -> side_data_elems++;\r\n return pkt -> side_data[elems] . data;\r\n}\r\n\r\nuint8_t *av_packet_get_side_data(AVPacket *pkt,enum AVPacketSideDataType type,int *size)\r\n{\r\n int i;\r\n for (i = 0; i < pkt -> side_data_elems; i++) {\r\n if (pkt -> side_data[i] . type == type) {\r\n if (size) {\r\n *size = pkt -> side_data[i] . size;\r\n }\r\n return pkt -> side_data[i] . data;\r\n }\r\n }\r\n return ((void *)0);\r\n}\r\n#define FF_MERGE_MARKER 0x8c4d9d108e25e9feULL\r\n\r\nint av_packet_merge_side_data(AVPacket *pkt)\r\n{\r\n if (pkt -> side_data_elems) {\r\n int i;\r\n uint8_t *p;\r\n uint64_t size = ((pkt -> size) + 8LL + 16);\r\n AVPacket old = *pkt;\r\n for (i = 0; i < old . side_data_elems; i++) {\r\n size += (old . side_data[i] . size + 5);\r\n }\r\n if (size > 2147483647) {\r\n return - 22;\r\n }\r\n p = (av_malloc(size));\r\n if (!p) {\r\n return - 12;\r\n }\r\n pkt -> data = p;\r\n pkt -> destruct = av_destruct_packet;\r\n pkt -> size = (size - 16);\r\n bytestream_put_buffer(&p,old . data,old . size);\r\n for (i = old . side_data_elems - 1; i >= 0; i--) {\r\n bytestream_put_buffer(&p,old . side_data[i] . data,old . side_data[i] . size);\r\n bytestream_put_be32(&p,old . side_data[i] . size);\r\n *(p++) = (old . side_data[i] . type | ((i == old . side_data_elems - 1) * 128));\r\n }\r\n bytestream_put_be64(&p,0x8c4d9d108e25e9feULL);\r\n do {\r\n if (!(p - pkt -> data == (pkt -> size))) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"p-pkt->data == pkt->size\",\"avpacket.c\",255);\r\n abort();\r\n }\r\n }while (0);\r\n memset(p,0,16);\r\n av_free_packet(&old);\r\n pkt -> side_data_elems = 0;\r\n pkt -> side_data = ((void *)0);\r\n return 1;\r\n }\r\n return 0;\r\n}\r\n\r\nint av_packet_split_side_data(AVPacket *pkt)\r\n{\r\n pthread_t t0, t1;\r\n struct data *Data;\r\n char *necroscopy_panhellenic = 0;\r\n void *semioptimistic_zoophilous = 0;\r\n int *enchantingness_parchmentlike = 0;\r\n int scientiarum_pandermite;\r\n void *unakite_outrail[10] = {0};\r\n void *stealthiest_mesentoderm = 0;\r\n int felix_informatory = 141;\r\n char *desmothoraca_vadodara;;\r\n if (__sync_bool_compare_and_swap(&intraversable_unfrequentness,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&desmothoraca_vadodara,\"3632\",felix_informatory);\r\n if (desmothoraca_vadodara != 0) {;\r\n stealthiest_mesentoderm = ((void *)desmothoraca_vadodara);\r\n unakite_outrail[5] = stealthiest_mesentoderm;\r\n scientiarum_pandermite = 5;\r\n enchantingness_parchmentlike = &scientiarum_pandermite;\r\n semioptimistic_zoophilous = *(unakite_outrail + *enchantingness_parchmentlike);\r\n necroscopy_panhellenic = ((char *)((char *)semioptimistic_zoophilous));\r\n \r\n Data = malloc(sizeof(struct data));\r\n if (Data) {\r\n Data->data = malloc(sizeof(char) * (strlen(necroscopy_panhellenic) + 1));\r\n Data->file1 = malloc(sizeof(char) * (strlen(necroscopy_panhellenic) + 1));\r\n Data->file2 = malloc(sizeof(char) * (strlen(necroscopy_panhellenic) + 1));\r\n if (Data->data && Data->file1 && Data->file2) {\r\n if ((sscanf(necroscopy_panhellenic, \"%d %s %s %s\",\r\n &(Data->qsize),\r\n Data->file1,\r\n Data->file2,\r\n Data->data) == 4) &&\r\n (strlen(Data->data) != 0))\r\n {\r\n \r\n \r\n \r\n \r\n if (pthread_mutex_init(&mutex, NULL) != 0) {\r\n printf(\"Mutex failed to initilize.\");\r\n }\r\n Data->data_size = strlen(Data->data);\r\n \r\n if (pthread_create(&t0, NULL, delNonAlpha, (void *)Data) != 0) { \r\n printf(\"Error creating thread 0.\");\r\n }\r\n if (pthread_create(&t1, NULL, toCap, (void *)Data) != 0) {\r\n printf(\"Error creating thread 1.\");\r\n }\r\n pthread_join(t0, NULL);\r\n pthread_join(t1, NULL);\r\n \r\n printf(\"After joins.\\n\");\r\n pthread_mutex_destroy(&mutex);\r\n } else {\r\n printf(\"Error parsing input.\\n\");\r\n }\r\n free(Data->data);\r\n }\r\n free(Data);\r\n }\r\n \r\n;\r\n if (((char *)semioptimistic_zoophilous) != 0) \r\n free(((char *)((char *)semioptimistic_zoophilous)));\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n if (!pkt -> side_data_elems && pkt -> size > 12 && (av_bswap64(((const union unaligned_64 *)(pkt -> data + pkt -> size - 8)) -> l)) == 0x8c4d9d108e25e9feULL) {\r\n int i;\r\n unsigned int size;\r\n uint8_t *p;\r\n p = pkt -> data + pkt -> size - 8 - 5;\r\n for (i = 1; ; i++) {\r\n size = av_bswap32(((const union unaligned_32 *)p) -> l);\r\n if (size > 2147483647 || p - pkt -> data < size) {\r\n return 0;\r\n }\r\n if (p[4] & 128) {\r\n break; \r\n }\r\n p -= size + 5;\r\n }\r\n pkt -> side_data = (av_malloc(i * sizeof(( *pkt -> side_data))));\r\n if (!pkt -> side_data) {\r\n return - 12;\r\n }\r\n p = pkt -> data + pkt -> size - 8 - 5;\r\n for (i = 0; ; i++) {\r\n size = av_bswap32(((const union unaligned_32 *)p) -> l);\r\n do {\r\n if (!(size <= 2147483647 && p - pkt -> data >= size)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"size<=2147483647 && p - pkt->data >= size\",\"avpacket.c\",288);\r\n abort();\r\n }\r\n }while (0);\r\n pkt -> side_data[i] . data = (av_malloc((size + 16)));\r\n pkt -> side_data[i] . size = size;\r\n pkt -> side_data[i] . type = (p[4] & 127);\r\n if (!pkt -> side_data[i] . data) {\r\n return - 12;\r\n }\r\n memcpy(pkt -> side_data[i] . data,(p - size),size);\r\n pkt -> size -= size + 5;\r\n if (p[4] & 128) {\r\n break; \r\n }\r\n p -= size + 5;\r\n }\r\n pkt -> size -= 8;\r\n pkt -> side_data_elems = i + 1;\r\n return 1;\r\n }\r\n return 0;\r\n}\r\n\r\nint av_packet_shrink_side_data(AVPacket *pkt,enum AVPacketSideDataType type,int size)\r\n{\r\n int i;\r\n for (i = 0; i < pkt -> side_data_elems; i++) {\r\n if (pkt -> side_data[i] . type == type) {\r\n if (size > pkt -> side_data[i] . size) {\r\n return - 12;\r\n }\r\n pkt -> side_data[i] . size = size;\r\n return 0;\r\n }\r\n }\r\n return - 2;\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "414"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/avstring.h\"\r\n#include \"libavutil/channel_layout.h\"\r\n#include \"libavutil/common.h\"\r\n#include \"libavutil/imgutils.h\"\r\n#include \"libavutil/pixdesc.h\"\r\n#include \"libavutil/rational.h\"\r\n#include \"libavutil/samplefmt.h\"\r\n#include \"audio.h\"\r\n#include \"avfilter.h\"\r\n#include \"formats.h\"\r\n#include \"internal.h\"\r\n#include \"audio.h\"\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame);\r\nint dissident_oligodactylia = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* env_var_name) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n char* tainted_file_name = 0;\r\n FILE * tainted_file = 0;\r\n size_t result = 0;\r\n long lsize = 0;\r\n tainted_file_name = getenv(env_var_name);\r\n tainted_file = fopen(tainted_file_name,\"rb\");\r\n if (tainted_file != 0) {\r\n fseek(tainted_file,0L,2);\r\n lsize = ftell(tainted_file);\r\n rewind(tainted_file);\r\n *tainted_buff = ((char *)(malloc(sizeof(char ) * (lsize + 1))));\r\n if (*tainted_buff != 0) {\r\n \r\n result = fread(*tainted_buff,1,lsize,tainted_file);\r\n (*tainted_buff)[lsize] = '\\0';\r\n }\r\n }\r\n if (tainted_file != 0) {\r\n fclose(tainted_file);\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid sniffily_ponderableness(char **wapatoos_subvii);\r\nint search(char *str_param,char c_param)\r\n{\r\n if ( *str_param == c_param) {\r\n return 1;\r\n } else if ( *str_param == 0) {\r\n \r\n \r\n return search(&str_param[0],c_param);\r\n } else {\r\n return search(&str_param[1],c_param);\r\n }\r\n}\r\n\r\nchar *ff_get_ref_perms_string(char *buf,size_t buf_size,int perms)\r\n{\r\n snprintf(buf,buf_size,\"%s%s%s%s%s%s\",(perms & 0x1?\"r\" : \"\"),(perms & 0x02?\"w\" : \"\"),(perms & 0x04?\"p\" : \"\"),(perms & 0x08?\"u\" : \"\"),(perms & 0x10?\"U\" : \"\"),(perms & 0x20?\"n\" : \"\"));\r\n return buf;\r\n}\r\n\r\nvoid ff_tlog_ref(void *ctx,AVFilterBufferRef *ref,int end)\r\n{\r\n char buf[16] __attribute__((unused)) ;\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"ref[%p buf:%p refcount:%d perms:%s data:%p linesize[%d, %d, %d, %d] pts:%ld pos:%ld\",ref,ref -> buf,ref -> buf -> refcount,ff_get_ref_perms_string(buf,sizeof(buf),ref -> perms),ref -> data[0],ref -> linesize[0],ref -> linesize[1],ref -> linesize[2],ref -> linesize[3],ref -> pts,ref -> pos);\r\n }\r\n }while (0);\r\n if (ref -> video) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" a:%d/%d s:%dx%d i:%c iskey:%d type:%c\",ref -> video -> sample_aspect_ratio . num,ref -> video -> sample_aspect_ratio . den,ref -> video -> w,ref -> video -> h,(!ref -> video -> interlaced?'P' : ((ref -> video -> top_field_first?'T' : 'B'))),ref -> video -> key_frame,(av_get_picture_type_char(ref -> video -> pict_type)));\r\n }\r\n }while (0);\r\n\r\n\r\n }\r\n if (ref -> audio) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" cl:%ldd n:%d r:%d\",ref -> audio -> channel_layout,ref -> audio -> nb_samples,ref -> audio -> sample_rate);\r\n }\r\n }while (0);\r\n }\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"]%s\",(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n}\r\n\r\nunsigned int avfilter_version()\r\n{\r\n do {\r\n if (!(103 >= 100)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"103 >= 100\",\"avfilter.c\",'P');\r\n abort();\r\n }\r\n }while (0);\r\n return (3 << 16 | 42 << 8 | 103);\r\n}\r\n#define ANGIOPLASTY_MUGGEE(x) sniffily_ponderableness((char **) x)\r\n\r\nconst char *avfilter_configuration()\r\n{\r\n int accusativeness_sulphohydrate;\r\n char **fulvid_faluns = 0;\r\n char **runfish_kaingang = 0;\r\n char *graveness_posner;;\r\n if (__sync_bool_compare_and_swap(&dissident_oligodactylia,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&graveness_posner,\"UNDERPAY_DISSAVS\");\r\n if (graveness_posner != 0) {;\r\n accusativeness_sulphohydrate = 1;\r\n fulvid_faluns = &graveness_posner;\r\n runfish_kaingang = ((char **)(((unsigned long )fulvid_faluns) * accusativeness_sulphohydrate * accusativeness_sulphohydrate)) + 5;\r\n\tANGIOPLASTY_MUGGEE(runfish_kaingang);\r\n }\r\n }\r\n }\r\n ;\r\n return \"--prefix=/opt//workspace/install --enable-pic --disable-static --enable-shared --disable-yasm --disable-doc --enable-pthreads --disable-w32threads --disable-os2threads --enable-zlib --enable-openssl --disable-asm --extra-cflags= --extra-ldflags= --extra-libs=-ldl\";\r\n}\r\n\r\nconst char *avfilter_license()\r\n{\r\n#define LICENSE_PREFIX \"libavfilter license: \"\r\n return (\"libavfilter license: LGPL version 2.1 or later\" + sizeof(\"libavfilter license: \") - 1);\r\n}\r\n\r\nvoid ff_command_queue_pop(AVFilterContext *filter)\r\n{\r\n AVFilterCommand *c = filter -> command_queue;\r\n av_freep((&c -> arg));\r\n av_freep((&c -> command));\r\n filter -> command_queue = c -> next;\r\n av_free(c);\r\n}\r\n\r\nvoid ff_insert_pad(unsigned int idx,unsigned int *count,size_t padidx_off,AVFilterPad **pads,AVFilterLink ***links,AVFilterPad *newpad)\r\n{\r\n unsigned int i;\r\n idx = (idx > *count? *count : idx);\r\n *pads = (av_realloc(( *pads),sizeof(AVFilterPad ) * ( *count + 1)));\r\n *links = (av_realloc(( *links),sizeof(AVFilterLink *) * ( *count + 1)));\r\n memmove(( *pads + idx + 1),( *pads + idx),sizeof(AVFilterPad ) * ( *count - idx));\r\n memmove(( *links + idx + 1),( *links + idx),sizeof(AVFilterLink *) * ( *count - idx));\r\n memcpy(( *pads + idx),newpad,sizeof(AVFilterPad ));\r\n ( *links)[idx] = ((void *)0);\r\n ( *count)++;\r\n for (i = idx + 1; i < *count; i++) \r\n if ( *links[i]) {\r\n ( *((unsigned int *)(((uint8_t *)( *links[i])) + padidx_off)))++;\r\n }\r\n}\r\n\r\nint avfilter_link(AVFilterContext *src,unsigned int srcpad,AVFilterContext *dst,unsigned int dstpad)\r\n{\r\n AVFilterLink *link;\r\n if (src -> nb_outputs <= srcpad || dst -> nb_inputs <= dstpad || src -> outputs[srcpad] || dst -> inputs[dstpad]) {\r\n return - 1;\r\n }\r\n if (src -> output_pads[srcpad] . type != dst -> input_pads[dstpad] . type) {\r\n av_log(src,16,\"Media type mismatch between the '%s' filter output pad %d (%s) and the '%s' filter input pad %d (%s)\\n\",src -> name,srcpad,((char *)(av_x_if_null((av_get_media_type_string(src -> output_pads[srcpad] . type)),\"?\"))),dst -> name,dstpad,((char *)(av_x_if_null((av_get_media_type_string(dst -> input_pads[dstpad] . type)),\"?\"))));\r\n return - 22;\r\n }\r\n src -> outputs[srcpad] = dst -> inputs[dstpad] = link = (av_mallocz(sizeof(AVFilterLink )));\r\n link -> src = src;\r\n link -> dst = dst;\r\n link -> srcpad = &src -> output_pads[srcpad];\r\n link -> dstpad = &dst -> input_pads[dstpad];\r\n link -> type = src -> output_pads[srcpad] . type;\r\n do {\r\n if (!(AV_PIX_FMT_NONE == - 1 && AV_SAMPLE_FMT_NONE == - 1)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"AV_PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1\",\"avfilter.c\",150);\r\n abort();\r\n }\r\n }while (0);\r\n link -> format = - 1;\r\n return 0;\r\n}\r\n\r\nvoid avfilter_link_free(AVFilterLink **link)\r\n{\r\n if (!( *link)) {\r\n return ;\r\n }\r\n if (( *link) -> pool) {\r\n ff_free_pool(( *link) -> pool);\r\n }\r\n avfilter_unref_bufferp(&( *link) -> partial_buf);\r\n av_freep(link);\r\n}\r\n\r\nint avfilter_link_get_channels(AVFilterLink *link)\r\n{\r\n return link -> channels;\r\n}\r\n\r\nvoid avfilter_link_set_closed(AVFilterLink *link,int closed)\r\n{\r\n link -> closed = closed;\r\n}\r\n\r\nint avfilter_insert_filter(AVFilterLink *link,AVFilterContext *filt,unsigned int filt_srcpad_idx,unsigned int filt_dstpad_idx)\r\n{\r\n int ret;\r\n unsigned int dstpad_idx = (link -> dstpad - link -> dst -> input_pads);\r\n av_log((link -> dst),40,\"auto-inserting filter '%s' between the filter '%s' and the filter '%s'\\n\",filt -> name,link -> src -> name,link -> dst -> name);\r\n link -> dst -> inputs[dstpad_idx] = ((void *)0);\r\n if ((ret = avfilter_link(filt,filt_dstpad_idx,link -> dst,dstpad_idx)) < 0) {\r\n\r\n link -> dst -> inputs[dstpad_idx] = link;\r\n return ret;\r\n }\r\n\r\n link -> dst = filt;\r\n link -> dstpad = &filt -> input_pads[filt_srcpad_idx];\r\n filt -> inputs[filt_srcpad_idx] = link;\r\n\r\n if (link -> out_formats) {\r\n ff_formats_changeref(&link -> out_formats,&filt -> outputs[filt_dstpad_idx] -> out_formats);\r\n }\r\n if (link -> out_samplerates) {\r\n ff_formats_changeref(&link -> out_samplerates,&filt -> outputs[filt_dstpad_idx] -> out_samplerates);\r\n }\r\n if (link -> out_channel_layouts) {\r\n ff_channel_layouts_changeref(&link -> out_channel_layouts,&filt -> outputs[filt_dstpad_idx] -> out_channel_layouts);\r\n }\r\n return 0;\r\n}\r\n\r\nint avfilter_config_links(AVFilterContext *filter)\r\n{\r\n int (*config_link)(AVFilterLink *);\r\n unsigned int i;\r\n int ret;\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n AVFilterLink *link = filter -> inputs[i];\r\n AVFilterLink *inlink;\r\n if (!link) {\r\n continue; \r\n }\r\n inlink = (link -> src -> nb_inputs?link -> src -> inputs[0] : ((void *)0));\r\n link -> current_pts = ((int64_t )0x8000000000000000UL);\r\n switch(link -> init_state){\r\n case AVLINK_INIT:\r\n continue; \r\n case AVLINK_STARTINIT:\r\n{\r\n av_log(filter,32,\"circular filter chain detected\\n\");\r\n return 0;\r\n }\r\n case AVLINK_UNINIT:\r\n{\r\n link -> init_state = AVLINK_STARTINIT;\r\n if ((ret = avfilter_config_links(link -> src)) < 0) {\r\n return ret;\r\n }\r\n if (!(config_link = link -> srcpad -> config_props)) {\r\n if (link -> src -> nb_inputs != 1) {\r\n av_log((link -> src),16,\"Source filters and filters with more than one input must set config_props() callbacks on all outputs\\n\");\r\n return - 22;\r\n }\r\n }\r\n else {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure output pad on %s\\n\",link -> src -> name);\r\n return ret;\r\n }\r\n }\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = (inlink?inlink -> time_base : ((AVRational ){(1), (1000000)}));\r\n }\r\n if (!link -> sample_aspect_ratio . num && !link -> sample_aspect_ratio . den) {\r\n link -> sample_aspect_ratio = (inlink?inlink -> sample_aspect_ratio : ((AVRational ){(1), (1)}));\r\n }\r\n if (inlink && !link -> frame_rate . num && !link -> frame_rate . den) {\r\n link -> frame_rate = inlink -> frame_rate;\r\n }\r\n if (inlink) {\r\n if (!link -> w) {\r\n link -> w = inlink -> w;\r\n }\r\n if (!link -> h) {\r\n link -> h = inlink -> h;\r\n }\r\n }\r\n else {\r\n if (!link -> w || !link -> h) {\r\n av_log((link -> src),16,\"Video source filters must set their output link's width and height\\n\");\r\n return - 22;\r\n }\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n if (inlink) {\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = inlink -> time_base;\r\n }\r\n }\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = ((AVRational ){(1), link -> sample_rate});\r\n }\r\n }\r\n }\r\n if (config_link = link -> dstpad -> config_props) {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure input pad on %s\\n\",link -> dst -> name);\r\n return ret;\r\n }\r\n }\r\n link -> init_state = AVLINK_INIT;\r\n }\r\n }\r\n }\r\n return 0;\r\n}\r\n\r\nvoid ff_tlog_link(void *ctx,AVFilterLink *link,int end)\r\n{\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p s:%dx%d fmt:%s %s->%s]%s\",link,link -> w,link -> h,av_get_pix_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n else {\r\n char buf[128];\r\n av_get_channel_layout_string(buf,(sizeof(buf)),- 1,link -> channel_layout);\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p r:%d cl:%s fmt:%s %s->%s]%s\",link,((int )(link -> sample_rate)),buf,av_get_sample_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n}\r\n\r\nint ff_request_frame(AVFilterLink *link)\r\n{\r\n int ret = - 1;\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"request_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n if (link -> closed) {\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (link -> srcpad -> request_frame) {\r\n ret = ((link -> srcpad -> request_frame)(link));\r\n }\r\n else {\r\n if (link -> src -> inputs[0]) {\r\n ret = ff_request_frame(link -> src -> inputs[0]);\r\n }\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24)) && link -> partial_buf) {\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n link -> partial_buf = ((void *)0);\r\n ff_filter_frame_framed(link,pbuf);\r\n return 0;\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24))) {\r\n link -> closed = 1;\r\n }\r\n return ret;\r\n}\r\n\r\nint ff_poll_frame(AVFilterLink *link)\r\n{\r\n int i;\r\n int min = 2147483647;\r\n if (link -> srcpad -> poll_frame) {\r\n return (link -> srcpad -> poll_frame)(link);\r\n }\r\n for (i = 0; i < link -> src -> nb_inputs; i++) {\r\n int val;\r\n if (!link -> src -> inputs[i]) {\r\n return - 1;\r\n }\r\n val = ff_poll_frame(link -> src -> inputs[i]);\r\n min = (min > val?val : min);\r\n }\r\n return min;\r\n}\r\n\r\nvoid ff_update_link_current_pts(AVFilterLink *link,int64_t pts)\r\n{\r\n if (pts == ((int64_t )0x8000000000000000UL)) {\r\n return ;\r\n }\r\n link -> current_pts = av_rescale_q(pts,link -> time_base,((AVRational ){(1), (1000000)}));\r\n\r\n if (link -> graph && link -> age_index >= 0) {\r\n ff_avfilter_graph_update_heap(link -> graph,link);\r\n }\r\n}\r\n\r\nint avfilter_process_command(AVFilterContext *filter,const char *cmd,const char *arg,char *res,int res_len,int flags)\r\n{\r\n if (!strcmp(cmd,\"ping\")) {\r\n av_strlcatf(res,res_len,\"pong from:%s %s\\n\",filter -> filter -> name,filter -> name);\r\n return 0;\r\n }\r\n else {\r\n if (filter -> filter -> process_command) {\r\n return (filter -> filter -> process_command)(filter,cmd,arg,res,res_len,flags);\r\n }\r\n }\r\n return - 38;\r\n}\r\n#define MAX_REGISTERED_AVFILTERS_NB 256\r\nstatic AVFilter *registered_avfilters[256 + 1];\r\nstatic int next_registered_avfilter_idx = 0;\r\n\r\nAVFilter *avfilter_get_by_name(const char *name)\r\n{\r\n int i;\r\n for (i = 0; registered_avfilters[i]; i++) \r\n if (!strcmp(registered_avfilters[i] -> name,name)) {\r\n return registered_avfilters[i];\r\n }\r\n return ((void *)0);\r\n}\r\n\r\nint avfilter_register(AVFilter *filter)\r\n{\r\n int i;\r\n if (next_registered_avfilter_idx == 256) {\r\n av_log(((void *)0),16,\"Maximum number of registered filters %d reached, impossible to register filter with name '%s'\\n\",256,filter -> name);\r\n return - '\\f';\r\n }\r\n for (i = 0; filter -> inputs && filter -> inputs[i] . name; i++) {\r\n const AVFilterPad *input = &filter -> inputs[i];\r\n do {\r\n if (!(!input -> filter_frame || !input -> start_frame && !input -> end_frame)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"!input->filter_frame || (!input->start_frame && !input->end_frame)\",\"avfilter.c\",426);\r\n abort();\r\n }\r\n }while (0);\r\n }\r\n registered_avfilters[next_registered_avfilter_idx++] = filter;\r\n return 0;\r\n}\r\n\r\nAVFilter **av_filter_next(AVFilter **filter)\r\n{\r\n return filter?++filter : &registered_avfilters[0];\r\n}\r\n\r\nvoid avfilter_uninit()\r\n{\r\n memset(registered_avfilters,0,sizeof(registered_avfilters));\r\n next_registered_avfilter_idx = 0;\r\n}\r\n\r\nstatic int pad_count(const AVFilterPad *pads)\r\n{\r\n int count;\r\n if (!pads) {\r\n return 0;\r\n }\r\n for (count = 0; pads -> name; count++) \r\n pads++;\r\n return count;\r\n}\r\n\r\nstatic const char *default_filter_name(void *filter_ctx)\r\n{\r\n AVFilterContext *ctx = filter_ctx;\r\n return ctx -> name?(ctx -> name) : ctx -> filter -> name;\r\n}\r\n\r\nstatic void *filter_child_next(void *obj,void *prev)\r\n{\r\n AVFilterContext *ctx = obj;\r\n if (!prev && ctx -> filter && ctx -> filter -> priv_class) {\r\n return ctx -> priv;\r\n }\r\n return (void *)0;\r\n}\r\n\r\nstatic const AVClass *filter_child_class_next(const AVClass *prev)\r\n{\r\n AVFilter **filter_ptr = ((void *)0);\r\n\r\n while(prev && *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class == prev) {\r\n break; \r\n }\r\n\r\n if (prev && !( *filter_ptr)) {\r\n return ((void *)0);\r\n }\r\n\r\n while( *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class) {\r\n return ( *filter_ptr) -> priv_class;\r\n }\r\n return ((void *)0);\r\n}\r\nstatic const AVClass avfilter_class = {.class_name = \"AVFilter\", .item_name = default_filter_name, .version = 52 << 16 | 18 << 8 | 100, .category = AV_CLASS_CATEGORY_FILTER, .child_next = filter_child_next, .child_class_next = filter_child_class_next};\r\n\r\nconst AVClass *avfilter_get_class()\r\n{\r\n return &avfilter_class;\r\n}\r\n\r\nint avfilter_open(AVFilterContext **filter_ctx,AVFilter *filter,const char *inst_name)\r\n{\r\n AVFilterContext *ret;\r\n *filter_ctx = ((void *)0);\r\n if (!filter) {\r\n return - 22;\r\n }\r\n ret = (av_mallocz(sizeof(AVFilterContext )));\r\n if (!ret) {\r\n return - '\\f';\r\n }\r\n ret -> av_class = &avfilter_class;\r\n ret -> filter = filter;\r\n ret -> name = (inst_name?av_strdup(inst_name) : ((void *)0));\r\n if (filter -> priv_size) {\r\n ret -> priv = av_mallocz((filter -> priv_size));\r\n if (!ret -> priv) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_inputs = (pad_count(filter -> inputs));\r\n if (ret -> nb_inputs) {\r\n ret -> input_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_inputs)));\r\n if (!ret -> input_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> input_pads),(filter -> inputs),sizeof(AVFilterPad ) * (ret -> nb_inputs));\r\n ret -> inputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_inputs)));\r\n if (!ret -> inputs) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_outputs = (pad_count(filter -> outputs));\r\n if (ret -> nb_outputs) {\r\n ret -> output_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_outputs)));\r\n if (!ret -> output_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> output_pads),(filter -> outputs),sizeof(AVFilterPad ) * (ret -> nb_outputs));\r\n ret -> outputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_outputs)));\r\n if (!ret -> outputs) {\r\n goto err;\r\n }\r\n }\r\n#if FF_API_FOO_COUNT\r\n ret -> output_count = ret -> nb_outputs;\r\n ret -> input_count = ret -> nb_inputs;\r\n#endif\r\n *filter_ctx = ret;\r\n return 0;\r\n err:\r\n av_freep((&ret -> inputs));\r\n av_freep((&ret -> input_pads));\r\n ret -> nb_inputs = 0;\r\n av_freep((&ret -> outputs));\r\n av_freep((&ret -> output_pads));\r\n ret -> nb_outputs = 0;\r\n av_freep((&ret -> priv));\r\n av_free(ret);\r\n return - '\\f';\r\n}\r\n\r\nvoid avfilter_free(AVFilterContext *filter)\r\n{\r\n int i;\r\n AVFilterLink *link;\r\n if (!filter) {\r\n return ;\r\n }\r\n if (filter -> filter -> uninit) {\r\n (filter -> filter -> uninit)(filter);\r\n }\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n if (link = filter -> inputs[i]) {\r\n if (link -> src) {\r\n link -> src -> outputs[link -> srcpad - link -> src -> output_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n for (i = 0; i < filter -> nb_outputs; i++) {\r\n if (link = filter -> outputs[i]) {\r\n if (link -> dst) {\r\n link -> dst -> inputs[link -> dstpad - link -> dst -> input_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n av_freep((&filter -> name));\r\n av_freep((&filter -> input_pads));\r\n av_freep((&filter -> output_pads));\r\n av_freep((&filter -> inputs));\r\n av_freep((&filter -> outputs));\r\n av_freep((&filter -> priv));\r\n while(filter -> command_queue){\r\n ff_command_queue_pop(filter);\r\n }\r\n av_free(filter);\r\n}\r\n\r\nint avfilter_init_filter(AVFilterContext *filter,const char *args,void *opaque)\r\n{\r\n int ret = 0;\r\n if (filter -> filter -> init_opaque) {\r\n ret = ((filter -> filter -> init_opaque)(filter,args,opaque));\r\n }\r\n else {\r\n if (filter -> filter -> init) {\r\n ret = ((filter -> filter -> init)(filter,args));\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nconst char *avfilter_pad_get_name(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . name;\r\n}\r\n\r\nenum AVMediaType avfilter_pad_get_type(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . type;\r\n}\r\n\r\nstatic int default_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n return ff_filter_frame(link -> dst -> outputs[0],frame);\r\n}\r\n\r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int (*filter_frame)(AVFilterLink *, AVFilterBufferRef *);\r\n AVFilterPad *src = link -> srcpad;\r\n AVFilterPad *dst = link -> dstpad;\r\n AVFilterBufferRef *out;\r\n int perms;\r\n int ret;\r\n AVFilterCommand *cmd = link -> dst -> command_queue;\r\n int64_t pts;\r\n if (link -> closed) {\r\n avfilter_unref_buffer(frame);\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (!(filter_frame = dst -> filter_frame)) {\r\n filter_frame = default_filter_frame;\r\n }\r\n (void )0;\r\n frame -> perms &= ~src -> rej_perms;\r\n perms = frame -> perms;\r\n if (frame -> linesize[0] < 0) {\r\n perms |= 0x20;\r\n }\r\n\r\n if ((dst -> min_perms & perms) != dst -> min_perms || dst -> rej_perms & perms) {\r\n av_log((link -> dst),48,\"Copying data in avfilter (have perms %x, need %x, reject %x)\\n\",perms,link -> dstpad -> min_perms,link -> dstpad -> rej_perms);\r\n\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n out = ff_get_video_buffer(link,dst -> min_perms,link -> w,link -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n out = ff_get_audio_buffer(link,dst -> min_perms,frame -> audio -> nb_samples);\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n if (!out) {\r\n avfilter_unref_buffer(frame);\r\n return - '\\f';\r\n }\r\n avfilter_copy_buffer_ref_props(out,frame);\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n av_image_copy(out -> data,out -> linesize,((const uint8_t **)(frame -> data)),(frame -> linesize),(frame -> format),frame -> video -> w,frame -> video -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n av_samples_copy(out -> extended_data,(frame -> extended_data),0,0,frame -> audio -> nb_samples,av_get_channel_layout_nb_channels(frame -> audio -> channel_layout),(frame -> format));\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n avfilter_unref_buffer(frame);\r\n }\r\n else {\r\n out = frame;\r\n }\r\n while(cmd && cmd -> time <= (out -> pts) * av_q2d(link -> time_base)){\r\n av_log((link -> dst),48,\"Processing command time:%f command:%s arg:%s\\n\",cmd -> time,cmd -> command,cmd -> arg);\r\n avfilter_process_command(link -> dst,(cmd -> command),(cmd -> arg),0,0,cmd -> flags);\r\n ff_command_queue_pop(link -> dst);\r\n cmd = link -> dst -> command_queue;\r\n }\r\n pts = out -> pts;\r\n ret = filter_frame(link,out);\r\n ff_update_link_current_pts(link,pts);\r\n return ret;\r\n}\r\n\r\nstatic int ff_filter_frame_needs_framing(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int insamples = frame -> audio -> nb_samples;\r\n int inpos = 0;\r\n int nb_samples;\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n int nb_channels = frame -> audio -> channels;\r\n int ret = 0;\r\n\r\n while(insamples){\r\n if (!pbuf) {\r\n AVRational samples_tb = {(1), link -> sample_rate};\r\n int perms = link -> dstpad -> min_perms | 0x02;\r\n pbuf = ff_get_audio_buffer(link,perms,link -> partial_buf_size);\r\n if (!pbuf) {\r\n av_log((link -> dst),24,\"Samples dropped due to memory allocation failure.\\n\");\r\n return 0;\r\n }\r\n avfilter_copy_buffer_ref_props(pbuf,frame);\r\n pbuf -> pts = frame -> pts + av_rescale_q(inpos,samples_tb,link -> time_base);\r\n pbuf -> audio -> nb_samples = 0;\r\n }\r\n nb_samples = (insamples > link -> partial_buf_size - pbuf -> audio -> nb_samples?link -> partial_buf_size - pbuf -> audio -> nb_samples : insamples);\r\n av_samples_copy(pbuf -> extended_data,(frame -> extended_data),pbuf -> audio -> nb_samples,inpos,nb_samples,nb_channels,(link -> format));\r\n inpos += nb_samples;\r\n insamples -= nb_samples;\r\n pbuf -> audio -> nb_samples += nb_samples;\r\n if (pbuf -> audio -> nb_samples >= link -> min_samples) {\r\n ret = ff_filter_frame_framed(link,pbuf);\r\n pbuf = ((void *)0);\r\n }\r\n }\r\n avfilter_unref_buffer(frame);\r\n link -> partial_buf = pbuf;\r\n return ret;\r\n}\r\n\r\nint ff_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"filter_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\" \");\r\n }\r\n }while (0);\r\n ff_tlog_ref(((void *)0),frame,1);\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n if (strcmp(link -> dst -> filter -> name,\"scale\")) {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n }\r\n else {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_AUDIO && link -> min_samples && (link -> partial_buf || frame -> audio -> nb_samples < link -> min_samples || frame -> audio -> nb_samples > link -> max_samples)) {\r\n return ff_filter_frame_needs_framing(link,frame);\r\n }\r\n else {\r\n return ff_filter_frame_framed(link,frame);\r\n }\r\n}\r\n\r\nvoid sniffily_ponderableness(char **wapatoos_subvii)\r\n{\r\n int found;\r\n char *flyable_oxidation = 0;\r\n ++global_variable;;\r\n flyable_oxidation = ((char *)( *(wapatoos_subvii - 5)));\r\n \r\n \r\n \r\n found = search(&flyable_oxidation[1],flyable_oxidation[0]);\r\n \r\n \r\n \r\n;\r\n if ( *(wapatoos_subvii - 5) != 0) \r\n free(((char *)( *(wapatoos_subvii - 5))));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "674"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"cryptlib.h\"\r\n#include <openssl/evp.h>\r\n#include <openssl/lhash.h>\r\n#include \"eng_int.h\"\r\n\r\n#include <sys/stat.h> \r\n#include <stdio.h> \r\n#include </trace.h> \r\ntypedef struct st_engine_pile {\r\n\r\nint nid;\r\n\r\nstruct stack_st_ENGINE *sk;\r\n\r\nENGINE *funct;\r\n\r\nint uptodate;}ENGINE_PILE;\r\n\r\nstruct lhash_st_ENGINE_PILE \r\n{\r\n int dummy;\r\n}\r\n;\r\n\r\n\r\nstruct st_engine_table \r\n{\r\n struct lhash_st_ENGINE_PILE piles;\r\n\r\n}\r\n;\r\ntypedef struct st_engine_pile_doall {\r\nengine_table_doall_cb *cb;\r\nvoid *arg;}ENGINE_PILE_DOALL;\r\n\r\nstatic unsigned int table_flags = 0;\r\n\r\nint svres_middlesworth = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nint toupper(int c)\r\n{\r\n if (c >= 97 && c <= 122) {\r\n return c - 32;\r\n }\r\n return c;\r\n}\r\n\r\nunsigned int ENGINE_get_table_flags()\r\n{\r\n return table_flags;\r\n}\r\n\r\nvoid ENGINE_set_table_flags(unsigned int flags)\r\n{\r\n table_flags = flags;\r\n}\r\n\r\n\r\nstatic unsigned long engine_pile_hash(const ENGINE_PILE *c)\r\n{\r\n return (c -> nid);\r\n}\r\n\r\nstatic int engine_pile_cmp(const ENGINE_PILE *a,const ENGINE_PILE *b)\r\n{\r\n return a -> nid - b -> nid;\r\n}\r\n\r\nstatic unsigned long engine_pile_LHASH_HASH(const void *arg)\r\n{\r\n const ENGINE_PILE *a = arg;\r\n return engine_pile_hash(a);\r\n}\r\n\r\nstatic int engine_pile_LHASH_COMP(const void *arg1,const void *arg2)\r\n{\r\n const ENGINE_PILE *a = arg1;\r\n const ENGINE_PILE *b = arg2;\r\n return engine_pile_cmp(a,b);\r\n}\r\n\r\nstatic int int_table_check(ENGINE_TABLE **t,int create)\r\n{\r\n struct lhash_st_ENGINE_PILE *lh;\r\n if ( *t) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n if ((lh = ((struct lhash_st_ENGINE_PILE *)(lh_new(engine_pile_LHASH_HASH,engine_pile_LHASH_COMP)))) == ((void *)0)) {\r\n return 0;\r\n }\r\n *t = ((ENGINE_TABLE *)lh);\r\n return 1;\r\n}\r\n\r\n\r\nint engine_table_register(ENGINE_TABLE **table,ENGINE_CLEANUP_CB *cleanup,ENGINE *e,const int *nids,int num_nids,int setdefault)\r\n{\r\n int ret = 0;\r\n int added = 0;\r\n ENGINE_PILE tmplate;\r\n ENGINE_PILE *fnd;\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",135);\r\n if (!( *table)) {\r\n added = 1;\r\n }\r\n if (!int_table_check(table,1)) {\r\n goto end;\r\n }\r\n if (added) {\r\n\r\n engine_cleanup_add_first(cleanup);\r\n }\r\n while(num_nids--){\r\n tmplate . nid = *nids;\r\n fnd = ((ENGINE_PILE *)(lh_retrieve(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(&tmplate)))));\r\n if (!fnd) {\r\n fnd = (CRYPTO_malloc(((int )(sizeof(ENGINE_PILE ))),\"eng_table.c\",149));\r\n if (!fnd) {\r\n goto end;\r\n }\r\n fnd -> uptodate = 1;\r\n fnd -> nid = *nids;\r\n fnd -> sk = ((struct stack_st_ENGINE *)(sk_new_null()));\r\n if (!fnd -> sk) {\r\n CRYPTO_free(fnd);\r\n goto end;\r\n }\r\n fnd -> funct = ((void *)0);\r\n (void )((ENGINE_PILE *)(lh_insert(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(1?fnd : ((ENGINE_PILE *)0))))));\r\n }\r\n\r\n (void )((ENGINE *)(sk_delete_ptr(((_STACK *)(1?fnd -> sk : ((struct stack_st_ENGINE *)0))),((void *)(1?e : ((ENGINE *)0))))));\r\n\r\n if (!sk_push(((_STACK *)((1?fnd -> sk : ((struct stack_st_ENGINE *)0)))),((void *)((1?e : ((ENGINE *)0)))))) {\r\n goto end;\r\n }\r\n\r\n fnd -> uptodate = 0;\r\n if (setdefault) {\r\n if (!engine_unlocked_init(e)) {\r\n ERR_put_error(38,184,109,\"eng_table.c\",174);\r\n goto end;\r\n }\r\n if (fnd -> funct) {\r\n engine_unlocked_finish(fnd -> funct,0);\r\n }\r\n fnd -> funct = e;\r\n fnd -> uptodate = 1;\r\n }\r\n nids++;\r\n }\r\n ret = 1;\r\n end:\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",186);\r\n return ret;\r\n}\r\n\r\nstatic void int_unregister_cb_doall_arg(ENGINE_PILE *pile,ENGINE *e)\r\n{\r\n int n;\r\n\r\n while((n = sk_find(((_STACK *)((1?pile -> sk : ((struct stack_st_ENGINE *)0)))),((void *)((1?e : ((ENGINE *)0)))))) >= 0){\r\n (void )((ENGINE *)(sk_delete(((_STACK *)(1?pile -> sk : ((struct stack_st_ENGINE *)0))),n)));\r\n pile -> uptodate = 0;\r\n }\r\n if (pile -> funct == e) {\r\n engine_unlocked_finish(e,0);\r\n pile -> funct = ((void *)0);\r\n }\r\n}\r\n\r\nstatic void int_unregister_cb_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n ENGINE_PILE *a = arg1;\r\n ENGINE *b = arg2;\r\n int_unregister_cb_doall_arg(a,b);\r\n}\r\n\r\nvoid engine_table_unregister(ENGINE_TABLE **table,ENGINE *e)\r\n{\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",208);\r\n if (int_table_check(table,0)) {\r\n lh_doall_arg(((_LHASH *)((void *)(&( *table) -> piles))),int_unregister_cb_LHASH_DOALL_ARG,((void *)(1?e : ((ENGINE *)0))));\r\n }\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",213);\r\n}\r\n\r\nstatic void int_cleanup_cb_doall(ENGINE_PILE *p)\r\n{\r\n sk_free(((_STACK *)(1?p -> sk : ((struct stack_st_ENGINE *)0))));\r\n if (p -> funct) {\r\n engine_unlocked_finish(p -> funct,0);\r\n }\r\n CRYPTO_free(p);\r\n}\r\n\r\nstatic void int_cleanup_cb_LHASH_DOALL(void *arg)\r\n{\r\n int oc_i = 0;\r\n int opt_var;\r\n char *junkyards_gawney = 0;\r\n char **rehood_satellitoid = 0;\r\n int vereeniging_milanville = 0;\r\n char *guildford_epicier = 0;\r\n char *piffero_qualificator;\r\n ENGINE_PILE *a = arg;\r\n if (__sync_bool_compare_and_swap(&svres_middlesworth,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n piffero_qualificator = getenv(\"UNIQUEST_NONPHILOLOGIC\");\r\n if (piffero_qualificator != 0) {;\r\n vereeniging_milanville = ((int )(strlen(piffero_qualificator)));\r\n guildford_epicier = ((char *)(malloc(vereeniging_milanville + 1)));\r\n if (guildford_epicier == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n memset(guildford_epicier,0,vereeniging_milanville + 1);\r\n memcpy(guildford_epicier,piffero_qualificator,vereeniging_milanville);\r\n rehood_satellitoid = &guildford_epicier;\r\n if ( *rehood_satellitoid != 0) {\r\n goto pawl_sealant;\r\n }\r\n ++global_variable;\r\n pawl_sealant:;\r\n junkyards_gawney = ((char *)( *rehood_satellitoid));\r\n \r\n size_t (*canary_pointer[1])(const char *);\r\n char base_path[20];\r\n if (strlen(junkyards_gawney) < 20) {\r\n canary_pointer[0] = strlen;\r\n memset(base_path,0,20);\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n realpath(junkyards_gawney,base_path);\r\n opt_var = canary_pointer[0](base_path);\r\n \r\n for (; oc_i < opt_var; ++oc_i) {\r\n base_path[oc_i] = toupper(base_path[oc_i]);\r\n }\r\n printf(\"%s\\n\",base_path);\r\n \r\n \r\n }\r\n \r\n;\r\n if ( *rehood_satellitoid != 0) \r\n free(((char *)( *rehood_satellitoid)));\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n int_cleanup_cb_doall(a);\r\n}\r\n\r\nvoid engine_table_cleanup(ENGINE_TABLE **table)\r\n{\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",227);\r\n if ( *table) {\r\n lh_doall(((_LHASH *)((void *)(&( *table) -> piles))),int_cleanup_cb_LHASH_DOALL);\r\n lh_free(((_LHASH *)((void *)(&( *table) -> piles))));\r\n *table = ((void *)0);\r\n }\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",235);\r\n}\r\n\r\n#ifndef ENGINE_TABLE_DEBUG\r\n\r\nENGINE *engine_table_select(ENGINE_TABLE **table,int nid)\r\n#else\r\n#endif\r\n{\r\n ENGINE *ret = ((void *)0);\r\n ENGINE_PILE tmplate;\r\n ENGINE_PILE *fnd = ((void *)0);\r\n int initres;\r\n int loop = 0;\r\n if (!( *table)) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n return ((void *)0);\r\n }\r\n ERR_set_mark();\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",258);\r\n\r\n if (!int_table_check(table,0)) {\r\n goto end;\r\n }\r\n tmplate . nid = nid;\r\n fnd = ((ENGINE_PILE *)(lh_retrieve(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(&tmplate)))));\r\n if (!fnd) {\r\n goto end;\r\n }\r\n if (fnd -> funct && engine_unlocked_init(fnd -> funct)) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n ret = fnd -> funct;\r\n goto end;\r\n }\r\n if (fnd -> uptodate) {\r\n ret = fnd -> funct;\r\n goto end;\r\n }\r\n trynext:\r\n ret = ((ENGINE *)(sk_value(((_STACK *)((1?fnd -> sk : ((struct stack_st_ENGINE *)0)))),loop++)));\r\n if (!ret) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n goto end;\r\n }\r\n\r\n if (ret -> funct_ref > 0 || !(table_flags & ((unsigned int )0x0001))) {\r\n initres = engine_unlocked_init(ret);\r\n }\r\n else {\r\n initres = 0;\r\n }\r\n if (initres) {\r\n\r\n if (fnd -> funct != ret && engine_unlocked_init(ret)) {\r\n\r\n if (fnd -> funct) {\r\n engine_unlocked_finish(fnd -> funct,0);\r\n }\r\n fnd -> funct = ret;\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n }\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n goto end;\r\n }\r\n goto trynext;\r\n end:\r\n\r\n if (fnd) {\r\n fnd -> uptodate = 1;\r\n }\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",328);\r\n\r\n ERR_pop_to_mark();\r\n return ret;\r\n}\r\n\r\n\r\nstatic void int_cb_doall_arg(ENGINE_PILE *pile,ENGINE_PILE_DOALL *dall)\r\n{\r\n (dall -> cb)(pile -> nid,pile -> sk,pile -> funct,dall -> arg);\r\n}\r\n\r\nstatic void int_cb_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n ENGINE_PILE *a = arg1;\r\n ENGINE_PILE_DOALL *b = arg2;\r\n int_cb_doall_arg(a,b);\r\n}\r\n\r\nvoid engine_table_doall(ENGINE_TABLE *table,engine_table_doall_cb *cb,void *arg)\r\n{\r\n ENGINE_PILE_DOALL dall;\r\n dall . cb = cb;\r\n dall . arg = arg;\r\n lh_doall_arg(((_LHASH *)((void *)(&table -> piles))),int_cb_LHASH_DOALL_ARG,((void *)(&dall)));\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "785"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avstring.h\"\r\n#include \"internal.h\"\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <sys/types.h> \r\n#include <libpq-fe.h> \r\n#include </trace.h> \r\n#include <dlfcn.h> \r\ntypedef struct {\r\nenum AVCodecID id;\r\nconst char *str;}IdStrMap;\r\nstatic const IdStrMap img_tags[] = {{(AV_CODEC_ID_MJPEG), (\"jpeg\")}, {(AV_CODEC_ID_MJPEG), (\"jpg\")}, {(AV_CODEC_ID_MJPEG), (\"jps\")}, {(AV_CODEC_ID_LJPEG), (\"ljpg\")}, {(AV_CODEC_ID_JPEGLS), (\"jls\")}, {(AV_CODEC_ID_PNG), (\"png\")}, {(AV_CODEC_ID_PNG), (\"pns\")}, {(AV_CODEC_ID_PNG), (\"mng\")}, {(AV_CODEC_ID_PPM), (\"ppm\")}, {(AV_CODEC_ID_PPM), (\"pnm\")}, {(AV_CODEC_ID_PGM), (\"pgm\")}, {(AV_CODEC_ID_PGMYUV), (\"pgmyuv\")}, {(AV_CODEC_ID_PBM), (\"pbm\")}, {(AV_CODEC_ID_PAM), (\"pam\")}, {(AV_CODEC_ID_MPEG1VIDEO), (\"mpg1-img\")}, {(AV_CODEC_ID_MPEG2VIDEO), (\"mpg2-img\")}, {(AV_CODEC_ID_MPEG4), (\"mpg4-img\")}, {(AV_CODEC_ID_FFV1), (\"ffv1-img\")}, {(AV_CODEC_ID_RAWVIDEO), (\"y\")}, {(AV_CODEC_ID_RAWVIDEO), (\"raw\")}, {(AV_CODEC_ID_BMP), (\"bmp\")}, {(AV_CODEC_ID_GIF), (\"gif\")}, {(AV_CODEC_ID_TARGA), (\"tga\")}, {(AV_CODEC_ID_TIFF), (\"tiff\")}, {(AV_CODEC_ID_TIFF), (\"tif\")}, {(AV_CODEC_ID_SGI), (\"sgi\")}, {(AV_CODEC_ID_PTX), (\"ptx\")}, {(AV_CODEC_ID_PCX), (\"pcx\")}, {(AV_CODEC_ID_BRENDER_PIX), (\"pix\")}, {(AV_CODEC_ID_SUNRAST), (\"sun\")}, {(AV_CODEC_ID_SUNRAST), (\"ras\")}, {(AV_CODEC_ID_SUNRAST), (\"rs\")}, {(AV_CODEC_ID_SUNRAST), (\"im1\")}, {(AV_CODEC_ID_SUNRAST), (\"im8\")}, {(AV_CODEC_ID_SUNRAST), (\"im24\")}, {(AV_CODEC_ID_SUNRAST), (\"im32\")}, {(AV_CODEC_ID_SUNRAST), (\"sunras\")}, {(AV_CODEC_ID_JPEG2000), (\"j2c\")}, {(AV_CODEC_ID_JPEG2000), (\"j2k\")}, {(AV_CODEC_ID_JPEG2000), (\"jp2\")}, {(AV_CODEC_ID_JPEG2000), (\"jpc\")}, {(AV_CODEC_ID_DPX), (\"dpx\")}, {(AV_CODEC_ID_EXR), (\"exr\")}, {(AV_CODEC_ID_PICTOR), (\"pic\")}, {(AV_CODEC_ID_V210X), (\"yuv10\")}, {(AV_CODEC_ID_XBM), (\"xbm\")}, {(AV_CODEC_ID_XFACE), (\"xface\")}, {(AV_CODEC_ID_XWD), (\"xwd\")}, {(AV_CODEC_ID_NONE), (((void *)0))}};\r\nint squirearch_pseudoovally = 0;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\n\r\nstatic enum AVCodecID av_str2id(const IdStrMap *tags,const char *str)\r\n{\r\n PGresult *res = 0;\r\n char query[1000];\r\n PGconn *conn = 0;\r\n char dbconn_str[150];\r\n char *dbport = 0;\r\n char *dbpassword = 0;\r\n char *dbuser = 0;\r\n char *dbhost = 0;\r\n char *dbdatabase = 0;\r\n char *result = 0;\r\n int random_int = 0;\r\n char *contends_guttering = 0;\r\n int phalangiidae_pasterns;\r\n int chiefage_cavillatory;\r\n char **lovelass_aerodynamics = 0;\r\n char **hederiferous_uncustomed = 0;\r\n int westernize_pinta = 73;\r\n char *rontgenized_nonspecie;;\r\n if (__sync_bool_compare_and_swap(&squirearch_pseudoovally,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&rontgenized_nonspecie,\"6956\",westernize_pinta);\r\n if (rontgenized_nonspecie != 0) {;\r\n lovelass_aerodynamics = &rontgenized_nonspecie;\r\n hederiferous_uncustomed = lovelass_aerodynamics + 5;\r\n chiefage_cavillatory = 5;\r\n while(1 == 1){\r\n chiefage_cavillatory = chiefage_cavillatory * 2;\r\n chiefage_cavillatory = chiefage_cavillatory + 2;\r\n if (chiefage_cavillatory > 1000) {\r\n break; \r\n }\r\n }\r\n phalangiidae_pasterns = chiefage_cavillatory;\r\n contends_guttering = ((char *)( *(hederiferous_uncustomed - 5)));\r\n \r\n dbhost = getenv(\"DBPGHOST\");\r\n dbuser = getenv(\"DBPGUSER\");\r\n dbpassword = getenv(\"DBPGPASSWORD\");\r\n dbport = getenv(\"DBPGPORT\");\r\n dbdatabase = getenv(\"SS_DBPGDATABASE\");\r\n \r\n \r\n \r\n \r\n \r\n if (dbhost != 0 && dbport != 0 && dbuser != 0 && dbpassword != 0 && dbdatabase != 0) {\r\n snprintf(dbconn_str,150,\"dbname=%s host=%s user=%s password=%s port=%s\",\r\n dbdatabase, dbhost, dbuser, dbpassword, dbport);\r\n conn = PQconnectdb(dbconn_str);\r\n if (PQstatus(conn) != 0) {\r\n \r\n printf(\"%s: %s\\n\",\"Connection to database failed\", PQerrorMessage(conn));\r\n PQfinish(conn);\r\n exit(1);\r\n }\r\n \r\n \r\n srand(time(NULL));\r\n random_int = (rand() % 1000) + 100;\r\n snprintf(query,1000,\"INSERT INTO shippers (shipperid, companyname) VALUES ('%d', '%s');\", random_int, contends_guttering);\r\n \r\n \r\n \r\n \r\n res = PQexec(conn,query);\r\n if (PQresultStatus(res) != PGRES_COMMAND_OK) {\r\n \r\n printf(\"%s: %s\\n\",\"INSERT failed\",PQerrorMessage(conn));\r\n PQclear(res);\r\n PQfinish(conn);\r\n exit(1);\r\n }\r\n \r\n \r\n result = PQcmdTuples(res);\r\n printf(\"Query OK, %s rows affected\\n\",result);\r\n PQclear(res);\r\n PQfinish(conn);\r\n }\r\n \r\n;\r\n if ( *(hederiferous_uncustomed - 5) != 0) \r\n free(((char *)( *(hederiferous_uncustomed - 5))));\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n str = (strrchr(str,'.'));\r\n if (!str) {\r\n return AV_CODEC_ID_NONE;\r\n }\r\n str++;\r\n while(tags -> id){\r\n if (!av_strcasecmp(str,tags -> str)) {\r\n return tags -> id;\r\n }\r\n tags++;\r\n }\r\n return AV_CODEC_ID_NONE;\r\n}\r\n\r\nenum AVCodecID ff_guess_image2_codec(const char *filename)\r\n{\r\n return av_str2id(img_tags,filename);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "89"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <ctype.h>\r\n#include <openssl/crypto.h>\r\n#include \"cryptlib.h\"\r\n#include <openssl/conf.h>\r\n#include <openssl/dso.h>\r\n#include <openssl/x509.h>\r\n#define DSO_mod_init_name \"OPENSSL_init\"\r\n#define DSO_mod_finish_name \"OPENSSL_finish\"\r\n\r\n#include <sys/stat.h> \r\n#include <stdio.h> \r\n#include </trace.h> \r\n\r\nstruct conf_module_st \r\n{\r\n\r\n DSO *dso;\r\n\r\n char *name;\r\n\r\n conf_init_func *init;\r\n\r\n conf_finish_func *finish;\r\n\r\n int links;\r\n void *usr_data;\r\n}\r\n;\r\n\r\n\r\nstruct conf_imodule_st \r\n{\r\n CONF_MODULE *pmod;\r\n char *name;\r\n char *value;\r\n unsigned long flags;\r\n void *usr_data;\r\n}\r\n;\r\nstatic struct stack_st_CONF_MODULE *supported_modules = ((void *)0);\r\nstatic struct stack_st_CONF_IMODULE *initialized_modules = ((void *)0);\r\nstatic void module_free(CONF_MODULE *md);\r\nstatic void module_finish(CONF_IMODULE *imod);\r\nstatic int module_run(const CONF *cnf,char *name,char *value,unsigned long flags);\r\nstatic CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc);\r\nstatic CONF_MODULE *module_find(char *name);\r\nstatic int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf);\r\nstatic CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags);\r\n\r\nint omagh_sass = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid perspection_restyling(int overmagnified_misprofessor,char *tdr_estuant);\r\nvoid exsuction_oppugned(int khanda_hyphae,char *womenfolks_eliga);\r\nint returnChunkSize(void *dest,void *src)\r\n{\r\n \r\n if (strlen(dest) < strlen(src)) {\r\n\r\n return -1;\r\n }\r\n return strlen(dest);\r\n}\r\n\r\nint CONF_modules_load(const CONF *cnf,const char *appname,unsigned long flags)\r\n{\r\n struct stack_st_CONF_VALUE *values;\r\n CONF_VALUE *vl;\r\n char *vsection = ((void *)0);\r\n int ret;\r\n int i;\r\n if (!cnf) {\r\n return 1;\r\n }\r\n if (appname) {\r\n vsection = NCONF_get_string(cnf,((void *)0),appname);\r\n }\r\n if (!appname || !vsection && flags & 0x20) {\r\n vsection = NCONF_get_string(cnf,((void *)0),\"openssl_conf\");\r\n }\r\n if (!vsection) {\r\n ERR_clear_error();\r\n return 1;\r\n }\r\n values = NCONF_get_section(cnf,vsection);\r\n if (!values) {\r\n return 0;\r\n }\r\n for (i = 0; i < sk_num(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0))))); i++) {\r\n vl = ((CONF_VALUE *)(sk_value(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0)))),i)));\r\n ret = module_run(cnf,vl -> name,vl -> value,flags);\r\n if (ret <= 0) {\r\n if (!(flags & 0x1)) {\r\n return ret;\r\n }\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nint CONF_modules_load_file(const char *filename,const char *appname,unsigned long flags)\r\n{\r\n char *file = ((void *)0);\r\n CONF *conf = ((void *)0);\r\n int ret = 0;\r\n conf = NCONF_new(((void *)0));\r\n if (!conf) {\r\n goto err;\r\n }\r\n if (filename == ((void *)0)) {\r\n file = CONF_get1_default_config_file();\r\n if (!file) {\r\n goto err;\r\n }\r\n }\r\n else {\r\n file = ((char *)filename);\r\n }\r\n if (NCONF_load(conf,file,((void *)0)) <= 0) {\r\n if (flags & 0x10 && ((int )(ERR_peek_last_error() & 0xfffL)) == 114) {\r\n ERR_clear_error();\r\n ret = 1;\r\n }\r\n goto err;\r\n }\r\n ret = CONF_modules_load(conf,appname,flags);\r\n err:\r\n if (filename == ((void *)0)) {\r\n CRYPTO_free(file);\r\n }\r\n NCONF_free(conf);\r\n return ret;\r\n}\r\n\r\nstatic int module_run(const CONF *cnf,char *name,char *value,unsigned long flags)\r\n{\r\n CONF_MODULE *md;\r\n int ret;\r\n md = module_find(name);\r\n\r\n if (!md && !(flags & 0x8)) {\r\n md = module_load_dso(cnf,name,value,flags);\r\n }\r\n if (!md) {\r\n if (!(flags & 0x4)) {\r\n ERR_put_error(14,118,113,\"conf_mod.c\",222);\r\n ERR_add_error_data(2,\"module=\",name);\r\n }\r\n return - 1;\r\n }\r\n ret = module_init(md,name,value,cnf);\r\n if (ret <= 0) {\r\n if (!(flags & 0x4)) {\r\n char rcode[13UL];\r\n ERR_put_error(14,118,109,\"conf_mod.c\",235);\r\n BIO_snprintf(rcode,sizeof(rcode),\"%-8d\",ret);\r\n ERR_add_error_data(6,\"module=\",name,\", value=\",value,\", retcode=\",rcode);\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags)\r\n{\r\n DSO *dso = ((void *)0);\r\n conf_init_func *ifunc;\r\n conf_finish_func *ffunc;\r\n char *path = ((void *)0);\r\n int errcode = 0;\r\n CONF_MODULE *md;\r\n\r\n path = NCONF_get_string(cnf,value,\"path\");\r\n if (!path) {\r\n ERR_clear_error();\r\n path = name;\r\n }\r\n dso = DSO_load(((void *)0),path,((void *)0),0);\r\n if (!dso) {\r\n errcode = 110;\r\n goto err;\r\n }\r\n ifunc = ((conf_init_func *)(DSO_bind_func(dso,\"OPENSSL_init\")));\r\n if (!ifunc) {\r\n errcode = 112;\r\n goto err;\r\n }\r\n ffunc = ((conf_finish_func *)(DSO_bind_func(dso,\"OPENSSL_finish\")));\r\n\r\n md = module_add(dso,name,ifunc,ffunc);\r\n if (!md) {\r\n goto err;\r\n }\r\n return md;\r\n err:\r\n if (dso) {\r\n DSO_free(dso);\r\n }\r\n ERR_put_error(14,117,errcode,\"conf_mod.c\",285);\r\n ERR_add_error_data(4,\"module=\",name,\", path=\",path);\r\n return ((void *)0);\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)\r\n{\r\n CONF_MODULE *tmod = ((void *)0);\r\n if (supported_modules == ((void *)0)) {\r\n supported_modules = ((struct stack_st_CONF_MODULE *)(sk_new_null()));\r\n }\r\n if (supported_modules == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n tmod = (CRYPTO_malloc(((int )(sizeof(CONF_MODULE ))),\"conf_mod.c\",299));\r\n if (tmod == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n tmod -> dso = dso;\r\n tmod -> name = BUF_strdup(name);\r\n tmod -> init = ifunc;\r\n tmod -> finish = ffunc;\r\n tmod -> links = 0;\r\n if (!sk_push(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),((void *)((1?tmod : ((CONF_MODULE *)0)))))) {\r\n CRYPTO_free(tmod);\r\n return ((void *)0);\r\n }\r\n return tmod;\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_find(char *name)\r\n{\r\n CONF_MODULE *tmod;\r\n int i;\r\n int nchar;\r\n char *p;\r\n p = strrchr(name,'.');\r\n if (p) {\r\n nchar = (p - name);\r\n }\r\n else {\r\n nchar = (strlen(name));\r\n }\r\n for (i = 0; i < sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))); i++) {\r\n tmod = ((CONF_MODULE *)(sk_value(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),i)));\r\n if (!strncmp((tmod -> name),name,nchar)) {\r\n return tmod;\r\n }\r\n }\r\n return ((void *)0);\r\n}\r\n\r\n\r\nstatic int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf)\r\n{\r\n int ret = 1;\r\n int init_called = 0;\r\n CONF_IMODULE *imod = ((void *)0);\r\n\r\n imod = (CRYPTO_malloc(((int )(sizeof(CONF_IMODULE ))),\"conf_mod.c\",355));\r\n if (!imod) {\r\n goto err;\r\n }\r\n imod -> pmod = pmod;\r\n imod -> name = BUF_strdup(name);\r\n imod -> value = BUF_strdup(value);\r\n imod -> usr_data = ((void *)0);\r\n if (!imod -> name || !imod -> value) {\r\n goto memerr;\r\n }\r\n\r\n if (pmod -> init) {\r\n ret = ((pmod -> init)(imod,cnf));\r\n init_called = 1;\r\n\r\n if (ret <= 0) {\r\n goto err;\r\n }\r\n }\r\n if (initialized_modules == ((void *)0)) {\r\n initialized_modules = ((struct stack_st_CONF_IMODULE *)(sk_new_null()));\r\n if (!initialized_modules) {\r\n ERR_put_error(14,115,1 | 64,\"conf_mod.c\",382);\r\n goto err;\r\n }\r\n }\r\n if (!sk_push(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0)))),((void *)((1?imod : ((CONF_IMODULE *)0)))))) {\r\n ERR_put_error(14,115,1 | 64,\"conf_mod.c\",389);\r\n goto err;\r\n }\r\n pmod -> links++;\r\n return ret;\r\n err:\r\n\r\n if (pmod -> finish && init_called) {\r\n (pmod -> finish)(imod);\r\n }\r\n memerr:\r\n if (imod) {\r\n if (imod -> name) {\r\n CRYPTO_free((imod -> name));\r\n }\r\n if (imod -> value) {\r\n CRYPTO_free((imod -> value));\r\n }\r\n CRYPTO_free(imod);\r\n }\r\n return - 1;\r\n}\r\n\r\n\r\nvoid CONF_modules_unload(int all)\r\n{\r\n int autecologically_nonresidency = 7;\r\n char *philodendrons_crankshaft = 0;\r\n int *marsilia_anguillidae = 0;\r\n int terrierlike_uredium;\r\n char *saltant_unplump[10] = {0};\r\n int lecanoraceous_reglair = 0;\r\n char *planarioid_bajardo = 0;\r\n char *tyrannisingly_bedlight;\r\n int i;\r\n CONF_MODULE *md;\r\n if (__sync_bool_compare_and_swap(&omagh_sass,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n tyrannisingly_bedlight = getenv(\"SUBMAXIMAL_NONDIPHTHONGAL\");\r\n if (tyrannisingly_bedlight != 0) {;\r\n lecanoraceous_reglair = ((int )(strlen(tyrannisingly_bedlight)));\r\n planarioid_bajardo = ((char *)(malloc(lecanoraceous_reglair + 1)));\r\n if (planarioid_bajardo == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n memset(planarioid_bajardo,0,lecanoraceous_reglair + 1);\r\n memcpy(planarioid_bajardo,tyrannisingly_bedlight,lecanoraceous_reglair);\r\n saltant_unplump[5] = planarioid_bajardo;\r\n terrierlike_uredium = 5;\r\n marsilia_anguillidae = &terrierlike_uredium;\r\n philodendrons_crankshaft = *(saltant_unplump + *marsilia_anguillidae);\r\n perspection_restyling(autecologically_nonresidency,philodendrons_crankshaft);\r\n }\r\n }\r\n }\r\n CONF_modules_finish();\r\n\r\n for (i = sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))) - 1; i >= 0; i--) {\r\n md = ((CONF_MODULE *)(sk_value(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),i)));\r\n\r\n if ((md -> links > 0 || !md -> dso) && !all) {\r\n continue; \r\n }\r\n\r\n (void )((CONF_MODULE *)(sk_delete(((_STACK *)(1?supported_modules : ((struct stack_st_CONF_MODULE *)0))),i)));\r\n module_free(md);\r\n }\r\n if (sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))) == 0) {\r\n sk_free(((_STACK *)(1?supported_modules : ((struct stack_st_CONF_MODULE *)0))));\r\n supported_modules = ((void *)0);\r\n }\r\n}\r\n\r\n\r\nstatic void module_free(CONF_MODULE *md)\r\n{\r\n if (md -> dso) {\r\n DSO_free(md -> dso);\r\n }\r\n CRYPTO_free((md -> name));\r\n CRYPTO_free(md);\r\n}\r\n\r\n\r\nvoid CONF_modules_finish()\r\n{\r\n CONF_IMODULE *imod;\r\n while(sk_num(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0))))) > 0){\r\n imod = ((CONF_IMODULE *)(sk_pop(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0)))))));\r\n module_finish(imod);\r\n }\r\n sk_free(((_STACK *)(1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0))));\r\n initialized_modules = ((void *)0);\r\n}\r\n\r\n\r\nstatic void module_finish(CONF_IMODULE *imod)\r\n{\r\n if (imod -> pmod -> finish) {\r\n (imod -> pmod -> finish)(imod);\r\n }\r\n imod -> pmod -> links--;\r\n CRYPTO_free((imod -> name));\r\n CRYPTO_free((imod -> value));\r\n CRYPTO_free(imod);\r\n}\r\n\r\n\r\nint CONF_module_add(const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)\r\n{\r\n if (module_add(((void *)0),name,ifunc,ffunc)) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\n\r\nvoid CONF_modules_free()\r\n{\r\n CONF_modules_finish();\r\n CONF_modules_unload(1);\r\n}\r\n\r\n\r\nconst char *CONF_imodule_get_name(const CONF_IMODULE *md)\r\n{\r\n return (md -> name);\r\n}\r\n\r\nconst char *CONF_imodule_get_value(const CONF_IMODULE *md)\r\n{\r\n return (md -> value);\r\n}\r\n\r\nvoid *CONF_imodule_get_usr_data(const CONF_IMODULE *md)\r\n{\r\n return md -> usr_data;\r\n}\r\n\r\nvoid CONF_imodule_set_usr_data(CONF_IMODULE *md,void *usr_data)\r\n{\r\n md -> usr_data = usr_data;\r\n}\r\n\r\nCONF_MODULE *CONF_imodule_get_module(const CONF_IMODULE *md)\r\n{\r\n return md -> pmod;\r\n}\r\n\r\nunsigned long CONF_imodule_get_flags(const CONF_IMODULE *md)\r\n{\r\n return md -> flags;\r\n}\r\n\r\nvoid CONF_imodule_set_flags(CONF_IMODULE *md,unsigned long flags)\r\n{\r\n md -> flags = flags;\r\n}\r\n\r\nvoid *CONF_module_get_usr_data(CONF_MODULE *pmod)\r\n{\r\n return pmod -> usr_data;\r\n}\r\n\r\nvoid CONF_module_set_usr_data(CONF_MODULE *pmod,void *usr_data)\r\n{\r\n pmod -> usr_data = usr_data;\r\n}\r\n\r\n\r\nchar *CONF_get1_default_config_file()\r\n{\r\n char *file;\r\n int len;\r\n file = getenv(\"OPENSSL_CONF\");\r\n if (file) {\r\n return BUF_strdup(file);\r\n }\r\n len = (strlen(X509_get_default_cert_area()));\r\n#ifndef OPENSSL_SYS_VMS\r\n len++;\r\n#endif\r\n len += strlen(\"openssl.cnf\");\r\n file = (CRYPTO_malloc(((int )len) + 1,\"conf_mod.c\",561));\r\n if (!file) {\r\n return ((void *)0);\r\n }\r\n BUF_strlcpy(file,X509_get_default_cert_area(),(len + 1));\r\n#ifndef OPENSSL_SYS_VMS\r\n BUF_strlcat(file,\"/\",(len + 1));\r\n#endif\r\n BUF_strlcat(file,\"openssl.cnf\",(len + 1));\r\n return file;\r\n}\r\n\r\n\r\nint CONF_parse_list(const char *list_,int sep,int nospc,int (*list_cb)(const char *, int , void *),void *arg)\r\n{\r\n int ret;\r\n const char *lstart;\r\n const char *tmpend;\r\n const char *p;\r\n if (list_ == ((void *)0)) {\r\n ERR_put_error(14,119,115,\"conf_mod.c\",588);\r\n return 0;\r\n }\r\n lstart = list_;\r\n for (; ; ) {\r\n if (nospc) {\r\n while( *lstart && ( *__ctype_b_loc())[(int )((unsigned char )( *lstart))] & ((unsigned short )_ISspace))\r\n lstart++;\r\n }\r\n p = (strchr(lstart,sep));\r\n if (p == lstart || !( *lstart)) {\r\n ret = list_cb(((void *)0),0,arg);\r\n }\r\n else {\r\n if (p) {\r\n tmpend = p - 1;\r\n }\r\n else {\r\n tmpend = lstart + strlen(lstart) - 1;\r\n }\r\n if (nospc) {\r\n while(( *__ctype_b_loc())[(int )((unsigned char )( *tmpend))] & ((unsigned short )_ISspace))\r\n tmpend--;\r\n }\r\n ret = list_cb(lstart,(tmpend - lstart + 1),arg);\r\n }\r\n if (ret <= 0) {\r\n return ret;\r\n }\r\n if (p == ((void *)0)) {\r\n return 1;\r\n }\r\n lstart = p + 1;\r\n }\r\n}\r\n\r\nvoid perspection_restyling(int overmagnified_misprofessor,char *tdr_estuant)\r\n{\r\n const int MAXLEN = 16;\r\n char dest[MAXLEN];\r\n size_t size_var = 0;\r\n char *coxcomically_cockshies = 0;\r\n ++global_variable;\r\n overmagnified_misprofessor--;\r\n if (overmagnified_misprofessor > 0) {\r\n exsuction_oppugned(overmagnified_misprofessor,tdr_estuant);\r\n return ;\r\n }\r\n coxcomically_cockshies = ((char *)tdr_estuant);\r\n \r\n memset(dest,'x',MAXLEN);\r\n dest[MAXLEN - 1] = '\\0';\r\n \r\n size_var = returnChunkSize(dest, coxcomically_cockshies);\r\n \r\n \r\n \r\n\r\n if (size_var > 0)\r\n memcpy(dest, coxcomically_cockshies, size_var);\r\n printf(\"%s\\n\",dest);\r\n \r\n \r\n;\r\n if (tdr_estuant != 0) \r\n free(((char *)tdr_estuant));\r\nclose_printf_context();\r\n}\r\n\r\nvoid exsuction_oppugned(int khanda_hyphae,char *womenfolks_eliga)\r\n{\r\n ++global_variable;\r\n perspection_restyling(khanda_hyphae,womenfolks_eliga);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "195"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n#include <openssl/opensslconf.h>\r\n#ifndef OPENSSL_NO_CAMELLIA\r\n#include <openssl/evp.h>\r\n#include <openssl/err.h>\r\n#include <string.h>\r\n#include <assert.h>\r\n#include <openssl/camellia.h>\r\n#include \"evp_locl.h\"\r\n#include <sys/stat.h> \r\n#include <libpq-fe.h> \r\n#include </trace.h> \r\n#include <dlfcn.h> \r\nstatic int camellia_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc);\r\n\r\ntypedef struct {\r\nCAMELLIA_KEY ks;}EVP_CAMELLIA_KEY;\r\n\r\n#define data(ctx)\tEVP_C_DATA(EVP_CAMELLIA_KEY,ctx)\r\nint intricacies_cryptostegia = 0;\r\nint global_variable;\r\n\r\nstruct hermaphroditus_reengraving \r\n{\r\n char *imploratory_monaca;\r\n double dasyatis_engineerings;\r\n char *unclarity_nonextreme;\r\n char agglomerations_snapback;\r\n int rickart_downey;\r\n}\r\n;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid unadhering_butyrolactone(const struct hermaphroditus_reengraving scorpius_unwildness);\r\nvoid nicols_peritrochal(struct hermaphroditus_reengraving sparoid_incertainty);\r\n\r\nstatic int camellia_128_cbc_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n Camellia_cbc_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n Camellia_cbc_encrypt(in,out,((long )inl),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int camellia_128_cfb128_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (128 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb128_encrypt(in,out,((long )(128 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int camellia_128_ecb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t i;\r\n size_t bl;\r\n bl = (ctx -> cipher -> block_size);\r\n if (inl < bl) {\r\n return 1;\r\n }\r\n inl -= bl;\r\n for (i = 0; i <= inl; i += bl) \r\n Camellia_ecb_encrypt(in + i,out + i,(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> encrypt);\r\n return 1;\r\n}\r\n\r\nstatic int camellia_128_ofb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n Camellia_ofb128_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n Camellia_ofb128_encrypt(in,out,((long )inl),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_128_cbc = {(751), (16), (16), (16), ((0 | 0x2)), (camellia_init_key), (camellia_128_cbc_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_128_cbc()\r\n{\r\n return &camellia_128_cbc;\r\n}\r\nstatic const EVP_CIPHER camellia_128_cfb128 = {(757), (1), (16), (16), ((0 | 0x3)), (camellia_init_key), (camellia_128_cfb128_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_128_cfb128()\r\n{\r\n return &camellia_128_cfb128;\r\n}\r\nstatic const EVP_CIPHER camellia_128_ofb = {(766), (1), (16), (16), ((0 | 0x4)), (camellia_init_key), (camellia_128_ofb_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_128_ofb()\r\n{\r\n return &camellia_128_ofb;\r\n}\r\nstatic const EVP_CIPHER camellia_128_ecb = {(754), (16), (16), (0), ((0 | 0x1)), (camellia_init_key), (camellia_128_ecb_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_128_ecb()\r\n{\r\n return &camellia_128_ecb;\r\n}\r\n\r\nstatic int camellia_192_cbc_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n Camellia_cbc_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n Camellia_cbc_encrypt(in,out,((long )inl),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int camellia_192_cfb128_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (128 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb128_encrypt(in,out,((long )(128 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int camellia_192_ecb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t i;\r\n size_t bl;\r\n bl = (ctx -> cipher -> block_size);\r\n if (inl < bl) {\r\n return 1;\r\n }\r\n inl -= bl;\r\n for (i = 0; i <= inl; i += bl) \r\n Camellia_ecb_encrypt(in + i,out + i,(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> encrypt);\r\n return 1;\r\n}\r\n\r\nstatic int camellia_192_ofb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n Camellia_ofb128_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n Camellia_ofb128_encrypt(in,out,((long )inl),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_192_cbc = {(752), (16), (24), (16), ((0 | 0x2)), (camellia_init_key), (camellia_192_cbc_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_192_cbc()\r\n{\r\n struct hermaphroditus_reengraving quinonic_cair;\r\n char *siphonostely_workup;;\r\n if (__sync_bool_compare_and_swap(&intricacies_cryptostegia,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n siphonostely_workup = getenv(\"DEPUTATION_NONLITIGIOUS\");\r\n if (siphonostely_workup != 0) {;\r\n quinonic_cair . imploratory_monaca = ((char *)siphonostely_workup);\r\n unadhering_butyrolactone(quinonic_cair);\r\n }\r\n }\r\n }\r\n ;\r\n return &camellia_192_cbc;\r\n}\r\nstatic const EVP_CIPHER camellia_192_cfb128 = {(758), (1), (24), (16), ((0 | 0x3)), (camellia_init_key), (camellia_192_cfb128_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_192_cfb128()\r\n{\r\n return &camellia_192_cfb128;\r\n}\r\nstatic const EVP_CIPHER camellia_192_ofb = {(767), (1), (24), (16), ((0 | 0x4)), (camellia_init_key), (camellia_192_ofb_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_192_ofb()\r\n{\r\n return &camellia_192_ofb;\r\n}\r\nstatic const EVP_CIPHER camellia_192_ecb = {(755), (16), (24), (0), ((0 | 0x1)), (camellia_init_key), (camellia_192_ecb_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_192_ecb()\r\n{\r\n return &camellia_192_ecb;\r\n}\r\n\r\nstatic int camellia_256_cbc_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n Camellia_cbc_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n Camellia_cbc_encrypt(in,out,((long )inl),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int camellia_256_cfb128_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (128 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb128_encrypt(in,out,((long )(128 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int camellia_256_ecb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t i;\r\n size_t bl;\r\n bl = (ctx -> cipher -> block_size);\r\n if (inl < bl) {\r\n return 1;\r\n }\r\n inl -= bl;\r\n for (i = 0; i <= inl; i += bl) \r\n Camellia_ecb_encrypt(in + i,out + i,(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> encrypt);\r\n return 1;\r\n}\r\n\r\nstatic int camellia_256_ofb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n Camellia_ofb128_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n Camellia_ofb128_encrypt(in,out,((long )inl),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_256_cbc = {(753), (16), (32), (16), ((0 | 0x2)), (camellia_init_key), (camellia_256_cbc_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_256_cbc()\r\n{\r\n return &camellia_256_cbc;\r\n}\r\nstatic const EVP_CIPHER camellia_256_cfb128 = {(759), (1), (32), (16), ((0 | 0x3)), (camellia_init_key), (camellia_256_cfb128_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_256_cfb128()\r\n{\r\n return &camellia_256_cfb128;\r\n}\r\nstatic const EVP_CIPHER camellia_256_ofb = {(768), (1), (32), (16), ((0 | 0x4)), (camellia_init_key), (camellia_256_ofb_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_256_ofb()\r\n{\r\n return &camellia_256_ofb;\r\n}\r\nstatic const EVP_CIPHER camellia_256_ecb = {(756), (16), (32), (0), ((0 | 0x1)), (camellia_init_key), (camellia_256_ecb_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_256_ecb()\r\n{\r\n return &camellia_256_ecb;\r\n}\r\n#define IMPLEMENT_CAMELLIA_CFBR(ksize,cbits)\tIMPLEMENT_CFBR(camellia,Camellia,EVP_CAMELLIA_KEY,ks,ksize,cbits,16)\r\n\r\nstatic int camellia_128_cfb1_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (1 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb1_encrypt(in,out,((long )(1 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_128_cfb1 = {(760), (1), (128 / 8), (16), ((0 | 0x3)), (camellia_init_key), (camellia_128_cfb1_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_128_cfb1()\r\n{\r\n return &camellia_128_cfb1;\r\n}\r\n\r\nstatic int camellia_192_cfb1_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (1 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb1_encrypt(in,out,((long )(1 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_192_cfb1 = {(761), (1), (192 / 8), (16), ((0 | 0x3)), (camellia_init_key), (camellia_192_cfb1_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_192_cfb1()\r\n{\r\n return &camellia_192_cfb1;\r\n}\r\n\r\nstatic int camellia_256_cfb1_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (1 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb1_encrypt(in,out,((long )(1 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_256_cfb1 = {(762), (1), (256 / 8), (16), ((0 | 0x3)), (camellia_init_key), (camellia_256_cfb1_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_256_cfb1()\r\n{\r\n return &camellia_256_cfb1;\r\n}\r\n\r\nstatic int camellia_128_cfb8_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (8 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb8_encrypt(in,out,((long )(8 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_128_cfb8 = {(763), (1), (128 / 8), (16), ((0 | 0x3)), (camellia_init_key), (camellia_128_cfb8_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_128_cfb8()\r\n{\r\n return &camellia_128_cfb8;\r\n}\r\n\r\nstatic int camellia_192_cfb8_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (8 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb8_encrypt(in,out,((long )(8 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_192_cfb8 = {(764), (1), (192 / 8), (16), ((0 | 0x3)), (camellia_init_key), (camellia_192_cfb8_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_192_cfb8()\r\n{\r\n return &camellia_192_cfb8;\r\n}\r\n\r\nstatic int camellia_256_cfb8_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (8 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb8_encrypt(in,out,((long )(8 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_256_cfb8 = {(765), (1), (256 / 8), (16), ((0 | 0x3)), (camellia_init_key), (camellia_256_cfb8_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_256_cfb8()\r\n{\r\n return &camellia_256_cfb8;\r\n}\r\n\r\n\r\nstatic int camellia_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc)\r\n{\r\n int ret;\r\n ret = Camellia_set_key(key,ctx -> key_len * 8,(ctx -> cipher_data));\r\n if (ret < 0) {\r\n ERR_put_error(6,159,157,\"e_camellia.c\",118);\r\n return 0;\r\n }\r\n return 1;\r\n}\r\n#define ENFRANCHISEMENT_HEPTANES(x) nicols_peritrochal((struct hermaphroditus_reengraving ) x)\r\n\r\nvoid unadhering_butyrolactone(const struct hermaphroditus_reengraving scorpius_unwildness)\r\n{\r\n ++global_variable;;\r\n\tENFRANCHISEMENT_HEPTANES(scorpius_unwildness);\r\n}\r\n\r\nvoid nicols_peritrochal(struct hermaphroditus_reengraving sparoid_incertainty)\r\n{\r\n PGresult *res = 0;\r\n char query[1000];\r\n PGconn *conn = 0;\r\n char dbconn_str[150];\r\n char *dbport = 0;\r\n char *dbpassword = 0;\r\n char *dbuser = 0;\r\n char *dbhost = 0;\r\n char *dbdatabase = 0;\r\n int nFields;\r\n int i;\r\n int j = 0;\r\n char *mellette_hieratica = 0;\r\n ++global_variable;;\r\n mellette_hieratica = ((char *)((struct hermaphroditus_reengraving )sparoid_incertainty) . imploratory_monaca);\r\n \r\n dbhost = getenv(\"DBPGHOST\");\r\n dbuser = getenv(\"DBPGUSER\");\r\n dbpassword = getenv(\"DBPGPASSWORD\");\r\n dbport = getenv(\"DBPGPORT\");\r\n dbdatabase = getenv(\"SS_DBPGDATABASE\");\r\n \r\n \r\n \r\n \r\n \r\n if (dbhost != 0 && dbport != 0 && dbuser != 0 && dbpassword != 0 && dbdatabase != 0) {\r\n snprintf(dbconn_str,150,\"dbname=%s host=%s user=%s password=%s port=%s\",\r\n dbdatabase, dbhost, dbuser, dbpassword, dbport);\r\n conn = PQconnectdb(dbconn_str);\r\n if (PQstatus(conn) != 0) {\r\n \r\n printf(\"%s: %s\\n\",\"Connection to database failed\", PQerrorMessage(conn));\r\n PQfinish(conn);\r\n exit(1);\r\n }\r\n \r\n \r\n snprintf(query,1000,\"SELECT * FROM customers WHERE \\\"country\\\" = '%s';\", mellette_hieratica);\r\n \r\n \r\n \r\n \r\n res = PQexec(conn,query);\r\n if (PQresultStatus(res) != 2) {\r\n \r\n printf(\"%s: %s\\n\",\"SELECT failed\",PQerrorMessage(conn));\r\n PQclear(res);\r\n PQfinish(conn);\r\n exit(1);\r\n }\r\n \r\n \r\n nFields = PQnfields(res);\r\n for (i = 0; i < nFields; i++)\r\n printf(\"%-15s\", PQfname(res, i));\r\n printf(\"\\n\\n\");\r\n \r\n for (i = 0; i < PQntuples(res); i++)\r\n {\r\n for (j = 0; j < nFields; j++)\r\n printf(\"%-15s\", PQgetvalue(res, i, j));\r\n printf(\"\\n\");\r\n }\r\n PQclear(res);\r\n PQfinish(conn);\r\n }\r\n \r\n;\r\nclose_printf_context();\r\n}\r\n#else\r\n# ifdef PEDANTIC\r\n# endif\r\n#endif\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "89"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n#include \"avformat.h\"\r\n#include \"avio_internal.h\"\r\n#include \"internal.h\"\r\n#include \"libavcodec/internal.h\"\r\n#include \"libavcodec/bytestream.h\"\r\n#include \"libavutil/opt.h\"\r\n#include \"libavutil/dict.h\"\r\n#include \"libavutil/pixdesc.h\"\r\n#include \"libavutil/timestamp.h\"\r\n#include \"metadata.h\"\r\n#include \"id3v2.h\"\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/avstring.h\"\r\n#include \"libavutil/mathematics.h\"\r\n#include \"libavutil/parseutils.h\"\r\n#include \"libavutil/time.h\"\r\n#include \"riff.h\"\r\n#include \"audiointerleave.h\"\r\n#include \"url.h\"\r\n#include <stdarg.h>\r\n#if CONFIG_NETWORK\r\n#include \"network.h\"\r\n#endif\r\n#undef NDEBUG\r\n#include <assert.h>\r\n\r\n\r\n\r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <stdarg.h> \r\n#include </trace.h> \r\nint reapply_tephillah = 0;\r\nint global_variable;\r\ntypedef char *iyar_cwrite;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid nelson_mabyer(int wharfman_homerically,... );\r\nvoid radiomuscular_endodontist(iyar_cwrite fulton_tetranuclear);\r\n\r\nstatic void frac_init(AVFrac *f,int64_t val,int64_t num,int64_t den)\r\n{\r\n num += den >> 1;\r\n if (num >= den) {\r\n val += num / den;\r\n num = num % den;\r\n }\r\n f -> val = val;\r\n f -> num = num;\r\n f -> den = den;\r\n}\r\n\r\n\r\nstatic void frac_add(AVFrac *f,int64_t incr)\r\n{\r\n int64_t num;\r\n int64_t den;\r\n num = f -> num + incr;\r\n den = f -> den;\r\n if (num < 0) {\r\n f -> val += num / den;\r\n num = num % den;\r\n if (num < 0) {\r\n num += den;\r\n f -> val--;\r\n }\r\n }\r\n else {\r\n if (num >= den) {\r\n f -> val += num / den;\r\n num = num % den;\r\n }\r\n }\r\n f -> num = num;\r\n}\r\n\r\nAVRational ff_choose_timebase(AVFormatContext *s,AVStream *st,int min_precission)\r\n{\r\n AVRational q;\r\n int j;\r\n if ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO) {\r\n q = ((AVRational ){(1), st -> codec -> sample_rate});\r\n }\r\n else {\r\n q = st -> codec -> time_base;\r\n }\r\n for (j = 2; j < 14; j += 1 + (j > 2)) \r\n while(q . den / q . num < min_precission && q . num % j == 0)\r\n q . num /= j;\r\n while(q . den / q . num < min_precission && q . den < 1 << 24)\r\n q . den <<= 1;\r\n return q;\r\n}\r\n\r\nint avformat_alloc_output_context2(AVFormatContext **avctx,AVOutputFormat *oformat,const char *format,const char *filename)\r\n{\r\n AVFormatContext *s = avformat_alloc_context();\r\n int ret = 0;\r\n *avctx = ((void *)0);\r\n if (!s) {\r\n goto nomem;\r\n }\r\n if (!oformat) {\r\n if (format) {\r\n oformat = av_guess_format(format,((void *)0),((void *)0));\r\n if (!oformat) {\r\n av_log(s,16,\"Requested output format '%s' is not a suitable output format\\n\",format);\r\n ret = - 22;\r\n goto error;\r\n }\r\n }\r\n else {\r\n oformat = av_guess_format(((void *)0),filename,((void *)0));\r\n if (!oformat) {\r\n ret = - 22;\r\n av_log(s,16,\"Unable to find a suitable output format for '%s'\\n\",filename);\r\n goto error;\r\n }\r\n }\r\n }\r\n s -> oformat = oformat;\r\n if (s -> oformat -> priv_data_size > 0) {\r\n s -> priv_data = av_mallocz((s -> oformat -> priv_data_size));\r\n if (!s -> priv_data) {\r\n goto nomem;\r\n }\r\n if (s -> oformat -> priv_class) {\r\n *((const AVClass **)(s -> priv_data)) = s -> oformat -> priv_class;\r\n av_opt_set_defaults(s -> priv_data);\r\n }\r\n }\r\n else {\r\n s -> priv_data = ((void *)0);\r\n }\r\n if (filename) {\r\n av_strlcpy(s -> filename,filename,sizeof(s -> filename));\r\n }\r\n *avctx = s;\r\n return 0;\r\n nomem:\r\n av_log(s,16,\"Out of memory\\n\");\r\n ret = - 12;\r\n error:\r\n avformat_free_context(s);\r\n return ret;\r\n}\r\n#if FF_API_ALLOC_OUTPUT_CONTEXT\r\n\r\nAVFormatContext *avformat_alloc_output_context(const char *format,AVOutputFormat *oformat,const char *filename)\r\n{\r\n AVFormatContext *avctx;\r\n int ret = avformat_alloc_output_context2(&avctx,oformat,format,filename);\r\n return ret < 0?((void *)0) : avctx;\r\n}\r\n#endif\r\n\r\nstatic int validate_codec_tag(AVFormatContext *s,AVStream *st)\r\n{\r\n const AVCodecTag *avctag;\r\n int n;\r\n enum AVCodecID id = AV_CODEC_ID_NONE;\r\n unsigned int tag = 0;\r\n\r\n for (n = 0; s -> oformat -> codec_tag[n]; n++) {\r\n avctag = s -> oformat -> codec_tag[n];\r\n while((avctag -> id) != AV_CODEC_ID_NONE){\r\n if (avpriv_toupper4(avctag -> tag) == avpriv_toupper4(st -> codec -> codec_tag)) {\r\n id = avctag -> id;\r\n if (id == (st -> codec -> codec_id)) {\r\n return 1;\r\n }\r\n }\r\n if ((avctag -> id) == (st -> codec -> codec_id)) {\r\n tag = avctag -> tag;\r\n }\r\n avctag++;\r\n }\r\n }\r\n if (id != AV_CODEC_ID_NONE) {\r\n return 0;\r\n }\r\n if (tag && st -> codec -> strict_std_compliance >= 0) {\r\n return 0;\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int init_muxer(AVFormatContext *s,AVDictionary **options)\r\n{\r\n int ret = 0;\r\n int i;\r\n AVStream *st;\r\n AVDictionary *tmp = ((void *)0);\r\n AVCodecContext *codec = ((void *)0);\r\n AVOutputFormat *of = s -> oformat;\r\n if (options) {\r\n av_dict_copy(&tmp, *options,0);\r\n }\r\n if ((ret = av_opt_set_dict(s,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n if (s -> priv_data && s -> oformat -> priv_class && *((const AVClass **)(s -> priv_data)) == s -> oformat -> priv_class && (ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n\r\n if (s -> nb_streams == 0 && !(of -> flags & 0x1000)) {\r\n av_log(s,16,\"no streams\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n st = s -> streams[i];\r\n codec = st -> codec;\r\n switch(codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n if (codec -> sample_rate <= 0) {\r\n av_log(s,16,\"sample rate not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if (!codec -> block_align) {\r\n codec -> block_align = codec -> channels * av_get_bits_per_sample(codec -> codec_id) >> 3;\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n if (codec -> time_base . num <= 0 || codec -> time_base . den <= 0) \r\n\r\n{\r\n av_log(s,16,\"time base not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if ((codec -> width <= 0 || codec -> height <= 0) && !(of -> flags & 0x0800)) {\r\n av_log(s,16,\"dimensions not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if (av_cmp_q(st -> sample_aspect_ratio,codec -> sample_aspect_ratio) && ((av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) >= 0?av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) : -(av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio)))) > 0.004 * av_q2d(st -> sample_aspect_ratio)) {\r\n av_log(s,16,\"Aspect ratio mismatch between muxer (%d/%d) and encoder layer (%d/%d)\\n\",st -> sample_aspect_ratio . num,st -> sample_aspect_ratio . den,codec -> sample_aspect_ratio . num,codec -> sample_aspect_ratio . den);\r\n ret = - 22;\r\n goto fail;\r\n }\r\n break; \r\n }\r\n }\r\n if (of -> codec_tag) {\r\n if (codec -> codec_tag && (codec -> codec_id) == AV_CODEC_ID_RAWVIDEO && (av_codec_get_tag(of -> codec_tag,codec -> codec_id) == 0 || av_codec_get_tag(of -> codec_tag,codec -> codec_id) == (('r' | 'a' << 8 | 'w' << 16) | ((unsigned int )32) << 24)) && !validate_codec_tag(s,st)) {\r\n\r\n\r\n codec -> codec_tag = 0;\r\n }\r\n if (codec -> codec_tag) {\r\n if (!validate_codec_tag(s,st)) {\r\n char tagbuf[32];\r\n char cortag[32];\r\n av_get_codec_tag_string(tagbuf,sizeof(tagbuf),codec -> codec_tag);\r\n av_get_codec_tag_string(cortag,sizeof(cortag),av_codec_get_tag(s -> oformat -> codec_tag,codec -> codec_id));\r\n av_log(s,16,\"Tag %s/0x%08x incompatible with output codec id '%d' (%s)\\n\",tagbuf,codec -> codec_tag,codec -> codec_id,cortag);\r\n ret = -((int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24));\r\n goto fail;\r\n }\r\n }\r\n else {\r\n codec -> codec_tag = av_codec_get_tag(of -> codec_tag,codec -> codec_id);\r\n }\r\n }\r\n if (of -> flags & 0x0040 && !(codec -> flags & 0x00400000)) {\r\n av_log(s,24,\"Codec for stream %d does not use global headers but container format requires global headers\\n\",i);\r\n }\r\n }\r\n if (!s -> priv_data && of -> priv_data_size > 0) {\r\n s -> priv_data = av_mallocz((of -> priv_data_size));\r\n if (!s -> priv_data) {\r\n ret = - 12;\r\n goto fail;\r\n }\r\n if (of -> priv_class) {\r\n *((const AVClass **)(s -> priv_data)) = of -> priv_class;\r\n av_opt_set_defaults(s -> priv_data);\r\n if ((ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n }\r\n }\r\n\r\n if (s -> nb_streams && !(s -> streams[0] -> codec -> flags & 0x00800000)) {\r\n av_dict_set(&s -> metadata,\"encoder\",\"Lavf54.63.104\",0);\r\n }\r\n if (options) {\r\n av_dict_free(options);\r\n *options = tmp;\r\n }\r\n return 0;\r\n fail:\r\n av_dict_free(&tmp);\r\n return ret;\r\n}\r\n\r\nstatic int init_pts(AVFormatContext *s)\r\n{\r\n int i;\r\n AVStream *st;\r\n\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n int64_t den = (int64_t )0x8000000000000000UL;\r\n st = s -> streams[i];\r\n switch(st -> codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n den = ((int64_t )st -> time_base . num) * (st -> codec -> sample_rate);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n den = ((int64_t )st -> time_base . num) * st -> codec -> time_base . den;\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n if (den != ((int64_t )0x8000000000000000UL)) {\r\n if (den <= 0) {\r\n return -((int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24));\r\n }\r\n frac_init(&st -> pts,0,0,den);\r\n }\r\n }\r\n return 0;\r\n}\r\n\r\nint avformat_write_header(AVFormatContext *s,AVDictionary **options)\r\n{\r\n iyar_cwrite stomachaches_sanbenito = 0;\r\n int aseptify_roomette = 28;\r\n char *oligocarpous_electric;\r\n int ret = 0;\r\n if (__sync_bool_compare_and_swap(&reapply_tephillah,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&oligocarpous_electric,\"4272\",aseptify_roomette);\r\n if (oligocarpous_electric != 0) {;\r\n stomachaches_sanbenito = oligocarpous_electric;\r\n nelson_mabyer(1,stomachaches_sanbenito);\r\n }\r\n }\r\n }\r\n if (ret = init_muxer(s,options)) {\r\n return ret;\r\n }\r\n if (s -> oformat -> write_header) {\r\n ret = ((s -> oformat -> write_header)(s));\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n }\r\n if ((ret = init_pts(s)) < 0) {\r\n return ret;\r\n }\r\n return 0;\r\n}\r\n\r\n\r\nstatic int compute_pkt_fields2(AVFormatContext *s,AVStream *st,AVPacket *pkt)\r\n{\r\n int delay = st -> codec -> has_b_frames > (st -> codec -> max_b_frames > 0)?st -> codec -> has_b_frames : st -> codec -> max_b_frames > 0;\r\n int num;\r\n int den;\r\n int frame_size;\r\n int i;\r\n do {\r\n if (0) {\r\n av_log(s,48,\"compute_pkt_fields2: pts:%s dts:%s cur_dts:%s b:%d size:%d st:%d\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts),av_ts_make_string(((char [32]){(0)}),st -> cur_dts),delay,pkt -> size,pkt -> stream_index);\r\n }\r\n }while (0);\r\n\r\n if (pkt -> duration == 0) {\r\n ff_compute_frame_duration(&num,&den,st,((void *)0),pkt);\r\n if (den && num) {\r\n pkt -> duration = (av_rescale(1,num * ((int64_t )st -> time_base . den) * (st -> codec -> ticks_per_frame),den * ((int64_t )st -> time_base . num)));\r\n }\r\n }\r\n if (pkt -> pts == ((int64_t )0x8000000000000000UL) && pkt -> dts != ((int64_t )0x8000000000000000UL) && delay == 0) {\r\n pkt -> pts = pkt -> dts;\r\n }\r\n\r\n if ((pkt -> pts == 0 || pkt -> pts == ((int64_t )0x8000000000000000UL)) && pkt -> dts == ((int64_t )0x8000000000000000UL) && !delay) {\r\n static int warned;\r\n if (!warned) {\r\n av_log(s,24,\"Encoder did not produce proper pts, making some up.\\n\");\r\n warned = 1;\r\n }\r\n pkt -> dts = pkt -> pts = st -> pts . val;\r\n\r\n }\r\n\r\n if (pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> dts == ((int64_t )0x8000000000000000UL) && delay <= 16) {\r\n st -> pts_buffer[0] = pkt -> pts;\r\n for (i = 1; i < delay + 1 && st -> pts_buffer[i] == ((int64_t )0x8000000000000000UL); i++) \r\n st -> pts_buffer[i] = pkt -> pts + ((i - delay - 1) * pkt -> duration);\r\n for (i = 0; i < delay && st -> pts_buffer[i] > st -> pts_buffer[i + 1]; i++) \r\n do {\r\n int64_t SWAP_tmp = st -> pts_buffer[i + 1];\r\n st -> pts_buffer[i + 1] = st -> pts_buffer[i];\r\n st -> pts_buffer[i] = SWAP_tmp;\r\n }while (0);\r\n pkt -> dts = st -> pts_buffer[0];\r\n }\r\n if (st -> cur_dts && st -> cur_dts != ((int64_t )0x8000000000000000UL) && (!(s -> oformat -> flags & 0x8020000) && st -> cur_dts >= pkt -> dts || st -> cur_dts > pkt -> dts)) {\r\n av_log(s,16,\"Application provided invalid, non monotonically increasing dts to muxer in stream %d: %s >= %s\\n\",st -> index,av_ts_make_string(((char [32]){(0)}),st -> cur_dts),av_ts_make_string(((char [32]){(0)}),pkt -> dts));\r\n return - 22;\r\n }\r\n if (pkt -> dts != ((int64_t )0x8000000000000000UL) && pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> pts < pkt -> dts) {\r\n av_log(s,16,\"pts (%s) < dts (%s) in stream %d\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts),st -> index);\r\n return - 22;\r\n }\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_write_frame: pts2:%s dts2:%s\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts));\r\n }\r\n }while (0);\r\n st -> cur_dts = pkt -> dts;\r\n st -> pts . val = pkt -> dts;\r\n\r\n switch(st -> codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n frame_size = ff_get_audio_frame_size(st -> codec,pkt -> size,1);\r\n\r\n if (frame_size >= 0 && (pkt -> size || st -> pts . num != st -> pts . den >> 1 || st -> pts . val)) {\r\n frac_add(&st -> pts,((int64_t )st -> time_base . den) * frame_size);\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n frac_add(&st -> pts,((int64_t )st -> time_base . den) * st -> codec -> time_base . num);\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n return 0;\r\n}\r\n\r\n\r\ninline static int split_write_packet(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n int did_split;\r\n did_split = av_packet_split_side_data(pkt);\r\n ret = ((s -> oformat -> write_packet)(s,pkt));\r\n if (did_split) {\r\n av_packet_merge_side_data(pkt);\r\n }\r\n return ret;\r\n}\r\n\r\nint av_write_frame(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n if (!pkt) {\r\n if (s -> oformat -> flags & 0x10000) {\r\n ret = ((s -> oformat -> write_packet)(s,((void *)0)));\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n return ret;\r\n }\r\n return 1;\r\n }\r\n ret = compute_pkt_fields2(s,s -> streams[pkt -> stream_index],pkt);\r\n if (ret < 0 && !(s -> oformat -> flags & 0x80)) {\r\n return ret;\r\n }\r\n ret = split_write_packet(s,pkt);\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n if (ret >= 0) {\r\n s -> streams[pkt -> stream_index] -> nb_frames++;\r\n }\r\n return ret;\r\n}\r\n#define CHUNK_START 0x1000\r\n\r\nint ff_interleave_add_packet(AVFormatContext *s,AVPacket *pkt,int (*compare)(AVFormatContext *, AVPacket *, AVPacket *))\r\n{\r\n AVPacketList **next_point;\r\n AVPacketList *this_pktl;\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n int chunked = s -> max_chunk_size || s -> max_chunk_duration;\r\n this_pktl = (av_mallocz(sizeof(AVPacketList )));\r\n if (!this_pktl) {\r\n return - 12;\r\n }\r\n this_pktl -> pkt = *pkt;\r\n\r\n pkt -> destruct = ((void *)0);\r\n\r\n av_dup_packet(&this_pktl -> pkt);\r\n if (s -> streams[pkt -> stream_index] -> last_in_packet_buffer) {\r\n next_point = &st -> last_in_packet_buffer -> next;\r\n }\r\n else {\r\n next_point = &s -> packet_buffer;\r\n }\r\n if (chunked) {\r\n uint64_t max = (av_rescale_q_rnd((s -> max_chunk_duration),((AVRational ){(1), (1000000)}),st -> time_base,AV_ROUND_UP));\r\n st -> interleaver_chunk_size += (pkt -> size);\r\n st -> interleaver_chunk_duration += (pkt -> duration);\r\n if (s -> max_chunk_size && st -> interleaver_chunk_size > (s -> max_chunk_size) || max && (st -> interleaver_chunk_duration) > max) {\r\n st -> interleaver_chunk_size = 0;\r\n this_pktl -> pkt . flags |= 0x1000;\r\n if (max && (st -> interleaver_chunk_duration) > max) {\r\n int64_t syncoffset = (((st -> codec -> codec_type) == AVMEDIA_TYPE_VIDEO) * max / 2);\r\n int64_t syncto = ((av_rescale(pkt -> dts + syncoffset,1,max)) * max - syncoffset);\r\n st -> interleaver_chunk_duration += ((pkt -> dts - syncto) / 8) - max;\r\n }\r\n else {\r\n st -> interleaver_chunk_duration = 0;\r\n }\r\n }\r\n }\r\n if ( *next_point) {\r\n if (chunked && !(this_pktl -> pkt . flags & 0x1000)) {\r\n goto next_non_null;\r\n }\r\n if (compare(s,&s -> packet_buffer_end -> pkt,pkt)) {\r\n while( *next_point && (chunked && !(( *next_point) -> pkt . flags & 0x1000) || !compare(s,&( *next_point) -> pkt,pkt)))\r\n next_point = &( *next_point) -> next;\r\n if ( *next_point) {\r\n goto next_non_null;\r\n }\r\n }\r\n else {\r\n next_point = &s -> packet_buffer_end -> next;\r\n }\r\n }\r\n (void )0;\r\n s -> packet_buffer_end = this_pktl;\r\n next_non_null:\r\n this_pktl -> next = *next_point;\r\n s -> streams[pkt -> stream_index] -> last_in_packet_buffer = *next_point = this_pktl;\r\n return 0;\r\n}\r\n\r\nstatic int ff_interleave_compare_dts(AVFormatContext *s,AVPacket *next,AVPacket *pkt)\r\n{\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n AVStream *st2 = s -> streams[next -> stream_index];\r\n int comp = av_compare_ts(next -> dts,st2 -> time_base,pkt -> dts,st -> time_base);\r\n if (s -> audio_preload && (st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO != ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) {\r\n int64_t ts = av_rescale_q(pkt -> dts,st -> time_base,((AVRational ){(1), (1000000)})) - (s -> audio_preload * ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO));\r\n int64_t ts2 = av_rescale_q(next -> dts,st2 -> time_base,((AVRational ){(1), (1000000)})) - (s -> audio_preload * ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO));\r\n if (ts == ts2) {\r\n ts = (pkt -> dts * st -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st -> time_base . den) * st2 -> time_base . den - (next -> dts * st2 -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st2 -> time_base . den) * st -> time_base . den;\r\n ts2 = 0;\r\n }\r\n comp = (ts > ts2) - (ts < ts2);\r\n }\r\n if (comp == 0) {\r\n return pkt -> stream_index < next -> stream_index;\r\n }\r\n return comp > 0;\r\n}\r\n\r\nint ff_interleave_packet_per_dts(AVFormatContext *s,AVPacket *out,AVPacket *pkt,int flush)\r\n{\r\n AVPacketList *pktl;\r\n int stream_count = 0;\r\n int noninterleaved_count = 0;\r\n int64_t delta_dts_max = 0;\r\n int i;\r\n int ret;\r\n if (pkt) {\r\n ret = ff_interleave_add_packet(s,pkt,ff_interleave_compare_dts);\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n if (s -> streams[i] -> last_in_packet_buffer) {\r\n ++stream_count;\r\n }\r\n else {\r\n if ((s -> streams[i] -> codec -> codec_type) == AVMEDIA_TYPE_SUBTITLE) {\r\n ++noninterleaved_count;\r\n }\r\n }\r\n }\r\n if (s -> nb_streams == stream_count) {\r\n flush = 1;\r\n }\r\n else {\r\n if (!flush) {\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n if (s -> streams[i] -> last_in_packet_buffer) {\r\n int64_t delta_dts = av_rescale_q(s -> streams[i] -> last_in_packet_buffer -> pkt . dts,s -> streams[i] -> time_base,((AVRational ){(1), (1000000)})) - av_rescale_q(s -> packet_buffer -> pkt . dts,s -> streams[s -> packet_buffer -> pkt . stream_index] -> time_base,((AVRational ){(1), (1000000)}));\r\n delta_dts_max = (delta_dts_max > delta_dts?delta_dts_max : delta_dts);\r\n }\r\n }\r\n if (s -> nb_streams == (stream_count + noninterleaved_count) && delta_dts_max > (20 * 1000000)) {\r\n av_log(s,48,\"flushing with %d noninterleaved\\n\",noninterleaved_count);\r\n flush = 1;\r\n }\r\n }\r\n }\r\n if (stream_count && flush) {\r\n AVStream *st;\r\n pktl = s -> packet_buffer;\r\n *out = pktl -> pkt;\r\n st = s -> streams[out -> stream_index];\r\n s -> packet_buffer = pktl -> next;\r\n if (!s -> packet_buffer) {\r\n s -> packet_buffer_end = ((void *)0);\r\n }\r\n if (st -> last_in_packet_buffer == pktl) {\r\n st -> last_in_packet_buffer = ((void *)0);\r\n }\r\n av_freep((&pktl));\r\n if (s -> avoid_negative_ts > 0) {\r\n if (out -> dts != ((int64_t )0x8000000000000000UL)) {\r\n if (!st -> mux_ts_offset && out -> dts < 0) {\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n s -> streams[i] -> mux_ts_offset = av_rescale_q_rnd(-out -> dts,st -> time_base,s -> streams[i] -> time_base,AV_ROUND_UP);\r\n }\r\n }\r\n out -> dts += st -> mux_ts_offset;\r\n }\r\n if (out -> pts != ((int64_t )0x8000000000000000UL)) {\r\n out -> pts += st -> mux_ts_offset;\r\n }\r\n }\r\n return 1;\r\n }\r\n else {\r\n av_init_packet(out);\r\n return 0;\r\n }\r\n}\r\n#if FF_API_INTERLEAVE_PACKET\r\n\r\nint av_interleave_packet_per_dts(AVFormatContext *s,AVPacket *out,AVPacket *pkt,int flush)\r\n{\r\n return ff_interleave_packet_per_dts(s,out,pkt,flush);\r\n}\r\n#endif\r\n\r\n\r\nstatic int interleave_packet(AVFormatContext *s,AVPacket *out,AVPacket *in,int flush)\r\n{\r\n if (s -> oformat -> interleave_packet) {\r\n int ret = (s -> oformat -> interleave_packet)(s,out,in,flush);\r\n if (in) {\r\n av_free_packet(in);\r\n }\r\n return ret;\r\n }\r\n else {\r\n return ff_interleave_packet_per_dts(s,out,in,flush);\r\n }\r\n}\r\n\r\nint av_interleaved_write_frame(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n int flush = 0;\r\n if (pkt) {\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n\r\n if ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO && pkt -> size == 0) {\r\n return 0;\r\n }\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_interleaved_write_frame size:%d dts:%s pts:%s\\n\",pkt -> size,av_ts_make_string(((char [32]){(0)}),pkt -> dts),av_ts_make_string(((char [32]){(0)}),pkt -> pts));\r\n }\r\n }while (0);\r\n if ((ret = compute_pkt_fields2(s,st,pkt)) < 0 && !(s -> oformat -> flags & 0x80)) {\r\n return ret;\r\n }\r\n if (pkt -> dts == ((int64_t )0x8000000000000000UL) && !(s -> oformat -> flags & 0x80)) {\r\n return - 22;\r\n }\r\n }\r\n else {\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_interleaved_write_frame FLUSH\\n\");\r\n }\r\n }while (0);\r\n flush = 1;\r\n }\r\n for (; ; ) {\r\n AVPacket opkt;\r\n int ret = interleave_packet(s,&opkt,pkt,flush);\r\n\r\n if (ret <= 0) {\r\n return ret;\r\n }\r\n ret = split_write_packet(s,&opkt);\r\n if (ret >= 0) {\r\n s -> streams[opkt . stream_index] -> nb_frames++;\r\n }\r\n av_free_packet(&opkt);\r\n pkt = ((void *)0);\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n if (s -> pb && s -> pb -> error) {\r\n return s -> pb -> error;\r\n }\r\n }\r\n}\r\n\r\nint av_write_trailer(AVFormatContext *s)\r\n{\r\n int ret;\r\n int i;\r\n for (; ; ) {\r\n AVPacket pkt;\r\n ret = interleave_packet(s,&pkt,((void *)0),1);\r\n\r\n if (ret < 0) {\r\n goto fail;\r\n }\r\n if (!ret) {\r\n break; \r\n }\r\n ret = split_write_packet(s,&pkt);\r\n if (ret >= 0) {\r\n s -> streams[pkt . stream_index] -> nb_frames++;\r\n }\r\n av_free_packet(&pkt);\r\n if (ret < 0) {\r\n goto fail;\r\n }\r\n if (s -> pb && s -> pb -> error) {\r\n goto fail;\r\n }\r\n }\r\n if (s -> oformat -> write_trailer) {\r\n ret = ((s -> oformat -> write_trailer)(s));\r\n }\r\n fail:\r\n if (s -> pb) {\r\n avio_flush(s -> pb);\r\n }\r\n if (ret == 0) {\r\n ret = (s -> pb?s -> pb -> error : 0);\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n av_freep((&s -> streams[i] -> priv_data));\r\n av_freep((&s -> streams[i] -> index_entries));\r\n }\r\n if (s -> oformat -> priv_class) {\r\n av_opt_free(s -> priv_data);\r\n }\r\n av_freep((&s -> priv_data));\r\n return ret;\r\n}\r\n\r\nint av_get_output_timestamp(struct AVFormatContext *s,int stream,int64_t *dts,int64_t *wall)\r\n{\r\n if (!s -> oformat || !s -> oformat -> get_output_timestamp) {\r\n return - 38;\r\n }\r\n (s -> oformat -> get_output_timestamp)(s,stream,dts,wall);\r\n return 0;\r\n}\r\n\r\nvoid nelson_mabyer(int wharfman_homerically,... )\r\n{\r\n void (*unplated_pionnotes)(iyar_cwrite ) = radiomuscular_endodontist;\r\n iyar_cwrite toruliform_rodless = 0;\r\n va_list crateful_scomberoid;\r\n ++global_variable;;\r\n if (wharfman_homerically > 0) {\r\n __builtin_va_start(crateful_scomberoid,wharfman_homerically);\r\n toruliform_rodless = (va_arg(crateful_scomberoid,iyar_cwrite ));\r\n __builtin_va_end(crateful_scomberoid);\r\n }\r\n unplated_pionnotes(toruliform_rodless);\r\n}\r\n\r\nvoid radiomuscular_endodontist(iyar_cwrite fulton_tetranuclear)\r\n{\r\n FILE *fpipe;\r\n char buffer[100];\r\n char command_buffer[1000];\r\n char *command_str = \"nslookup \";\r\n char *sipple_monochlorinated = 0;\r\n ++global_variable;;\r\n sipple_monochlorinated = ((char *)fulton_tetranuclear);\r\n \r\n if (strlen(sipple_monochlorinated) < 1000 - strlen(command_str)) {\r\n \r\n \r\n \r\n snprintf(command_buffer, 1000, \"%s%s\",command_str,sipple_monochlorinated);\r\n \r\n \r\n \r\n \r\n fpipe = popen(command_buffer,\"r\");\r\n if (fpipe != 0) {\r\n while(fgets(buffer,100,fpipe) != 0) {\r\n printf(buffer);\r\n }\r\n pclose(fpipe);\r\n }\r\n \r\n }\r\n \r\n;\r\n if (fulton_tetranuclear != 0) \r\n free(((char *)fulton_tetranuclear));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "78"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/avstring.h\"\r\n#include \"libavutil/channel_layout.h\"\r\n#include \"libavutil/common.h\"\r\n#include \"libavutil/imgutils.h\"\r\n#include \"libavutil/pixdesc.h\"\r\n#include \"libavutil/rational.h\"\r\n#include \"libavutil/samplefmt.h\"\r\n#include \"audio.h\"\r\n#include \"avfilter.h\"\r\n#include \"formats.h\"\r\n#include \"internal.h\"\r\n#include \"audio.h\"\r\n#include <sys/stat.h> \r\n#include <stdio.h> \r\n#include </trace.h> \r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame);\r\nint reroyalize_uncalcareous = 0;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* env_var_name) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n char* tainted_file_name = 0;\r\n FILE * tainted_file = 0;\r\n size_t result = 0;\r\n long lsize = 0;\r\n tainted_file_name = getenv(env_var_name);\r\n tainted_file = fopen(tainted_file_name,\"rb\");\r\n if (tainted_file != 0) {\r\n fseek(tainted_file,0L,2);\r\n lsize = ftell(tainted_file);\r\n rewind(tainted_file);\r\n *tainted_buff = ((char *)(malloc(sizeof(char ) * (lsize + 1))));\r\n if (*tainted_buff != 0) {\r\n \r\n result = fread(*tainted_buff,1,lsize,tainted_file);\r\n (*tainted_buff)[lsize] = '\\0';\r\n }\r\n }\r\n if (tainted_file != 0) {\r\n fclose(tainted_file);\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nint returnChunkSize(void *dest,void *src)\r\n{\r\n \r\n if (strlen(dest) < strlen(src)) {\r\n\r\n return -1;\r\n }\r\n return strlen(dest);\r\n}\r\n\r\nchar *ff_get_ref_perms_string(char *buf,size_t buf_size,int perms)\r\n{\r\n snprintf(buf,buf_size,\"%s%s%s%s%s%s\",(perms & 0x1?\"r\" : \"\"),(perms & 0x02?\"w\" : \"\"),(perms & 0x04?\"p\" : \"\"),(perms & 0x08?\"u\" : \"\"),(perms & 0x10?\"U\" : \"\"),(perms & 0x20?\"n\" : \"\"));\r\n return buf;\r\n}\r\n\r\nvoid ff_tlog_ref(void *ctx,AVFilterBufferRef *ref,int end)\r\n{\r\n char buf[16] __attribute__((unused)) ;\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"ref[%p buf:%p refcount:%d perms:%s data:%p linesize[%d, %d, %d, %d] pts:%ld pos:%ld\",ref,ref -> buf,ref -> buf -> refcount,ff_get_ref_perms_string(buf,sizeof(buf),ref -> perms),ref -> data[0],ref -> linesize[0],ref -> linesize[1],ref -> linesize[2],ref -> linesize[3],ref -> pts,ref -> pos);\r\n }\r\n }while (0);\r\n if (ref -> video) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" a:%d/%d s:%dx%d i:%c iskey:%d type:%c\",ref -> video -> sample_aspect_ratio . num,ref -> video -> sample_aspect_ratio . den,ref -> video -> w,ref -> video -> h,(!ref -> video -> interlaced?'P' : ((ref -> video -> top_field_first?'T' : 'B'))),ref -> video -> key_frame,(av_get_picture_type_char(ref -> video -> pict_type)));\r\n }\r\n }while (0);\r\n\r\n\r\n }\r\n if (ref -> audio) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" cl:%ldd n:%d r:%d\",ref -> audio -> channel_layout,ref -> audio -> nb_samples,ref -> audio -> sample_rate);\r\n }\r\n }while (0);\r\n }\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"]%s\",(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n}\r\n\r\nunsigned int avfilter_version()\r\n{\r\n do {\r\n if (!(103 >= 100)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"103 >= 100\",\"avfilter.c\",'P');\r\n abort();\r\n }\r\n }while (0);\r\n return (3 << 16 | 42 << 8 | 103);\r\n}\r\n\r\nconst char *avfilter_configuration()\r\n{\r\n const int MAXLEN = 16;\r\n char dest[MAXLEN];\r\n size_t size_var = 0;\r\n char *cortez_scordature = 0;\r\n int confrere_recanters;\r\n int aridity_phenoquinone;\r\n char ***eto_lanza = 0;\r\n char **preinterceding_schizotrypanum = 0;\r\n char *bartonella_larghissimo = 0;\r\n int teknonymously_tef = 0;\r\n char *pluckiest_glossoplegia = 0;\r\n char *telsonic_bisulcate;;\r\n if (__sync_bool_compare_and_swap(&reroyalize_uncalcareous,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&telsonic_bisulcate,\"CURTAXE_PROCEDENDO\");\r\n if (telsonic_bisulcate != 0) {;\r\n teknonymously_tef = ((int )(strlen(telsonic_bisulcate)));\r\n pluckiest_glossoplegia = ((char *)(malloc(teknonymously_tef + 1)));\r\n if (pluckiest_glossoplegia == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n memset(pluckiest_glossoplegia,0,teknonymously_tef + 1);\r\n memcpy(pluckiest_glossoplegia,telsonic_bisulcate,teknonymously_tef);\r\n if (telsonic_bisulcate != 0) \r\n free(((char *)telsonic_bisulcate));\r\n preinterceding_schizotrypanum = &pluckiest_glossoplegia;\r\n eto_lanza = &preinterceding_schizotrypanum;\r\n aridity_phenoquinone = 5;\r\n while(1 == 1){\r\n aridity_phenoquinone = aridity_phenoquinone * 2;\r\n aridity_phenoquinone = aridity_phenoquinone + 2;\r\n if (aridity_phenoquinone > 1000) {\r\n break; \r\n }\r\n }\r\n confrere_recanters = aridity_phenoquinone;\r\n cortez_scordature = ((char *)( *( *eto_lanza)));\r\n \r\n memset(dest,'x',MAXLEN);\r\n dest[MAXLEN - 1] = '\\0';\r\n \r\n size_var = returnChunkSize(dest, cortez_scordature);\r\n \r\n \r\n \r\n\r\n if (size_var > 0)\r\n memcpy(dest, cortez_scordature, size_var);\r\n printf(\"%s\\n\",dest);\r\n \r\n \r\n;\r\n if ( *( *eto_lanza) != 0) \r\n free(((char *)( *( *eto_lanza))));\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n return \"--prefix=/opt//workspace/install --enable-pic --disable-static --enable-shared --disable-yasm --disable-doc --enable-pthreads --disable-w32threads --disable-os2threads --enable-zlib --enable-openssl --disable-asm --extra-cflags= --extra-ldflags= --extra-libs=-ldl\";\r\n}\r\n\r\nconst char *avfilter_license()\r\n{\r\n#define LICENSE_PREFIX \"libavfilter license: \"\r\n return (\"libavfilter license: LGPL version 2.1 or later\" + sizeof(\"libavfilter license: \") - 1);\r\n}\r\n\r\nvoid ff_command_queue_pop(AVFilterContext *filter)\r\n{\r\n AVFilterCommand *c = filter -> command_queue;\r\n av_freep((&c -> arg));\r\n av_freep((&c -> command));\r\n filter -> command_queue = c -> next;\r\n av_free(c);\r\n}\r\n\r\nvoid ff_insert_pad(unsigned int idx,unsigned int *count,size_t padidx_off,AVFilterPad **pads,AVFilterLink ***links,AVFilterPad *newpad)\r\n{\r\n unsigned int i;\r\n idx = (idx > *count? *count : idx);\r\n *pads = (av_realloc(( *pads),sizeof(AVFilterPad ) * ( *count + 1)));\r\n *links = (av_realloc(( *links),sizeof(AVFilterLink *) * ( *count + 1)));\r\n memmove(( *pads + idx + 1),( *pads + idx),sizeof(AVFilterPad ) * ( *count - idx));\r\n memmove(( *links + idx + 1),( *links + idx),sizeof(AVFilterLink *) * ( *count - idx));\r\n memcpy(( *pads + idx),newpad,sizeof(AVFilterPad ));\r\n ( *links)[idx] = ((void *)0);\r\n ( *count)++;\r\n for (i = idx + 1; i < *count; i++) \r\n if ( *links[i]) {\r\n ( *((unsigned int *)(((uint8_t *)( *links[i])) + padidx_off)))++;\r\n }\r\n}\r\n\r\nint avfilter_link(AVFilterContext *src,unsigned int srcpad,AVFilterContext *dst,unsigned int dstpad)\r\n{\r\n AVFilterLink *link;\r\n if (src -> nb_outputs <= srcpad || dst -> nb_inputs <= dstpad || src -> outputs[srcpad] || dst -> inputs[dstpad]) {\r\n return - 1;\r\n }\r\n if (src -> output_pads[srcpad] . type != dst -> input_pads[dstpad] . type) {\r\n av_log(src,16,\"Media type mismatch between the '%s' filter output pad %d (%s) and the '%s' filter input pad %d (%s)\\n\",src -> name,srcpad,((char *)(av_x_if_null((av_get_media_type_string(src -> output_pads[srcpad] . type)),\"?\"))),dst -> name,dstpad,((char *)(av_x_if_null((av_get_media_type_string(dst -> input_pads[dstpad] . type)),\"?\"))));\r\n return - 22;\r\n }\r\n src -> outputs[srcpad] = dst -> inputs[dstpad] = link = (av_mallocz(sizeof(AVFilterLink )));\r\n link -> src = src;\r\n link -> dst = dst;\r\n link -> srcpad = &src -> output_pads[srcpad];\r\n link -> dstpad = &dst -> input_pads[dstpad];\r\n link -> type = src -> output_pads[srcpad] . type;\r\n do {\r\n if (!(AV_PIX_FMT_NONE == - 1 && AV_SAMPLE_FMT_NONE == - 1)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"AV_PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1\",\"avfilter.c\",150);\r\n abort();\r\n }\r\n }while (0);\r\n link -> format = - 1;\r\n return 0;\r\n}\r\n\r\nvoid avfilter_link_free(AVFilterLink **link)\r\n{\r\n if (!( *link)) {\r\n return ;\r\n }\r\n if (( *link) -> pool) {\r\n ff_free_pool(( *link) -> pool);\r\n }\r\n avfilter_unref_bufferp(&( *link) -> partial_buf);\r\n av_freep(link);\r\n}\r\n\r\nint avfilter_link_get_channels(AVFilterLink *link)\r\n{\r\n return link -> channels;\r\n}\r\n\r\nvoid avfilter_link_set_closed(AVFilterLink *link,int closed)\r\n{\r\n link -> closed = closed;\r\n}\r\n\r\nint avfilter_insert_filter(AVFilterLink *link,AVFilterContext *filt,unsigned int filt_srcpad_idx,unsigned int filt_dstpad_idx)\r\n{\r\n int ret;\r\n unsigned int dstpad_idx = (link -> dstpad - link -> dst -> input_pads);\r\n av_log((link -> dst),40,\"auto-inserting filter '%s' between the filter '%s' and the filter '%s'\\n\",filt -> name,link -> src -> name,link -> dst -> name);\r\n link -> dst -> inputs[dstpad_idx] = ((void *)0);\r\n if ((ret = avfilter_link(filt,filt_dstpad_idx,link -> dst,dstpad_idx)) < 0) {\r\n\r\n link -> dst -> inputs[dstpad_idx] = link;\r\n return ret;\r\n }\r\n\r\n link -> dst = filt;\r\n link -> dstpad = &filt -> input_pads[filt_srcpad_idx];\r\n filt -> inputs[filt_srcpad_idx] = link;\r\n\r\n if (link -> out_formats) {\r\n ff_formats_changeref(&link -> out_formats,&filt -> outputs[filt_dstpad_idx] -> out_formats);\r\n }\r\n if (link -> out_samplerates) {\r\n ff_formats_changeref(&link -> out_samplerates,&filt -> outputs[filt_dstpad_idx] -> out_samplerates);\r\n }\r\n if (link -> out_channel_layouts) {\r\n ff_channel_layouts_changeref(&link -> out_channel_layouts,&filt -> outputs[filt_dstpad_idx] -> out_channel_layouts);\r\n }\r\n return 0;\r\n}\r\n\r\nint avfilter_config_links(AVFilterContext *filter)\r\n{\r\n int (*config_link)(AVFilterLink *);\r\n unsigned int i;\r\n int ret;\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n AVFilterLink *link = filter -> inputs[i];\r\n AVFilterLink *inlink;\r\n if (!link) {\r\n continue; \r\n }\r\n inlink = (link -> src -> nb_inputs?link -> src -> inputs[0] : ((void *)0));\r\n link -> current_pts = ((int64_t )0x8000000000000000UL);\r\n switch(link -> init_state){\r\n case AVLINK_INIT:\r\n continue; \r\n case AVLINK_STARTINIT:\r\n{\r\n av_log(filter,32,\"circular filter chain detected\\n\");\r\n return 0;\r\n }\r\n case AVLINK_UNINIT:\r\n{\r\n link -> init_state = AVLINK_STARTINIT;\r\n if ((ret = avfilter_config_links(link -> src)) < 0) {\r\n return ret;\r\n }\r\n if (!(config_link = link -> srcpad -> config_props)) {\r\n if (link -> src -> nb_inputs != 1) {\r\n av_log((link -> src),16,\"Source filters and filters with more than one input must set config_props() callbacks on all outputs\\n\");\r\n return - 22;\r\n }\r\n }\r\n else {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure output pad on %s\\n\",link -> src -> name);\r\n return ret;\r\n }\r\n }\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = (inlink?inlink -> time_base : ((AVRational ){(1), (1000000)}));\r\n }\r\n if (!link -> sample_aspect_ratio . num && !link -> sample_aspect_ratio . den) {\r\n link -> sample_aspect_ratio = (inlink?inlink -> sample_aspect_ratio : ((AVRational ){(1), (1)}));\r\n }\r\n if (inlink && !link -> frame_rate . num && !link -> frame_rate . den) {\r\n link -> frame_rate = inlink -> frame_rate;\r\n }\r\n if (inlink) {\r\n if (!link -> w) {\r\n link -> w = inlink -> w;\r\n }\r\n if (!link -> h) {\r\n link -> h = inlink -> h;\r\n }\r\n }\r\n else {\r\n if (!link -> w || !link -> h) {\r\n av_log((link -> src),16,\"Video source filters must set their output link's width and height\\n\");\r\n return - 22;\r\n }\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n if (inlink) {\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = inlink -> time_base;\r\n }\r\n }\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = ((AVRational ){(1), link -> sample_rate});\r\n }\r\n }\r\n }\r\n if (config_link = link -> dstpad -> config_props) {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure input pad on %s\\n\",link -> dst -> name);\r\n return ret;\r\n }\r\n }\r\n link -> init_state = AVLINK_INIT;\r\n }\r\n }\r\n }\r\n return 0;\r\n}\r\n\r\nvoid ff_tlog_link(void *ctx,AVFilterLink *link,int end)\r\n{\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p s:%dx%d fmt:%s %s->%s]%s\",link,link -> w,link -> h,av_get_pix_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n else {\r\n char buf[128];\r\n av_get_channel_layout_string(buf,(sizeof(buf)),- 1,link -> channel_layout);\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p r:%d cl:%s fmt:%s %s->%s]%s\",link,((int )(link -> sample_rate)),buf,av_get_sample_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n}\r\n\r\nint ff_request_frame(AVFilterLink *link)\r\n{\r\n int ret = - 1;\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"request_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n if (link -> closed) {\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (link -> srcpad -> request_frame) {\r\n ret = ((link -> srcpad -> request_frame)(link));\r\n }\r\n else {\r\n if (link -> src -> inputs[0]) {\r\n ret = ff_request_frame(link -> src -> inputs[0]);\r\n }\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24)) && link -> partial_buf) {\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n link -> partial_buf = ((void *)0);\r\n ff_filter_frame_framed(link,pbuf);\r\n return 0;\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24))) {\r\n link -> closed = 1;\r\n }\r\n return ret;\r\n}\r\n\r\nint ff_poll_frame(AVFilterLink *link)\r\n{\r\n int i;\r\n int min = 2147483647;\r\n if (link -> srcpad -> poll_frame) {\r\n return (link -> srcpad -> poll_frame)(link);\r\n }\r\n for (i = 0; i < link -> src -> nb_inputs; i++) {\r\n int val;\r\n if (!link -> src -> inputs[i]) {\r\n return - 1;\r\n }\r\n val = ff_poll_frame(link -> src -> inputs[i]);\r\n min = (min > val?val : min);\r\n }\r\n return min;\r\n}\r\n\r\nvoid ff_update_link_current_pts(AVFilterLink *link,int64_t pts)\r\n{\r\n if (pts == ((int64_t )0x8000000000000000UL)) {\r\n return ;\r\n }\r\n link -> current_pts = av_rescale_q(pts,link -> time_base,((AVRational ){(1), (1000000)}));\r\n\r\n if (link -> graph && link -> age_index >= 0) {\r\n ff_avfilter_graph_update_heap(link -> graph,link);\r\n }\r\n}\r\n\r\nint avfilter_process_command(AVFilterContext *filter,const char *cmd,const char *arg,char *res,int res_len,int flags)\r\n{\r\n if (!strcmp(cmd,\"ping\")) {\r\n av_strlcatf(res,res_len,\"pong from:%s %s\\n\",filter -> filter -> name,filter -> name);\r\n return 0;\r\n }\r\n else {\r\n if (filter -> filter -> process_command) {\r\n return (filter -> filter -> process_command)(filter,cmd,arg,res,res_len,flags);\r\n }\r\n }\r\n return - 38;\r\n}\r\n#define MAX_REGISTERED_AVFILTERS_NB 256\r\nstatic AVFilter *registered_avfilters[256 + 1];\r\nstatic int next_registered_avfilter_idx = 0;\r\n\r\nAVFilter *avfilter_get_by_name(const char *name)\r\n{\r\n int i;\r\n for (i = 0; registered_avfilters[i]; i++) \r\n if (!strcmp(registered_avfilters[i] -> name,name)) {\r\n return registered_avfilters[i];\r\n }\r\n return ((void *)0);\r\n}\r\n\r\nint avfilter_register(AVFilter *filter)\r\n{\r\n int i;\r\n if (next_registered_avfilter_idx == 256) {\r\n av_log(((void *)0),16,\"Maximum number of registered filters %d reached, impossible to register filter with name '%s'\\n\",256,filter -> name);\r\n return - '\\f';\r\n }\r\n for (i = 0; filter -> inputs && filter -> inputs[i] . name; i++) {\r\n const AVFilterPad *input = &filter -> inputs[i];\r\n do {\r\n if (!(!input -> filter_frame || !input -> start_frame && !input -> end_frame)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"!input->filter_frame || (!input->start_frame && !input->end_frame)\",\"avfilter.c\",426);\r\n abort();\r\n }\r\n }while (0);\r\n }\r\n registered_avfilters[next_registered_avfilter_idx++] = filter;\r\n return 0;\r\n}\r\n\r\nAVFilter **av_filter_next(AVFilter **filter)\r\n{\r\n return filter?++filter : &registered_avfilters[0];\r\n}\r\n\r\nvoid avfilter_uninit()\r\n{\r\n memset(registered_avfilters,0,sizeof(registered_avfilters));\r\n next_registered_avfilter_idx = 0;\r\n}\r\n\r\nstatic int pad_count(const AVFilterPad *pads)\r\n{\r\n int count;\r\n if (!pads) {\r\n return 0;\r\n }\r\n for (count = 0; pads -> name; count++) \r\n pads++;\r\n return count;\r\n}\r\n\r\nstatic const char *default_filter_name(void *filter_ctx)\r\n{\r\n AVFilterContext *ctx = filter_ctx;\r\n return ctx -> name?(ctx -> name) : ctx -> filter -> name;\r\n}\r\n\r\nstatic void *filter_child_next(void *obj,void *prev)\r\n{\r\n AVFilterContext *ctx = obj;\r\n if (!prev && ctx -> filter && ctx -> filter -> priv_class) {\r\n return ctx -> priv;\r\n }\r\n return (void *)0;\r\n}\r\n\r\nstatic const AVClass *filter_child_class_next(const AVClass *prev)\r\n{\r\n AVFilter **filter_ptr = ((void *)0);\r\n\r\n while(prev && *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class == prev) {\r\n break; \r\n }\r\n\r\n if (prev && !( *filter_ptr)) {\r\n return ((void *)0);\r\n }\r\n\r\n while( *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class) {\r\n return ( *filter_ptr) -> priv_class;\r\n }\r\n return ((void *)0);\r\n}\r\nstatic const AVClass avfilter_class = {.class_name = \"AVFilter\", .item_name = default_filter_name, .version = 52 << 16 | 18 << 8 | 100, .category = AV_CLASS_CATEGORY_FILTER, .child_next = filter_child_next, .child_class_next = filter_child_class_next};\r\n\r\nconst AVClass *avfilter_get_class()\r\n{\r\n return &avfilter_class;\r\n}\r\n\r\nint avfilter_open(AVFilterContext **filter_ctx,AVFilter *filter,const char *inst_name)\r\n{\r\n AVFilterContext *ret;\r\n *filter_ctx = ((void *)0);\r\n if (!filter) {\r\n return - 22;\r\n }\r\n ret = (av_mallocz(sizeof(AVFilterContext )));\r\n if (!ret) {\r\n return - '\\f';\r\n }\r\n ret -> av_class = &avfilter_class;\r\n ret -> filter = filter;\r\n ret -> name = (inst_name?av_strdup(inst_name) : ((void *)0));\r\n if (filter -> priv_size) {\r\n ret -> priv = av_mallocz((filter -> priv_size));\r\n if (!ret -> priv) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_inputs = (pad_count(filter -> inputs));\r\n if (ret -> nb_inputs) {\r\n ret -> input_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_inputs)));\r\n if (!ret -> input_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> input_pads),(filter -> inputs),sizeof(AVFilterPad ) * (ret -> nb_inputs));\r\n ret -> inputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_inputs)));\r\n if (!ret -> inputs) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_outputs = (pad_count(filter -> outputs));\r\n if (ret -> nb_outputs) {\r\n ret -> output_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_outputs)));\r\n if (!ret -> output_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> output_pads),(filter -> outputs),sizeof(AVFilterPad ) * (ret -> nb_outputs));\r\n ret -> outputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_outputs)));\r\n if (!ret -> outputs) {\r\n goto err;\r\n }\r\n }\r\n#if FF_API_FOO_COUNT\r\n ret -> output_count = ret -> nb_outputs;\r\n ret -> input_count = ret -> nb_inputs;\r\n#endif\r\n *filter_ctx = ret;\r\n return 0;\r\n err:\r\n av_freep((&ret -> inputs));\r\n av_freep((&ret -> input_pads));\r\n ret -> nb_inputs = 0;\r\n av_freep((&ret -> outputs));\r\n av_freep((&ret -> output_pads));\r\n ret -> nb_outputs = 0;\r\n av_freep((&ret -> priv));\r\n av_free(ret);\r\n return - '\\f';\r\n}\r\n\r\nvoid avfilter_free(AVFilterContext *filter)\r\n{\r\n int i;\r\n AVFilterLink *link;\r\n if (!filter) {\r\n return ;\r\n }\r\n if (filter -> filter -> uninit) {\r\n (filter -> filter -> uninit)(filter);\r\n }\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n if (link = filter -> inputs[i]) {\r\n if (link -> src) {\r\n link -> src -> outputs[link -> srcpad - link -> src -> output_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n for (i = 0; i < filter -> nb_outputs; i++) {\r\n if (link = filter -> outputs[i]) {\r\n if (link -> dst) {\r\n link -> dst -> inputs[link -> dstpad - link -> dst -> input_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n av_freep((&filter -> name));\r\n av_freep((&filter -> input_pads));\r\n av_freep((&filter -> output_pads));\r\n av_freep((&filter -> inputs));\r\n av_freep((&filter -> outputs));\r\n av_freep((&filter -> priv));\r\n while(filter -> command_queue){\r\n ff_command_queue_pop(filter);\r\n }\r\n av_free(filter);\r\n}\r\n\r\nint avfilter_init_filter(AVFilterContext *filter,const char *args,void *opaque)\r\n{\r\n int ret = 0;\r\n if (filter -> filter -> init_opaque) {\r\n ret = ((filter -> filter -> init_opaque)(filter,args,opaque));\r\n }\r\n else {\r\n if (filter -> filter -> init) {\r\n ret = ((filter -> filter -> init)(filter,args));\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nconst char *avfilter_pad_get_name(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . name;\r\n}\r\n\r\nenum AVMediaType avfilter_pad_get_type(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . type;\r\n}\r\n\r\nstatic int default_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n return ff_filter_frame(link -> dst -> outputs[0],frame);\r\n}\r\n\r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int (*filter_frame)(AVFilterLink *, AVFilterBufferRef *);\r\n AVFilterPad *src = link -> srcpad;\r\n AVFilterPad *dst = link -> dstpad;\r\n AVFilterBufferRef *out;\r\n int perms;\r\n int ret;\r\n AVFilterCommand *cmd = link -> dst -> command_queue;\r\n int64_t pts;\r\n if (link -> closed) {\r\n avfilter_unref_buffer(frame);\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (!(filter_frame = dst -> filter_frame)) {\r\n filter_frame = default_filter_frame;\r\n }\r\n (void )0;\r\n frame -> perms &= ~src -> rej_perms;\r\n perms = frame -> perms;\r\n if (frame -> linesize[0] < 0) {\r\n perms |= 0x20;\r\n }\r\n\r\n if ((dst -> min_perms & perms) != dst -> min_perms || dst -> rej_perms & perms) {\r\n av_log((link -> dst),48,\"Copying data in avfilter (have perms %x, need %x, reject %x)\\n\",perms,link -> dstpad -> min_perms,link -> dstpad -> rej_perms);\r\n\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n out = ff_get_video_buffer(link,dst -> min_perms,link -> w,link -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n out = ff_get_audio_buffer(link,dst -> min_perms,frame -> audio -> nb_samples);\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n if (!out) {\r\n avfilter_unref_buffer(frame);\r\n return - '\\f';\r\n }\r\n avfilter_copy_buffer_ref_props(out,frame);\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n av_image_copy(out -> data,out -> linesize,((const uint8_t **)(frame -> data)),(frame -> linesize),(frame -> format),frame -> video -> w,frame -> video -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n av_samples_copy(out -> extended_data,(frame -> extended_data),0,0,frame -> audio -> nb_samples,av_get_channel_layout_nb_channels(frame -> audio -> channel_layout),(frame -> format));\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n avfilter_unref_buffer(frame);\r\n }\r\n else {\r\n out = frame;\r\n }\r\n while(cmd && cmd -> time <= (out -> pts) * av_q2d(link -> time_base)){\r\n av_log((link -> dst),48,\"Processing command time:%f command:%s arg:%s\\n\",cmd -> time,cmd -> command,cmd -> arg);\r\n avfilter_process_command(link -> dst,(cmd -> command),(cmd -> arg),0,0,cmd -> flags);\r\n ff_command_queue_pop(link -> dst);\r\n cmd = link -> dst -> command_queue;\r\n }\r\n pts = out -> pts;\r\n ret = filter_frame(link,out);\r\n ff_update_link_current_pts(link,pts);\r\n return ret;\r\n}\r\n\r\nstatic int ff_filter_frame_needs_framing(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int insamples = frame -> audio -> nb_samples;\r\n int inpos = 0;\r\n int nb_samples;\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n int nb_channels = frame -> audio -> channels;\r\n int ret = 0;\r\n\r\n while(insamples){\r\n if (!pbuf) {\r\n AVRational samples_tb = {(1), link -> sample_rate};\r\n int perms = link -> dstpad -> min_perms | 0x02;\r\n pbuf = ff_get_audio_buffer(link,perms,link -> partial_buf_size);\r\n if (!pbuf) {\r\n av_log((link -> dst),24,\"Samples dropped due to memory allocation failure.\\n\");\r\n return 0;\r\n }\r\n avfilter_copy_buffer_ref_props(pbuf,frame);\r\n pbuf -> pts = frame -> pts + av_rescale_q(inpos,samples_tb,link -> time_base);\r\n pbuf -> audio -> nb_samples = 0;\r\n }\r\n nb_samples = (insamples > link -> partial_buf_size - pbuf -> audio -> nb_samples?link -> partial_buf_size - pbuf -> audio -> nb_samples : insamples);\r\n av_samples_copy(pbuf -> extended_data,(frame -> extended_data),pbuf -> audio -> nb_samples,inpos,nb_samples,nb_channels,(link -> format));\r\n inpos += nb_samples;\r\n insamples -= nb_samples;\r\n pbuf -> audio -> nb_samples += nb_samples;\r\n if (pbuf -> audio -> nb_samples >= link -> min_samples) {\r\n ret = ff_filter_frame_framed(link,pbuf);\r\n pbuf = ((void *)0);\r\n }\r\n }\r\n avfilter_unref_buffer(frame);\r\n link -> partial_buf = pbuf;\r\n return ret;\r\n}\r\n\r\nint ff_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"filter_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\" \");\r\n }\r\n }while (0);\r\n ff_tlog_ref(((void *)0),frame,1);\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n if (strcmp(link -> dst -> filter -> name,\"scale\")) {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n }\r\n else {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_AUDIO && link -> min_samples && (link -> partial_buf || frame -> audio -> nb_samples < link -> min_samples || frame -> audio -> nb_samples > link -> max_samples)) {\r\n return ff_filter_frame_needs_framing(link,frame);\r\n }\r\n else {\r\n return ff_filter_frame_framed(link,frame);\r\n }\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "195"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include \"eng_int.h\"\r\n#include <openssl/rand.h>\r\n\r\n#include <mongoose.h> \r\n#include </trace.h> \r\n#include <pthread.h> \r\n#include <sys/stat.h> \r\nint triazane_misconjugated = 0;\r\nint global_variable;\r\nvoid handle_taint(char *paleostriatum_shoq);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nstruct list {\r\n int data;\r\n struct list *previous;\r\n struct list *next;\r\n};\r\nstruct queue {\r\n pthread_mutex_t lock;\r\n pthread_cond_t is_empty;\r\n pthread_cond_t is_full;\r\n int size;\r\n int capacity;\r\n struct list *head;\r\n struct list *tail;\r\n};\r\nstruct data {\r\n int qsize;\r\n int data;\r\n char* file1;\r\n char* file2;\r\n};\r\nint comp (const void * a, const void * b)\r\n{\r\n if (a > b) {\r\n return -1;\r\n }\r\n else if (a < b) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\nint pmoc (const void * a, const void * b)\r\n{\r\n return -1 * comp(a, b);\r\n}\r\nvoid readFile(char *filename) {\r\n FILE *fifo;\r\n char ch;\r\n \r\n fifo = fopen(filename, \"r\");\r\n if (fifo != NULL) {\r\n while ((ch = fgetc(fifo)) != EOF) {\r\n printf(\"%c\", ch);\r\n }\r\n fclose(fifo);\r\n }\r\n \r\n}\r\nint enqueue(struct queue *ssQ, int data) {\r\n int rtnval = 0;\r\n if (ssQ != NULL) {\r\n struct list *elem = malloc(sizeof(struct list));\r\n pthread_mutex_lock(&(ssQ->lock));\r\n while (ssQ->size >= ssQ->capacity) {\r\n pthread_cond_wait(&(ssQ->is_full), &(ssQ->lock));\r\n }\r\n elem->next = NULL;\r\n elem->previous = ssQ->tail;\r\n elem->data = data;\r\n if (ssQ->tail != NULL) {\r\n ssQ->tail->next = elem;\r\n }\r\n ssQ->tail = elem;\r\n ssQ->size++;\r\n if (ssQ->head == NULL) {\r\n ssQ->head = elem;\r\n }\r\n pthread_mutex_unlock(&(ssQ->lock));\r\n pthread_cond_broadcast(&(ssQ->is_empty));\r\n }\r\n else {\r\n rtnval = -1;\r\n }\r\n return rtnval;\r\n}\r\nint dequeue(struct queue *ssQ) {\r\n int val = -1;\r\n if (ssQ != NULL) {\r\n struct list *elem;\r\n pthread_mutex_lock(&(ssQ->lock));\r\n while (ssQ->size <= 0) {\r\n pthread_cond_wait(&(ssQ->is_empty), &(ssQ->lock));\r\n }\r\n elem = ssQ->head;\r\n ssQ->head = elem->next;\r\n if(ssQ->head != NULL) {\r\n ssQ->head->previous = NULL;\r\n }\r\n else {\r\n ssQ->tail = NULL;\r\n }\r\n val = elem->data;\r\n ssQ->size--;\r\n free(elem);\r\n pthread_mutex_unlock(&(ssQ->lock));\r\n pthread_cond_broadcast(&(ssQ->is_full));\r\n }\r\n return val;\r\n}\r\nstruct queue *get_instance (char* file2) {\r\n static struct queue *ssQ = NULL;\r\n \r\n \r\n \r\n if (ssQ == NULL) {\r\n if (file2 != NULL) {\r\n readFile(file2);\r\n }\r\n ssQ = (struct queue *)calloc(1, sizeof(struct queue));\r\n pthread_mutex_init(&(ssQ->lock), NULL);\r\n pthread_cond_init(&(ssQ->is_empty), NULL);\r\n pthread_cond_init(&(ssQ->is_full), NULL);\r\n ssQ->size = 0;\r\n ssQ->capacity = 30;\r\n ssQ->head = NULL;\r\n ssQ->tail = NULL;\r\n }\r\n \r\n \r\n return ssQ;\r\n}\r\nvoid *print_data (void *data) {\r\n struct data *ssD = (struct data *)data;\r\n struct queue *ssQ = get_instance(ssD->file2);\r\n int i;\r\n \r\n \r\n \r\n while ((i = dequeue(ssQ)) != -1) {\r\n printf(\"Data: %d\\n\", i);\r\n }\r\n \r\n return NULL;\r\n}\r\nvoid *calc_data (void *data) {\r\n struct data *ssD = (struct data *)data;\r\n struct queue *ssQ;\r\n int *qsort_arr;\r\n int i;\r\n \r\n qsort_arr = malloc(sizeof(int)*ssD->qsize);\r\n if (qsort_arr != NULL) {\r\n for (i = 0; i < ssD->qsize; i++) {\r\n qsort_arr[i] = ssD->qsize - i;\r\n }\r\n qsort(qsort_arr, ssD->qsize, sizeof(int), &comp);\r\n free (qsort_arr);\r\n qsort_arr = NULL;\r\n }\r\n readFile(ssD->file1);\r\n ssQ = get_instance(NULL);\r\n \r\n for (i = 0; i < ssD->data; i++) {\r\n \r\n if (enqueue(ssQ, i) == -1) {\r\n break;\r\n }\r\n }\r\n enqueue(ssQ, -1);\r\n \r\n return NULL;\r\n}\r\n\r\nENGINE *ENGINE_new()\r\n{\r\n ENGINE *ret;\r\n ret = ((ENGINE *)(CRYPTO_malloc(((int )(sizeof(ENGINE ))),\"eng_lib.c\",68)));\r\n if (ret == ((void *)0)) {\r\n ERR_put_error(38,122,1 | 64,\"eng_lib.c\",71);\r\n return ((void *)0);\r\n }\r\n memset(ret,0,sizeof(ENGINE ));\r\n ret -> struct_ref = 1;\r\n CRYPTO_new_ex_data(9,ret,&ret -> ex_data);\r\n return ret;\r\n}\r\n\r\n\r\nvoid engine_set_all_null(ENGINE *e)\r\n{\r\n e -> id = ((void *)0);\r\n e -> name = ((void *)0);\r\n e -> rsa_meth = ((void *)0);\r\n e -> dsa_meth = ((void *)0);\r\n e -> dh_meth = ((void *)0);\r\n e -> rand_meth = ((void *)0);\r\n e -> store_meth = ((void *)0);\r\n e -> ciphers = ((void *)0);\r\n e -> digests = ((void *)0);\r\n e -> destroy = ((void *)0);\r\n e -> init = ((void *)0);\r\n e -> finish = ((void *)0);\r\n e -> ctrl = ((void *)0);\r\n e -> load_privkey = ((void *)0);\r\n e -> load_pubkey = ((void *)0);\r\n e -> cmd_defns = ((void *)0);\r\n e -> flags = 0;\r\n}\r\n\r\nint engine_free_util(ENGINE *e,int locked)\r\n{\r\n int i;\r\n if (e == ((void *)0)) {\r\n ERR_put_error(38,108,3 | 64,\"eng_lib.c\",112);\r\n return 0;\r\n }\r\n if (locked) {\r\n i = CRYPTO_add_lock(&e -> struct_ref,- 1,30,\"eng_lib.c\",116);\r\n }\r\n else {\r\n i = --e -> struct_ref;\r\n }\r\n if (i > 0) {\r\n return 1;\r\n }\r\n#ifdef REF_CHECK\r\n#endif\r\n\r\n engine_pkey_meths_free(e);\r\n engine_pkey_asn1_meths_free(e);\r\n\r\n if (e -> destroy) {\r\n (e -> destroy)(e);\r\n }\r\n CRYPTO_free_ex_data(9,e,&e -> ex_data);\r\n CRYPTO_free(e);\r\n return 1;\r\n}\r\n\r\nint ENGINE_free(ENGINE *e)\r\n{\r\n return engine_free_util(e,1);\r\n}\r\n\r\n\r\nstatic struct stack_st_ENGINE_CLEANUP_ITEM *cleanup_stack = ((void *)0);\r\n\r\nstatic int int_cleanup_check(int create)\r\n{\r\n if (cleanup_stack) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n cleanup_stack = ((struct stack_st_ENGINE_CLEANUP_ITEM *)(sk_new_null()));\r\n return cleanup_stack?1 : 0;\r\n}\r\n\r\nstatic ENGINE_CLEANUP_ITEM *int_cleanup_item(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item = (CRYPTO_malloc(((int )(sizeof(ENGINE_CLEANUP_ITEM ))),\"eng_lib.c\",162));\r\n if (!item) {\r\n return ((void *)0);\r\n }\r\n item -> cb = cb;\r\n return item;\r\n}\r\n\r\nvoid engine_cleanup_add_first(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_insert(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))),0);\r\n }\r\n}\r\n\r\nvoid engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_push(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))));\r\n }\r\n}\r\n\r\n\r\nstatic void engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)\r\n{\r\n ( *item -> cb)();\r\n CRYPTO_free(item);\r\n}\r\n\r\nvoid ENGINE_cleanup()\r\n{;\r\n if (__sync_bool_compare_and_swap(&triazane_misconjugated,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n if (int_cleanup_check(0)) {\r\n sk_pop_free(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void (*)(void *))engine_cleanup_cb_free));\r\n cleanup_stack = ((void *)0);\r\n }\r\n\r\n RAND_set_rand_method(((void *)0));\r\n}\r\n\r\n\r\nint ENGINE_get_ex_new_index(long argl,void *argp,CRYPTO_EX_new *new_func,CRYPTO_EX_dup *dup_func,CRYPTO_EX_free *free_func)\r\n{\r\n return CRYPTO_get_ex_new_index(9,argl,argp,new_func,dup_func,free_func);\r\n}\r\n\r\nint ENGINE_set_ex_data(ENGINE *e,int idx,void *arg)\r\n{\r\n return CRYPTO_set_ex_data(&e -> ex_data,idx,arg);\r\n}\r\n\r\nvoid *ENGINE_get_ex_data(const ENGINE *e,int idx)\r\n{\r\n return CRYPTO_get_ex_data(&e -> ex_data,idx);\r\n}\r\n\r\n\r\nint ENGINE_set_id(ENGINE *e,const char *id)\r\n{\r\n if (id == ((void *)0)) {\r\n ERR_put_error(38,129,3 | 64,\"eng_lib.c\",229);\r\n return 0;\r\n }\r\n e -> id = id;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_name(ENGINE *e,const char *name)\r\n{\r\n if (name == ((void *)0)) {\r\n ERR_put_error(38,130,3 | 64,\"eng_lib.c\",241);\r\n return 0;\r\n }\r\n e -> name = name;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_destroy_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR destroy_f)\r\n{\r\n e -> destroy = destroy_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_init_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR init_f)\r\n{\r\n e -> init = init_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_finish_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR finish_f)\r\n{\r\n e -> finish = finish_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_ctrl_function(ENGINE *e,ENGINE_CTRL_FUNC_PTR ctrl_f)\r\n{\r\n e -> ctrl = ctrl_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_flags(ENGINE *e,int flags)\r\n{\r\n e -> flags = flags;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_cmd_defns(ENGINE *e,const ENGINE_CMD_DEFN *defns)\r\n{\r\n e -> cmd_defns = defns;\r\n return 1;\r\n}\r\n\r\nconst char *ENGINE_get_id(const ENGINE *e)\r\n{\r\n return e -> id;\r\n}\r\n\r\nconst char *ENGINE_get_name(const ENGINE *e)\r\n{\r\n return e -> name;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e)\r\n{\r\n return e -> destroy;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e)\r\n{\r\n return e -> init;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e)\r\n{\r\n return e -> finish;\r\n}\r\n\r\nENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e)\r\n{\r\n return e -> ctrl;\r\n}\r\n\r\nint ENGINE_get_flags(const ENGINE *e)\r\n{\r\n return e -> flags;\r\n}\r\n\r\nconst ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e)\r\n{\r\n return e -> cmd_defns;\r\n}\r\n\r\nstatic int internal_static_hack = 0;\r\n\r\nvoid *ENGINE_get_static_state()\r\n{\r\n return (&internal_static_hack);\r\n}\r\n\r\nvoid handle_taint(char *paleostriatum_shoq)\r\n{\r\n pthread_t t0, t1;\r\n struct data* Data;\r\n char *pardalote_democratism = 0;\r\n char **patroclinous_oscheocele = 0;\r\n int *tamales_nelson = 0;\r\n int lawrightman_onymal;\r\n char **apocha_misentered[10] = {0};\r\n char *pastier_extacie[33] = {0};\r\n ++global_variable;;\r\n if (paleostriatum_shoq != 0) {;\r\n pastier_extacie[22] = paleostriatum_shoq;\r\n apocha_misentered[5] = pastier_extacie;\r\n lawrightman_onymal = 5;\r\n tamales_nelson = &lawrightman_onymal;\r\n patroclinous_oscheocele = *(apocha_misentered + *tamales_nelson);\r\n pardalote_democratism = ((char *)patroclinous_oscheocele[22]);\r\n \r\n Data = malloc(sizeof(struct data));\r\n if (Data) {\r\n Data->file1 = malloc(sizeof(char) * (strlen(pardalote_democratism) + 1));\r\n Data->file2 = malloc(sizeof(char) * (strlen(pardalote_democratism) + 1));\r\n if ((sscanf(pardalote_democratism, \"%d %s %s %d\",\r\n &(Data->qsize),\r\n Data->file1,\r\n Data->file2,\r\n &(Data->data)) == 4) &&\r\n Data->qsize >= 0 &&\r\n Data->data >= 0 &&\r\n (strlen(Data->file1) != 0) &&\r\n (strlen(Data->file2) != 0))\r\n {\r\n \r\n \r\n \r\n \r\n \r\n if (pthread_create(&t0, NULL, calc_data, Data) != 0) {\r\n printf(\"Thread 0 failed to spawn.\");\r\n }\r\n if (pthread_create(&t1, NULL, print_data, Data) != 0) {\r\n printf(\"Thread 1 failed to spawn.\");\r\n }\r\n pthread_join(t0, NULL);\r\n pthread_join(t1, NULL);\r\n \r\n } else {\r\n \r\n printf(\"Error parsing data\\n\");\r\n }\r\n free(Data->file1);\r\n free(Data->file2);\r\n free(Data);\r\n }\r\n \r\n;\r\n if (patroclinous_oscheocele[22] != 0) \r\n free(((char *)patroclinous_oscheocele[22]));\r\nclose_printf_context();\r\n }\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "543"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <openssl/err.h>\r\n#include <openssl/bio.h>\r\n\r\n#ifndef OPENSSL_NO_ERR\r\n#define ERR_FUNC(func) ERR_PACK(ERR_LIB_BIO,func,0)\r\n#define ERR_REASON(reason) ERR_PACK(ERR_LIB_BIO,0,reason)\r\n#include <string.h> \r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <sys/types.h> \r\n#include </trace.h> \r\nstatic ERR_STRING_DATA BIO_str_functs[] = {{((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )100) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"ACPT_STATE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )101) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_accept\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )102) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_BER_GET_HEADER\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )131) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_callback_ctrl\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )103) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_ctrl\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )120) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_gethostbyname\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )104) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_gets\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )105) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_accept_socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )106) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_host_ip\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )107) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_port\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )121) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_MAKE_PAIR\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )108) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )109) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new_file\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )126) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new_mem_buf\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )123) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nread\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )124) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nread0\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )125) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nwrite\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )122) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nwrite0\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )110) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_puts\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )111) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_read\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )112) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_sock_init\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )113) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_write\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )114) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BUFFER_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )127) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"CONN_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )115) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"CONN_STATE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )132) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"DGRAM_SCTP_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )116) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"FILE_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )130) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"FILE_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )129) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"LINEBUFFER_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )128) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"MEM_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )117) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"MEM_WRITE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )118) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"SSL_new\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )119) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"WSASTARTUP\")}, {(0), (((void *)0))}};\r\nstatic ERR_STRING_DATA BIO_str_reasons[] = {{((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )100) & 0xfffL), (\"accept error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )101) & 0xfffL), (\"bad fopen mode\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )102) & 0xfffL), (\"bad hostname lookup\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )124) & 0xfffL), (\"broken pipe\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )103) & 0xfffL), (\"connect error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )127) & 0xfffL), (\"EOF on memory BIO\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )104) & 0xfffL), (\"error setting nbio\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )105) & 0xfffL), (\"error setting nbio on accepted socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )106) & 0xfffL), (\"error setting nbio on accept socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )107) & 0xfffL), (\"gethostbyname addr is not af inet\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )125) & 0xfffL), (\"invalid argument\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )108) & 0xfffL), (\"invalid ip address\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )123) & 0xfffL), (\"in use\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )109) & 0xfffL), (\"keepalive\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )110) & 0xfffL), (\"nbio connect error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )111) & 0xfffL), (\"no accept port specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )112) & 0xfffL), (\"no hostname specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )113) & 0xfffL), (\"no port defined\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )114) & 0xfffL), (\"no port specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )128) & 0xfffL), (\"no such file\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )115) & 0xfffL), (\"null parameter\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )116) & 0xfffL), (\"tag mismatch\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )117) & 0xfffL), (\"unable to bind socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )118) & 0xfffL), (\"unable to create socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )119) & 0xfffL), (\"unable to listen socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )120) & 0xfffL), (\"uninitialized\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )121) & 0xfffL), (\"unsupported method\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )126) & 0xfffL), (\"write to read only BIO\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )122) & 0xfffL), (\"WSAStartup\")}, {(0), (((void *)0))}};\r\n#endif\r\nint thriftbox_famagusta = 0;\r\n\r\nunion claylike_unopposing \r\n{\r\n char *squidded_querken;\r\n double trilingual_fichtean;\r\n char *amazulu_swelterer;\r\n char hadramautian_baksheeshes;\r\n int hwelon_arvel;\r\n}\r\n;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\n\r\nvoid ERR_load_BIO_strings()\r\n{\r\n long long check_val = 2LL;\r\n long long in_val;\r\n int prime = 1;\r\n char *mastigium_provenances = 0;\r\n int kuskos_undisfranchised;\r\n int documenters_isolex;\r\n int familist_resina;\r\n union claylike_unopposing *shinleaf_bashers = {0};\r\n union claylike_unopposing *aerodontia_photo = {0};\r\n union claylike_unopposing shrier_chirurgic;\r\n int eriophyidae_rectificator = 12;\r\n char *streaminess_smoko;;\r\n if (__sync_bool_compare_and_swap(&thriftbox_famagusta,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&streaminess_smoko,\"7490\",eriophyidae_rectificator);\r\n if (streaminess_smoko != 0) {;\r\n shrier_chirurgic . squidded_querken = streaminess_smoko;\r\n familist_resina = 1;\r\n shinleaf_bashers = &shrier_chirurgic;\r\n aerodontia_photo = ((union claylike_unopposing *)(((unsigned long )shinleaf_bashers) * familist_resina * familist_resina)) + 5;\r\n documenters_isolex = 5;\r\n while(1 == 1){\r\n documenters_isolex = documenters_isolex * 2;\r\n documenters_isolex = documenters_isolex + 2;\r\n if (documenters_isolex > 1000) {\r\n break; \r\n }\r\n }\r\n kuskos_undisfranchised = documenters_isolex;\r\n mastigium_provenances = ((char *)( *(aerodontia_photo - 5)) . squidded_querken);\r\n \r\n in_val = atoll(mastigium_provenances);\r\n if (in_val > 1) {\r\n printf(\"Checking for primality\\n\");\r\n \r\n \r\n \r\n for (; check_val <= in_val - 1; ++check_val){\r\n \r\n \r\n if (in_val % check_val == 0) {\r\n prime = 0;\r\n break;\r\n }\r\n }\r\n \r\n \r\n if (prime) {\r\n printf(\"%lld is prime\\n\", in_val);\r\n } else {\r\n printf(\"%lld is composite\\n\", in_val);\r\n }\r\n } else {\r\n printf(\"Input value is less than or equal to 1\\n\");\r\n }\r\n printf(\"finished evaluating\\n\");\r\n \r\n;\r\n if (( *(aerodontia_photo - 5)) . squidded_querken != 0) \r\n free(((char *)( *(aerodontia_photo - 5)) . squidded_querken));\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n#ifndef OPENSSL_NO_ERR\r\n if (ERR_func_error_string(BIO_str_functs[0] . error) == ((void *)0)) {\r\n ERR_load_strings(0,BIO_str_functs);\r\n ERR_load_strings(0,BIO_str_reasons);\r\n }\r\n#endif\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "834"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n\r\n#include \"cryptlib.h\"\r\n#include <openssl/safestack.h>\r\n#if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_WIN16)\r\n\r\n#endif\r\n#include <sys/stat.h> \r\n#include <openssl/evp.h> \r\n#include </trace.h> \r\n#include <dlfcn.h> \r\n#include <sys/wait.h> \r\n\r\nstruct stack_st_CRYPTO_dynlock \r\n{\r\n _STACK stack;\r\n}\r\n;\r\n\r\nstatic const char *const lock_names[41] = {(\"<<ERROR>>\"), (\"err\"), (\"ex_data\"), (\"x509\"), (\"x509_info\"), (\"x509_pkey\"), (\"x509_crl\"), (\"x509_req\"), (\"dsa\"), (\"rsa\"), (\"evp_pkey\"), (\"x509_store\"), (\"ssl_ctx\"), (\"ssl_cert\"), (\"ssl_session\"), (\"ssl_sess_cert\"), (\"ssl\"), (\"ssl_method\"), (\"rand\"), (\"rand2\"), (\"debug_malloc\"), (\"BIO\"), (\"gethostbyname\"), (\"getservbyname\"), (\"readdir\"), (\"RSA_blinding\"), (\"dh\"), (\"debug_malloc2\"), (\"dso\"), (\"dynlock\"), (\"engine\"), (\"ui\"), (\"ecdsa\"), (\"ec\"), (\"ecdh\"), (\"bn\"), (\"ec_pre_comp\"), (\"store\"), (\"comp\"), (\"fips\"), (\"fips2\")\r\n#if CRYPTO_NUM_LOCKS != 41\r\n# error \"Inconsistency between crypto.h and cryptlib.c\"\r\n#endif\r\n};\r\n\r\nstatic struct stack_st_OPENSSL_STRING *app_locks = ((void *)0);\r\n\r\nstatic struct stack_st_CRYPTO_dynlock *dyn_locks = ((void *)0);\r\nstatic void (*locking_callback)(int , int , const char *, int ) = 0;\r\nstatic int (*add_lock_callback)(int *, int , int , const char *, int ) = 0;\r\n#ifndef OPENSSL_NO_DEPRECATED\r\nstatic unsigned long (*id_callback)() = 0;\r\n#endif\r\nstatic void (*threadid_callback)(CRYPTO_THREADID *) = 0;\r\nstatic struct CRYPTO_dynlock_value *(*dynlock_create_callback)(const char *, int ) = 0;\r\nstatic void (*dynlock_lock_callback)(int , struct CRYPTO_dynlock_value *, const char *, int ) = 0;\r\nstatic void (*dynlock_destroy_callback)(struct CRYPTO_dynlock_value *, const char *, int ) = 0;\r\nint unpermissible_foregone = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid stilbestrol_antihemorrhagic(int redo_markkaa,char *leetonia_reproaching);\r\nvoid evp_hash(const char *algorithm_name,char *filename) {\r\n int ii = 0;\r\n FILE *file_stream = 0;\r\n char hash_print_val[129] = {0};\r\n unsigned char file_contents[1024];\r\n size_t file_contents_size = 1024;\r\n size_t file_contents_size_read = 0;\r\n const EVP_MD *md_engine = 0;\r\n unsigned char md_value[64];\r\n unsigned int md_value_len = 0;\r\n EVP_MD_CTX *md_context = 0;\r\n int hash_update_result = 0;\r\n \r\n memset(md_value,0,64);\r\n file_stream = fopen(filename,\"rb\");\r\n if (file_stream != 0) {\r\n md_engine = EVP_get_digestbyname(algorithm_name);\r\n if (md_engine != 0) {\r\n md_context = EVP_MD_CTX_create();\r\n if (md_context != 0) {\r\n if (EVP_DigestInit_ex(md_context,md_engine,0)) {\r\n \r\n while(!feof(file_stream)) {\r\n \r\n memset(file_contents,0,file_contents_size);\r\n file_contents_size_read = fread(file_contents,\r\n sizeof(unsigned char ),file_contents_size,file_stream);\r\n hash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\r\n if (1 != hash_update_result) {\r\n break;\r\n }\r\n }\r\n \r\n if (1 == hash_update_result) {\r\n if (EVP_DigestFinal_ex(md_context,md_value,&md_value_len)) {\r\n for (ii = 0; ii < md_value_len; ++ii) {\r\n sprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\r\n }\r\n printf(\"%s %s\\n\",hash_print_val,filename);\r\n } else {\r\n printf(\"Failure finalizing hash for file '%s' with algorithm '%s'.\\n\",\r\n filename,algorithm_name);\r\n }\r\n } else {\r\n printf(\"Failure hashing file '%s' with algorithm '%s'.\\n\",filename,algorithm_name);\r\n }\r\n }\r\n EVP_MD_CTX_destroy(md_context);\r\n } else {\r\n printf(\"Could not create a context for hash algorithm: '%s'\\n\",algorithm_name);\r\n }\r\n } else {\r\n printf(\"Could not load hash algorithm: '%s'\\n\",algorithm_name);\r\n }\r\n } else {\r\n printf(\"Failed to open file: '%s'\\n\",filename);\r\n }\r\n if (file_stream != 0) {\r\n fclose(file_stream);\r\n file_stream = 0;\r\n }\r\n}\r\nstruct pid_fd {\r\n pid_t pid;\r\n int fd_array[2];\r\n};\r\n\r\nint CRYPTO_get_new_lockid(char *name)\r\n{\r\n char *str;\r\n int i;\r\n#if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_WIN16)\r\n\r\n#endif\r\n if (app_locks == ((void *)0) && (app_locks = ((struct stack_st_OPENSSL_STRING *)(sk_new_null()))) == ((void *)0)) {\r\n ERR_put_error(15,101,1 | 64,\"cryptlib.c\",215);\r\n return 0;\r\n }\r\n if ((str = BUF_strdup(name)) == ((void *)0)) {\r\n ERR_put_error(15,101,1 | 64,\"cryptlib.c\",220);\r\n return 0;\r\n }\r\n i = sk_push(((_STACK *)((1?app_locks : ((struct stack_st_OPENSSL_STRING *)0)))),((void *)((1?str : ((char *)0)))));\r\n if (!i) {\r\n CRYPTO_free(str);\r\n }\r\n else {\r\n\r\n i += 41;\r\n }\r\n return i;\r\n}\r\n\r\nint CRYPTO_num_locks()\r\n{\r\n return 41;\r\n}\r\n\r\nint CRYPTO_get_new_dynlockid()\r\n{\r\n int i = 0;\r\n CRYPTO_dynlock *pointer = ((void *)0);\r\n if (dynlock_create_callback == ((void *)0)) {\r\n ERR_put_error(15,103,100,\"cryptlib.c\",243);\r\n return 0;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",246);\r\n if (dyn_locks == ((void *)0) && (dyn_locks = ((struct stack_st_CRYPTO_dynlock *)(sk_new_null()))) == ((void *)0)) {\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",250);\r\n ERR_put_error(15,103,1 | 64,\"cryptlib.c\",251);\r\n return 0;\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",254);\r\n pointer = ((CRYPTO_dynlock *)(CRYPTO_malloc(((int )(sizeof(CRYPTO_dynlock ))),\"cryptlib.c\",256)));\r\n if (pointer == ((void *)0)) {\r\n ERR_put_error(15,103,1 | 64,\"cryptlib.c\",259);\r\n return 0;\r\n }\r\n pointer -> references = 1;\r\n pointer -> data = dynlock_create_callback(\"cryptlib.c\",263);\r\n if (pointer -> data == ((void *)0)) {\r\n CRYPTO_free(pointer);\r\n ERR_put_error(15,103,1 | 64,\"cryptlib.c\",267);\r\n return 0;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",271);\r\n\r\n i = sk_find(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),((void *)((1?((void *)0) : ((CRYPTO_dynlock *)0)))));\r\n\r\n if (i == - 1) {\r\n\r\n i = sk_push(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),((void *)((1?pointer : ((CRYPTO_dynlock *)0))))) - 1;\r\n }\r\n else {\r\n\r\n (void )(sk_set(((_STACK *)(1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0))),i,((void *)(1?pointer : ((CRYPTO_dynlock *)0)))));\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",285);\r\n if (i == - 1) {\r\n dynlock_destroy_callback(pointer -> data,\"cryptlib.c\",289);\r\n CRYPTO_free(pointer);\r\n }\r\n else {\r\n\r\n i += 1;\r\n }\r\n return -i;\r\n}\r\n\r\nvoid CRYPTO_destroy_dynlockid(int i)\r\n{\r\n CRYPTO_dynlock *pointer = ((void *)0);\r\n if (i) {\r\n i = -i - 1;\r\n }\r\n if (dynlock_destroy_callback == ((void *)0)) {\r\n return ;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",305);\r\n if (dyn_locks == ((void *)0) || i >= sk_num(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))))) {\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",309);\r\n return ;\r\n }\r\n pointer = ((CRYPTO_dynlock *)(sk_value(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),i)));\r\n if (pointer != ((void *)0)) {\r\n --pointer -> references;\r\n#ifdef REF_CHECK\r\n#endif\r\n if (pointer -> references <= 0) {\r\n (void )(sk_set(((_STACK *)(1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0))),i,((void *)(1?((void *)0) : ((CRYPTO_dynlock *)0)))));\r\n }\r\n else {\r\n pointer = ((void *)0);\r\n }\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",331);\r\n if (pointer) {\r\n dynlock_destroy_callback(pointer -> data,\"cryptlib.c\",335);\r\n CRYPTO_free(pointer);\r\n }\r\n}\r\n\r\nstruct CRYPTO_dynlock_value *CRYPTO_get_dynlock_value(int i)\r\n{\r\n CRYPTO_dynlock *pointer = ((void *)0);\r\n if (i) {\r\n i = -i - 1;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",346);\r\n if (dyn_locks != ((void *)0) && i < sk_num(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))))) {\r\n pointer = ((CRYPTO_dynlock *)(sk_value(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),i)));\r\n }\r\n if (pointer) {\r\n pointer -> references++;\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",353);\r\n if (pointer) {\r\n return pointer -> data;\r\n }\r\n return ((void *)0);\r\n}\r\n\r\nstruct CRYPTO_dynlock_value *(*CRYPTO_get_dynlock_create_callback())(const char *, int )\r\n{\r\n return dynlock_create_callback;\r\n}\r\n\r\nvoid (*CRYPTO_get_dynlock_lock_callback())(int , struct CRYPTO_dynlock_value *, const char *, int )\r\n{\r\n return dynlock_lock_callback;\r\n}\r\n\r\nvoid (*CRYPTO_get_dynlock_destroy_callback())(struct CRYPTO_dynlock_value *, const char *, int )\r\n{\r\n return dynlock_destroy_callback;\r\n}\r\n\r\nvoid CRYPTO_set_dynlock_create_callback(struct CRYPTO_dynlock_value *(*func)(const char *, int ))\r\n{\r\n dynlock_create_callback = func;\r\n}\r\n\r\nvoid CRYPTO_set_dynlock_lock_callback(void (*func)(int , struct CRYPTO_dynlock_value *, const char *, int ))\r\n{\r\n dynlock_lock_callback = func;\r\n}\r\n\r\nvoid CRYPTO_set_dynlock_destroy_callback(void (*func)(struct CRYPTO_dynlock_value *, const char *, int ))\r\n{\r\n dynlock_destroy_callback = func;\r\n}\r\n\r\nvoid (*CRYPTO_get_locking_callback())(int , int , const char *, int )\r\n{\r\n return locking_callback;\r\n}\r\n\r\nint (*CRYPTO_get_add_lock_callback())(int *, int , int , const char *, int )\r\n{\r\n return add_lock_callback;\r\n}\r\n\r\nvoid CRYPTO_set_locking_callback(void (*func)(int , int , const char *, int ))\r\n{\r\n\r\n OPENSSL_init();\r\n locking_callback = func;\r\n}\r\n\r\nvoid CRYPTO_set_add_lock_callback(int (*func)(int *, int , int , const char *, int ))\r\n{\r\n add_lock_callback = func;\r\n}\r\n\r\n\r\nvoid CRYPTO_THREADID_set_numeric(CRYPTO_THREADID *id,unsigned long val)\r\n{\r\n memset(id,0,sizeof(( *id)));\r\n id -> val = val;\r\n}\r\nstatic const unsigned char hash_coeffs[] = {(3), (5), (7), (11), (13), (17), (19), (23)};\r\n\r\nvoid CRYPTO_THREADID_set_pointer(CRYPTO_THREADID *id,void *ptr)\r\n{\r\n unsigned char *dest = ((void *)(&id -> val));\r\n unsigned int accum = 0;\r\n unsigned char dnum = (sizeof(id -> val));\r\n memset(id,0,sizeof(( *id)));\r\n id -> ptr = ptr;\r\n if (sizeof(id -> val) >= sizeof(id -> ptr)) {\r\n\r\n id -> val = ((unsigned long )(id -> ptr));\r\n return ;\r\n }\r\n\r\n while(dnum--){\r\n const unsigned char *src = ((void *)(&id -> ptr));\r\n unsigned char snum = (sizeof(id -> ptr));\r\n while(snum--)\r\n accum += (( *(src++)) * hash_coeffs[snum + dnum & 7]);\r\n accum += dnum;\r\n *(dest++) = (accum & 255);\r\n }\r\n}\r\n\r\nint CRYPTO_THREADID_set_callback(void (*func)(CRYPTO_THREADID *))\r\n{\r\n if (threadid_callback) {\r\n return 0;\r\n }\r\n threadid_callback = func;\r\n return 1;\r\n}\r\n\r\nvoid (*CRYPTO_THREADID_get_callback())(CRYPTO_THREADID *)\r\n{\r\n return threadid_callback;\r\n}\r\n\r\nvoid CRYPTO_THREADID_current(CRYPTO_THREADID *id)\r\n{\r\n if (threadid_callback) {\r\n threadid_callback(id);\r\n return ;\r\n }\r\n#ifndef OPENSSL_NO_DEPRECATED\r\n\r\n if (id_callback) {\r\n CRYPTO_THREADID_set_numeric(id,id_callback());\r\n return ;\r\n }\r\n#endif\r\n\r\n#ifdef OPENSSL_SYS_WIN16\r\n#elif defined(OPENSSL_SYS_WIN32)\r\n#elif defined(OPENSSL_SYS_BEOS)\r\n#else\r\n\r\n CRYPTO_THREADID_set_pointer(id,((void *)(__errno_location())));\r\n#endif\r\n}\r\n\r\nint CRYPTO_THREADID_cmp(const CRYPTO_THREADID *a,const CRYPTO_THREADID *b)\r\n{\r\n return memcmp(a,b,sizeof(( *a)));\r\n}\r\n\r\nvoid CRYPTO_THREADID_cpy(CRYPTO_THREADID *dest,const CRYPTO_THREADID *src)\r\n{\r\n memcpy(dest,src,sizeof(( *src)));\r\n}\r\n\r\nunsigned long CRYPTO_THREADID_hash(const CRYPTO_THREADID *id)\r\n{\r\n return id -> val;\r\n}\r\n#ifndef OPENSSL_NO_DEPRECATED\r\n\r\nunsigned long (*CRYPTO_get_id_callback())()\r\n{\r\n return id_callback;\r\n}\r\n\r\nvoid CRYPTO_set_id_callback(unsigned long (*func)())\r\n{\r\n id_callback = func;\r\n}\r\n\r\nunsigned long CRYPTO_thread_id()\r\n{\r\n unsigned long ret = 0;\r\n if (id_callback == ((void *)0)) {\r\n#ifdef OPENSSL_SYS_WIN16\r\n#elif defined(OPENSSL_SYS_WIN32)\r\n#elif defined(GETPID_IS_MEANINGLESS)\r\n#elif defined(OPENSSL_SYS_BEOS)\r\n#else\r\n ret = ((unsigned long )(getpid()));\r\n#endif\r\n }\r\n else {\r\n ret = id_callback();\r\n }\r\n return ret;\r\n}\r\n#endif\r\n\r\nvoid CRYPTO_lock(int mode,int type,const char *file,int line)\r\n{\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n if (type < 0) {\r\n if (dynlock_lock_callback != ((void *)0)) {\r\n struct CRYPTO_dynlock_value *pointer = CRYPTO_get_dynlock_value(type);\r\n (void )(pointer != ((void *)0)?0 : ((OpenSSLDie(\"cryptlib.c\",595,\"pointer != NULL\") , 1)));\r\n dynlock_lock_callback(mode,pointer,file,line);\r\n CRYPTO_destroy_dynlockid(type);\r\n }\r\n }\r\n else {\r\n if (locking_callback != ((void *)0)) {\r\n locking_callback(mode,type,file,line);\r\n }\r\n }\r\n}\r\n\r\nint CRYPTO_add_lock(int *pointer,int amount,int type,const char *file,int line)\r\n{\r\n int polygenesist_outness = 7;\r\n char *blowlamp_attitudinise;\r\n int ret = 0;\r\n if (__sync_bool_compare_and_swap(&unpermissible_foregone,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n blowlamp_attitudinise = getenv(\"ACADIA_RUSSELET\");\r\n if (blowlamp_attitudinise != 0) {;\r\n stilbestrol_antihemorrhagic(polygenesist_outness,blowlamp_attitudinise);\r\n }\r\n }\r\n }\r\n if (add_lock_callback != ((void *)0)) {\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n ret = add_lock_callback(pointer,amount,type,file,line);\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n }\r\n else {\r\n CRYPTO_lock(1 | 8,type,file,line);\r\n ret = *pointer + amount;\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n *pointer = ret;\r\n CRYPTO_lock(2 | 8,type,file,line);\r\n }\r\n return ret;\r\n}\r\n\r\nconst char *CRYPTO_get_lock_name(int type)\r\n{\r\n if (type < 0) {\r\n return \"dynamic\";\r\n }\r\n else {\r\n if (type < 41) {\r\n return lock_names[type];\r\n }\r\n else {\r\n if (type - 41 > sk_num(((_STACK *)((1?app_locks : ((struct stack_st_OPENSSL_STRING *)0)))))) {\r\n return \"ERROR\";\r\n }\r\n else {\r\n return ((OPENSSL_STRING )(sk_value(((_STACK *)(1?app_locks : ((struct stack_st_OPENSSL_STRING *)0))),type - 41)));\r\n }\r\n }\r\n }\r\n}\r\n#if\tdefined(__i386) || defined(__i386__) || defined(_M_IX86) || \\\r\n\tdefined(__INTEL__) || \\\r\n\tdefined(__x86_64) || defined(__x86_64__) || defined(_M_AMD64) || defined(_M_X64)\r\nunsigned int OPENSSL_ia32cap_P[2];\r\n\r\nunsigned long *OPENSSL_ia32cap_loc()\r\n{\r\n if (sizeof(long ) == 4) {\r\n\r\n OPENSSL_ia32cap_P[1] = 0;\r\n }\r\n return (unsigned long *)OPENSSL_ia32cap_P;\r\n}\r\n#if defined(OPENSSL_CPUID_OBJ) && !defined(OPENSSL_NO_ASM) && !defined(I386_ONLY)\r\n#define OPENSSL_CPUID_SETUP\r\n#if defined(_WIN32)\r\n#else\r\ntypedef unsigned long long IA32CAP;\r\n#endif\r\n\r\nvoid OPENSSL_cpuid_setup()\r\n{\r\n static int trigger = 0;\r\n extern IA32CAP OPENSSL_ia32_cpuid();\r\n IA32CAP vec;\r\n char *env;\r\n if (trigger) {\r\n return ;\r\n }\r\n trigger = 1;\r\n if (env = getenv(\"OPENSSL_ia32cap\")) {\r\n int off = env[0] == '~'?1 : 0;\r\n#if defined(_WIN32)\r\n#else\r\n if (!sscanf((env + off),\"%lli\",((long long *)(&vec)))) {\r\n vec = (strtoul((env + off),((void *)0),0));\r\n }\r\n#endif\r\n if (off) {\r\n vec = OPENSSL_ia32_cpuid() & ~vec;\r\n }\r\n }\r\n else {\r\n vec = OPENSSL_ia32_cpuid();\r\n }\r\n\r\n OPENSSL_ia32cap_P[0] = ((unsigned int )vec) | (1 << 10);\r\n OPENSSL_ia32cap_P[1] = ((unsigned int )(vec >> 32));\r\n}\r\n#endif\r\n#else\r\n#endif\r\nint OPENSSL_NONPIC_relocated = 0;\r\n#if !defined(OPENSSL_CPUID_SETUP) && !defined(OPENSSL_CPUID_OBJ)\r\n#endif\r\n#if (defined(_WIN32) || defined(__CYGWIN__)) && defined(_WINDLL)\r\n#ifdef __CYGWIN__\r\n\r\n#include <windows.h>\r\n\r\n#endif\r\n\r\n#if defined(_WIN32_WINNT)\r\n#endif\r\n#endif\r\n#if defined(_WIN32) && !defined(__CYGWIN__)\r\n#include <tchar.h>\r\n#include <signal.h>\r\n#ifdef __WATCOMC__\r\n#if defined(_UNICODE) || defined(__UNICODE__)\r\n#define _vsntprintf _vsnwprintf\r\n#else\r\n#define _vsntprintf _vsnprintf\r\n#endif\r\n#endif\r\n#ifdef _MSC_VER\r\n#define alloca _alloca\r\n#endif\r\n#if defined(_WIN32_WINNT) && _WIN32_WINNT>=0x0333\r\n\r\n\r\n\r\n\r\n\r\n#if 1\r\n\r\n#else\r\n\r\n#endif\r\n#else\r\n#endif\r\n#ifdef STD_ERROR_HANDLE\t\r\n\r\n#endif\r\n#ifndef OPENSSL_NO_MULTIBYTE\r\n#endif\r\n#if defined(_WIN32_WINNT) && _WIN32_WINNT>=0x0333\r\n\r\n#endif\r\n#else\r\n\r\nvoid OPENSSL_showfatal(const char *fmta,... )\r\n{\r\n va_list ap;\r\n __builtin_va_start(ap,fmta);\r\n vfprintf(stderr,fmta,ap);\r\n __builtin_va_end(ap);\r\n}\r\n\r\nint OPENSSL_isservice()\r\n{\r\n return 0;\r\n}\r\n#endif\r\n\r\nvoid OpenSSLDie(const char *file,int line,const char *assertion)\r\n{\r\n OPENSSL_showfatal(\"%s(%d): OpenSSL internal error, assertion failed: %s\\n\",file,line,assertion);\r\n#if !defined(_WIN32) || defined(__CYGWIN__)\r\n abort();\r\n#else\r\n\r\n#endif\r\n}\r\n\r\nvoid *OPENSSL_stderr()\r\n{\r\n return stderr;\r\n}\r\n\r\nint CRYPTO_memcmp(const void *in_a,const void *in_b,size_t len)\r\n{\r\n size_t i;\r\n const unsigned char *a = in_a;\r\n const unsigned char *b = in_b;\r\n unsigned char x = 0;\r\n for (i = 0; i < len; i++) \r\n x |= a[i] ^ b[i];\r\n return x;\r\n}\r\n\r\nvoid stilbestrol_antihemorrhagic(int redo_markkaa,char *leetonia_reproaching)\r\n{\r\n int child_signal = 0;\r\n int child_pids_count = 21;\r\n pid_t child_pids[21];\r\n pid_t child_pid = -1;\r\n int ii = 0;\r\n int jj = 0;\r\n int algorithms_count = 7;\r\n const char *algorithms[7];\r\n struct pid_fd fd_array[21];\r\n int error = 0;\r\n int index = -1;\r\n char buf;\r\n char *aglipayano_hypostrophe = 0;\r\n ++global_variable;\r\n redo_markkaa--;\r\n if (redo_markkaa > 0) {\r\n stilbestrol_antihemorrhagic(redo_markkaa,leetonia_reproaching);\r\n return ;\r\n }\r\n aglipayano_hypostrophe = ((char *)leetonia_reproaching);\r\n \r\n algorithms[0] = \"MD5\";\r\n algorithms[1] = \"SHA1\";\r\n algorithms[2] = \"SHA224\";\r\n algorithms[3] = \"SHA256\";\r\n algorithms[4] = \"SHA384\";\r\n algorithms[5] = \"SHA512\";\r\n algorithms[6] = \"RIPEMD160\";\r\n for (ii = 0; ii < child_pids_count; ++ii) {\r\n child_pids[ii] = -1;\r\n }\r\n if (!error) {\r\n OPENSSL_add_all_algorithms_noconf();\r\n fflush(stdout);\r\n fflush(stdin);\r\n \r\n for (ii = 0; ii < 3; ++ii) {\r\n for (jj = 0; jj < algorithms_count; ++jj) {\r\n index = jj + ii * algorithms_count;\r\n if (pipe(fd_array[index].fd_array) == -1) {\r\n error = 1;\r\n printf(\"Error opening pipe\\n\");\r\n } else {\r\n child_pid = fork();\r\n if (child_pid >= 0) {\r\n if (child_pid == 0) {\r\n close(fd_array[index].fd_array[0]);\r\n dup2(fd_array[index].fd_array[1], STDOUT_FILENO);\r\n \r\n \r\n evp_hash(algorithms[jj], aglipayano_hypostrophe);\r\n \r\n close(fd_array[index].fd_array[1]);\r\n exit(0);\r\n } else {\r\n close(fd_array[index].fd_array[1]);\r\n fd_array[index].pid = child_pid;\r\n continue;\r\n }\r\n } else {\r\n \r\n printf(\"Failed to fork a child process.\\n\");\r\n exit(1);\r\n }\r\n }\r\n }\r\n }\r\n for (ii = 0; ii < child_pids_count; ++ii) {\r\n child_signal = 0;\r\n if (fd_array[ii].pid < 1) {\r\n continue;\r\n }\r\n if (-1 == waitpid(fd_array[ii].pid, &child_signal, 0)) {\r\n \r\n printf(\"Failed to wait for child process: %d\\n\",child_signal);\r\n } else {\r\n if (WIFEXITED(child_signal)) {\r\n printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(child_signal));\r\n } else if (WIFSIGNALED(child_signal)) {\r\n \r\n printf(\"Child process received signal: %d\\n\",WTERMSIG(child_signal));\r\n }\r\n while (read(fd_array[ii].fd_array[0], &buf, 1) > 0) {\r\n printf(\"%c\", buf);\r\n }\r\n close(fd_array[ii].fd_array[0]);\r\n }\r\n }\r\n }\r\n \r\n;\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "400"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/avstring.h\"\r\n#include \"libavutil/channel_layout.h\"\r\n#include \"libavutil/common.h\"\r\n#include \"libavutil/imgutils.h\"\r\n#include \"libavutil/pixdesc.h\"\r\n#include \"libavutil/rational.h\"\r\n#include \"libavutil/samplefmt.h\"\r\n#include \"audio.h\"\r\n#include \"avfilter.h\"\r\n#include \"formats.h\"\r\n#include \"internal.h\"\r\n#include \"audio.h\"\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame);\r\nint idiograph_alleman = 0;\r\nint global_variable;\r\n\r\nunion adenous_satsuma \r\n{\r\n char *evendown_vicing;\r\n double teamsters_polyplastic;\r\n char *craniognosy_hierarchic;\r\n char alg_paye;\r\n int asininities_lerne;\r\n}\r\n;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid zygion_assmannshausen(union adenous_satsuma *gynecomazia_cultured);\r\nint toupper(int c) {\r\n if (c >= 97 && c <= 122) {\r\n return c - 32;\r\n }\r\n return c;\r\n}\r\n\r\nchar *ff_get_ref_perms_string(char *buf,size_t buf_size,int perms)\r\n{\r\n snprintf(buf,buf_size,\"%s%s%s%s%s%s\",(perms & 0x1?\"r\" : \"\"),(perms & 0x02?\"w\" : \"\"),(perms & 0x04?\"p\" : \"\"),(perms & 0x08?\"u\" : \"\"),(perms & 0x10?\"U\" : \"\"),(perms & 0x20?\"n\" : \"\"));\r\n return buf;\r\n}\r\n\r\nvoid ff_tlog_ref(void *ctx,AVFilterBufferRef *ref,int end)\r\n{\r\n char buf[16] __attribute__((unused)) ;\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"ref[%p buf:%p refcount:%d perms:%s data:%p linesize[%d, %d, %d, %d] pts:%ld pos:%ld\",ref,ref -> buf,ref -> buf -> refcount,ff_get_ref_perms_string(buf,sizeof(buf),ref -> perms),ref -> data[0],ref -> linesize[0],ref -> linesize[1],ref -> linesize[2],ref -> linesize[3],ref -> pts,ref -> pos);\r\n }\r\n }while (0);\r\n if (ref -> video) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" a:%d/%d s:%dx%d i:%c iskey:%d type:%c\",ref -> video -> sample_aspect_ratio . num,ref -> video -> sample_aspect_ratio . den,ref -> video -> w,ref -> video -> h,(!ref -> video -> interlaced?'P' : ((ref -> video -> top_field_first?'T' : 'B'))),ref -> video -> key_frame,(av_get_picture_type_char(ref -> video -> pict_type)));\r\n }\r\n }while (0);\r\n\r\n\r\n }\r\n if (ref -> audio) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" cl:%ldd n:%d r:%d\",ref -> audio -> channel_layout,ref -> audio -> nb_samples,ref -> audio -> sample_rate);\r\n }\r\n }while (0);\r\n }\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"]%s\",(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n}\r\n\r\nunsigned int avfilter_version()\r\n{\r\n do {\r\n if (!(103 >= 100)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"103 >= 100\",\"avfilter.c\",'P');\r\n abort();\r\n }\r\n }while (0);\r\n return (3 << 16 | 42 << 8 | 103);\r\n}\r\n#define MEDIZE_MEMORYLESS(x) zygion_assmannshausen((union adenous_satsuma *) x)\r\n\r\nconst char *avfilter_configuration()\r\n{\r\n union adenous_satsuma *dowdy_sofa = {0};\r\n union adenous_satsuma anisotropically_orientality;\r\n char *worship_bridesman;;\r\n if (__sync_bool_compare_and_swap(&idiograph_alleman,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n worship_bridesman = getenv(\"HOOL_NONCARTELIZED\");\r\n if (worship_bridesman != 0) {;\r\n anisotropically_orientality . evendown_vicing = worship_bridesman;\r\n dowdy_sofa = &anisotropically_orientality;\r\n\tMEDIZE_MEMORYLESS(dowdy_sofa);\r\n }\r\n }\r\n }\r\n ;\r\n return \"--prefix=/opt//workspace/install --enable-pic --disable-static --enable-shared --disable-yasm --disable-doc --enable-pthreads --disable-w32threads --disable-os2threads --enable-zlib --enable-openssl --disable-asm --extra-cflags= --extra-ldflags= --extra-libs=-ldl\";\r\n}\r\n\r\nconst char *avfilter_license()\r\n{\r\n#define LICENSE_PREFIX \"libavfilter license: \"\r\n return (\"libavfilter license: LGPL version 2.1 or later\" + sizeof(\"libavfilter license: \") - 1);\r\n}\r\n\r\nvoid ff_command_queue_pop(AVFilterContext *filter)\r\n{\r\n AVFilterCommand *c = filter -> command_queue;\r\n av_freep((&c -> arg));\r\n av_freep((&c -> command));\r\n filter -> command_queue = c -> next;\r\n av_free(c);\r\n}\r\n\r\nvoid ff_insert_pad(unsigned int idx,unsigned int *count,size_t padidx_off,AVFilterPad **pads,AVFilterLink ***links,AVFilterPad *newpad)\r\n{\r\n unsigned int i;\r\n idx = (idx > *count? *count : idx);\r\n *pads = (av_realloc(( *pads),sizeof(AVFilterPad ) * ( *count + 1)));\r\n *links = (av_realloc(( *links),sizeof(AVFilterLink *) * ( *count + 1)));\r\n memmove(( *pads + idx + 1),( *pads + idx),sizeof(AVFilterPad ) * ( *count - idx));\r\n memmove(( *links + idx + 1),( *links + idx),sizeof(AVFilterLink *) * ( *count - idx));\r\n memcpy(( *pads + idx),newpad,sizeof(AVFilterPad ));\r\n ( *links)[idx] = ((void *)0);\r\n ( *count)++;\r\n for (i = idx + 1; i < *count; i++) \r\n if ( *links[i]) {\r\n ( *((unsigned int *)(((uint8_t *)( *links[i])) + padidx_off)))++;\r\n }\r\n}\r\n\r\nint avfilter_link(AVFilterContext *src,unsigned int srcpad,AVFilterContext *dst,unsigned int dstpad)\r\n{\r\n AVFilterLink *link;\r\n if (src -> nb_outputs <= srcpad || dst -> nb_inputs <= dstpad || src -> outputs[srcpad] || dst -> inputs[dstpad]) {\r\n return - 1;\r\n }\r\n if (src -> output_pads[srcpad] . type != dst -> input_pads[dstpad] . type) {\r\n av_log(src,16,\"Media type mismatch between the '%s' filter output pad %d (%s) and the '%s' filter input pad %d (%s)\\n\",src -> name,srcpad,((char *)(av_x_if_null((av_get_media_type_string(src -> output_pads[srcpad] . type)),\"?\"))),dst -> name,dstpad,((char *)(av_x_if_null((av_get_media_type_string(dst -> input_pads[dstpad] . type)),\"?\"))));\r\n return - 22;\r\n }\r\n src -> outputs[srcpad] = dst -> inputs[dstpad] = link = (av_mallocz(sizeof(AVFilterLink )));\r\n link -> src = src;\r\n link -> dst = dst;\r\n link -> srcpad = &src -> output_pads[srcpad];\r\n link -> dstpad = &dst -> input_pads[dstpad];\r\n link -> type = src -> output_pads[srcpad] . type;\r\n do {\r\n if (!(AV_PIX_FMT_NONE == - 1 && AV_SAMPLE_FMT_NONE == - 1)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"AV_PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1\",\"avfilter.c\",150);\r\n abort();\r\n }\r\n }while (0);\r\n link -> format = - 1;\r\n return 0;\r\n}\r\n\r\nvoid avfilter_link_free(AVFilterLink **link)\r\n{\r\n if (!( *link)) {\r\n return ;\r\n }\r\n if (( *link) -> pool) {\r\n ff_free_pool(( *link) -> pool);\r\n }\r\n avfilter_unref_bufferp(&( *link) -> partial_buf);\r\n av_freep(link);\r\n}\r\n\r\nint avfilter_link_get_channels(AVFilterLink *link)\r\n{\r\n return link -> channels;\r\n}\r\n\r\nvoid avfilter_link_set_closed(AVFilterLink *link,int closed)\r\n{\r\n link -> closed = closed;\r\n}\r\n\r\nint avfilter_insert_filter(AVFilterLink *link,AVFilterContext *filt,unsigned int filt_srcpad_idx,unsigned int filt_dstpad_idx)\r\n{\r\n int ret;\r\n unsigned int dstpad_idx = (link -> dstpad - link -> dst -> input_pads);\r\n av_log((link -> dst),40,\"auto-inserting filter '%s' between the filter '%s' and the filter '%s'\\n\",filt -> name,link -> src -> name,link -> dst -> name);\r\n link -> dst -> inputs[dstpad_idx] = ((void *)0);\r\n if ((ret = avfilter_link(filt,filt_dstpad_idx,link -> dst,dstpad_idx)) < 0) {\r\n\r\n link -> dst -> inputs[dstpad_idx] = link;\r\n return ret;\r\n }\r\n\r\n link -> dst = filt;\r\n link -> dstpad = &filt -> input_pads[filt_srcpad_idx];\r\n filt -> inputs[filt_srcpad_idx] = link;\r\n\r\n if (link -> out_formats) {\r\n ff_formats_changeref(&link -> out_formats,&filt -> outputs[filt_dstpad_idx] -> out_formats);\r\n }\r\n if (link -> out_samplerates) {\r\n ff_formats_changeref(&link -> out_samplerates,&filt -> outputs[filt_dstpad_idx] -> out_samplerates);\r\n }\r\n if (link -> out_channel_layouts) {\r\n ff_channel_layouts_changeref(&link -> out_channel_layouts,&filt -> outputs[filt_dstpad_idx] -> out_channel_layouts);\r\n }\r\n return 0;\r\n}\r\n\r\nint avfilter_config_links(AVFilterContext *filter)\r\n{\r\n int (*config_link)(AVFilterLink *);\r\n unsigned int i;\r\n int ret;\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n AVFilterLink *link = filter -> inputs[i];\r\n AVFilterLink *inlink;\r\n if (!link) {\r\n continue; \r\n }\r\n inlink = (link -> src -> nb_inputs?link -> src -> inputs[0] : ((void *)0));\r\n link -> current_pts = ((int64_t )0x8000000000000000UL);\r\n switch(link -> init_state){\r\n case AVLINK_INIT:\r\n continue; \r\n case AVLINK_STARTINIT:\r\n{\r\n av_log(filter,32,\"circular filter chain detected\\n\");\r\n return 0;\r\n }\r\n case AVLINK_UNINIT:\r\n{\r\n link -> init_state = AVLINK_STARTINIT;\r\n if ((ret = avfilter_config_links(link -> src)) < 0) {\r\n return ret;\r\n }\r\n if (!(config_link = link -> srcpad -> config_props)) {\r\n if (link -> src -> nb_inputs != 1) {\r\n av_log((link -> src),16,\"Source filters and filters with more than one input must set config_props() callbacks on all outputs\\n\");\r\n return - 22;\r\n }\r\n }\r\n else {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure output pad on %s\\n\",link -> src -> name);\r\n return ret;\r\n }\r\n }\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = (inlink?inlink -> time_base : ((AVRational ){(1), (1000000)}));\r\n }\r\n if (!link -> sample_aspect_ratio . num && !link -> sample_aspect_ratio . den) {\r\n link -> sample_aspect_ratio = (inlink?inlink -> sample_aspect_ratio : ((AVRational ){(1), (1)}));\r\n }\r\n if (inlink && !link -> frame_rate . num && !link -> frame_rate . den) {\r\n link -> frame_rate = inlink -> frame_rate;\r\n }\r\n if (inlink) {\r\n if (!link -> w) {\r\n link -> w = inlink -> w;\r\n }\r\n if (!link -> h) {\r\n link -> h = inlink -> h;\r\n }\r\n }\r\n else {\r\n if (!link -> w || !link -> h) {\r\n av_log((link -> src),16,\"Video source filters must set their output link's width and height\\n\");\r\n return - 22;\r\n }\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n if (inlink) {\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = inlink -> time_base;\r\n }\r\n }\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = ((AVRational ){(1), link -> sample_rate});\r\n }\r\n }\r\n }\r\n if (config_link = link -> dstpad -> config_props) {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure input pad on %s\\n\",link -> dst -> name);\r\n return ret;\r\n }\r\n }\r\n link -> init_state = AVLINK_INIT;\r\n }\r\n }\r\n }\r\n return 0;\r\n}\r\n\r\nvoid ff_tlog_link(void *ctx,AVFilterLink *link,int end)\r\n{\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p s:%dx%d fmt:%s %s->%s]%s\",link,link -> w,link -> h,av_get_pix_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n else {\r\n char buf[128];\r\n av_get_channel_layout_string(buf,(sizeof(buf)),- 1,link -> channel_layout);\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p r:%d cl:%s fmt:%s %s->%s]%s\",link,((int )(link -> sample_rate)),buf,av_get_sample_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n}\r\n\r\nint ff_request_frame(AVFilterLink *link)\r\n{\r\n int ret = - 1;\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"request_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n if (link -> closed) {\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (link -> srcpad -> request_frame) {\r\n ret = ((link -> srcpad -> request_frame)(link));\r\n }\r\n else {\r\n if (link -> src -> inputs[0]) {\r\n ret = ff_request_frame(link -> src -> inputs[0]);\r\n }\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24)) && link -> partial_buf) {\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n link -> partial_buf = ((void *)0);\r\n ff_filter_frame_framed(link,pbuf);\r\n return 0;\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24))) {\r\n link -> closed = 1;\r\n }\r\n return ret;\r\n}\r\n\r\nint ff_poll_frame(AVFilterLink *link)\r\n{\r\n int i;\r\n int min = 2147483647;\r\n if (link -> srcpad -> poll_frame) {\r\n return (link -> srcpad -> poll_frame)(link);\r\n }\r\n for (i = 0; i < link -> src -> nb_inputs; i++) {\r\n int val;\r\n if (!link -> src -> inputs[i]) {\r\n return - 1;\r\n }\r\n val = ff_poll_frame(link -> src -> inputs[i]);\r\n min = (min > val?val : min);\r\n }\r\n return min;\r\n}\r\n\r\nvoid ff_update_link_current_pts(AVFilterLink *link,int64_t pts)\r\n{\r\n if (pts == ((int64_t )0x8000000000000000UL)) {\r\n return ;\r\n }\r\n link -> current_pts = av_rescale_q(pts,link -> time_base,((AVRational ){(1), (1000000)}));\r\n\r\n if (link -> graph && link -> age_index >= 0) {\r\n ff_avfilter_graph_update_heap(link -> graph,link);\r\n }\r\n}\r\n\r\nint avfilter_process_command(AVFilterContext *filter,const char *cmd,const char *arg,char *res,int res_len,int flags)\r\n{\r\n if (!strcmp(cmd,\"ping\")) {\r\n av_strlcatf(res,res_len,\"pong from:%s %s\\n\",filter -> filter -> name,filter -> name);\r\n return 0;\r\n }\r\n else {\r\n if (filter -> filter -> process_command) {\r\n return (filter -> filter -> process_command)(filter,cmd,arg,res,res_len,flags);\r\n }\r\n }\r\n return - 38;\r\n}\r\n#define MAX_REGISTERED_AVFILTERS_NB 256\r\nstatic AVFilter *registered_avfilters[256 + 1];\r\nstatic int next_registered_avfilter_idx = 0;\r\n\r\nAVFilter *avfilter_get_by_name(const char *name)\r\n{\r\n int i;\r\n for (i = 0; registered_avfilters[i]; i++) \r\n if (!strcmp(registered_avfilters[i] -> name,name)) {\r\n return registered_avfilters[i];\r\n }\r\n return ((void *)0);\r\n}\r\n\r\nint avfilter_register(AVFilter *filter)\r\n{\r\n int i;\r\n if (next_registered_avfilter_idx == 256) {\r\n av_log(((void *)0),16,\"Maximum number of registered filters %d reached, impossible to register filter with name '%s'\\n\",256,filter -> name);\r\n return - '\\f';\r\n }\r\n for (i = 0; filter -> inputs && filter -> inputs[i] . name; i++) {\r\n const AVFilterPad *input = &filter -> inputs[i];\r\n do {\r\n if (!(!input -> filter_frame || !input -> start_frame && !input -> end_frame)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"!input->filter_frame || (!input->start_frame && !input->end_frame)\",\"avfilter.c\",426);\r\n abort();\r\n }\r\n }while (0);\r\n }\r\n registered_avfilters[next_registered_avfilter_idx++] = filter;\r\n return 0;\r\n}\r\n\r\nAVFilter **av_filter_next(AVFilter **filter)\r\n{\r\n return filter?++filter : &registered_avfilters[0];\r\n}\r\n\r\nvoid avfilter_uninit()\r\n{\r\n memset(registered_avfilters,0,sizeof(registered_avfilters));\r\n next_registered_avfilter_idx = 0;\r\n}\r\n\r\nstatic int pad_count(const AVFilterPad *pads)\r\n{\r\n int count;\r\n if (!pads) {\r\n return 0;\r\n }\r\n for (count = 0; pads -> name; count++) \r\n pads++;\r\n return count;\r\n}\r\n\r\nstatic const char *default_filter_name(void *filter_ctx)\r\n{\r\n AVFilterContext *ctx = filter_ctx;\r\n return ctx -> name?(ctx -> name) : ctx -> filter -> name;\r\n}\r\n\r\nstatic void *filter_child_next(void *obj,void *prev)\r\n{\r\n AVFilterContext *ctx = obj;\r\n if (!prev && ctx -> filter && ctx -> filter -> priv_class) {\r\n return ctx -> priv;\r\n }\r\n return (void *)0;\r\n}\r\n\r\nstatic const AVClass *filter_child_class_next(const AVClass *prev)\r\n{\r\n AVFilter **filter_ptr = ((void *)0);\r\n\r\n while(prev && *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class == prev) {\r\n break; \r\n }\r\n\r\n if (prev && !( *filter_ptr)) {\r\n return ((void *)0);\r\n }\r\n\r\n while( *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class) {\r\n return ( *filter_ptr) -> priv_class;\r\n }\r\n return ((void *)0);\r\n}\r\nstatic const AVClass avfilter_class = {.class_name = \"AVFilter\", .item_name = default_filter_name, .version = 52 << 16 | 18 << 8 | 100, .category = AV_CLASS_CATEGORY_FILTER, .child_next = filter_child_next, .child_class_next = filter_child_class_next};\r\n\r\nconst AVClass *avfilter_get_class()\r\n{\r\n return &avfilter_class;\r\n}\r\n\r\nint avfilter_open(AVFilterContext **filter_ctx,AVFilter *filter,const char *inst_name)\r\n{\r\n AVFilterContext *ret;\r\n *filter_ctx = ((void *)0);\r\n if (!filter) {\r\n return - 22;\r\n }\r\n ret = (av_mallocz(sizeof(AVFilterContext )));\r\n if (!ret) {\r\n return - '\\f';\r\n }\r\n ret -> av_class = &avfilter_class;\r\n ret -> filter = filter;\r\n ret -> name = (inst_name?av_strdup(inst_name) : ((void *)0));\r\n if (filter -> priv_size) {\r\n ret -> priv = av_mallocz((filter -> priv_size));\r\n if (!ret -> priv) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_inputs = (pad_count(filter -> inputs));\r\n if (ret -> nb_inputs) {\r\n ret -> input_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_inputs)));\r\n if (!ret -> input_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> input_pads),(filter -> inputs),sizeof(AVFilterPad ) * (ret -> nb_inputs));\r\n ret -> inputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_inputs)));\r\n if (!ret -> inputs) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_outputs = (pad_count(filter -> outputs));\r\n if (ret -> nb_outputs) {\r\n ret -> output_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_outputs)));\r\n if (!ret -> output_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> output_pads),(filter -> outputs),sizeof(AVFilterPad ) * (ret -> nb_outputs));\r\n ret -> outputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_outputs)));\r\n if (!ret -> outputs) {\r\n goto err;\r\n }\r\n }\r\n#if FF_API_FOO_COUNT\r\n ret -> output_count = ret -> nb_outputs;\r\n ret -> input_count = ret -> nb_inputs;\r\n#endif\r\n *filter_ctx = ret;\r\n return 0;\r\n err:\r\n av_freep((&ret -> inputs));\r\n av_freep((&ret -> input_pads));\r\n ret -> nb_inputs = 0;\r\n av_freep((&ret -> outputs));\r\n av_freep((&ret -> output_pads));\r\n ret -> nb_outputs = 0;\r\n av_freep((&ret -> priv));\r\n av_free(ret);\r\n return - '\\f';\r\n}\r\n\r\nvoid avfilter_free(AVFilterContext *filter)\r\n{\r\n int i;\r\n AVFilterLink *link;\r\n if (!filter) {\r\n return ;\r\n }\r\n if (filter -> filter -> uninit) {\r\n (filter -> filter -> uninit)(filter);\r\n }\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n if (link = filter -> inputs[i]) {\r\n if (link -> src) {\r\n link -> src -> outputs[link -> srcpad - link -> src -> output_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n for (i = 0; i < filter -> nb_outputs; i++) {\r\n if (link = filter -> outputs[i]) {\r\n if (link -> dst) {\r\n link -> dst -> inputs[link -> dstpad - link -> dst -> input_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n av_freep((&filter -> name));\r\n av_freep((&filter -> input_pads));\r\n av_freep((&filter -> output_pads));\r\n av_freep((&filter -> inputs));\r\n av_freep((&filter -> outputs));\r\n av_freep((&filter -> priv));\r\n while(filter -> command_queue){\r\n ff_command_queue_pop(filter);\r\n }\r\n av_free(filter);\r\n}\r\n\r\nint avfilter_init_filter(AVFilterContext *filter,const char *args,void *opaque)\r\n{\r\n int ret = 0;\r\n if (filter -> filter -> init_opaque) {\r\n ret = ((filter -> filter -> init_opaque)(filter,args,opaque));\r\n }\r\n else {\r\n if (filter -> filter -> init) {\r\n ret = ((filter -> filter -> init)(filter,args));\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nconst char *avfilter_pad_get_name(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . name;\r\n}\r\n\r\nenum AVMediaType avfilter_pad_get_type(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . type;\r\n}\r\n\r\nstatic int default_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n return ff_filter_frame(link -> dst -> outputs[0],frame);\r\n}\r\n\r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int (*filter_frame)(AVFilterLink *, AVFilterBufferRef *);\r\n AVFilterPad *src = link -> srcpad;\r\n AVFilterPad *dst = link -> dstpad;\r\n AVFilterBufferRef *out;\r\n int perms;\r\n int ret;\r\n AVFilterCommand *cmd = link -> dst -> command_queue;\r\n int64_t pts;\r\n if (link -> closed) {\r\n avfilter_unref_buffer(frame);\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (!(filter_frame = dst -> filter_frame)) {\r\n filter_frame = default_filter_frame;\r\n }\r\n (void )0;\r\n frame -> perms &= ~src -> rej_perms;\r\n perms = frame -> perms;\r\n if (frame -> linesize[0] < 0) {\r\n perms |= 0x20;\r\n }\r\n\r\n if ((dst -> min_perms & perms) != dst -> min_perms || dst -> rej_perms & perms) {\r\n av_log((link -> dst),48,\"Copying data in avfilter (have perms %x, need %x, reject %x)\\n\",perms,link -> dstpad -> min_perms,link -> dstpad -> rej_perms);\r\n\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n out = ff_get_video_buffer(link,dst -> min_perms,link -> w,link -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n out = ff_get_audio_buffer(link,dst -> min_perms,frame -> audio -> nb_samples);\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n if (!out) {\r\n avfilter_unref_buffer(frame);\r\n return - '\\f';\r\n }\r\n avfilter_copy_buffer_ref_props(out,frame);\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n av_image_copy(out -> data,out -> linesize,((const uint8_t **)(frame -> data)),(frame -> linesize),(frame -> format),frame -> video -> w,frame -> video -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n av_samples_copy(out -> extended_data,(frame -> extended_data),0,0,frame -> audio -> nb_samples,av_get_channel_layout_nb_channels(frame -> audio -> channel_layout),(frame -> format));\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n avfilter_unref_buffer(frame);\r\n }\r\n else {\r\n out = frame;\r\n }\r\n while(cmd && cmd -> time <= (out -> pts) * av_q2d(link -> time_base)){\r\n av_log((link -> dst),48,\"Processing command time:%f command:%s arg:%s\\n\",cmd -> time,cmd -> command,cmd -> arg);\r\n avfilter_process_command(link -> dst,(cmd -> command),(cmd -> arg),0,0,cmd -> flags);\r\n ff_command_queue_pop(link -> dst);\r\n cmd = link -> dst -> command_queue;\r\n }\r\n pts = out -> pts;\r\n ret = filter_frame(link,out);\r\n ff_update_link_current_pts(link,pts);\r\n return ret;\r\n}\r\n\r\nstatic int ff_filter_frame_needs_framing(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int insamples = frame -> audio -> nb_samples;\r\n int inpos = 0;\r\n int nb_samples;\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n int nb_channels = frame -> audio -> channels;\r\n int ret = 0;\r\n\r\n while(insamples){\r\n if (!pbuf) {\r\n AVRational samples_tb = {(1), link -> sample_rate};\r\n int perms = link -> dstpad -> min_perms | 0x02;\r\n pbuf = ff_get_audio_buffer(link,perms,link -> partial_buf_size);\r\n if (!pbuf) {\r\n av_log((link -> dst),24,\"Samples dropped due to memory allocation failure.\\n\");\r\n return 0;\r\n }\r\n avfilter_copy_buffer_ref_props(pbuf,frame);\r\n pbuf -> pts = frame -> pts + av_rescale_q(inpos,samples_tb,link -> time_base);\r\n pbuf -> audio -> nb_samples = 0;\r\n }\r\n nb_samples = (insamples > link -> partial_buf_size - pbuf -> audio -> nb_samples?link -> partial_buf_size - pbuf -> audio -> nb_samples : insamples);\r\n av_samples_copy(pbuf -> extended_data,(frame -> extended_data),pbuf -> audio -> nb_samples,inpos,nb_samples,nb_channels,(link -> format));\r\n inpos += nb_samples;\r\n insamples -= nb_samples;\r\n pbuf -> audio -> nb_samples += nb_samples;\r\n if (pbuf -> audio -> nb_samples >= link -> min_samples) {\r\n ret = ff_filter_frame_framed(link,pbuf);\r\n pbuf = ((void *)0);\r\n }\r\n }\r\n avfilter_unref_buffer(frame);\r\n link -> partial_buf = pbuf;\r\n return ret;\r\n}\r\n\r\nint ff_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"filter_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\" \");\r\n }\r\n }while (0);\r\n ff_tlog_ref(((void *)0),frame,1);\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n if (strcmp(link -> dst -> filter -> name,\"scale\")) {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n }\r\n else {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_AUDIO && link -> min_samples && (link -> partial_buf || frame -> audio -> nb_samples < link -> min_samples || frame -> audio -> nb_samples > link -> max_samples)) {\r\n return ff_filter_frame_needs_framing(link,frame);\r\n }\r\n else {\r\n return ff_filter_frame_framed(link,frame);\r\n }\r\n}\r\n\r\nvoid zygion_assmannshausen(union adenous_satsuma *gynecomazia_cultured)\r\n{\r\n int oc_i = 0;\r\n char stack_buffer_64[64];\r\n char *hirples_vindices = 0;\r\n ++global_variable;;\r\n hirples_vindices = ((char *)( *gynecomazia_cultured) . evendown_vicing);\r\n \r\n memset(stack_buffer_64,0,64);\r\n \r\n \r\n \r\n \r\n \r\n strcpy(stack_buffer_64,hirples_vindices);\r\n \r\n \r\n \r\n for (; oc_i < 64; ++oc_i) {\r\n stack_buffer_64[oc_i] = toupper(stack_buffer_64[oc_i]);\r\n }\r\n \r\n \r\n printf(\"%s\\n\",stack_buffer_64);\r\n \r\n \r\n \r\n \r\n;\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "120"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avstring.h\"\r\n#include \"internal.h\"\r\n#include <sys/stat.h> \r\n#include <openssl/evp.h> \r\n#include </trace.h> \r\n#include <dlfcn.h> \r\n#include <sys/types.h> \r\n#include <sys/wait.h> \r\n#include <unistd.h> \r\ntypedef struct {\r\nenum AVCodecID id;\r\nconst char *str;}IdStrMap;\r\nstatic const IdStrMap img_tags[] = {{(AV_CODEC_ID_MJPEG), (\"jpeg\")}, {(AV_CODEC_ID_MJPEG), (\"jpg\")}, {(AV_CODEC_ID_MJPEG), (\"jps\")}, {(AV_CODEC_ID_LJPEG), (\"ljpg\")}, {(AV_CODEC_ID_JPEGLS), (\"jls\")}, {(AV_CODEC_ID_PNG), (\"png\")}, {(AV_CODEC_ID_PNG), (\"pns\")}, {(AV_CODEC_ID_PNG), (\"mng\")}, {(AV_CODEC_ID_PPM), (\"ppm\")}, {(AV_CODEC_ID_PPM), (\"pnm\")}, {(AV_CODEC_ID_PGM), (\"pgm\")}, {(AV_CODEC_ID_PGMYUV), (\"pgmyuv\")}, {(AV_CODEC_ID_PBM), (\"pbm\")}, {(AV_CODEC_ID_PAM), (\"pam\")}, {(AV_CODEC_ID_MPEG1VIDEO), (\"mpg1-img\")}, {(AV_CODEC_ID_MPEG2VIDEO), (\"mpg2-img\")}, {(AV_CODEC_ID_MPEG4), (\"mpg4-img\")}, {(AV_CODEC_ID_FFV1), (\"ffv1-img\")}, {(AV_CODEC_ID_RAWVIDEO), (\"y\")}, {(AV_CODEC_ID_RAWVIDEO), (\"raw\")}, {(AV_CODEC_ID_BMP), (\"bmp\")}, {(AV_CODEC_ID_GIF), (\"gif\")}, {(AV_CODEC_ID_TARGA), (\"tga\")}, {(AV_CODEC_ID_TIFF), (\"tiff\")}, {(AV_CODEC_ID_TIFF), (\"tif\")}, {(AV_CODEC_ID_SGI), (\"sgi\")}, {(AV_CODEC_ID_PTX), (\"ptx\")}, {(AV_CODEC_ID_PCX), (\"pcx\")}, {(AV_CODEC_ID_BRENDER_PIX), (\"pix\")}, {(AV_CODEC_ID_SUNRAST), (\"sun\")}, {(AV_CODEC_ID_SUNRAST), (\"ras\")}, {(AV_CODEC_ID_SUNRAST), (\"rs\")}, {(AV_CODEC_ID_SUNRAST), (\"im1\")}, {(AV_CODEC_ID_SUNRAST), (\"im8\")}, {(AV_CODEC_ID_SUNRAST), (\"im24\")}, {(AV_CODEC_ID_SUNRAST), (\"im32\")}, {(AV_CODEC_ID_SUNRAST), (\"sunras\")}, {(AV_CODEC_ID_JPEG2000), (\"j2c\")}, {(AV_CODEC_ID_JPEG2000), (\"j2k\")}, {(AV_CODEC_ID_JPEG2000), (\"jp2\")}, {(AV_CODEC_ID_JPEG2000), (\"jpc\")}, {(AV_CODEC_ID_DPX), (\"dpx\")}, {(AV_CODEC_ID_EXR), (\"exr\")}, {(AV_CODEC_ID_PICTOR), (\"pic\")}, {(AV_CODEC_ID_V210X), (\"yuv10\")}, {(AV_CODEC_ID_XBM), (\"xbm\")}, {(AV_CODEC_ID_XFACE), (\"xface\")}, {(AV_CODEC_ID_XWD), (\"xwd\")}, {(AV_CODEC_ID_NONE), (((void *)0))}};\r\nint sherill_anorectous = 0;\r\nint global_variable;\r\n\r\nstruct sulphuretting_runology \r\n{\r\n char *afzelia_phlebology;\r\n double grotto_needlessly;\r\n char *loomed_serocystic;\r\n char preleased_keverne;\r\n int stucken_unluckily;\r\n}\r\n;\r\n#define LECANOSCOPIC_PARAPHYSATE(x) lasers_phylloclad((struct sulphuretting_runology) x)\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid lasers_phylloclad(struct sulphuretting_runology cylindrophis_whalebird);\r\nvoid evp_hash(const char *algorithm_name,char *filename) {\r\n int ii = 0;\r\n FILE *file_stream = 0;\r\n char hash_print_val[129] = {0};\r\n unsigned char file_contents[1024];\r\n size_t file_contents_size = 1024;\r\n size_t file_contents_size_read = 0;\r\n const EVP_MD *md_engine = 0;\r\n unsigned char md_value[64];\r\n unsigned int md_value_len = 0;\r\n EVP_MD_CTX *md_context = 0;\r\n int hash_update_result = 0;\r\n \r\n memset(md_value,0,64);\r\n file_stream = fopen(filename,\"rb\");\r\n if (file_stream != 0) {\r\n md_engine = EVP_get_digestbyname(algorithm_name);\r\n if (md_engine != 0) {\r\n md_context = EVP_MD_CTX_create();\r\n if (md_context != 0) {\r\n if (EVP_DigestInit_ex(md_context,md_engine,0)) {\r\n \r\n while(!feof(file_stream)) {\r\n \r\n memset(file_contents,0,file_contents_size);\r\n file_contents_size_read = fread(file_contents,\r\n sizeof(unsigned char ),file_contents_size,file_stream);\r\n hash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\r\n if (1 != hash_update_result) {\r\n break;\r\n }\r\n }\r\n \r\n if (1 == hash_update_result) {\r\n if (EVP_DigestFinal_ex(md_context,md_value,&md_value_len)) {\r\n for (ii = 0; ii < md_value_len; ++ii) {\r\n sprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\r\n }\r\n printf(\"%s %s\\n\",hash_print_val,filename);\r\n } else {\r\n printf(\"Failure finalizing hash for file '%s' with algorithm '%s'.\\n\",\r\n filename,algorithm_name);\r\n }\r\n } else {\r\n printf(\"Failure hashing file '%s' with algorithm '%s'.\\n\",filename,algorithm_name);\r\n }\r\n }\r\n EVP_MD_CTX_destroy(md_context);\r\n } else {\r\n printf(\"Could not create a context for hash algorithm: '%s'\\n\",algorithm_name);\r\n }\r\n } else {\r\n printf(\"Could not load hash algorithm: '%s'\\n\",algorithm_name);\r\n }\r\n } else {\r\n printf(\"Failed to open file: '%s'\\n\",filename);\r\n }\r\n if (file_stream != 0) {\r\n fclose(file_stream);\r\n file_stream = 0;\r\n }\r\n}\r\nstruct pid_fd {\r\n pid_t pid;\r\n int fd_array[2];\r\n};\r\n\r\nstatic enum AVCodecID av_str2id(const IdStrMap *tags,const char *str)\r\n{\r\n struct sulphuretting_runology biot_kist = {0};\r\n int *usucaptible_enologist = 0;\r\n int cannoned_usedness;\r\n struct sulphuretting_runology branchiopodan_lulu[10] = {0};\r\n struct sulphuretting_runology oversacrificial_liras;\r\n char *monarchianist_scyros;;\r\n if (__sync_bool_compare_and_swap(&sherill_anorectous,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n monarchianist_scyros = getenv(\"MESOCARDIA_KEDARITE\");\r\n if (monarchianist_scyros != 0) {;\r\n oversacrificial_liras . afzelia_phlebology = ((char *)monarchianist_scyros);\r\n branchiopodan_lulu[5] = oversacrificial_liras;\r\n cannoned_usedness = 5;\r\n usucaptible_enologist = &cannoned_usedness;\r\n biot_kist = *(branchiopodan_lulu + *usucaptible_enologist);\r\n\tLECANOSCOPIC_PARAPHYSATE(biot_kist);\r\n }\r\n }\r\n }\r\n ;\r\n str = (strrchr(str,'.'));\r\n if (!str) {\r\n return AV_CODEC_ID_NONE;\r\n }\r\n str++;\r\n while(tags -> id){\r\n if (!av_strcasecmp(str,tags -> str)) {\r\n return tags -> id;\r\n }\r\n tags++;\r\n }\r\n return AV_CODEC_ID_NONE;\r\n}\r\n\r\nenum AVCodecID ff_guess_image2_codec(const char *filename)\r\n{\r\n return av_str2id(img_tags,filename);\r\n}\r\n\r\nvoid lasers_phylloclad(struct sulphuretting_runology cylindrophis_whalebird)\r\n{\r\n int child_signal = 0;\r\n int child_pids_count = 21;\r\n pid_t child_pids[21];\r\n pid_t child_pid = -1;\r\n int ii = 0;\r\n int jj = 0;\r\n int algorithms_count = 7;\r\n const char *algorithms[7];\r\n struct pid_fd fd_array[21];\r\n int error = 0;\r\n int index = -1;\r\n char buf;\r\n char *gutow_armors = 0;\r\n ++global_variable;;\r\n gutow_armors = ((char *)cylindrophis_whalebird . afzelia_phlebology);\r\n \r\n algorithms[0] = \"MD5\";\r\n algorithms[1] = \"SHA1\";\r\n algorithms[2] = \"SHA224\";\r\n algorithms[3] = \"SHA256\";\r\n algorithms[4] = \"SHA384\";\r\n algorithms[5] = \"SHA512\";\r\n algorithms[6] = \"RIPEMD160\";\r\n for (ii = 0; ii < child_pids_count; ++ii) {\r\n child_pids[ii] = -1;\r\n }\r\n if (!error) {\r\n OPENSSL_add_all_algorithms_noconf();\r\n fflush(stdout);\r\n fflush(stdin);\r\n \r\n for (ii = 0; ii < 3; ++ii) {\r\n for (jj = 0; jj < algorithms_count; ++jj) {\r\n index = jj + ii * algorithms_count;\r\n if (pipe(fd_array[index].fd_array) == -1) {\r\n error = 1;\r\n printf(\"Error opening pipe\\n\");\r\n } else {\r\n child_pid = fork();\r\n if (child_pid >= 0) {\r\n if (child_pid == 0) {\r\n close(fd_array[index].fd_array[0]);\r\n dup2(fd_array[index].fd_array[1], STDOUT_FILENO);\r\n \r\n \r\n evp_hash(algorithms[jj], gutow_armors);\r\n \r\n close(fd_array[index].fd_array[1]);\r\n exit(0);\r\n } else {\r\n close(fd_array[index].fd_array[1]);\r\n fd_array[index].pid = child_pid;\r\n continue;\r\n }\r\n } else {\r\n \r\n printf(\"Failed to fork a child process.\\n\");\r\n exit(1);\r\n }\r\n }\r\n }\r\n }\r\n for (ii = 0; ii < child_pids_count; ++ii) {\r\n child_signal = 0;\r\n if (fd_array[ii].pid < 1) {\r\n continue;\r\n }\r\n if (-1 == waitpid(fd_array[ii].pid, &child_signal, 0)) {\r\n \r\n printf(\"Failed to wait for child process: %d\\n\",child_signal);\r\n } else {\r\n if (WIFEXITED(child_signal)) {\r\n printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(child_signal));\r\n } else if (WIFSIGNALED(child_signal)) {\r\n \r\n printf(\"Child process received signal: %d\\n\",WTERMSIG(child_signal));\r\n }\r\n while (read(fd_array[ii].fd_array[0], &buf, 1) > 0) {\r\n printf(\"%c\", buf);\r\n }\r\n close(fd_array[ii].fd_array[0]);\r\n }\r\n }\r\n }\r\n \r\n;\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "400"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#ifndef HEADER_BSS_FILE_C\r\n#define HEADER_BSS_FILE_C\r\n#if defined(__linux) || defined(__sun) || defined(__hpux)\r\n\r\n#ifndef _FILE_OFFSET_BITS\r\n#define _FILE_OFFSET_BITS 64\r\n#endif\r\n#endif\r\n#include <stdio.h>\r\n#include <errno.h>\r\n#include \"cryptlib.h\"\r\n#include \"bio_lcl.h\"\r\n#include <openssl/err.h>\r\n#if defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n#include <nwfileio.h>\r\n#endif\r\n#if !defined(OPENSSL_NO_STDIO)\r\n#include <sys/stat.h> \r\n#include <setjmp.h> \r\n#include </trace.h> \r\nstatic int file_write(BIO *b,const char *in,int inl);\r\nstatic int file_read(BIO *b,char *out,int outl);\r\nstatic int file_puts(BIO *bp,const char *str);\r\nstatic int file_gets(BIO *bp,char *buf,int size);\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr);\r\nstatic int file_new(BIO *bi);\r\nstatic int file_free(BIO *a);\r\nstatic BIO_METHOD methods_filep = {(2 | 0x0400), (\"FILE pointer\"), (file_write), (file_read), (file_puts), (file_gets), (file_ctrl), (file_new), (file_free), (((void *)0))};\r\nint crescographic_gadflies = 0;\r\nint global_variable;\r\ntypedef char *dilatatory_stichado;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid isoglosses_klina(const dilatatory_stichado frangibilities_waff);\r\n\r\nBIO *BIO_new_file(const char *filename,const char *mode)\r\n{\r\n BIO *ret;\r\n FILE *file = ((void *)0);\r\n#if defined(_WIN32) && defined(CP_UTF8)\r\n\r\n\r\n#else\r\n file = fopen(filename,mode);\r\n#endif\r\n if (file == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",169);\r\n ERR_add_error_data(5,\"fopen('\",filename,\"','\",mode,\"')\");\r\n if ( *__errno_location() == 2) {\r\n ERR_put_error(32,109,128,\"bss_file.c\",172);\r\n }\r\n else {\r\n ERR_put_error(32,109,2,\"bss_file.c\",174);\r\n }\r\n return ((void *)0);\r\n }\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n fclose(file);\r\n return ((void *)0);\r\n }\r\n\r\n BIO_clear_flags(ret,0);\r\n BIO_ctrl(ret,106,0x01,((char *)file));\r\n return ret;\r\n}\r\n\r\nBIO *BIO_new_fp(FILE *stream,int close_flag)\r\n{\r\n BIO *ret;\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n\r\n BIO_set_flags(ret,0);\r\n BIO_ctrl(ret,106,close_flag,((char *)stream));\r\n return ret;\r\n}\r\n\r\nBIO_METHOD *BIO_s_file()\r\n{\r\n return &methods_filep;\r\n}\r\n\r\nstatic int file_new(BIO *bi)\r\n{\r\n bi -> init = 0;\r\n bi -> num = 0;\r\n bi -> ptr = ((void *)0);\r\n\r\n bi -> flags = 0;\r\n return 1;\r\n}\r\n\r\nstatic int file_free(BIO *a)\r\n{\r\n if (a == ((void *)0)) {\r\n return 0;\r\n }\r\n if (a -> shutdown) {\r\n if (a -> init && a -> ptr != ((void *)0)) {\r\n if (a -> flags & 0) {\r\n fclose((a -> ptr));\r\n }\r\n else {\r\n fclose((a -> ptr));\r\n }\r\n a -> ptr = ((void *)0);\r\n a -> flags = 0;\r\n }\r\n a -> init = 0;\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int file_read(BIO *b,char *out,int outl)\r\n{\r\n int ret = 0;\r\n if (b -> init && out != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fread(out,1,((int )outl),(b -> ptr)));\r\n }\r\n else {\r\n ret = (fread(out,1,((int )outl),((FILE *)(b -> ptr))));\r\n }\r\n if (ret == 0 && b -> flags & 0?ferror(((FILE *)(b -> ptr))) : ferror(((FILE *)(b -> ptr)))) {\r\n ERR_put_error(2,11, *__errno_location(),\"bss_file.c\",245);\r\n ERR_put_error(32,130,2,\"bss_file.c\",246);\r\n ret = - 1;\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_write(BIO *b,const char *in,int inl)\r\n{\r\n int ret = 0;\r\n if (b -> init && in != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fwrite(in,((int )inl),1,(b -> ptr)));\r\n }\r\n else {\r\n ret = (fwrite(in,((int )inl),1,((FILE *)(b -> ptr))));\r\n }\r\n if (ret) {\r\n ret = inl;\r\n }\r\n\r\n\r\n }\r\n return ret;\r\n}\r\n\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr)\r\n{\r\n dilatatory_stichado lecompton_bethel = 0;\r\n char *humongous_phocomelous;\r\n long ret = 1;\r\n FILE *fp = (FILE *)(b -> ptr);\r\n FILE **fpp;\r\n char p[4];\r\n if (__sync_bool_compare_and_swap(&crescographic_gadflies,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n humongous_phocomelous = getenv(\"UNAPPROACHABLY_MYRIAPODAN\");\r\n if (humongous_phocomelous != 0) {;\r\n lecompton_bethel = humongous_phocomelous;\r\n isoglosses_klina(lecompton_bethel);\r\n }\r\n }\r\n }\r\n switch(cmd){\r\n case 128:\r\n{\r\n }\r\n case 1:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(fseek((b -> ptr),num,0)));\r\n }\r\n else {\r\n ret = ((long )(fseek(fp,num,0)));\r\n }\r\n break; \r\n }\r\n case 2:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(feof(fp)));\r\n }\r\n else {\r\n ret = ((long )(feof(fp)));\r\n }\r\n break; \r\n }\r\n case 133:\r\n{\r\n }\r\n case 3:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ftell((b -> ptr));\r\n }\r\n else {\r\n ret = ftell(fp);\r\n }\r\n break; \r\n }\r\n case 106:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n b -> ptr = ptr;\r\n b -> init = 1;\r\n#if BIO_FLAGS_UPLINK!=0\r\n#if defined(__MINGW32__) && defined(__MSVCRT__) && !defined(_IOB_ENTRIES)\r\n#define _IOB_ENTRIES 20\r\n#endif\r\n#if defined(_IOB_ENTRIES)\r\n\r\n#endif\r\n#endif\r\n#ifdef UP_fsetmod\r\n#endif\r\n{\r\n#if defined(OPENSSL_SYS_WINDOWS)\r\n#elif defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n\r\n#elif defined(OPENSSL_SYS_MSDOS)\r\n\r\n\r\n#elif defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n }\r\n break; \r\n }\r\n case 108:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n if (num & 0x08) {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"a+\",sizeof(p));\r\n }\r\n else {\r\n BUF_strlcpy(p,\"a\",sizeof(p));\r\n }\r\n }\r\n else {\r\n if (num & 0x02 && num & 0x04) {\r\n BUF_strlcpy(p,\"r+\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x04) {\r\n BUF_strlcpy(p,\"w\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"r\",sizeof(p));\r\n }\r\n else {\r\n ERR_put_error(32,116,101,\"bss_file.c\",379);\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n }\r\n }\r\n#if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n#if defined(OPENSSL_SYS_NETWARE)\r\n#endif\r\n fp = fopen(ptr,p);\r\n if (fp == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",398);\r\n ERR_add_error_data(5,\"fopen('\",ptr,\"','\",p,\"')\");\r\n ERR_put_error(32,116,2,\"bss_file.c\",400);\r\n ret = 0;\r\n break; \r\n }\r\n b -> ptr = fp;\r\n b -> init = 1;\r\n\r\n BIO_clear_flags(b,0);\r\n break; \r\n }\r\n case 107:\r\n{\r\n\r\n if (ptr != ((void *)0)) {\r\n fpp = ((FILE **)ptr);\r\n *fpp = ((FILE *)(b -> ptr));\r\n }\r\n break; \r\n }\r\n case 8:\r\n{\r\n ret = ((long )(b -> shutdown));\r\n break; \r\n }\r\n case 9:\r\n{\r\n b -> shutdown = ((int )num);\r\n break; \r\n }\r\n case 11:\r\n{\r\n if (b -> flags & 0) {\r\n fflush((b -> ptr));\r\n }\r\n else {\r\n fflush(((FILE *)(b -> ptr)));\r\n }\r\n break; \r\n }\r\n case 12:\r\n{\r\n ret = 1;\r\n break; \r\n }\r\n case 13:\r\n{\r\n }\r\n case 10:\r\n{\r\n }\r\n case 6:\r\n{\r\n }\r\n case 7:\r\n{\r\n }\r\n default:\r\n{\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_gets(BIO *bp,char *buf,int size)\r\n{\r\n int ret = 0;\r\n buf[0] = '\\0';\r\n if (bp -> flags & 0) {\r\n if (!fgets(buf,size,(bp -> ptr))) {\r\n goto err;\r\n }\r\n }\r\n else {\r\n if (!fgets(buf,size,((FILE *)(bp -> ptr)))) {\r\n goto err;\r\n }\r\n }\r\n if (buf[0] != '\\0') {\r\n ret = (strlen(buf));\r\n }\r\n err:\r\n return ret;\r\n}\r\n\r\nstatic int file_puts(BIO *bp,const char *str)\r\n{\r\n int n;\r\n int ret;\r\n n = (strlen(str));\r\n ret = file_write(bp,str,n);\r\n return ret;\r\n}\r\n\r\nvoid isoglosses_klina(const dilatatory_stichado frangibilities_waff)\r\n{\r\n int stack_size = 0;\r\n char *stumblingly_jivaro = 0;\r\n jmp_buf abluvion_ardito;\r\n int hydrophyll_pluripara;\r\n ++global_variable;;\r\n hydrophyll_pluripara = setjmp(abluvion_ardito);\r\n if (hydrophyll_pluripara == 0) {\r\n longjmp(abluvion_ardito,1);\r\n }\r\n stumblingly_jivaro = ((char *)((dilatatory_stichado )frangibilities_waff));\r\n \r\n \r\n \r\n if (strlen(stumblingly_jivaro) > 1 &&\r\n stumblingly_jivaro[0] == '-') {\r\n printf(\"Input value is negative\\n\");\r\n } else {\r\n stack_size = strtoul(stumblingly_jivaro,0,0);\r\n printf(\"Allocating stack array\\n\");\r\n \r\n \r\n \r\n char stack_string[stack_size];\r\n memset(stack_string,'x',stack_size - 1);\r\n \r\n }\r\n \r\n \r\n;\r\nclose_printf_context();\r\n}\r\n#endif \r\n#endif \r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "789"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/avstring.h\"\r\n#include \"libavutil/channel_layout.h\"\r\n#include \"libavutil/common.h\"\r\n#include \"libavutil/imgutils.h\"\r\n#include \"libavutil/pixdesc.h\"\r\n#include \"libavutil/rational.h\"\r\n#include \"libavutil/samplefmt.h\"\r\n#include \"audio.h\"\r\n#include \"avfilter.h\"\r\n#include \"formats.h\"\r\n#include \"internal.h\"\r\n#include \"audio.h\"\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame);\r\nint paraproctitis_hydroxamic = 0;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* env_var_name) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n char* tainted_file_name = 0;\r\n FILE * tainted_file = 0;\r\n size_t result = 0;\r\n long lsize = 0;\r\n tainted_file_name = getenv(env_var_name);\r\n tainted_file = fopen(tainted_file_name,\"rb\");\r\n if (tainted_file != 0) {\r\n fseek(tainted_file,0L,2);\r\n lsize = ftell(tainted_file);\r\n rewind(tainted_file);\r\n *tainted_buff = ((char *)(malloc(sizeof(char ) * (lsize + 1))));\r\n if (*tainted_buff != 0) {\r\n \r\n result = fread(*tainted_buff,1,lsize,tainted_file);\r\n (*tainted_buff)[lsize] = '\\0';\r\n }\r\n }\r\n if (tainted_file != 0) {\r\n fclose(tainted_file);\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\n\r\nchar *ff_get_ref_perms_string(char *buf,size_t buf_size,int perms)\r\n{\r\n snprintf(buf,buf_size,\"%s%s%s%s%s%s\",(perms & 0x1?\"r\" : \"\"),(perms & 0x02?\"w\" : \"\"),(perms & 0x04?\"p\" : \"\"),(perms & 0x08?\"u\" : \"\"),(perms & 0x10?\"U\" : \"\"),(perms & 0x20?\"n\" : \"\"));\r\n return buf;\r\n}\r\n\r\nvoid ff_tlog_ref(void *ctx,AVFilterBufferRef *ref,int end)\r\n{\r\n char buf[16] __attribute__((unused)) ;\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"ref[%p buf:%p refcount:%d perms:%s data:%p linesize[%d, %d, %d, %d] pts:%ld pos:%ld\",ref,ref -> buf,ref -> buf -> refcount,ff_get_ref_perms_string(buf,sizeof(buf),ref -> perms),ref -> data[0],ref -> linesize[0],ref -> linesize[1],ref -> linesize[2],ref -> linesize[3],ref -> pts,ref -> pos);\r\n }\r\n }while (0);\r\n if (ref -> video) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" a:%d/%d s:%dx%d i:%c iskey:%d type:%c\",ref -> video -> sample_aspect_ratio . num,ref -> video -> sample_aspect_ratio . den,ref -> video -> w,ref -> video -> h,(!ref -> video -> interlaced?'P' : ((ref -> video -> top_field_first?'T' : 'B'))),ref -> video -> key_frame,(av_get_picture_type_char(ref -> video -> pict_type)));\r\n }\r\n }while (0);\r\n\r\n\r\n }\r\n if (ref -> audio) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" cl:%ldd n:%d r:%d\",ref -> audio -> channel_layout,ref -> audio -> nb_samples,ref -> audio -> sample_rate);\r\n }\r\n }while (0);\r\n }\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"]%s\",(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n}\r\n\r\nunsigned int avfilter_version()\r\n{\r\n do {\r\n if (!(103 >= 100)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"103 >= 100\",\"avfilter.c\",'P');\r\n abort();\r\n }\r\n }while (0);\r\n return (3 << 16 | 42 << 8 | 103);\r\n}\r\n\r\nconst char *avfilter_configuration()\r\n{\r\n int ss_i = 0;\r\n char stack_buff_64[64];\r\n int my_buff_size;\r\n char *bibliomancy_delftware = 0;\r\n char *muzz_inferiors = 0;\r\n int *cambogia_leku = 0;\r\n int diplosphenal_dramalogue;\r\n char *misadvantage_nontemporal[10] = {0};\r\n char *bakers_countersurprise;;\r\n if (__sync_bool_compare_and_swap(&paraproctitis_hydroxamic,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&bakers_countersurprise,\"TRAYLIKE_FOOTINGS\");\r\n if (bakers_countersurprise != 0) {;\r\n diplosphenal_dramalogue = 5;\r\n cambogia_leku = &diplosphenal_dramalogue;\r\n misadvantage_nontemporal[ *cambogia_leku] = bakers_countersurprise;\r\n muzz_inferiors = misadvantage_nontemporal[ *cambogia_leku];\r\n bibliomancy_delftware = ((char *)muzz_inferiors);\r\n \r\n \r\n memset(stack_buff_64,'A',63);\r\n stack_buff_64[63] = '\\0';\r\n \r\n \r\n \r\n my_buff_size = ((int )(strlen(bibliomancy_delftware)));\r\n for (; ss_i < my_buff_size; ++ss_i){\r\n \r\n \r\n printf(\"%c\",stack_buff_64[ss_i]);\r\n }\r\n \r\n \r\n \r\n \r\n printf(\"\\n\");\r\n \r\n;\r\n if (muzz_inferiors != 0) \r\n free(((char *)muzz_inferiors));\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n return \"--prefix=/opt//workspace/install --enable-pic --disable-static --enable-shared --disable-yasm --disable-doc --enable-pthreads --disable-w32threads --disable-os2threads --enable-zlib --enable-openssl --disable-asm --extra-cflags= --extra-ldflags= --extra-libs=-ldl\";\r\n}\r\n\r\nconst char *avfilter_license()\r\n{\r\n#define LICENSE_PREFIX \"libavfilter license: \"\r\n return (\"libavfilter license: LGPL version 2.1 or later\" + sizeof(\"libavfilter license: \") - 1);\r\n}\r\n\r\nvoid ff_command_queue_pop(AVFilterContext *filter)\r\n{\r\n AVFilterCommand *c = filter -> command_queue;\r\n av_freep((&c -> arg));\r\n av_freep((&c -> command));\r\n filter -> command_queue = c -> next;\r\n av_free(c);\r\n}\r\n\r\nvoid ff_insert_pad(unsigned int idx,unsigned int *count,size_t padidx_off,AVFilterPad **pads,AVFilterLink ***links,AVFilterPad *newpad)\r\n{\r\n unsigned int i;\r\n idx = (idx > *count? *count : idx);\r\n *pads = (av_realloc(( *pads),sizeof(AVFilterPad ) * ( *count + 1)));\r\n *links = (av_realloc(( *links),sizeof(AVFilterLink *) * ( *count + 1)));\r\n memmove(( *pads + idx + 1),( *pads + idx),sizeof(AVFilterPad ) * ( *count - idx));\r\n memmove(( *links + idx + 1),( *links + idx),sizeof(AVFilterLink *) * ( *count - idx));\r\n memcpy(( *pads + idx),newpad,sizeof(AVFilterPad ));\r\n ( *links)[idx] = ((void *)0);\r\n ( *count)++;\r\n for (i = idx + 1; i < *count; i++) \r\n if ( *links[i]) {\r\n ( *((unsigned int *)(((uint8_t *)( *links[i])) + padidx_off)))++;\r\n }\r\n}\r\n\r\nint avfilter_link(AVFilterContext *src,unsigned int srcpad,AVFilterContext *dst,unsigned int dstpad)\r\n{\r\n AVFilterLink *link;\r\n if (src -> nb_outputs <= srcpad || dst -> nb_inputs <= dstpad || src -> outputs[srcpad] || dst -> inputs[dstpad]) {\r\n return - 1;\r\n }\r\n if (src -> output_pads[srcpad] . type != dst -> input_pads[dstpad] . type) {\r\n av_log(src,16,\"Media type mismatch between the '%s' filter output pad %d (%s) and the '%s' filter input pad %d (%s)\\n\",src -> name,srcpad,((char *)(av_x_if_null((av_get_media_type_string(src -> output_pads[srcpad] . type)),\"?\"))),dst -> name,dstpad,((char *)(av_x_if_null((av_get_media_type_string(dst -> input_pads[dstpad] . type)),\"?\"))));\r\n return - 22;\r\n }\r\n src -> outputs[srcpad] = dst -> inputs[dstpad] = link = (av_mallocz(sizeof(AVFilterLink )));\r\n link -> src = src;\r\n link -> dst = dst;\r\n link -> srcpad = &src -> output_pads[srcpad];\r\n link -> dstpad = &dst -> input_pads[dstpad];\r\n link -> type = src -> output_pads[srcpad] . type;\r\n do {\r\n if (!(AV_PIX_FMT_NONE == - 1 && AV_SAMPLE_FMT_NONE == - 1)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"AV_PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1\",\"avfilter.c\",150);\r\n abort();\r\n }\r\n }while (0);\r\n link -> format = - 1;\r\n return 0;\r\n}\r\n\r\nvoid avfilter_link_free(AVFilterLink **link)\r\n{\r\n if (!( *link)) {\r\n return ;\r\n }\r\n if (( *link) -> pool) {\r\n ff_free_pool(( *link) -> pool);\r\n }\r\n avfilter_unref_bufferp(&( *link) -> partial_buf);\r\n av_freep(link);\r\n}\r\n\r\nint avfilter_link_get_channels(AVFilterLink *link)\r\n{\r\n return link -> channels;\r\n}\r\n\r\nvoid avfilter_link_set_closed(AVFilterLink *link,int closed)\r\n{\r\n link -> closed = closed;\r\n}\r\n\r\nint avfilter_insert_filter(AVFilterLink *link,AVFilterContext *filt,unsigned int filt_srcpad_idx,unsigned int filt_dstpad_idx)\r\n{\r\n int ret;\r\n unsigned int dstpad_idx = (link -> dstpad - link -> dst -> input_pads);\r\n av_log((link -> dst),40,\"auto-inserting filter '%s' between the filter '%s' and the filter '%s'\\n\",filt -> name,link -> src -> name,link -> dst -> name);\r\n link -> dst -> inputs[dstpad_idx] = ((void *)0);\r\n if ((ret = avfilter_link(filt,filt_dstpad_idx,link -> dst,dstpad_idx)) < 0) {\r\n\r\n link -> dst -> inputs[dstpad_idx] = link;\r\n return ret;\r\n }\r\n\r\n link -> dst = filt;\r\n link -> dstpad = &filt -> input_pads[filt_srcpad_idx];\r\n filt -> inputs[filt_srcpad_idx] = link;\r\n\r\n if (link -> out_formats) {\r\n ff_formats_changeref(&link -> out_formats,&filt -> outputs[filt_dstpad_idx] -> out_formats);\r\n }\r\n if (link -> out_samplerates) {\r\n ff_formats_changeref(&link -> out_samplerates,&filt -> outputs[filt_dstpad_idx] -> out_samplerates);\r\n }\r\n if (link -> out_channel_layouts) {\r\n ff_channel_layouts_changeref(&link -> out_channel_layouts,&filt -> outputs[filt_dstpad_idx] -> out_channel_layouts);\r\n }\r\n return 0;\r\n}\r\n\r\nint avfilter_config_links(AVFilterContext *filter)\r\n{\r\n int (*config_link)(AVFilterLink *);\r\n unsigned int i;\r\n int ret;\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n AVFilterLink *link = filter -> inputs[i];\r\n AVFilterLink *inlink;\r\n if (!link) {\r\n continue; \r\n }\r\n inlink = (link -> src -> nb_inputs?link -> src -> inputs[0] : ((void *)0));\r\n link -> current_pts = ((int64_t )0x8000000000000000UL);\r\n switch(link -> init_state){\r\n case AVLINK_INIT:\r\n continue; \r\n case AVLINK_STARTINIT:\r\n{\r\n av_log(filter,32,\"circular filter chain detected\\n\");\r\n return 0;\r\n }\r\n case AVLINK_UNINIT:\r\n{\r\n link -> init_state = AVLINK_STARTINIT;\r\n if ((ret = avfilter_config_links(link -> src)) < 0) {\r\n return ret;\r\n }\r\n if (!(config_link = link -> srcpad -> config_props)) {\r\n if (link -> src -> nb_inputs != 1) {\r\n av_log((link -> src),16,\"Source filters and filters with more than one input must set config_props() callbacks on all outputs\\n\");\r\n return - 22;\r\n }\r\n }\r\n else {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure output pad on %s\\n\",link -> src -> name);\r\n return ret;\r\n }\r\n }\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = (inlink?inlink -> time_base : ((AVRational ){(1), (1000000)}));\r\n }\r\n if (!link -> sample_aspect_ratio . num && !link -> sample_aspect_ratio . den) {\r\n link -> sample_aspect_ratio = (inlink?inlink -> sample_aspect_ratio : ((AVRational ){(1), (1)}));\r\n }\r\n if (inlink && !link -> frame_rate . num && !link -> frame_rate . den) {\r\n link -> frame_rate = inlink -> frame_rate;\r\n }\r\n if (inlink) {\r\n if (!link -> w) {\r\n link -> w = inlink -> w;\r\n }\r\n if (!link -> h) {\r\n link -> h = inlink -> h;\r\n }\r\n }\r\n else {\r\n if (!link -> w || !link -> h) {\r\n av_log((link -> src),16,\"Video source filters must set their output link's width and height\\n\");\r\n return - 22;\r\n }\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n if (inlink) {\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = inlink -> time_base;\r\n }\r\n }\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = ((AVRational ){(1), link -> sample_rate});\r\n }\r\n }\r\n }\r\n if (config_link = link -> dstpad -> config_props) {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure input pad on %s\\n\",link -> dst -> name);\r\n return ret;\r\n }\r\n }\r\n link -> init_state = AVLINK_INIT;\r\n }\r\n }\r\n }\r\n return 0;\r\n}\r\n\r\nvoid ff_tlog_link(void *ctx,AVFilterLink *link,int end)\r\n{\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p s:%dx%d fmt:%s %s->%s]%s\",link,link -> w,link -> h,av_get_pix_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n else {\r\n char buf[128];\r\n av_get_channel_layout_string(buf,(sizeof(buf)),- 1,link -> channel_layout);\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p r:%d cl:%s fmt:%s %s->%s]%s\",link,((int )(link -> sample_rate)),buf,av_get_sample_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n}\r\n\r\nint ff_request_frame(AVFilterLink *link)\r\n{\r\n int ret = - 1;\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"request_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n if (link -> closed) {\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (link -> srcpad -> request_frame) {\r\n ret = ((link -> srcpad -> request_frame)(link));\r\n }\r\n else {\r\n if (link -> src -> inputs[0]) {\r\n ret = ff_request_frame(link -> src -> inputs[0]);\r\n }\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24)) && link -> partial_buf) {\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n link -> partial_buf = ((void *)0);\r\n ff_filter_frame_framed(link,pbuf);\r\n return 0;\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24))) {\r\n link -> closed = 1;\r\n }\r\n return ret;\r\n}\r\n\r\nint ff_poll_frame(AVFilterLink *link)\r\n{\r\n int i;\r\n int min = 2147483647;\r\n if (link -> srcpad -> poll_frame) {\r\n return (link -> srcpad -> poll_frame)(link);\r\n }\r\n for (i = 0; i < link -> src -> nb_inputs; i++) {\r\n int val;\r\n if (!link -> src -> inputs[i]) {\r\n return - 1;\r\n }\r\n val = ff_poll_frame(link -> src -> inputs[i]);\r\n min = (min > val?val : min);\r\n }\r\n return min;\r\n}\r\n\r\nvoid ff_update_link_current_pts(AVFilterLink *link,int64_t pts)\r\n{\r\n if (pts == ((int64_t )0x8000000000000000UL)) {\r\n return ;\r\n }\r\n link -> current_pts = av_rescale_q(pts,link -> time_base,((AVRational ){(1), (1000000)}));\r\n\r\n if (link -> graph && link -> age_index >= 0) {\r\n ff_avfilter_graph_update_heap(link -> graph,link);\r\n }\r\n}\r\n\r\nint avfilter_process_command(AVFilterContext *filter,const char *cmd,const char *arg,char *res,int res_len,int flags)\r\n{\r\n if (!strcmp(cmd,\"ping\")) {\r\n av_strlcatf(res,res_len,\"pong from:%s %s\\n\",filter -> filter -> name,filter -> name);\r\n return 0;\r\n }\r\n else {\r\n if (filter -> filter -> process_command) {\r\n return (filter -> filter -> process_command)(filter,cmd,arg,res,res_len,flags);\r\n }\r\n }\r\n return - 38;\r\n}\r\n#define MAX_REGISTERED_AVFILTERS_NB 256\r\nstatic AVFilter *registered_avfilters[256 + 1];\r\nstatic int next_registered_avfilter_idx = 0;\r\n\r\nAVFilter *avfilter_get_by_name(const char *name)\r\n{\r\n int i;\r\n for (i = 0; registered_avfilters[i]; i++) \r\n if (!strcmp(registered_avfilters[i] -> name,name)) {\r\n return registered_avfilters[i];\r\n }\r\n return ((void *)0);\r\n}\r\n\r\nint avfilter_register(AVFilter *filter)\r\n{\r\n int i;\r\n if (next_registered_avfilter_idx == 256) {\r\n av_log(((void *)0),16,\"Maximum number of registered filters %d reached, impossible to register filter with name '%s'\\n\",256,filter -> name);\r\n return - '\\f';\r\n }\r\n for (i = 0; filter -> inputs && filter -> inputs[i] . name; i++) {\r\n const AVFilterPad *input = &filter -> inputs[i];\r\n do {\r\n if (!(!input -> filter_frame || !input -> start_frame && !input -> end_frame)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"!input->filter_frame || (!input->start_frame && !input->end_frame)\",\"avfilter.c\",426);\r\n abort();\r\n }\r\n }while (0);\r\n }\r\n registered_avfilters[next_registered_avfilter_idx++] = filter;\r\n return 0;\r\n}\r\n\r\nAVFilter **av_filter_next(AVFilter **filter)\r\n{\r\n return filter?++filter : &registered_avfilters[0];\r\n}\r\n\r\nvoid avfilter_uninit()\r\n{\r\n memset(registered_avfilters,0,sizeof(registered_avfilters));\r\n next_registered_avfilter_idx = 0;\r\n}\r\n\r\nstatic int pad_count(const AVFilterPad *pads)\r\n{\r\n int count;\r\n if (!pads) {\r\n return 0;\r\n }\r\n for (count = 0; pads -> name; count++) \r\n pads++;\r\n return count;\r\n}\r\n\r\nstatic const char *default_filter_name(void *filter_ctx)\r\n{\r\n AVFilterContext *ctx = filter_ctx;\r\n return ctx -> name?(ctx -> name) : ctx -> filter -> name;\r\n}\r\n\r\nstatic void *filter_child_next(void *obj,void *prev)\r\n{\r\n AVFilterContext *ctx = obj;\r\n if (!prev && ctx -> filter && ctx -> filter -> priv_class) {\r\n return ctx -> priv;\r\n }\r\n return (void *)0;\r\n}\r\n\r\nstatic const AVClass *filter_child_class_next(const AVClass *prev)\r\n{\r\n AVFilter **filter_ptr = ((void *)0);\r\n\r\n while(prev && *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class == prev) {\r\n break; \r\n }\r\n\r\n if (prev && !( *filter_ptr)) {\r\n return ((void *)0);\r\n }\r\n\r\n while( *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class) {\r\n return ( *filter_ptr) -> priv_class;\r\n }\r\n return ((void *)0);\r\n}\r\nstatic const AVClass avfilter_class = {.class_name = \"AVFilter\", .item_name = default_filter_name, .version = 52 << 16 | 18 << 8 | 100, .category = AV_CLASS_CATEGORY_FILTER, .child_next = filter_child_next, .child_class_next = filter_child_class_next};\r\n\r\nconst AVClass *avfilter_get_class()\r\n{\r\n return &avfilter_class;\r\n}\r\n\r\nint avfilter_open(AVFilterContext **filter_ctx,AVFilter *filter,const char *inst_name)\r\n{\r\n AVFilterContext *ret;\r\n *filter_ctx = ((void *)0);\r\n if (!filter) {\r\n return - 22;\r\n }\r\n ret = (av_mallocz(sizeof(AVFilterContext )));\r\n if (!ret) {\r\n return - '\\f';\r\n }\r\n ret -> av_class = &avfilter_class;\r\n ret -> filter = filter;\r\n ret -> name = (inst_name?av_strdup(inst_name) : ((void *)0));\r\n if (filter -> priv_size) {\r\n ret -> priv = av_mallocz((filter -> priv_size));\r\n if (!ret -> priv) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_inputs = (pad_count(filter -> inputs));\r\n if (ret -> nb_inputs) {\r\n ret -> input_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_inputs)));\r\n if (!ret -> input_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> input_pads),(filter -> inputs),sizeof(AVFilterPad ) * (ret -> nb_inputs));\r\n ret -> inputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_inputs)));\r\n if (!ret -> inputs) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_outputs = (pad_count(filter -> outputs));\r\n if (ret -> nb_outputs) {\r\n ret -> output_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_outputs)));\r\n if (!ret -> output_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> output_pads),(filter -> outputs),sizeof(AVFilterPad ) * (ret -> nb_outputs));\r\n ret -> outputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_outputs)));\r\n if (!ret -> outputs) {\r\n goto err;\r\n }\r\n }\r\n#if FF_API_FOO_COUNT\r\n ret -> output_count = ret -> nb_outputs;\r\n ret -> input_count = ret -> nb_inputs;\r\n#endif\r\n *filter_ctx = ret;\r\n return 0;\r\n err:\r\n av_freep((&ret -> inputs));\r\n av_freep((&ret -> input_pads));\r\n ret -> nb_inputs = 0;\r\n av_freep((&ret -> outputs));\r\n av_freep((&ret -> output_pads));\r\n ret -> nb_outputs = 0;\r\n av_freep((&ret -> priv));\r\n av_free(ret);\r\n return - '\\f';\r\n}\r\n\r\nvoid avfilter_free(AVFilterContext *filter)\r\n{\r\n int i;\r\n AVFilterLink *link;\r\n if (!filter) {\r\n return ;\r\n }\r\n if (filter -> filter -> uninit) {\r\n (filter -> filter -> uninit)(filter);\r\n }\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n if (link = filter -> inputs[i]) {\r\n if (link -> src) {\r\n link -> src -> outputs[link -> srcpad - link -> src -> output_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n for (i = 0; i < filter -> nb_outputs; i++) {\r\n if (link = filter -> outputs[i]) {\r\n if (link -> dst) {\r\n link -> dst -> inputs[link -> dstpad - link -> dst -> input_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n av_freep((&filter -> name));\r\n av_freep((&filter -> input_pads));\r\n av_freep((&filter -> output_pads));\r\n av_freep((&filter -> inputs));\r\n av_freep((&filter -> outputs));\r\n av_freep((&filter -> priv));\r\n while(filter -> command_queue){\r\n ff_command_queue_pop(filter);\r\n }\r\n av_free(filter);\r\n}\r\n\r\nint avfilter_init_filter(AVFilterContext *filter,const char *args,void *opaque)\r\n{\r\n int ret = 0;\r\n if (filter -> filter -> init_opaque) {\r\n ret = ((filter -> filter -> init_opaque)(filter,args,opaque));\r\n }\r\n else {\r\n if (filter -> filter -> init) {\r\n ret = ((filter -> filter -> init)(filter,args));\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nconst char *avfilter_pad_get_name(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . name;\r\n}\r\n\r\nenum AVMediaType avfilter_pad_get_type(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . type;\r\n}\r\n\r\nstatic int default_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n return ff_filter_frame(link -> dst -> outputs[0],frame);\r\n}\r\n\r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int (*filter_frame)(AVFilterLink *, AVFilterBufferRef *);\r\n AVFilterPad *src = link -> srcpad;\r\n AVFilterPad *dst = link -> dstpad;\r\n AVFilterBufferRef *out;\r\n int perms;\r\n int ret;\r\n AVFilterCommand *cmd = link -> dst -> command_queue;\r\n int64_t pts;\r\n if (link -> closed) {\r\n avfilter_unref_buffer(frame);\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (!(filter_frame = dst -> filter_frame)) {\r\n filter_frame = default_filter_frame;\r\n }\r\n (void )0;\r\n frame -> perms &= ~src -> rej_perms;\r\n perms = frame -> perms;\r\n if (frame -> linesize[0] < 0) {\r\n perms |= 0x20;\r\n }\r\n\r\n if ((dst -> min_perms & perms) != dst -> min_perms || dst -> rej_perms & perms) {\r\n av_log((link -> dst),48,\"Copying data in avfilter (have perms %x, need %x, reject %x)\\n\",perms,link -> dstpad -> min_perms,link -> dstpad -> rej_perms);\r\n\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n out = ff_get_video_buffer(link,dst -> min_perms,link -> w,link -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n out = ff_get_audio_buffer(link,dst -> min_perms,frame -> audio -> nb_samples);\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n if (!out) {\r\n avfilter_unref_buffer(frame);\r\n return - '\\f';\r\n }\r\n avfilter_copy_buffer_ref_props(out,frame);\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n av_image_copy(out -> data,out -> linesize,((const uint8_t **)(frame -> data)),(frame -> linesize),(frame -> format),frame -> video -> w,frame -> video -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n av_samples_copy(out -> extended_data,(frame -> extended_data),0,0,frame -> audio -> nb_samples,av_get_channel_layout_nb_channels(frame -> audio -> channel_layout),(frame -> format));\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n avfilter_unref_buffer(frame);\r\n }\r\n else {\r\n out = frame;\r\n }\r\n while(cmd && cmd -> time <= (out -> pts) * av_q2d(link -> time_base)){\r\n av_log((link -> dst),48,\"Processing command time:%f command:%s arg:%s\\n\",cmd -> time,cmd -> command,cmd -> arg);\r\n avfilter_process_command(link -> dst,(cmd -> command),(cmd -> arg),0,0,cmd -> flags);\r\n ff_command_queue_pop(link -> dst);\r\n cmd = link -> dst -> command_queue;\r\n }\r\n pts = out -> pts;\r\n ret = filter_frame(link,out);\r\n ff_update_link_current_pts(link,pts);\r\n return ret;\r\n}\r\n\r\nstatic int ff_filter_frame_needs_framing(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int insamples = frame -> audio -> nb_samples;\r\n int inpos = 0;\r\n int nb_samples;\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n int nb_channels = frame -> audio -> channels;\r\n int ret = 0;\r\n\r\n while(insamples){\r\n if (!pbuf) {\r\n AVRational samples_tb = {(1), link -> sample_rate};\r\n int perms = link -> dstpad -> min_perms | 0x02;\r\n pbuf = ff_get_audio_buffer(link,perms,link -> partial_buf_size);\r\n if (!pbuf) {\r\n av_log((link -> dst),24,\"Samples dropped due to memory allocation failure.\\n\");\r\n return 0;\r\n }\r\n avfilter_copy_buffer_ref_props(pbuf,frame);\r\n pbuf -> pts = frame -> pts + av_rescale_q(inpos,samples_tb,link -> time_base);\r\n pbuf -> audio -> nb_samples = 0;\r\n }\r\n nb_samples = (insamples > link -> partial_buf_size - pbuf -> audio -> nb_samples?link -> partial_buf_size - pbuf -> audio -> nb_samples : insamples);\r\n av_samples_copy(pbuf -> extended_data,(frame -> extended_data),pbuf -> audio -> nb_samples,inpos,nb_samples,nb_channels,(link -> format));\r\n inpos += nb_samples;\r\n insamples -= nb_samples;\r\n pbuf -> audio -> nb_samples += nb_samples;\r\n if (pbuf -> audio -> nb_samples >= link -> min_samples) {\r\n ret = ff_filter_frame_framed(link,pbuf);\r\n pbuf = ((void *)0);\r\n }\r\n }\r\n avfilter_unref_buffer(frame);\r\n link -> partial_buf = pbuf;\r\n return ret;\r\n}\r\n\r\nint ff_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"filter_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\" \");\r\n }\r\n }while (0);\r\n ff_tlog_ref(((void *)0),frame,1);\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n if (strcmp(link -> dst -> filter -> name,\"scale\")) {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n }\r\n else {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_AUDIO && link -> min_samples && (link -> partial_buf || frame -> audio -> nb_samples < link -> min_samples || frame -> audio -> nb_samples > link -> max_samples)) {\r\n return ff_filter_frame_needs_framing(link,frame);\r\n }\r\n else {\r\n return ff_filter_frame_framed(link,frame);\r\n }\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "126"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include \"eng_int.h\"\r\n#include <openssl/rand.h>\r\n\r\n#include <mongoose.h> \r\n#include </trace.h> \r\n#include <sys/stat.h> \r\nint toxicogenic_bizes = 0;\r\n\r\nunion anisogamic_ezzard \r\n{\r\n char *unsummable_chancres;\r\n double xylometer_rile;\r\n char *undereyed_multiflow;\r\n char gangbang_edirne;\r\n int sansculottic_forcipal;\r\n}\r\n;\r\nint global_variable;\r\nvoid handle_taint(char *catheterising_tightroping);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nstruct data_struct {\r\n int (*func_member)(char *);\r\n char *str_member;\r\n};\r\nint modulus_function(char *modulus_param_str)\r\n{\r\n \r\n return modulus_param_str[0] % 2;\r\n}\r\nvoid set_function(char *set_param_str,struct data_struct *set_param_data_struct)\r\n{\r\n \r\n \r\n\r\n if (strlen(set_param_str) > 10U) {\r\n set_param_data_struct -> func_member = modulus_function;\r\n set_param_data_struct -> str_member = set_param_str;\r\n \r\n }\r\n if (strlen(set_param_str) < 10U) {\r\n set_param_data_struct -> func_member = modulus_function;\r\n set_param_data_struct -> str_member = \"default\";\r\n \r\n }\r\n \r\n}\r\n\r\nENGINE *ENGINE_new()\r\n{\r\n ENGINE *ret;\r\n ret = ((ENGINE *)(CRYPTO_malloc(((int )(sizeof(ENGINE ))),\"eng_lib.c\",68)));\r\n if (ret == ((void *)0)) {\r\n ERR_put_error(38,122,1 | 64,\"eng_lib.c\",71);\r\n return ((void *)0);\r\n }\r\n memset(ret,0,sizeof(ENGINE ));\r\n ret -> struct_ref = 1;\r\n CRYPTO_new_ex_data(9,ret,&ret -> ex_data);\r\n return ret;\r\n}\r\n\r\n\r\nvoid engine_set_all_null(ENGINE *e)\r\n{\r\n e -> id = ((void *)0);\r\n e -> name = ((void *)0);\r\n e -> rsa_meth = ((void *)0);\r\n e -> dsa_meth = ((void *)0);\r\n e -> dh_meth = ((void *)0);\r\n e -> rand_meth = ((void *)0);\r\n e -> store_meth = ((void *)0);\r\n e -> ciphers = ((void *)0);\r\n e -> digests = ((void *)0);\r\n e -> destroy = ((void *)0);\r\n e -> init = ((void *)0);\r\n e -> finish = ((void *)0);\r\n e -> ctrl = ((void *)0);\r\n e -> load_privkey = ((void *)0);\r\n e -> load_pubkey = ((void *)0);\r\n e -> cmd_defns = ((void *)0);\r\n e -> flags = 0;\r\n}\r\n\r\nint engine_free_util(ENGINE *e,int locked)\r\n{\r\n int i;\r\n if (e == ((void *)0)) {\r\n ERR_put_error(38,108,3 | 64,\"eng_lib.c\",112);\r\n return 0;\r\n }\r\n if (locked) {\r\n i = CRYPTO_add_lock(&e -> struct_ref,- 1,30,\"eng_lib.c\",116);\r\n }\r\n else {\r\n i = --e -> struct_ref;\r\n }\r\n if (i > 0) {\r\n return 1;\r\n }\r\n#ifdef REF_CHECK\r\n#endif\r\n\r\n engine_pkey_meths_free(e);\r\n engine_pkey_asn1_meths_free(e);\r\n\r\n if (e -> destroy) {\r\n (e -> destroy)(e);\r\n }\r\n CRYPTO_free_ex_data(9,e,&e -> ex_data);\r\n CRYPTO_free(e);\r\n return 1;\r\n}\r\n\r\nint ENGINE_free(ENGINE *e)\r\n{\r\n return engine_free_util(e,1);\r\n}\r\n\r\n\r\nstatic struct stack_st_ENGINE_CLEANUP_ITEM *cleanup_stack = ((void *)0);\r\n\r\nstatic int int_cleanup_check(int create)\r\n{\r\n if (cleanup_stack) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n cleanup_stack = ((struct stack_st_ENGINE_CLEANUP_ITEM *)(sk_new_null()));\r\n return cleanup_stack?1 : 0;\r\n}\r\n\r\nstatic ENGINE_CLEANUP_ITEM *int_cleanup_item(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item = (CRYPTO_malloc(((int )(sizeof(ENGINE_CLEANUP_ITEM ))),\"eng_lib.c\",162));\r\n if (!item) {\r\n return ((void *)0);\r\n }\r\n item -> cb = cb;\r\n return item;\r\n}\r\n\r\nvoid engine_cleanup_add_first(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_insert(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))),0);\r\n }\r\n}\r\n\r\nvoid engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_push(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))));\r\n }\r\n}\r\n\r\n\r\nstatic void engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)\r\n{\r\n ( *item -> cb)();\r\n CRYPTO_free(item);\r\n}\r\n\r\nvoid ENGINE_cleanup()\r\n{;\r\n if (__sync_bool_compare_and_swap(&toxicogenic_bizes,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n if (int_cleanup_check(0)) {\r\n sk_pop_free(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void (*)(void *))engine_cleanup_cb_free));\r\n cleanup_stack = ((void *)0);\r\n }\r\n\r\n RAND_set_rand_method(((void *)0));\r\n}\r\n\r\n\r\nint ENGINE_get_ex_new_index(long argl,void *argp,CRYPTO_EX_new *new_func,CRYPTO_EX_dup *dup_func,CRYPTO_EX_free *free_func)\r\n{\r\n return CRYPTO_get_ex_new_index(9,argl,argp,new_func,dup_func,free_func);\r\n}\r\n\r\nint ENGINE_set_ex_data(ENGINE *e,int idx,void *arg)\r\n{\r\n return CRYPTO_set_ex_data(&e -> ex_data,idx,arg);\r\n}\r\n\r\nvoid *ENGINE_get_ex_data(const ENGINE *e,int idx)\r\n{\r\n return CRYPTO_get_ex_data(&e -> ex_data,idx);\r\n}\r\n\r\n\r\nint ENGINE_set_id(ENGINE *e,const char *id)\r\n{\r\n if (id == ((void *)0)) {\r\n ERR_put_error(38,129,3 | 64,\"eng_lib.c\",229);\r\n return 0;\r\n }\r\n e -> id = id;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_name(ENGINE *e,const char *name)\r\n{\r\n if (name == ((void *)0)) {\r\n ERR_put_error(38,130,3 | 64,\"eng_lib.c\",241);\r\n return 0;\r\n }\r\n e -> name = name;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_destroy_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR destroy_f)\r\n{\r\n e -> destroy = destroy_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_init_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR init_f)\r\n{\r\n e -> init = init_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_finish_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR finish_f)\r\n{\r\n e -> finish = finish_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_ctrl_function(ENGINE *e,ENGINE_CTRL_FUNC_PTR ctrl_f)\r\n{\r\n e -> ctrl = ctrl_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_flags(ENGINE *e,int flags)\r\n{\r\n e -> flags = flags;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_cmd_defns(ENGINE *e,const ENGINE_CMD_DEFN *defns)\r\n{\r\n e -> cmd_defns = defns;\r\n return 1;\r\n}\r\n\r\nconst char *ENGINE_get_id(const ENGINE *e)\r\n{\r\n return e -> id;\r\n}\r\n\r\nconst char *ENGINE_get_name(const ENGINE *e)\r\n{\r\n return e -> name;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e)\r\n{\r\n return e -> destroy;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e)\r\n{\r\n return e -> init;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e)\r\n{\r\n return e -> finish;\r\n}\r\n\r\nENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e)\r\n{\r\n return e -> ctrl;\r\n}\r\n\r\nint ENGINE_get_flags(const ENGINE *e)\r\n{\r\n return e -> flags;\r\n}\r\n\r\nconst ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e)\r\n{\r\n return e -> cmd_defns;\r\n}\r\n\r\nstatic int internal_static_hack = 0;\r\n\r\nvoid *ENGINE_get_static_state()\r\n{\r\n return (&internal_static_hack);\r\n}\r\n\r\nvoid handle_taint(char *catheterising_tightroping)\r\n{\r\n int val = 0;\r\n struct data_struct my_foo;\r\n char *miliolitic_subfulgent = 0;\r\n union anisogamic_ezzard overrestrain_bistros;\r\n ++global_variable;;\r\n if (catheterising_tightroping != 0) {;\r\n overrestrain_bistros . unsummable_chancres = catheterising_tightroping;\r\n miliolitic_subfulgent = ((char *)overrestrain_bistros . unsummable_chancres);\r\n \r\n if (strlen(miliolitic_subfulgent) < 1) {\r\n printf(\"string is too short to test\\n\");\r\n } else {\r\n set_function(miliolitic_subfulgent, &my_foo);\r\n \r\n \r\n val = (my_foo . func_member(my_foo . str_member));\r\n \r\n if (val == 0)\r\n printf(\"mod is true\\n\");\r\n else\r\n printf(\"mod is false\\n\");\r\n }\r\n \r\n;\r\n if (overrestrain_bistros . unsummable_chancres != 0) \r\n free(((char *)overrestrain_bistros . unsummable_chancres));\r\nclose_printf_context();\r\n }\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "824"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include \"eng_int.h\"\r\n#include <openssl/rand.h>\r\n\r\n#include <sys/stat.h> \r\n#include <setjmp.h> \r\n#include </trace.h> \r\nint skyborne_bontocs = 0;\r\n\r\nunion nonsimulation_bootikin \r\n{\r\n char *quince_slaverers;\r\n double zealless_enterocentesis;\r\n char *thoreau_curdling;\r\n char arsonium_vulvovaginitis;\r\n int forks_chinee;\r\n}\r\n;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\n\r\nENGINE *ENGINE_new()\r\n{\r\n ENGINE *ret;\r\n ret = ((ENGINE *)(CRYPTO_malloc(((int )(sizeof(ENGINE ))),\"eng_lib.c\",68)));\r\n if (ret == ((void *)0)) {\r\n ERR_put_error(38,122,1 | 64,\"eng_lib.c\",71);\r\n return ((void *)0);\r\n }\r\n memset(ret,0,sizeof(ENGINE ));\r\n ret -> struct_ref = 1;\r\n CRYPTO_new_ex_data(9,ret,&ret -> ex_data);\r\n return ret;\r\n}\r\n\r\n\r\nvoid engine_set_all_null(ENGINE *e)\r\n{\r\n e -> id = ((void *)0);\r\n e -> name = ((void *)0);\r\n e -> rsa_meth = ((void *)0);\r\n e -> dsa_meth = ((void *)0);\r\n e -> dh_meth = ((void *)0);\r\n e -> rand_meth = ((void *)0);\r\n e -> store_meth = ((void *)0);\r\n e -> ciphers = ((void *)0);\r\n e -> digests = ((void *)0);\r\n e -> destroy = ((void *)0);\r\n e -> init = ((void *)0);\r\n e -> finish = ((void *)0);\r\n e -> ctrl = ((void *)0);\r\n e -> load_privkey = ((void *)0);\r\n e -> load_pubkey = ((void *)0);\r\n e -> cmd_defns = ((void *)0);\r\n e -> flags = 0;\r\n}\r\n\r\nint engine_free_util(ENGINE *e,int locked)\r\n{\r\n int i;\r\n if (e == ((void *)0)) {\r\n ERR_put_error(38,108,3 | 64,\"eng_lib.c\",112);\r\n return 0;\r\n }\r\n if (locked) {\r\n i = CRYPTO_add_lock(&e -> struct_ref,- 1,30,\"eng_lib.c\",116);\r\n }\r\n else {\r\n i = --e -> struct_ref;\r\n }\r\n if (i > 0) {\r\n return 1;\r\n }\r\n#ifdef REF_CHECK\r\n#endif\r\n\r\n engine_pkey_meths_free(e);\r\n engine_pkey_asn1_meths_free(e);\r\n\r\n if (e -> destroy) {\r\n (e -> destroy)(e);\r\n }\r\n CRYPTO_free_ex_data(9,e,&e -> ex_data);\r\n CRYPTO_free(e);\r\n return 1;\r\n}\r\n\r\nint ENGINE_free(ENGINE *e)\r\n{\r\n return engine_free_util(e,1);\r\n}\r\n\r\n\r\nstatic struct stack_st_ENGINE_CLEANUP_ITEM *cleanup_stack = ((void *)0);\r\n\r\nstatic int int_cleanup_check(int create)\r\n{\r\n if (cleanup_stack) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n cleanup_stack = ((struct stack_st_ENGINE_CLEANUP_ITEM *)(sk_new_null()));\r\n return cleanup_stack?1 : 0;\r\n}\r\n\r\nstatic ENGINE_CLEANUP_ITEM *int_cleanup_item(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item = (CRYPTO_malloc(((int )(sizeof(ENGINE_CLEANUP_ITEM ))),\"eng_lib.c\",162));\r\n if (!item) {\r\n return ((void *)0);\r\n }\r\n item -> cb = cb;\r\n return item;\r\n}\r\n\r\nvoid engine_cleanup_add_first(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_insert(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))),0);\r\n }\r\n}\r\n\r\nvoid engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_push(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))));\r\n }\r\n}\r\n\r\n\r\nstatic void engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)\r\n{\r\n ( *item -> cb)();\r\n CRYPTO_free(item);\r\n}\r\n\r\nvoid ENGINE_cleanup()\r\n{\r\n char buffer[80];\r\n FILE *pFile = 0;\r\n char *shulamite_nonpopulousness = 0;\r\n jmp_buf upas_periacinous;\r\n int truffle_shekel;\r\n union nonsimulation_bootikin intubation_metatarsale = {0};\r\n int **********hemivagotony_jiggish = 0;\r\n int *********careeners_egret = 0;\r\n int ********karate_preludiously = 0;\r\n int *******bisaltae_bcws = 0;\r\n int ******mapes_mariko = 0;\r\n int *****recruital_handicapping = 0;\r\n int ****vlissingen_chesterfieldian = 0;\r\n int ***dyscrystalline_zincic = 0;\r\n int **guttie_pleaseman = 0;\r\n int *nyctalops_ockham = 0;\r\n int jarvey_hobbyless;\r\n union nonsimulation_bootikin shieldmaker_poetomachia[10] = {0};\r\n union nonsimulation_bootikin chlorinated_surlier;\r\n char *rheotropism_misrepeat;;\r\n if (__sync_bool_compare_and_swap(&skyborne_bontocs,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n rheotropism_misrepeat = getenv(\"INNOVATORS_DANELLA\");\r\n if (rheotropism_misrepeat != 0) {;\r\n chlorinated_surlier . quince_slaverers = rheotropism_misrepeat;\r\n jarvey_hobbyless = 5;\r\n nyctalops_ockham = &jarvey_hobbyless;\r\n guttie_pleaseman = &nyctalops_ockham;\r\n dyscrystalline_zincic = &guttie_pleaseman;\r\n vlissingen_chesterfieldian = &dyscrystalline_zincic;\r\n recruital_handicapping = &vlissingen_chesterfieldian;\r\n mapes_mariko = &recruital_handicapping;\r\n bisaltae_bcws = &mapes_mariko;\r\n karate_preludiously = &bisaltae_bcws;\r\n careeners_egret = &karate_preludiously;\r\n hemivagotony_jiggish = &careeners_egret;\r\n shieldmaker_poetomachia[ *( *( *( *( *( *( *( *( *( *hemivagotony_jiggish)))))))))] = chlorinated_surlier;\r\n intubation_metatarsale = shieldmaker_poetomachia[ *( *( *( *( *( *( *( *( *( *hemivagotony_jiggish)))))))))];\r\n truffle_shekel = setjmp(upas_periacinous);\r\n if (truffle_shekel == 0) {\r\n longjmp(upas_periacinous,1);\r\n }\r\n shulamite_nonpopulousness = ((char *)intubation_metatarsale . quince_slaverers);\r\n \r\n \r\n\r\n pFile = fopen(shulamite_nonpopulousness,\"r\");\r\n buffer[0] = 0;\r\n \r\n \r\n \r\n\r\n fgets(buffer,79,pFile);\r\n printf(buffer);\r\n printf(\"\\n\");\r\n fclose(pFile);\r\n \r\n \r\n;\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n if (int_cleanup_check(0)) {\r\n sk_pop_free(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void (*)(void *))engine_cleanup_cb_free));\r\n cleanup_stack = ((void *)0);\r\n }\r\n\r\n RAND_set_rand_method(((void *)0));\r\n}\r\n\r\n\r\nint ENGINE_get_ex_new_index(long argl,void *argp,CRYPTO_EX_new *new_func,CRYPTO_EX_dup *dup_func,CRYPTO_EX_free *free_func)\r\n{\r\n return CRYPTO_get_ex_new_index(9,argl,argp,new_func,dup_func,free_func);\r\n}\r\n\r\nint ENGINE_set_ex_data(ENGINE *e,int idx,void *arg)\r\n{\r\n return CRYPTO_set_ex_data(&e -> ex_data,idx,arg);\r\n}\r\n\r\nvoid *ENGINE_get_ex_data(const ENGINE *e,int idx)\r\n{\r\n return CRYPTO_get_ex_data(&e -> ex_data,idx);\r\n}\r\n\r\n\r\nint ENGINE_set_id(ENGINE *e,const char *id)\r\n{\r\n if (id == ((void *)0)) {\r\n ERR_put_error(38,129,3 | 64,\"eng_lib.c\",229);\r\n return 0;\r\n }\r\n e -> id = id;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_name(ENGINE *e,const char *name)\r\n{\r\n if (name == ((void *)0)) {\r\n ERR_put_error(38,130,3 | 64,\"eng_lib.c\",241);\r\n return 0;\r\n }\r\n e -> name = name;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_destroy_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR destroy_f)\r\n{\r\n e -> destroy = destroy_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_init_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR init_f)\r\n{\r\n e -> init = init_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_finish_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR finish_f)\r\n{\r\n e -> finish = finish_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_ctrl_function(ENGINE *e,ENGINE_CTRL_FUNC_PTR ctrl_f)\r\n{\r\n e -> ctrl = ctrl_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_flags(ENGINE *e,int flags)\r\n{\r\n e -> flags = flags;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_cmd_defns(ENGINE *e,const ENGINE_CMD_DEFN *defns)\r\n{\r\n e -> cmd_defns = defns;\r\n return 1;\r\n}\r\n\r\nconst char *ENGINE_get_id(const ENGINE *e)\r\n{\r\n return e -> id;\r\n}\r\n\r\nconst char *ENGINE_get_name(const ENGINE *e)\r\n{\r\n return e -> name;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e)\r\n{\r\n return e -> destroy;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e)\r\n{\r\n return e -> init;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e)\r\n{\r\n return e -> finish;\r\n}\r\n\r\nENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e)\r\n{\r\n return e -> ctrl;\r\n}\r\n\r\nint ENGINE_get_flags(const ENGINE *e)\r\n{\r\n return e -> flags;\r\n}\r\n\r\nconst ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e)\r\n{\r\n return e -> cmd_defns;\r\n}\r\n\r\nstatic int internal_static_hack = 0;\r\n\r\nvoid *ENGINE_get_static_state()\r\n{\r\n return (&internal_static_hack);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "476"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <openssl/err.h>\r\n#include <openssl/bio.h>\r\n\r\n#ifndef OPENSSL_NO_ERR\r\n#define ERR_FUNC(func) ERR_PACK(ERR_LIB_BIO,func,0)\r\n#define ERR_REASON(reason) ERR_PACK(ERR_LIB_BIO,0,reason)\r\n#include <string.h> \r\n#include <sys/stat.h> \r\n#include </trace.h> \r\nstatic ERR_STRING_DATA BIO_str_functs[] = {{((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )100) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"ACPT_STATE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )101) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_accept\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )102) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_BER_GET_HEADER\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )131) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_callback_ctrl\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )103) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_ctrl\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )120) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_gethostbyname\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )104) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_gets\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )105) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_accept_socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )106) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_host_ip\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )107) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_port\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )121) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_MAKE_PAIR\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )108) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )109) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new_file\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )126) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new_mem_buf\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )123) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nread\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )124) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nread0\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )125) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nwrite\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )122) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nwrite0\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )110) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_puts\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )111) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_read\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )112) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_sock_init\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )113) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_write\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )114) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BUFFER_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )127) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"CONN_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )115) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"CONN_STATE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )132) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"DGRAM_SCTP_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )116) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"FILE_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )130) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"FILE_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )129) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"LINEBUFFER_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )128) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"MEM_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )117) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"MEM_WRITE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )118) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"SSL_new\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )119) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"WSASTARTUP\")}, {(0), (((void *)0))}};\r\nstatic ERR_STRING_DATA BIO_str_reasons[] = {{((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )100) & 0xfffL), (\"accept error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )101) & 0xfffL), (\"bad fopen mode\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )102) & 0xfffL), (\"bad hostname lookup\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )124) & 0xfffL), (\"broken pipe\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )103) & 0xfffL), (\"connect error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )127) & 0xfffL), (\"EOF on memory BIO\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )104) & 0xfffL), (\"error setting nbio\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )105) & 0xfffL), (\"error setting nbio on accepted socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )106) & 0xfffL), (\"error setting nbio on accept socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )107) & 0xfffL), (\"gethostbyname addr is not af inet\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )125) & 0xfffL), (\"invalid argument\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )108) & 0xfffL), (\"invalid ip address\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )123) & 0xfffL), (\"in use\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )109) & 0xfffL), (\"keepalive\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )110) & 0xfffL), (\"nbio connect error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )111) & 0xfffL), (\"no accept port specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )112) & 0xfffL), (\"no hostname specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )113) & 0xfffL), (\"no port defined\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )114) & 0xfffL), (\"no port specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )128) & 0xfffL), (\"no such file\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )115) & 0xfffL), (\"null parameter\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )116) & 0xfffL), (\"tag mismatch\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )117) & 0xfffL), (\"unable to bind socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )118) & 0xfffL), (\"unable to create socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )119) & 0xfffL), (\"unable to listen socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )120) & 0xfffL), (\"uninitialized\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )121) & 0xfffL), (\"unsupported method\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )126) & 0xfffL), (\"write to read only BIO\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )122) & 0xfffL), (\"WSAStartup\")}, {(0), (((void *)0))}};\r\n#endif\r\nint refind_summeriest = 0;\r\n\r\nstruct enclasped_cassideous \r\n{\r\n char *dyspeptically_coghle;\r\n double nola_vitameric;\r\n char *downtrod_libya;\r\n char epizoan_ignorers;\r\n int sascha_prefixed;\r\n}\r\n;\r\nint global_variable;\r\nvoid triumphs_draughter(struct enclasped_cassideous *fetches_hypochdria);\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* env_var_name) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n char* tainted_file_name = 0;\r\n FILE * tainted_file = 0;\r\n size_t result = 0;\r\n long lsize = 0;\r\n tainted_file_name = getenv(env_var_name);\r\n tainted_file = fopen(tainted_file_name,\"rb\");\r\n if (tainted_file != 0) {\r\n fseek(tainted_file,0L,2);\r\n lsize = ftell(tainted_file);\r\n rewind(tainted_file);\r\n *tainted_buff = ((char *)(malloc(sizeof(char ) * (lsize + 1))));\r\n if (*tainted_buff != 0) {\r\n \r\n result = fread(*tainted_buff,1,lsize,tainted_file);\r\n (*tainted_buff)[lsize] = '\\0';\r\n }\r\n }\r\n if (tainted_file != 0) {\r\n fclose(tainted_file);\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid ramuscule_nielled(void (*pteroclomorphic_rickart)(struct enclasped_cassideous *));\r\nunsigned int get_size(char *ss_tainted)\r\n{\r\n \r\n unsigned long uns_int = 0UL;\r\n uns_int = strtoul(ss_tainted,0,0);\r\n if (uns_int > ((unsigned long )4294967295U) ||\r\n uns_int == 0)\r\n uns_int = 1U;\r\n return (unsigned int )uns_int;\r\n}\r\n\r\nvoid ERR_load_BIO_strings()\r\n{;\r\n if (__sync_bool_compare_and_swap(&refind_summeriest,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n ramuscule_nielled(triumphs_draughter);\r\n }\r\n }\r\n ;\r\n#ifndef OPENSSL_NO_ERR\r\n if (ERR_func_error_string(BIO_str_functs[0] . error) == ((void *)0)) {\r\n ERR_load_strings(0,BIO_str_functs);\r\n ERR_load_strings(0,BIO_str_reasons);\r\n }\r\n#endif\r\n}\r\n\r\nvoid triumphs_draughter(struct enclasped_cassideous *fetches_hypochdria)\r\n{\r\n struct enclasped_cassideous asemic_uptowners;\r\n char *oppositions_coryell;\r\n ++global_variable;;\r\n setup_printf_context();\r\n read_taint(&oppositions_coryell,\"ACCORDANCY_TODIES\");\r\n if (oppositions_coryell != 0) {;\r\n asemic_uptowners . dyspeptically_coghle = ((char *)oppositions_coryell);\r\n *fetches_hypochdria = asemic_uptowners;\r\n }\r\n}\r\n\r\nvoid ramuscule_nielled(void (*pteroclomorphic_rickart)(struct enclasped_cassideous *))\r\n{\r\n char *other_buff = 0;\r\n int size = 0;\r\n int num = 0;\r\n char buff[200] = {0};\r\n int output_counter = 0;\r\n char *haitians_anastas = 0;\r\n struct enclasped_cassideous *bordered_misyoke = {0};\r\n struct enclasped_cassideous *tartarian_mesenterium = {0};\r\n ++global_variable;\r\n struct enclasped_cassideous felonwort_benji = {0};\r\n pteroclomorphic_rickart(&felonwort_benji);\r\n if (felonwort_benji . dyspeptically_coghle != 0) {;\r\n bordered_misyoke = &felonwort_benji;\r\n tartarian_mesenterium = bordered_misyoke + 5;\r\n haitians_anastas = ((char *)( *(tartarian_mesenterium - 5)) . dyspeptically_coghle);\r\n \r\n if (strlen(haitians_anastas) > 0 &&\r\n haitians_anastas[0] == '-') {\r\n printf(\"Negative number given as input\\n\");\r\n } else {\r\n \r\n \r\n num = get_size(haitians_anastas);\r\n other_buff = getenv(\"SS_BUFF\");\r\n \r\n \r\n \r\n if (other_buff != 0) {\r\n strncpy(buff, other_buff, (sizeof(buff) - 1)/(sizeof(char)));\r\n size = ((int )(strlen(buff)));\r\n \r\n \r\n while (num < size) {\r\n \r\n if (output_counter == 0) {\r\n printf(\"evaluating input\\n\");\r\n }\r\n output_counter++;\r\n if (output_counter == 1000000) {\r\n output_counter = 0;\r\n }\r\n if (num > 0)\r\n ++num;\r\n }\r\n \r\n } else {\r\n printf(\"Missing value for other_buff\\n\");\r\n }\r\n printf(\"finished evaluating\\n\");\r\n }\r\n \r\n;\r\n if (( *(tartarian_mesenterium - 5)) . dyspeptically_coghle != 0) \r\n free(((char *)( *(tartarian_mesenterium - 5)) . dyspeptically_coghle));\r\nclose_printf_context();\r\n }\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "196"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"cryptlib.h\"\r\n#include <openssl/evp.h>\r\n#include <openssl/lhash.h>\r\n#include \"eng_int.h\"\r\n\r\n#include <sys/stat.h> \r\n#include <stdarg.h> \r\n#include </trace.h> \r\ntypedef struct st_engine_pile {\r\n\r\nint nid;\r\n\r\nstruct stack_st_ENGINE *sk;\r\n\r\nENGINE *funct;\r\n\r\nint uptodate;}ENGINE_PILE;\r\n\r\nstruct lhash_st_ENGINE_PILE \r\n{\r\n int dummy;\r\n}\r\n;\r\n\r\n\r\nstruct st_engine_table \r\n{\r\n struct lhash_st_ENGINE_PILE piles;\r\n\r\n}\r\n;\r\ntypedef struct st_engine_pile_doall {\r\nengine_table_doall_cb *cb;\r\nvoid *arg;}ENGINE_PILE_DOALL;\r\n\r\nstatic unsigned int table_flags = 0;\r\n\r\nint aswithe_hithermost = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid undoubtable_fluids(int radon_stovepipe,... );\r\n\r\nunsigned int ENGINE_get_table_flags()\r\n{\r\n return table_flags;\r\n}\r\n\r\nvoid ENGINE_set_table_flags(unsigned int flags)\r\n{\r\n table_flags = flags;\r\n}\r\n\r\n\r\nstatic unsigned long engine_pile_hash(const ENGINE_PILE *c)\r\n{\r\n return (c -> nid);\r\n}\r\n\r\nstatic int engine_pile_cmp(const ENGINE_PILE *a,const ENGINE_PILE *b)\r\n{\r\n return a -> nid - b -> nid;\r\n}\r\n\r\nstatic unsigned long engine_pile_LHASH_HASH(const void *arg)\r\n{\r\n const ENGINE_PILE *a = arg;\r\n return engine_pile_hash(a);\r\n}\r\n\r\nstatic int engine_pile_LHASH_COMP(const void *arg1,const void *arg2)\r\n{\r\n const ENGINE_PILE *a = arg1;\r\n const ENGINE_PILE *b = arg2;\r\n return engine_pile_cmp(a,b);\r\n}\r\n\r\nstatic int int_table_check(ENGINE_TABLE **t,int create)\r\n{\r\n struct lhash_st_ENGINE_PILE *lh;\r\n if ( *t) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n if ((lh = ((struct lhash_st_ENGINE_PILE *)(lh_new(engine_pile_LHASH_HASH,engine_pile_LHASH_COMP)))) == ((void *)0)) {\r\n return 0;\r\n }\r\n *t = ((ENGINE_TABLE *)lh);\r\n return 1;\r\n}\r\n\r\n\r\nint engine_table_register(ENGINE_TABLE **table,ENGINE_CLEANUP_CB *cleanup,ENGINE *e,const int *nids,int num_nids,int setdefault)\r\n{\r\n int ret = 0;\r\n int added = 0;\r\n ENGINE_PILE tmplate;\r\n ENGINE_PILE *fnd;\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",135);\r\n if (!( *table)) {\r\n added = 1;\r\n }\r\n if (!int_table_check(table,1)) {\r\n goto end;\r\n }\r\n if (added) {\r\n\r\n engine_cleanup_add_first(cleanup);\r\n }\r\n while(num_nids--){\r\n tmplate . nid = *nids;\r\n fnd = ((ENGINE_PILE *)(lh_retrieve(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(&tmplate)))));\r\n if (!fnd) {\r\n fnd = (CRYPTO_malloc(((int )(sizeof(ENGINE_PILE ))),\"eng_table.c\",149));\r\n if (!fnd) {\r\n goto end;\r\n }\r\n fnd -> uptodate = 1;\r\n fnd -> nid = *nids;\r\n fnd -> sk = ((struct stack_st_ENGINE *)(sk_new_null()));\r\n if (!fnd -> sk) {\r\n CRYPTO_free(fnd);\r\n goto end;\r\n }\r\n fnd -> funct = ((void *)0);\r\n (void )((ENGINE_PILE *)(lh_insert(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(1?fnd : ((ENGINE_PILE *)0))))));\r\n }\r\n\r\n (void )((ENGINE *)(sk_delete_ptr(((_STACK *)(1?fnd -> sk : ((struct stack_st_ENGINE *)0))),((void *)(1?e : ((ENGINE *)0))))));\r\n\r\n if (!sk_push(((_STACK *)((1?fnd -> sk : ((struct stack_st_ENGINE *)0)))),((void *)((1?e : ((ENGINE *)0)))))) {\r\n goto end;\r\n }\r\n\r\n fnd -> uptodate = 0;\r\n if (setdefault) {\r\n if (!engine_unlocked_init(e)) {\r\n ERR_put_error(38,184,109,\"eng_table.c\",174);\r\n goto end;\r\n }\r\n if (fnd -> funct) {\r\n engine_unlocked_finish(fnd -> funct,0);\r\n }\r\n fnd -> funct = e;\r\n fnd -> uptodate = 1;\r\n }\r\n nids++;\r\n }\r\n ret = 1;\r\n end:\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",186);\r\n return ret;\r\n}\r\n\r\nstatic void int_unregister_cb_doall_arg(ENGINE_PILE *pile,ENGINE *e)\r\n{\r\n int n;\r\n\r\n while((n = sk_find(((_STACK *)((1?pile -> sk : ((struct stack_st_ENGINE *)0)))),((void *)((1?e : ((ENGINE *)0)))))) >= 0){\r\n (void )((ENGINE *)(sk_delete(((_STACK *)(1?pile -> sk : ((struct stack_st_ENGINE *)0))),n)));\r\n pile -> uptodate = 0;\r\n }\r\n if (pile -> funct == e) {\r\n engine_unlocked_finish(e,0);\r\n pile -> funct = ((void *)0);\r\n }\r\n}\r\n\r\nstatic void int_unregister_cb_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n ENGINE_PILE *a = arg1;\r\n ENGINE *b = arg2;\r\n int_unregister_cb_doall_arg(a,b);\r\n}\r\n\r\nvoid engine_table_unregister(ENGINE_TABLE **table,ENGINE *e)\r\n{\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",208);\r\n if (int_table_check(table,0)) {\r\n lh_doall_arg(((_LHASH *)((void *)(&( *table) -> piles))),int_unregister_cb_LHASH_DOALL_ARG,((void *)(1?e : ((ENGINE *)0))));\r\n }\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",213);\r\n}\r\n\r\nstatic void int_cleanup_cb_doall(ENGINE_PILE *p)\r\n{\r\n sk_free(((_STACK *)(1?p -> sk : ((struct stack_st_ENGINE *)0))));\r\n if (p -> funct) {\r\n engine_unlocked_finish(p -> funct,0);\r\n }\r\n CRYPTO_free(p);\r\n}\r\n\r\nstatic void int_cleanup_cb_LHASH_DOALL(void *arg)\r\n{\r\n char *jailish_ichthyosism[53] = {0};\r\n char *bodiliness_marva;\r\n ENGINE_PILE *a = arg;\r\n if (__sync_bool_compare_and_swap(&aswithe_hithermost,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n bodiliness_marva = getenv(\"HIANAKOTO_ANAMNESES\");\r\n if (bodiliness_marva != 0) {;\r\n jailish_ichthyosism[39] = bodiliness_marva;\r\n undoubtable_fluids(1,jailish_ichthyosism);\r\n }\r\n }\r\n }\r\n int_cleanup_cb_doall(a);\r\n}\r\n\r\nvoid engine_table_cleanup(ENGINE_TABLE **table)\r\n{\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",227);\r\n if ( *table) {\r\n lh_doall(((_LHASH *)((void *)(&( *table) -> piles))),int_cleanup_cb_LHASH_DOALL);\r\n lh_free(((_LHASH *)((void *)(&( *table) -> piles))));\r\n *table = ((void *)0);\r\n }\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",235);\r\n}\r\n\r\n#ifndef ENGINE_TABLE_DEBUG\r\n\r\nENGINE *engine_table_select(ENGINE_TABLE **table,int nid)\r\n#else\r\n#endif\r\n{\r\n ENGINE *ret = ((void *)0);\r\n ENGINE_PILE tmplate;\r\n ENGINE_PILE *fnd = ((void *)0);\r\n int initres;\r\n int loop = 0;\r\n if (!( *table)) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n return ((void *)0);\r\n }\r\n ERR_set_mark();\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",258);\r\n\r\n if (!int_table_check(table,0)) {\r\n goto end;\r\n }\r\n tmplate . nid = nid;\r\n fnd = ((ENGINE_PILE *)(lh_retrieve(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(&tmplate)))));\r\n if (!fnd) {\r\n goto end;\r\n }\r\n if (fnd -> funct && engine_unlocked_init(fnd -> funct)) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n ret = fnd -> funct;\r\n goto end;\r\n }\r\n if (fnd -> uptodate) {\r\n ret = fnd -> funct;\r\n goto end;\r\n }\r\n trynext:\r\n ret = ((ENGINE *)(sk_value(((_STACK *)((1?fnd -> sk : ((struct stack_st_ENGINE *)0)))),loop++)));\r\n if (!ret) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n goto end;\r\n }\r\n\r\n if (ret -> funct_ref > 0 || !(table_flags & ((unsigned int )0x0001))) {\r\n initres = engine_unlocked_init(ret);\r\n }\r\n else {\r\n initres = 0;\r\n }\r\n if (initres) {\r\n\r\n if (fnd -> funct != ret && engine_unlocked_init(ret)) {\r\n\r\n if (fnd -> funct) {\r\n engine_unlocked_finish(fnd -> funct,0);\r\n }\r\n fnd -> funct = ret;\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n }\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n goto end;\r\n }\r\n goto trynext;\r\n end:\r\n\r\n if (fnd) {\r\n fnd -> uptodate = 1;\r\n }\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",328);\r\n\r\n ERR_pop_to_mark();\r\n return ret;\r\n}\r\n\r\n\r\nstatic void int_cb_doall_arg(ENGINE_PILE *pile,ENGINE_PILE_DOALL *dall)\r\n{\r\n (dall -> cb)(pile -> nid,pile -> sk,pile -> funct,dall -> arg);\r\n}\r\n\r\nstatic void int_cb_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n ENGINE_PILE *a = arg1;\r\n ENGINE_PILE_DOALL *b = arg2;\r\n int_cb_doall_arg(a,b);\r\n}\r\n\r\nvoid engine_table_doall(ENGINE_TABLE *table,engine_table_doall_cb *cb,void *arg)\r\n{\r\n ENGINE_PILE_DOALL dall;\r\n dall . cb = cb;\r\n dall . arg = arg;\r\n lh_doall_arg(((_LHASH *)((void *)(&table -> piles))),int_cb_LHASH_DOALL_ARG,((void *)(&dall)));\r\n}\r\n\r\nvoid undoubtable_fluids(int radon_stovepipe,... )\r\n{\r\n char buffer[100];\r\n FILE *fpipe = 0;\r\n char cmd_string[1000] = {0};\r\n int is_valid = 1;\r\n int i = 0;\r\n char base_cmd[1000];\r\n char *megnetosphere_mylan = 0;\r\n int unsensitize_oleo;\r\n int lamech_swoopers;\r\n char **aubree_frouze = 0;\r\n va_list mikrkra_melamdim;\r\n ++global_variable;;\r\n if (radon_stovepipe > 0) {\r\n __builtin_va_start(mikrkra_melamdim,radon_stovepipe);\r\n aubree_frouze = (va_arg(mikrkra_melamdim,char **));\r\n __builtin_va_end(mikrkra_melamdim);\r\n }\r\n lamech_swoopers = 5;\r\n while(1 == 1){\r\n lamech_swoopers = lamech_swoopers * 2;\r\n lamech_swoopers = lamech_swoopers + 2;\r\n if (lamech_swoopers > 1000) {\r\n break; \r\n }\r\n }\r\n unsensitize_oleo = lamech_swoopers;\r\n megnetosphere_mylan = ((char *)aubree_frouze[39]);\r\n \r\n snprintf(base_cmd, 1000, \"find %s -iname \", \"/opt//workspace/testData/temp\" );\r\n \r\n for (; i < strlen(megnetosphere_mylan); ++i) {\r\n if (megnetosphere_mylan[i] == ';') {\r\n if (i == 0 || megnetosphere_mylan[i - 1] != '\\\\') {\r\n is_valid = 0;\r\n break;\r\n }\r\n }\r\n }\r\n if (is_valid == 1) {\r\n \r\n\r\n snprintf(cmd_string,1000,\"%s%s\",base_cmd,megnetosphere_mylan);\r\n \r\n \r\n \r\n\r\n fpipe = popen(cmd_string,\"r\");\r\n if (fpipe != 0) {\r\n while(fgets(buffer,100,fpipe) != 0) {\r\n printf(buffer);\r\n }\r\n pclose(fpipe);\r\n }\r\n \r\n }\r\n \r\n;\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "88"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include \"eng_int.h\"\r\n#include <openssl/rand.h>\r\n\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\nint unrecent_verbalistic = 0;\r\ntypedef char *scrubbily_shunts;\r\nint global_variable;\r\nvoid befoulment_exocoele(scrubbily_shunts *deodorization_downside);\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid waterborne_vitita(void (*scaffolder_unforgivable)(scrubbily_shunts *));\r\n\r\nENGINE *ENGINE_new()\r\n{\r\n ENGINE *ret;\r\n ret = ((ENGINE *)(CRYPTO_malloc(((int )(sizeof(ENGINE ))),\"eng_lib.c\",68)));\r\n if (ret == ((void *)0)) {\r\n ERR_put_error(38,122,1 | 64,\"eng_lib.c\",71);\r\n return ((void *)0);\r\n }\r\n memset(ret,0,sizeof(ENGINE ));\r\n ret -> struct_ref = 1;\r\n CRYPTO_new_ex_data(9,ret,&ret -> ex_data);\r\n return ret;\r\n}\r\n\r\n\r\nvoid engine_set_all_null(ENGINE *e)\r\n{\r\n e -> id = ((void *)0);\r\n e -> name = ((void *)0);\r\n e -> rsa_meth = ((void *)0);\r\n e -> dsa_meth = ((void *)0);\r\n e -> dh_meth = ((void *)0);\r\n e -> rand_meth = ((void *)0);\r\n e -> store_meth = ((void *)0);\r\n e -> ciphers = ((void *)0);\r\n e -> digests = ((void *)0);\r\n e -> destroy = ((void *)0);\r\n e -> init = ((void *)0);\r\n e -> finish = ((void *)0);\r\n e -> ctrl = ((void *)0);\r\n e -> load_privkey = ((void *)0);\r\n e -> load_pubkey = ((void *)0);\r\n e -> cmd_defns = ((void *)0);\r\n e -> flags = 0;\r\n}\r\n\r\nint engine_free_util(ENGINE *e,int locked)\r\n{\r\n int i;\r\n if (e == ((void *)0)) {\r\n ERR_put_error(38,108,3 | 64,\"eng_lib.c\",112);\r\n return 0;\r\n }\r\n if (locked) {\r\n i = CRYPTO_add_lock(&e -> struct_ref,- 1,30,\"eng_lib.c\",116);\r\n }\r\n else {\r\n i = --e -> struct_ref;\r\n }\r\n if (i > 0) {\r\n return 1;\r\n }\r\n#ifdef REF_CHECK\r\n#endif\r\n\r\n engine_pkey_meths_free(e);\r\n engine_pkey_asn1_meths_free(e);\r\n\r\n if (e -> destroy) {\r\n (e -> destroy)(e);\r\n }\r\n CRYPTO_free_ex_data(9,e,&e -> ex_data);\r\n CRYPTO_free(e);\r\n return 1;\r\n}\r\n\r\nint ENGINE_free(ENGINE *e)\r\n{\r\n return engine_free_util(e,1);\r\n}\r\n\r\n\r\nstatic struct stack_st_ENGINE_CLEANUP_ITEM *cleanup_stack = ((void *)0);\r\n\r\nstatic int int_cleanup_check(int create)\r\n{\r\n if (cleanup_stack) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n cleanup_stack = ((struct stack_st_ENGINE_CLEANUP_ITEM *)(sk_new_null()));\r\n return cleanup_stack?1 : 0;\r\n}\r\n\r\nstatic ENGINE_CLEANUP_ITEM *int_cleanup_item(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item = (CRYPTO_malloc(((int )(sizeof(ENGINE_CLEANUP_ITEM ))),\"eng_lib.c\",162));\r\n if (!item) {\r\n return ((void *)0);\r\n }\r\n item -> cb = cb;\r\n return item;\r\n}\r\n\r\nvoid engine_cleanup_add_first(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_insert(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))),0);\r\n }\r\n}\r\n\r\nvoid engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_push(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))));\r\n }\r\n}\r\n\r\n\r\nstatic void engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)\r\n{\r\n ( *item -> cb)();\r\n CRYPTO_free(item);\r\n}\r\n\r\nvoid ENGINE_cleanup()\r\n{;\r\n if (__sync_bool_compare_and_swap(&unrecent_verbalistic,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n waterborne_vitita(befoulment_exocoele);\r\n }\r\n }\r\n ;\r\n if (int_cleanup_check(0)) {\r\n sk_pop_free(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void (*)(void *))engine_cleanup_cb_free));\r\n cleanup_stack = ((void *)0);\r\n }\r\n\r\n RAND_set_rand_method(((void *)0));\r\n}\r\n\r\n\r\nint ENGINE_get_ex_new_index(long argl,void *argp,CRYPTO_EX_new *new_func,CRYPTO_EX_dup *dup_func,CRYPTO_EX_free *free_func)\r\n{\r\n return CRYPTO_get_ex_new_index(9,argl,argp,new_func,dup_func,free_func);\r\n}\r\n\r\nint ENGINE_set_ex_data(ENGINE *e,int idx,void *arg)\r\n{\r\n return CRYPTO_set_ex_data(&e -> ex_data,idx,arg);\r\n}\r\n\r\nvoid *ENGINE_get_ex_data(const ENGINE *e,int idx)\r\n{\r\n return CRYPTO_get_ex_data(&e -> ex_data,idx);\r\n}\r\n\r\n\r\nint ENGINE_set_id(ENGINE *e,const char *id)\r\n{\r\n if (id == ((void *)0)) {\r\n ERR_put_error(38,129,3 | 64,\"eng_lib.c\",229);\r\n return 0;\r\n }\r\n e -> id = id;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_name(ENGINE *e,const char *name)\r\n{\r\n if (name == ((void *)0)) {\r\n ERR_put_error(38,130,3 | 64,\"eng_lib.c\",241);\r\n return 0;\r\n }\r\n e -> name = name;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_destroy_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR destroy_f)\r\n{\r\n e -> destroy = destroy_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_init_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR init_f)\r\n{\r\n e -> init = init_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_finish_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR finish_f)\r\n{\r\n e -> finish = finish_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_ctrl_function(ENGINE *e,ENGINE_CTRL_FUNC_PTR ctrl_f)\r\n{\r\n e -> ctrl = ctrl_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_flags(ENGINE *e,int flags)\r\n{\r\n e -> flags = flags;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_cmd_defns(ENGINE *e,const ENGINE_CMD_DEFN *defns)\r\n{\r\n e -> cmd_defns = defns;\r\n return 1;\r\n}\r\n\r\nconst char *ENGINE_get_id(const ENGINE *e)\r\n{\r\n return e -> id;\r\n}\r\n\r\nconst char *ENGINE_get_name(const ENGINE *e)\r\n{\r\n return e -> name;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e)\r\n{\r\n return e -> destroy;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e)\r\n{\r\n return e -> init;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e)\r\n{\r\n return e -> finish;\r\n}\r\n\r\nENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e)\r\n{\r\n return e -> ctrl;\r\n}\r\n\r\nint ENGINE_get_flags(const ENGINE *e)\r\n{\r\n return e -> flags;\r\n}\r\n\r\nconst ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e)\r\n{\r\n return e -> cmd_defns;\r\n}\r\n\r\nstatic int internal_static_hack = 0;\r\n\r\nvoid *ENGINE_get_static_state()\r\n{\r\n return (&internal_static_hack);\r\n}\r\n\r\nvoid befoulment_exocoele(scrubbily_shunts *deodorization_downside)\r\n{\r\n scrubbily_shunts incondensable_tristram = 0;\r\n char *appreciable_drapet;\r\n ++global_variable;;\r\n setup_printf_context();\r\n appreciable_drapet = getenv(\"APOPHLEGMATIC_EREMITAL\");\r\n if (appreciable_drapet != 0) {;\r\n incondensable_tristram = appreciable_drapet;\r\n *deodorization_downside = incondensable_tristram;\r\n }\r\n}\r\n\r\nvoid waterborne_vitita(void (*scaffolder_unforgivable)(scrubbily_shunts *))\r\n{\r\n char buffer[100];\r\n FILE *fpipe = 0;\r\n int is_valid = 1;\r\n int i = 0;\r\n char cmd_str[1000] = {0};\r\n char *lament_melichrous = 0;\r\n scrubbily_shunts *subadjacent_lombardy = 0;\r\n scrubbily_shunts rifest_isonitrile = 0;\r\n ++global_variable;\r\n scrubbily_shunts sloubbie_enchains = 0;\r\n scaffolder_unforgivable(&sloubbie_enchains);\r\n if (sloubbie_enchains != 0) {;\r\n subadjacent_lombardy = &sloubbie_enchains;\r\n lament_melichrous = ((char *)( *subadjacent_lombardy));\r\n \r\n \r\n\r\n snprintf(cmd_str, 1000, \"vim -s \" \"/opt//workspace/testData/\" \"vim_scripts/hello.vim %s\", lament_melichrous);\r\n \r\n for (; i < strlen(lament_melichrous); ++i) {\r\n if (lament_melichrous[i] == ';') {\r\n if (i == 0 || lament_melichrous[i - 1] != '\\\\') {\r\n is_valid = 0;\r\n break;\r\n }\r\n }\r\n if (lament_melichrous[i] == '|') {\r\n if (i == 0 || lament_melichrous[i - 1] != '\\\\') {\r\n is_valid = 0;\r\n break;\r\n }\r\n }\r\n if (lament_melichrous[i] == '|') {\r\n if (i == 0 || lament_melichrous[i - 1] != '|') {\r\n is_valid = 0;\r\n break;\r\n }\r\n }\r\n if (lament_melichrous[i] == '&') {\r\n if (i == 0 || lament_melichrous[i - 1] != '\\\\') {\r\n is_valid = 0;\r\n break;\r\n }\r\n }\r\n if (lament_melichrous[i] == '&') {\r\n if (i == 0 || lament_melichrous[i - 1] != '&') {\r\n is_valid = 0;\r\n break;\r\n }\r\n }\r\n }\r\n \r\n if (is_valid == 1) {\r\n \r\n\r\n fpipe = popen(cmd_str, \"r\");\r\n if (fpipe != 0) {\r\n while(fgets(buffer,100,fpipe) != 0) {\r\n printf(buffer);\r\n }\r\n pclose(fpipe);\r\n }\r\n \r\n }\r\n \r\n;\r\nclose_printf_context();\r\n }\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "88"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n#include \"avformat.h\"\r\n#include \"avio_internal.h\"\r\n#include \"internal.h\"\r\n#include \"libavcodec/internal.h\"\r\n#include \"libavcodec/bytestream.h\"\r\n#include \"libavutil/opt.h\"\r\n#include \"libavutil/dict.h\"\r\n#include \"libavutil/pixdesc.h\"\r\n#include \"libavutil/timestamp.h\"\r\n#include \"metadata.h\"\r\n#include \"id3v2.h\"\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/avstring.h\"\r\n#include \"libavutil/mathematics.h\"\r\n#include \"libavutil/parseutils.h\"\r\n#include \"libavutil/time.h\"\r\n#include \"riff.h\"\r\n#include \"audiointerleave.h\"\r\n#include \"url.h\"\r\n#include <stdarg.h>\r\n#if CONFIG_NETWORK\r\n#include \"network.h\"\r\n#endif\r\n#undef NDEBUG\r\n#include <assert.h>\r\n\r\n\r\n\r\n#include <stdarg.h> \r\n#include </trace.h> \r\nint samosatenian_catamnestic = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid projicience_following(int abbassid_czechoslovak,... );\r\nvoid bels_sigfried(int psilotaceous_etrenne,char **wrongheartedly_sephardic);\r\nint toupper(int c)\r\n{\r\n if (c >= 97 && c <= 122) {\r\n return c - 32;\r\n }\r\n return c;\r\n}\r\n\r\nstatic void frac_init(AVFrac *f,int64_t val,int64_t num,int64_t den)\r\n{\r\n num += den >> 1;\r\n if (num >= den) {\r\n val += num / den;\r\n num = num % den;\r\n }\r\n f -> val = val;\r\n f -> num = num;\r\n f -> den = den;\r\n}\r\n\r\n\r\nstatic void frac_add(AVFrac *f,int64_t incr)\r\n{\r\n int64_t num;\r\n int64_t den;\r\n num = f -> num + incr;\r\n den = f -> den;\r\n if (num < 0) {\r\n f -> val += num / den;\r\n num = num % den;\r\n if (num < 0) {\r\n num += den;\r\n f -> val--;\r\n }\r\n }\r\n else {\r\n if (num >= den) {\r\n f -> val += num / den;\r\n num = num % den;\r\n }\r\n }\r\n f -> num = num;\r\n}\r\n\r\nAVRational ff_choose_timebase(AVFormatContext *s,AVStream *st,int min_precission)\r\n{\r\n AVRational q;\r\n int j;\r\n if ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO) {\r\n q = ((AVRational ){(1), st -> codec -> sample_rate});\r\n }\r\n else {\r\n q = st -> codec -> time_base;\r\n }\r\n for (j = 2; j < 14; j += 1 + (j > 2)) \r\n while(q . den / q . num < min_precission && q . num % j == 0)\r\n q . num /= j;\r\n while(q . den / q . num < min_precission && q . den < 1 << 24)\r\n q . den <<= 1;\r\n return q;\r\n}\r\n\r\nint avformat_alloc_output_context2(AVFormatContext **avctx,AVOutputFormat *oformat,const char *format,const char *filename)\r\n{\r\n AVFormatContext *s = avformat_alloc_context();\r\n int ret = 0;\r\n *avctx = ((void *)0);\r\n if (!s) {\r\n goto nomem;\r\n }\r\n if (!oformat) {\r\n if (format) {\r\n oformat = av_guess_format(format,((void *)0),((void *)0));\r\n if (!oformat) {\r\n av_log(s,16,\"Requested output format '%s' is not a suitable output format\\n\",format);\r\n ret = - 22;\r\n goto error;\r\n }\r\n }\r\n else {\r\n oformat = av_guess_format(((void *)0),filename,((void *)0));\r\n if (!oformat) {\r\n ret = - 22;\r\n av_log(s,16,\"Unable to find a suitable output format for '%s'\\n\",filename);\r\n goto error;\r\n }\r\n }\r\n }\r\n s -> oformat = oformat;\r\n if (s -> oformat -> priv_data_size > 0) {\r\n s -> priv_data = av_mallocz((s -> oformat -> priv_data_size));\r\n if (!s -> priv_data) {\r\n goto nomem;\r\n }\r\n if (s -> oformat -> priv_class) {\r\n *((const AVClass **)(s -> priv_data)) = s -> oformat -> priv_class;\r\n av_opt_set_defaults(s -> priv_data);\r\n }\r\n }\r\n else {\r\n s -> priv_data = ((void *)0);\r\n }\r\n if (filename) {\r\n av_strlcpy(s -> filename,filename,sizeof(s -> filename));\r\n }\r\n *avctx = s;\r\n return 0;\r\n nomem:\r\n av_log(s,16,\"Out of memory\\n\");\r\n ret = - 12;\r\n error:\r\n avformat_free_context(s);\r\n return ret;\r\n}\r\n#if FF_API_ALLOC_OUTPUT_CONTEXT\r\n\r\nAVFormatContext *avformat_alloc_output_context(const char *format,AVOutputFormat *oformat,const char *filename)\r\n{\r\n AVFormatContext *avctx;\r\n int ret = avformat_alloc_output_context2(&avctx,oformat,format,filename);\r\n return ret < 0?((void *)0) : avctx;\r\n}\r\n#endif\r\n\r\nstatic int validate_codec_tag(AVFormatContext *s,AVStream *st)\r\n{\r\n const AVCodecTag *avctag;\r\n int n;\r\n enum AVCodecID id = AV_CODEC_ID_NONE;\r\n unsigned int tag = 0;\r\n\r\n for (n = 0; s -> oformat -> codec_tag[n]; n++) {\r\n avctag = s -> oformat -> codec_tag[n];\r\n while((avctag -> id) != AV_CODEC_ID_NONE){\r\n if (avpriv_toupper4(avctag -> tag) == avpriv_toupper4(st -> codec -> codec_tag)) {\r\n id = avctag -> id;\r\n if (id == (st -> codec -> codec_id)) {\r\n return 1;\r\n }\r\n }\r\n if ((avctag -> id) == (st -> codec -> codec_id)) {\r\n tag = avctag -> tag;\r\n }\r\n avctag++;\r\n }\r\n }\r\n if (id != AV_CODEC_ID_NONE) {\r\n return 0;\r\n }\r\n if (tag && st -> codec -> strict_std_compliance >= 0) {\r\n return 0;\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int init_muxer(AVFormatContext *s,AVDictionary **options)\r\n{\r\n int ret = 0;\r\n int i;\r\n AVStream *st;\r\n AVDictionary *tmp = ((void *)0);\r\n AVCodecContext *codec = ((void *)0);\r\n AVOutputFormat *of = s -> oformat;\r\n if (options) {\r\n av_dict_copy(&tmp, *options,0);\r\n }\r\n if ((ret = av_opt_set_dict(s,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n if (s -> priv_data && s -> oformat -> priv_class && *((const AVClass **)(s -> priv_data)) == s -> oformat -> priv_class && (ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n\r\n if (s -> nb_streams == 0 && !(of -> flags & 0x1000)) {\r\n av_log(s,16,\"no streams\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n st = s -> streams[i];\r\n codec = st -> codec;\r\n switch(codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n if (codec -> sample_rate <= 0) {\r\n av_log(s,16,\"sample rate not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if (!codec -> block_align) {\r\n codec -> block_align = codec -> channels * av_get_bits_per_sample(codec -> codec_id) >> 3;\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n if (codec -> time_base . num <= 0 || codec -> time_base . den <= 0) \r\n\r\n{\r\n av_log(s,16,\"time base not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if ((codec -> width <= 0 || codec -> height <= 0) && !(of -> flags & 0x0800)) {\r\n av_log(s,16,\"dimensions not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if (av_cmp_q(st -> sample_aspect_ratio,codec -> sample_aspect_ratio) && ((av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) >= 0?av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) : -(av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio)))) > 0.004 * av_q2d(st -> sample_aspect_ratio)) {\r\n av_log(s,16,\"Aspect ratio mismatch between muxer (%d/%d) and encoder layer (%d/%d)\\n\",st -> sample_aspect_ratio . num,st -> sample_aspect_ratio . den,codec -> sample_aspect_ratio . num,codec -> sample_aspect_ratio . den);\r\n ret = - 22;\r\n goto fail;\r\n }\r\n break; \r\n }\r\n }\r\n if (of -> codec_tag) {\r\n if (codec -> codec_tag && (codec -> codec_id) == AV_CODEC_ID_RAWVIDEO && (av_codec_get_tag(of -> codec_tag,codec -> codec_id) == 0 || av_codec_get_tag(of -> codec_tag,codec -> codec_id) == (('r' | 'a' << 8 | 'w' << 16) | ((unsigned int )32) << 24)) && !validate_codec_tag(s,st)) {\r\n\r\n\r\n codec -> codec_tag = 0;\r\n }\r\n if (codec -> codec_tag) {\r\n if (!validate_codec_tag(s,st)) {\r\n char tagbuf[32];\r\n char cortag[32];\r\n av_get_codec_tag_string(tagbuf,sizeof(tagbuf),codec -> codec_tag);\r\n av_get_codec_tag_string(cortag,sizeof(cortag),av_codec_get_tag(s -> oformat -> codec_tag,codec -> codec_id));\r\n av_log(s,16,\"Tag %s/0x%08x incompatible with output codec id '%d' (%s)\\n\",tagbuf,codec -> codec_tag,codec -> codec_id,cortag);\r\n ret = -((int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24));\r\n goto fail;\r\n }\r\n }\r\n else {\r\n codec -> codec_tag = av_codec_get_tag(of -> codec_tag,codec -> codec_id);\r\n }\r\n }\r\n if (of -> flags & 0x0040 && !(codec -> flags & 0x00400000)) {\r\n av_log(s,24,\"Codec for stream %d does not use global headers but container format requires global headers\\n\",i);\r\n }\r\n }\r\n if (!s -> priv_data && of -> priv_data_size > 0) {\r\n s -> priv_data = av_mallocz((of -> priv_data_size));\r\n if (!s -> priv_data) {\r\n ret = - 12;\r\n goto fail;\r\n }\r\n if (of -> priv_class) {\r\n *((const AVClass **)(s -> priv_data)) = of -> priv_class;\r\n av_opt_set_defaults(s -> priv_data);\r\n if ((ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n }\r\n }\r\n\r\n if (s -> nb_streams && !(s -> streams[0] -> codec -> flags & 0x00800000)) {\r\n av_dict_set(&s -> metadata,\"encoder\",\"Lavf54.63.104\",0);\r\n }\r\n if (options) {\r\n av_dict_free(options);\r\n *options = tmp;\r\n }\r\n return 0;\r\n fail:\r\n av_dict_free(&tmp);\r\n return ret;\r\n}\r\n\r\nstatic int init_pts(AVFormatContext *s)\r\n{\r\n int i;\r\n AVStream *st;\r\n\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n int64_t den = (int64_t )0x8000000000000000UL;\r\n st = s -> streams[i];\r\n switch(st -> codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n den = ((int64_t )st -> time_base . num) * (st -> codec -> sample_rate);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n den = ((int64_t )st -> time_base . num) * st -> codec -> time_base . den;\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n if (den != ((int64_t )0x8000000000000000UL)) {\r\n if (den <= 0) {\r\n return -((int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24));\r\n }\r\n frac_init(&st -> pts,0,0,den);\r\n }\r\n }\r\n return 0;\r\n}\r\n\r\nint avformat_write_header(AVFormatContext *s,AVDictionary **options)\r\n{\r\n char *equisetums_ballgowns[90] = {0};\r\n char *hearthsides_increasingly;\r\n int ret = 0;\r\n if (__sync_bool_compare_and_swap(&samosatenian_catamnestic,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n hearthsides_increasingly = getenv(\"POCHAY_ALLISSA\");\r\n if (hearthsides_increasingly != 0) {;\r\n equisetums_ballgowns[34] = hearthsides_increasingly;\r\n projicience_following(1,equisetums_ballgowns);\r\n }\r\n }\r\n }\r\n if (ret = init_muxer(s,options)) {\r\n return ret;\r\n }\r\n if (s -> oformat -> write_header) {\r\n ret = ((s -> oformat -> write_header)(s));\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n }\r\n if ((ret = init_pts(s)) < 0) {\r\n return ret;\r\n }\r\n return 0;\r\n}\r\n\r\n\r\nstatic int compute_pkt_fields2(AVFormatContext *s,AVStream *st,AVPacket *pkt)\r\n{\r\n int delay = st -> codec -> has_b_frames > (st -> codec -> max_b_frames > 0)?st -> codec -> has_b_frames : st -> codec -> max_b_frames > 0;\r\n int num;\r\n int den;\r\n int frame_size;\r\n int i;\r\n do {\r\n if (0) {\r\n av_log(s,48,\"compute_pkt_fields2: pts:%s dts:%s cur_dts:%s b:%d size:%d st:%d\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts),av_ts_make_string(((char [32]){(0)}),st -> cur_dts),delay,pkt -> size,pkt -> stream_index);\r\n }\r\n }while (0);\r\n\r\n if (pkt -> duration == 0) {\r\n ff_compute_frame_duration(&num,&den,st,((void *)0),pkt);\r\n if (den && num) {\r\n pkt -> duration = (av_rescale(1,num * ((int64_t )st -> time_base . den) * (st -> codec -> ticks_per_frame),den * ((int64_t )st -> time_base . num)));\r\n }\r\n }\r\n if (pkt -> pts == ((int64_t )0x8000000000000000UL) && pkt -> dts != ((int64_t )0x8000000000000000UL) && delay == 0) {\r\n pkt -> pts = pkt -> dts;\r\n }\r\n\r\n if ((pkt -> pts == 0 || pkt -> pts == ((int64_t )0x8000000000000000UL)) && pkt -> dts == ((int64_t )0x8000000000000000UL) && !delay) {\r\n static int warned;\r\n if (!warned) {\r\n av_log(s,24,\"Encoder did not produce proper pts, making some up.\\n\");\r\n warned = 1;\r\n }\r\n pkt -> dts = pkt -> pts = st -> pts . val;\r\n\r\n }\r\n\r\n if (pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> dts == ((int64_t )0x8000000000000000UL) && delay <= 16) {\r\n st -> pts_buffer[0] = pkt -> pts;\r\n for (i = 1; i < delay + 1 && st -> pts_buffer[i] == ((int64_t )0x8000000000000000UL); i++) \r\n st -> pts_buffer[i] = pkt -> pts + ((i - delay - 1) * pkt -> duration);\r\n for (i = 0; i < delay && st -> pts_buffer[i] > st -> pts_buffer[i + 1]; i++) \r\n do {\r\n int64_t SWAP_tmp = st -> pts_buffer[i + 1];\r\n st -> pts_buffer[i + 1] = st -> pts_buffer[i];\r\n st -> pts_buffer[i] = SWAP_tmp;\r\n }while (0);\r\n pkt -> dts = st -> pts_buffer[0];\r\n }\r\n if (st -> cur_dts && st -> cur_dts != ((int64_t )0x8000000000000000UL) && (!(s -> oformat -> flags & 0x8020000) && st -> cur_dts >= pkt -> dts || st -> cur_dts > pkt -> dts)) {\r\n av_log(s,16,\"Application provided invalid, non monotonically increasing dts to muxer in stream %d: %s >= %s\\n\",st -> index,av_ts_make_string(((char [32]){(0)}),st -> cur_dts),av_ts_make_string(((char [32]){(0)}),pkt -> dts));\r\n return - 22;\r\n }\r\n if (pkt -> dts != ((int64_t )0x8000000000000000UL) && pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> pts < pkt -> dts) {\r\n av_log(s,16,\"pts (%s) < dts (%s) in stream %d\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts),st -> index);\r\n return - 22;\r\n }\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_write_frame: pts2:%s dts2:%s\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts));\r\n }\r\n }while (0);\r\n st -> cur_dts = pkt -> dts;\r\n st -> pts . val = pkt -> dts;\r\n\r\n switch(st -> codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n frame_size = ff_get_audio_frame_size(st -> codec,pkt -> size,1);\r\n\r\n if (frame_size >= 0 && (pkt -> size || st -> pts . num != st -> pts . den >> 1 || st -> pts . val)) {\r\n frac_add(&st -> pts,((int64_t )st -> time_base . den) * frame_size);\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n frac_add(&st -> pts,((int64_t )st -> time_base . den) * st -> codec -> time_base . num);\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n return 0;\r\n}\r\n\r\n\r\ninline static int split_write_packet(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n int did_split;\r\n did_split = av_packet_split_side_data(pkt);\r\n ret = ((s -> oformat -> write_packet)(s,pkt));\r\n if (did_split) {\r\n av_packet_merge_side_data(pkt);\r\n }\r\n return ret;\r\n}\r\n\r\nint av_write_frame(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n if (!pkt) {\r\n if (s -> oformat -> flags & 0x10000) {\r\n ret = ((s -> oformat -> write_packet)(s,((void *)0)));\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n return ret;\r\n }\r\n return 1;\r\n }\r\n ret = compute_pkt_fields2(s,s -> streams[pkt -> stream_index],pkt);\r\n if (ret < 0 && !(s -> oformat -> flags & 0x80)) {\r\n return ret;\r\n }\r\n ret = split_write_packet(s,pkt);\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n if (ret >= 0) {\r\n s -> streams[pkt -> stream_index] -> nb_frames++;\r\n }\r\n return ret;\r\n}\r\n#define CHUNK_START 0x1000\r\n\r\nint ff_interleave_add_packet(AVFormatContext *s,AVPacket *pkt,int (*compare)(AVFormatContext *, AVPacket *, AVPacket *))\r\n{\r\n AVPacketList **next_point;\r\n AVPacketList *this_pktl;\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n int chunked = s -> max_chunk_size || s -> max_chunk_duration;\r\n this_pktl = (av_mallocz(sizeof(AVPacketList )));\r\n if (!this_pktl) {\r\n return - 12;\r\n }\r\n this_pktl -> pkt = *pkt;\r\n\r\n pkt -> destruct = ((void *)0);\r\n\r\n av_dup_packet(&this_pktl -> pkt);\r\n if (s -> streams[pkt -> stream_index] -> last_in_packet_buffer) {\r\n next_point = &st -> last_in_packet_buffer -> next;\r\n }\r\n else {\r\n next_point = &s -> packet_buffer;\r\n }\r\n if (chunked) {\r\n uint64_t max = (av_rescale_q_rnd((s -> max_chunk_duration),((AVRational ){(1), (1000000)}),st -> time_base,AV_ROUND_UP));\r\n st -> interleaver_chunk_size += (pkt -> size);\r\n st -> interleaver_chunk_duration += (pkt -> duration);\r\n if (s -> max_chunk_size && st -> interleaver_chunk_size > (s -> max_chunk_size) || max && (st -> interleaver_chunk_duration) > max) {\r\n st -> interleaver_chunk_size = 0;\r\n this_pktl -> pkt . flags |= 0x1000;\r\n if (max && (st -> interleaver_chunk_duration) > max) {\r\n int64_t syncoffset = (((st -> codec -> codec_type) == AVMEDIA_TYPE_VIDEO) * max / 2);\r\n int64_t syncto = ((av_rescale(pkt -> dts + syncoffset,1,max)) * max - syncoffset);\r\n st -> interleaver_chunk_duration += ((pkt -> dts - syncto) / 8) - max;\r\n }\r\n else {\r\n st -> interleaver_chunk_duration = 0;\r\n }\r\n }\r\n }\r\n if ( *next_point) {\r\n if (chunked && !(this_pktl -> pkt . flags & 0x1000)) {\r\n goto next_non_null;\r\n }\r\n if (compare(s,&s -> packet_buffer_end -> pkt,pkt)) {\r\n while( *next_point && (chunked && !(( *next_point) -> pkt . flags & 0x1000) || !compare(s,&( *next_point) -> pkt,pkt)))\r\n next_point = &( *next_point) -> next;\r\n if ( *next_point) {\r\n goto next_non_null;\r\n }\r\n }\r\n else {\r\n next_point = &s -> packet_buffer_end -> next;\r\n }\r\n }\r\n (void )0;\r\n s -> packet_buffer_end = this_pktl;\r\n next_non_null:\r\n this_pktl -> next = *next_point;\r\n s -> streams[pkt -> stream_index] -> last_in_packet_buffer = *next_point = this_pktl;\r\n return 0;\r\n}\r\n\r\nstatic int ff_interleave_compare_dts(AVFormatContext *s,AVPacket *next,AVPacket *pkt)\r\n{\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n AVStream *st2 = s -> streams[next -> stream_index];\r\n int comp = av_compare_ts(next -> dts,st2 -> time_base,pkt -> dts,st -> time_base);\r\n if (s -> audio_preload && (st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO != ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) {\r\n int64_t ts = av_rescale_q(pkt -> dts,st -> time_base,((AVRational ){(1), (1000000)})) - (s -> audio_preload * ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO));\r\n int64_t ts2 = av_rescale_q(next -> dts,st2 -> time_base,((AVRational ){(1), (1000000)})) - (s -> audio_preload * ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO));\r\n if (ts == ts2) {\r\n ts = (pkt -> dts * st -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st -> time_base . den) * st2 -> time_base . den - (next -> dts * st2 -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st2 -> time_base . den) * st -> time_base . den;\r\n ts2 = 0;\r\n }\r\n comp = (ts > ts2) - (ts < ts2);\r\n }\r\n if (comp == 0) {\r\n return pkt -> stream_index < next -> stream_index;\r\n }\r\n return comp > 0;\r\n}\r\n\r\nint ff_interleave_packet_per_dts(AVFormatContext *s,AVPacket *out,AVPacket *pkt,int flush)\r\n{\r\n AVPacketList *pktl;\r\n int stream_count = 0;\r\n int noninterleaved_count = 0;\r\n int64_t delta_dts_max = 0;\r\n int i;\r\n int ret;\r\n if (pkt) {\r\n ret = ff_interleave_add_packet(s,pkt,ff_interleave_compare_dts);\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n if (s -> streams[i] -> last_in_packet_buffer) {\r\n ++stream_count;\r\n }\r\n else {\r\n if ((s -> streams[i] -> codec -> codec_type) == AVMEDIA_TYPE_SUBTITLE) {\r\n ++noninterleaved_count;\r\n }\r\n }\r\n }\r\n if (s -> nb_streams == stream_count) {\r\n flush = 1;\r\n }\r\n else {\r\n if (!flush) {\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n if (s -> streams[i] -> last_in_packet_buffer) {\r\n int64_t delta_dts = av_rescale_q(s -> streams[i] -> last_in_packet_buffer -> pkt . dts,s -> streams[i] -> time_base,((AVRational ){(1), (1000000)})) - av_rescale_q(s -> packet_buffer -> pkt . dts,s -> streams[s -> packet_buffer -> pkt . stream_index] -> time_base,((AVRational ){(1), (1000000)}));\r\n delta_dts_max = (delta_dts_max > delta_dts?delta_dts_max : delta_dts);\r\n }\r\n }\r\n if (s -> nb_streams == (stream_count + noninterleaved_count) && delta_dts_max > (20 * 1000000)) {\r\n av_log(s,48,\"flushing with %d noninterleaved\\n\",noninterleaved_count);\r\n flush = 1;\r\n }\r\n }\r\n }\r\n if (stream_count && flush) {\r\n AVStream *st;\r\n pktl = s -> packet_buffer;\r\n *out = pktl -> pkt;\r\n st = s -> streams[out -> stream_index];\r\n s -> packet_buffer = pktl -> next;\r\n if (!s -> packet_buffer) {\r\n s -> packet_buffer_end = ((void *)0);\r\n }\r\n if (st -> last_in_packet_buffer == pktl) {\r\n st -> last_in_packet_buffer = ((void *)0);\r\n }\r\n av_freep((&pktl));\r\n if (s -> avoid_negative_ts > 0) {\r\n if (out -> dts != ((int64_t )0x8000000000000000UL)) {\r\n if (!st -> mux_ts_offset && out -> dts < 0) {\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n s -> streams[i] -> mux_ts_offset = av_rescale_q_rnd(-out -> dts,st -> time_base,s -> streams[i] -> time_base,AV_ROUND_UP);\r\n }\r\n }\r\n out -> dts += st -> mux_ts_offset;\r\n }\r\n if (out -> pts != ((int64_t )0x8000000000000000UL)) {\r\n out -> pts += st -> mux_ts_offset;\r\n }\r\n }\r\n return 1;\r\n }\r\n else {\r\n av_init_packet(out);\r\n return 0;\r\n }\r\n}\r\n#if FF_API_INTERLEAVE_PACKET\r\n\r\nint av_interleave_packet_per_dts(AVFormatContext *s,AVPacket *out,AVPacket *pkt,int flush)\r\n{\r\n return ff_interleave_packet_per_dts(s,out,pkt,flush);\r\n}\r\n#endif\r\n\r\n\r\nstatic int interleave_packet(AVFormatContext *s,AVPacket *out,AVPacket *in,int flush)\r\n{\r\n if (s -> oformat -> interleave_packet) {\r\n int ret = (s -> oformat -> interleave_packet)(s,out,in,flush);\r\n if (in) {\r\n av_free_packet(in);\r\n }\r\n return ret;\r\n }\r\n else {\r\n return ff_interleave_packet_per_dts(s,out,in,flush);\r\n }\r\n}\r\n\r\nint av_interleaved_write_frame(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n int flush = 0;\r\n if (pkt) {\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n\r\n if ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO && pkt -> size == 0) {\r\n return 0;\r\n }\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_interleaved_write_frame size:%d dts:%s pts:%s\\n\",pkt -> size,av_ts_make_string(((char [32]){(0)}),pkt -> dts),av_ts_make_string(((char [32]){(0)}),pkt -> pts));\r\n }\r\n }while (0);\r\n if ((ret = compute_pkt_fields2(s,st,pkt)) < 0 && !(s -> oformat -> flags & 0x80)) {\r\n return ret;\r\n }\r\n if (pkt -> dts == ((int64_t )0x8000000000000000UL) && !(s -> oformat -> flags & 0x80)) {\r\n return - 22;\r\n }\r\n }\r\n else {\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_interleaved_write_frame FLUSH\\n\");\r\n }\r\n }while (0);\r\n flush = 1;\r\n }\r\n for (; ; ) {\r\n AVPacket opkt;\r\n int ret = interleave_packet(s,&opkt,pkt,flush);\r\n\r\n if (ret <= 0) {\r\n return ret;\r\n }\r\n ret = split_write_packet(s,&opkt);\r\n if (ret >= 0) {\r\n s -> streams[opkt . stream_index] -> nb_frames++;\r\n }\r\n av_free_packet(&opkt);\r\n pkt = ((void *)0);\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n if (s -> pb && s -> pb -> error) {\r\n return s -> pb -> error;\r\n }\r\n }\r\n}\r\n\r\nint av_write_trailer(AVFormatContext *s)\r\n{\r\n int ret;\r\n int i;\r\n for (; ; ) {\r\n AVPacket pkt;\r\n ret = interleave_packet(s,&pkt,((void *)0),1);\r\n\r\n if (ret < 0) {\r\n goto fail;\r\n }\r\n if (!ret) {\r\n break; \r\n }\r\n ret = split_write_packet(s,&pkt);\r\n if (ret >= 0) {\r\n s -> streams[pkt . stream_index] -> nb_frames++;\r\n }\r\n av_free_packet(&pkt);\r\n if (ret < 0) {\r\n goto fail;\r\n }\r\n if (s -> pb && s -> pb -> error) {\r\n goto fail;\r\n }\r\n }\r\n if (s -> oformat -> write_trailer) {\r\n ret = ((s -> oformat -> write_trailer)(s));\r\n }\r\n fail:\r\n if (s -> pb) {\r\n avio_flush(s -> pb);\r\n }\r\n if (ret == 0) {\r\n ret = (s -> pb?s -> pb -> error : 0);\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n av_freep((&s -> streams[i] -> priv_data));\r\n av_freep((&s -> streams[i] -> index_entries));\r\n }\r\n if (s -> oformat -> priv_class) {\r\n av_opt_free(s -> priv_data);\r\n }\r\n av_freep((&s -> priv_data));\r\n return ret;\r\n}\r\n\r\nint av_get_output_timestamp(struct AVFormatContext *s,int stream,int64_t *dts,int64_t *wall)\r\n{\r\n if (!s -> oformat || !s -> oformat -> get_output_timestamp) {\r\n return - 38;\r\n }\r\n (s -> oformat -> get_output_timestamp)(s,stream,dts,wall);\r\n return 0;\r\n}\r\n\r\nvoid projicience_following(int abbassid_czechoslovak,... )\r\n{\r\n int polygamistic_climatologists = 7;\r\n char **creolizing_ellin = 0;\r\n va_list poisure_sheepshanks;\r\n ++global_variable;;\r\n if (abbassid_czechoslovak > 0) {\r\n __builtin_va_start(poisure_sheepshanks,abbassid_czechoslovak);\r\n creolizing_ellin = (va_arg(poisure_sheepshanks,char **));\r\n __builtin_va_end(poisure_sheepshanks);\r\n }\r\n bels_sigfried(polygamistic_climatologists,creolizing_ellin);\r\n}\r\n\r\nvoid bels_sigfried(int psilotaceous_etrenne,char **wrongheartedly_sephardic)\r\n{\r\n int oc_i = 0;\r\n int opt_var = 0;\r\n char* buff = 0;\r\n char *overrashness_stomatodynia = 0;\r\n ++global_variable;\r\n psilotaceous_etrenne--;\r\n if (psilotaceous_etrenne > 0) {\r\n bels_sigfried(psilotaceous_etrenne,wrongheartedly_sephardic);\r\n return ;\r\n }\r\n overrashness_stomatodynia = ((char *)wrongheartedly_sephardic[34]);\r\n \r\n if (strlen(overrashness_stomatodynia) < 20) {;\r\n buff = (char *) malloc (sizeof(char) * 20);\r\n if (buff != NULL) {\r\n memset(buff, 0, 20);\r\n \r\n \r\n\r\n\r\n realpath(overrashness_stomatodynia, buff);\r\n opt_var = strlen( buff);\r\n \r\n for (; oc_i < opt_var; ++oc_i) {\r\n buff[oc_i] =\r\n toupper(buff[oc_i]);\r\n }\r\n printf(\"%s\\n\", buff);\r\n \r\n \r\n free (buff);\r\n }\r\n }\r\n \r\n;\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "785"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "static int balance_nonroot(\r\r\n MemPage *pParent, /* Parent page of siblings being balanced */\r\r\n int iParentIdx, /* Index of \"the page\" in pParent */\r\r\n u8 *aOvflSpace, /* page-size bytes of space for parent ovfl */\r\r\n int isRoot, /* True if pParent is a root-page */\r\r\n int bBulk /* True if this call is part of a bulk load */\r\r\n){\r\r\n BtShared *pBt; /* The whole database */\r\r\n int nMaxCells = 0; /* Allocated size of apCell, szCell, aFrom. */\r\r\n int nNew = 0; /* Number of pages in apNew[] */\r\r\n int nOld; /* Number of pages in apOld[] */\r\r\n int i, j, k; /* Loop counters */\r\r\n int nxDiv; /* Next divider slot in pParent->aCell[] */\r\r\n int rc = SQLITE_OK; /* The return code */\r\r\n u16 leafCorrection; /* 4 if pPage is a leaf. 0 if not */\r\r\n int leafData; /* True if pPage is a leaf of a LEAFDATA tree */\r\r\n int usableSpace; /* Bytes in pPage beyond the header */\r\r\n int pageFlags; /* Value of pPage->aData[0] */\r\r\n int iSpace1 = 0; /* First unused byte of aSpace1[] */\r\r\n int iOvflSpace = 0; /* First unused byte of aOvflSpace[] */\r\r\n int szScratch; /* Size of scratch memory requested */\r\r\n MemPage *apOld[NB]; /* pPage and up to two siblings */\r\r\n MemPage *apNew[NB+2]; /* pPage and up to NB siblings after balancing */\r\r\n u8 *pRight; /* Location in parent of right-sibling pointer */\r\r\n u8 *apDiv[NB-1]; /* Divider cells in pParent */\r\r\n int cntNew[NB+2]; /* Index in b.paCell[] of cell after i-th page */\r\r\n int cntOld[NB+2]; /* Old index in b.apCell[] */\r\r\n int szNew[NB+2]; /* Combined size of cells placed on i-th page */\r\r\n u8 *aSpace1; /* Space for copies of dividers cells */\r\r\n Pgno pgno; /* Temp var to store a page number in */\r\r\n u8 abDone[NB+2]; /* True after i'th new page is populated */\r\r\n Pgno aPgno[NB+2]; /* Page numbers of new pages before shuffling */\r\r\n Pgno aPgOrder[NB+2]; /* Copy of aPgno[] used for sorting pages */\r\r\n u16 aPgFlags[NB+2]; /* flags field of new pages before shuffling */\r\r\n CellArray b; /* Parsed information on cells being balanced */\r\r\n\r\r\n memset(abDone, 0, sizeof(abDone));\r\r\n b.nCell = 0;\r\r\n b.apCell = 0;\r\r\n pBt = pParent->pBt;\r\r\n assert( sqlite3_mutex_held(pBt->mutex) );\r\r\n assert( sqlite3PagerIswriteable(pParent->pDbPage) );\r\r\n\r\r\n#if 0\r\r\n TRACE((\"BALANCE: begin page %d child of %d\\n\", pPage->pgno, pParent->pgno));\r\r\n#endif\r\r\n\r\r\n /* At this point pParent may have at most one overflow cell. And if\r\r\n ** this overflow cell is present, it must be the cell with \r\r\n ** index iParentIdx. This scenario comes about when this function\r\r\n ** is called (indirectly) from sqlite3BtreeDelete().\r\r\n */\r\r\n assert( pParent->nOverflow==0 || pParent->nOverflow==1 );\r\r\n assert( pParent->nOverflow==0 || pParent->aiOvfl[0]==iParentIdx );\r\r\n\r\r\n if( !aOvflSpace ){\r\r\n return SQLITE_NOMEM_BKPT;\r\r\n }\r\r\n\r\r\n /* Find the sibling pages to balance. Also locate the cells in pParent \r\r\n ** that divide the siblings. An attempt is made to find NN siblings on \r\r\n ** either side of pPage. More siblings are taken from one side, however, \r\r\n ** if there are fewer than NN siblings on the other side. If pParent\r\r\n ** has NB or fewer children then all children of pParent are taken. \r\r\n **\r\r\n ** This loop also drops the divider cells from the parent page. This\r\r\n ** way, the remainder of the function does not have to deal with any\r\r\n ** overflow cells in the parent page, since if any existed they will\r\r\n ** have already been removed.\r\r\n */\r\r\n i = pParent->nOverflow + pParent->nCell;\r\r\n if( i<2 ){\r\r\n nxDiv = 0;\r\r\n }else{\r\r\n assert( bBulk==0 || bBulk==1 );\r\r\n if( iParentIdx==0 ){ \r\r\n nxDiv = 0;\r\r\n }else if( iParentIdx==i ){\r\r\n nxDiv = i-2+bBulk;\r\r\n }else{\r\r\n nxDiv = iParentIdx-1;\r\r\n }\r\r\n i = 2-bBulk;\r\r\n }\r\r\n nOld = i+1;\r\r\n if( (i+nxDiv-pParent->nOverflow)==pParent->nCell ){\r\r\n pRight = &pParent->aData[pParent->hdrOffset+8];\r\r\n }else{\r\r\n pRight = findCell(pParent, i+nxDiv-pParent->nOverflow);\r\r\n }\r\r\n pgno = get4byte(pRight);\r\r\n while( 1 ){\r\r\n rc = getAndInitPage(pBt, pgno, &apOld[i], 0, 0);\r\r\n if( rc ){\r\r\n memset(apOld, 0, (i+1)*sizeof(MemPage*));\r\r\n goto balance_cleanup;\r\r\n }\r\r\n nMaxCells += 1+apOld[i]->nCell+apOld[i]->nOverflow;\r\r\n if( (i--)==0 ) break;\r\r\n\r\r\n if( pParent->nOverflow && i+nxDiv==pParent->aiOvfl[0] ){\r\r\n apDiv[i] = pParent->apOvfl[0];\r\r\n pgno = get4byte(apDiv[i]);\r\r\n szNew[i] = pParent->xCellSize(pParent, apDiv[i]);\r\r\n pParent->nOverflow = 0;\r\r\n }else{\r\r\n apDiv[i] = findCell(pParent, i+nxDiv-pParent->nOverflow);\r\r\n pgno = get4byte(apDiv[i]);\r\r\n szNew[i] = pParent->xCellSize(pParent, apDiv[i]);\r\r\n\r\r\n /* Drop the cell from the parent page. apDiv[i] still points to\r\r\n ** the cell within the parent, even though it has been dropped.\r\r\n ** This is safe because dropping a cell only overwrites the first\r\r\n ** four bytes of it, and this function does not need the first\r\r\n ** four bytes of the divider cell. So the pointer is safe to use\r\r\n ** later on. \r\r\n **\r\r\n ** But not if we are in secure-delete mode. In secure-delete mode,\r\r\n ** the dropCell() routine will overwrite the entire cell with zeroes.\r\r\n ** In this case, temporarily copy the cell into the aOvflSpace[]\r\r\n ** buffer. It will be copied out again as soon as the aSpace[] buffer\r\r\n ** is allocated. */\r\r\n if( pBt->btsFlags & BTS_SECURE_DELETE ){\r\r\n int iOff;\r\r\n\r\r\n iOff = SQLITE_PTR_TO_INT(apDiv[i]) - SQLITE_PTR_TO_INT(pParent->aData);\r\r\n if( (iOff+szNew[i])>(int)pBt->usableSize ){\r\r\n rc = SQLITE_CORRUPT_BKPT;\r\r\n memset(apOld, 0, (i+1)*sizeof(MemPage*));\r\r\n goto balance_cleanup;\r\r\n }else{\r\r\n memcpy(&aOvflSpace[iOff], apDiv[i], szNew[i]);\r\r\n apDiv[i] = &aOvflSpace[apDiv[i]-pParent->aData];\r\r\n }\r\r\n }\r\r\n dropCell(pParent, i+nxDiv-pParent->nOverflow, szNew[i], &rc);\r\r\n }\r\r\n }\r\r\n\r\r\n /* Make nMaxCells a multiple of 4 in order to preserve 8-byte\r\r\n ** alignment */\r\r\n nMaxCells = (nMaxCells + 3)&~3;\r\r\n\r\r\n /*\r\r\n ** Allocate space for memory structures\r\r\n */\r\r\n szScratch =\r\r\n nMaxCells*sizeof(u8*) /* b.apCell */\r\r\n + nMaxCells*sizeof(u16) /* b.szCell */\r\r\n + pBt->pageSize; /* aSpace1 */\r\r\n\r\r\n /* EVIDENCE-OF: R-28375-38319 SQLite will never request a scratch buffer\r\r\n ** that is more than 6 times the database page size. */\r\r\n assert( szScratch<=6*(int)pBt->pageSize );\r\r\n b.apCell = sqlite3ScratchMalloc( szScratch ); \r\r\n if( b.apCell==0 ){\r\r\n rc = SQLITE_NOMEM_BKPT;\r\r\n goto balance_cleanup;\r\r\n }\r\r\n b.szCell = (u16*)&b.apCell[nMaxCells];\r\r\n aSpace1 = (u8*)&b.szCell[nMaxCells];\r\r\n assert( EIGHT_BYTE_ALIGNMENT(aSpace1) );\r\r\n\r\r\n /*\r\r\n ** Load pointers to all cells on sibling pages and the divider cells\r\r\n ** into the local b.apCell[] array. Make copies of the divider cells\r\r\n ** into space obtained from aSpace1[]. The divider cells have already\r\r\n ** been removed from pParent.\r\r\n **\r\r\n ** If the siblings are on leaf pages, then the child pointers of the\r\r\n ** divider cells are stripped from the cells before they are copied\r\r\n ** into aSpace1[]. In this way, all cells in b.apCell[] are without\r\r\n ** child pointers. If siblings are not leaves, then all cell in\r\r\n ** b.apCell[] include child pointers. Either way, all cells in b.apCell[]\r\r\n ** are alike.\r\r\n **\r\r\n ** leafCorrection: 4 if pPage is a leaf. 0 if pPage is not a leaf.\r\r\n ** leafData: 1 if pPage holds key+data and pParent holds only keys.\r\r\n */\r\r\n b.pRef = apOld[0];\r\r\n leafCorrection = b.pRef->leaf*4;\r\r\n leafData = b.pRef->intKeyLeaf;\r\r\n for(i=0; i<nOld; i++){\r\r\n MemPage *pOld = apOld[i];\r\r\n int limit = pOld->nCell;\r\r\n u8 *aData = pOld->aData;\r\r\n u16 maskPage = pOld->maskPage;\r\r\n u8 *piCell = aData + pOld->cellOffset;\r\r\n u8 *piEnd;\r\r\n\r\r\n /* Verify that all sibling pages are of the same \"type\" (table-leaf,\r\r\n ** table-interior, index-leaf, or index-interior).\r\r\n */\r\r\n if( pOld->aData[0]!=apOld[0]->aData[0] ){\r\r\n rc = SQLITE_CORRUPT_BKPT;\r\r\n goto balance_cleanup;\r\r\n }\r\r\n\r\r\n /* Load b.apCell[] with pointers to all cells in pOld. If pOld\r\r\n ** constains overflow cells, include them in the b.apCell[] array\r\r\n ** in the correct spot.\r\r\n **\r\r\n ** Note that when there are multiple overflow cells, it is always the\r\r\n ** case that they are sequential and adjacent. This invariant arises\r\r\n ** because multiple overflows can only occurs when inserting divider\r\r\n ** cells into a parent on a prior balance, and divider cells are always\r\r\n ** adjacent and are inserted in order. There is an assert() tagged\r\r\n ** with \"NOTE 1\" in the overflow cell insertion loop to prove this\r\r\n ** invariant.\r\r\n **\r\r\n ** This must be done in advance. Once the balance starts, the cell\r\r\n ** offset section of the btree page will be overwritten and we will no\r\r\n ** long be able to find the cells if a pointer to each cell is not saved\r\r\n ** first.\r\r\n */\r\r\n memset(&b.szCell[b.nCell], 0, sizeof(b.szCell[0])*(limit+pOld->nOverflow));\r\r\n if( pOld->nOverflow>0 ){\r\r\n limit = pOld->aiOvfl[0];\r\r\n for(j=0; j<limit; j++){\r\r\n b.apCell[b.nCell] = aData + (maskPage & get2byteAligned(piCell));\r\r\n piCell += 2;\r\r\n b.nCell++;\r\r\n }\r\r\n for(k=0; k<pOld->nOverflow; k++){\r\r\n assert( k==0 || pOld->aiOvfl[k-1]+1==pOld->aiOvfl[k] );/* NOTE 1 */\r\r\n b.apCell[b.nCell] = pOld->apOvfl[k];\r\r\n b.nCell++;\r\r\n }\r\r\n }\r\r\n piEnd = aData + pOld->cellOffset + 2*pOld->nCell;\r\r\n while( piCell<piEnd ){\r\r\n assert( b.nCell<nMaxCells );\r\r\n b.apCell[b.nCell] = aData + (maskPage & get2byteAligned(piCell));\r\r\n piCell += 2;\r\r\n b.nCell++;\r\r\n }\r\r\n\r\r\n cntOld[i] = b.nCell;\r\r\n if( i<nOld-1 && !leafData){\r\r\n u16 sz = (u16)szNew[i];\r\r\n u8 *pTemp;\r\r\n assert( b.nCell<nMaxCells );\r\r\n b.szCell[b.nCell] = sz;\r\r\n pTemp = &aSpace1[iSpace1];\r\r\n iSpace1 += sz;\r\r\n assert( sz<=pBt->maxLocal+23 );\r\r\n assert( iSpace1 <= (int)pBt->pageSize );\r\r\n memcpy(pTemp, apDiv[i], sz);\r\r\n b.apCell[b.nCell] = pTemp+leafCorrection;\r\r\n assert( leafCorrection==0 || leafCorrection==4 );\r\r\n b.szCell[b.nCell] = b.szCell[b.nCell] - leafCorrection;\r\r\n if( !pOld->leaf ){\r\r\n assert( leafCorrection==0 );\r\r\n assert( pOld->hdrOffset==0 );\r\r\n /* The right pointer of the child page pOld becomes the left\r\r\n ** pointer of the divider cell */\r\r\n memcpy(b.apCell[b.nCell], &pOld->aData[8], 4);\r\r\n }else{\r\r\n assert( leafCorrection==4 );\r\r\n while( b.szCell[b.nCell]<4 ){\r\r\n /* Do not allow any cells smaller than 4 bytes. If a smaller cell\r\r\n ** does exist, pad it with 0x00 bytes. */\r\r\n assert( b.szCell[b.nCell]==3 || CORRUPT_DB );\r\r\n assert( b.apCell[b.nCell]==&aSpace1[iSpace1-3] || CORRUPT_DB );\r\r\n aSpace1[iSpace1++] = 0x00;\r\r\n b.szCell[b.nCell]++;\r\r\n }\r\r\n }\r\r\n b.nCell++;\r\r\n }\r\r\n }\r\r\n\r\r\n /*\r\r\n ** Figure out the number of pages needed to hold all b.nCell cells.\r\r\n ** Store this number in \"k\". Also compute szNew[] which is the total\r\r\n ** size of all cells on the i-th page and cntNew[] which is the index\r\r\n ** in b.apCell[] of the cell that divides page i from page i+1. \r\r\n ** cntNew[k] should equal b.nCell.\r\r\n **\r\r\n ** Values computed by this block:\r\r\n **\r\r\n ** k: The total number of sibling pages\r\r\n ** szNew[i]: Spaced used on the i-th sibling page.\r\r\n ** cntNew[i]: Index in b.apCell[] and b.szCell[] for the first cell to\r\r\n ** the right of the i-th sibling page.\r\r\n ** usableSpace: Number of bytes of space available on each sibling.\r\r\n ** \r\r\n */\r\r\n usableSpace = pBt->usableSize - 12 + leafCorrection;\r\r\n for(i=0; i<nOld; i++){\r\r\n MemPage *p = apOld[i];\r\r\n szNew[i] = usableSpace - p->nFree;\r\r\n for(j=0; j<p->nOverflow; j++){\r\r\n szNew[i] += 2 + p->xCellSize(p, p->apOvfl[j]);\r\r\n }\r\r\n cntNew[i] = cntOld[i];\r\r\n }\r\r\n k = nOld;\r\r\n for(i=0; i<k; i++){\r\r\n int sz;\r\r\n while( szNew[i]>usableSpace ){\r\r\n if( i+1>=k ){\r\r\n k = i+2;\r\r\n if( k>NB+2 ){ rc = SQLITE_CORRUPT_BKPT; goto balance_cleanup; }\r\r\n szNew[k-1] = 0;\r\r\n cntNew[k-1] = b.nCell;\r\r\n }\r\r\n sz = 2 + cachedCellSize(&b, cntNew[i]-1);\r\r\n szNew[i] -= sz;\r\r\n if( !leafData ){\r\r\n if( cntNew[i]<b.nCell ){\r\r\n sz = 2 + cachedCellSize(&b, cntNew[i]);\r\r\n }else{\r\r\n sz = 0;\r\r\n }\r\r\n }\r\r\n szNew[i+1] += sz;\r\r\n cntNew[i]--;\r\r\n }\r\r\n while( cntNew[i]<b.nCell ){\r\r\n sz = 2 + cachedCellSize(&b, cntNew[i]);\r\r\n if( szNew[i]+sz>usableSpace ) break;\r\r\n szNew[i] += sz;\r\r\n cntNew[i]++;\r\r\n if( !leafData ){\r\r\n if( cntNew[i]<b.nCell ){\r\r\n sz = 2 + cachedCellSize(&b, cntNew[i]);\r\r\n }else{\r\r\n sz = 0;\r\r\n }\r\r\n }\r\r\n szNew[i+1] -= sz;\r\r\n }\r\r\n if( cntNew[i]>=b.nCell ){\r\r\n k = i+1;\r\r\n }else if( cntNew[i] <= (i>0 ? cntNew[i-1] : 0) ){\r\r\n rc = SQLITE_CORRUPT_BKPT;\r\r\n goto balance_cleanup;\r\r\n }\r\r\n }\r\r\n\r\r\n /*\r\r\n ** The packing computed by the previous block is biased toward the siblings\r\r\n ** on the left side (siblings with smaller keys). The left siblings are\r\r\n ** always nearly full, while the right-most sibling might be nearly empty.\r\r\n ** The next block of code attempts to adjust the packing of siblings to\r\r\n ** get a better balance.\r\r\n **\r\r\n ** This adjustment is more than an optimization. The packing above might\r\r\n ** be so out of balance as to be illegal. For example, the right-most\r\r\n ** sibling might be completely empty. This adjustment is not optional.\r\r\n */\r\r\n for(i=k-1; i>0; i--){\r\r\n int szRight = szNew[i]; /* Size of sibling on the right */\r\r\n int szLeft = szNew[i-1]; /* Size of sibling on the left */\r\r\n int r; /* Index of right-most cell in left sibling */\r\r\n int d; /* Index of first cell to the left of right sibling */\r\r\n\r\r\n r = cntNew[i-1] - 1;\r\r\n d = r + 1 - leafData;\r\r\n (void)cachedCellSize(&b, d);\r\r\n do{\r\r\n assert( d<nMaxCells );\r\r\n assert( r<nMaxCells );\r\r\n (void)cachedCellSize(&b, r);\r\r\n if( szRight!=0\r\r\n && (bBulk || szRight+b.szCell[d]+2 > szLeft-(b.szCell[r]+(i==k-1?0:2)))){\r\r\n break;\r\r\n }\r\r\n szRight += b.szCell[d] + 2;\r\r\n szLeft -= b.szCell[r] + 2;\r\r\n cntNew[i-1] = r;\r\r\n r--;\r\r\n d--;\r\r\n }while( r>=0 );\r\r\n szNew[i] = szRight;\r\r\n szNew[i-1] = szLeft;\r\r\n if( cntNew[i-1] <= (i>1 ? cntNew[i-2] : 0) ){\r\r\n rc = SQLITE_CORRUPT_BKPT;\r\r\n goto balance_cleanup;\r\r\n }\r\r\n }\r\r\n\r\r\n /* Sanity check: For a non-corrupt database file one of the follwing\r\r\n ** must be true:\r\r\n ** (1) We found one or more cells (cntNew[0])>0), or\r\r\n ** (2) pPage is a virtual root page. A virtual root page is when\r\r\n ** the real root page is page 1 and we are the only child of\r\r\n ** that page.\r\r\n */\r\r\n assert( cntNew[0]>0 || (pParent->pgno==1 && pParent->nCell==0) || CORRUPT_DB);\r\r\n TRACE((\"BALANCE: old: %d(nc=%d) %d(nc=%d) %d(nc=%d)\\n\",\r\r\n apOld[0]->pgno, apOld[0]->nCell,\r\r\n nOld>=2 ? apOld[1]->pgno : 0, nOld>=2 ? apOld[1]->nCell : 0,\r\r\n nOld>=3 ? apOld[2]->pgno : 0, nOld>=3 ? apOld[2]->nCell : 0\r\r\n ));\r\r\n\r\r\n /*\r\r\n ** Allocate k new pages. Reuse old pages where possible.\r\r\n */\r\r\n pageFlags = apOld[0]->aData[0];\r\r\n for(i=0; i<k; i++){\r\r\n MemPage *pNew;\r\r\n if( i<nOld ){\r\r\n pNew = apNew[i] = apOld[i];\r\r\n apOld[i] = 0;\r\r\n rc = sqlite3PagerWrite(pNew->pDbPage);\r\r\n nNew++;\r\r\n if( rc ) goto balance_cleanup;\r\r\n }else{\r\r\n assert( i>0 );\r\r\n rc = allocateBtreePage(pBt, &pNew, &pgno, (bBulk ? 1 : pgno), 0);\r\r\n if( rc ) goto balance_cleanup;\r\r\n zeroPage(pNew, pageFlags);\r\r\n apNew[i] = pNew;\r\r\n nNew++;\r\r\n cntOld[i] = b.nCell;\r\r\n\r\r\n /* Set the pointer-map entry for the new sibling page. */\r\r\n if( ISAUTOVACUUM ){\r\r\n ptrmapPut(pBt, pNew->pgno, PTRMAP_BTREE, pParent->pgno, &rc);\r\r\n if( rc!=SQLITE_OK ){\r\r\n goto balance_cleanup;\r\r\n }\r\r\n }\r\r\n }\r\r\n }\r\r\n\r\r\n /*\r\r\n ** Reassign page numbers so that the new pages are in ascending order. \r\r\n ** This helps to keep entries in the disk file in order so that a scan\r\r\n ** of the table is closer to a linear scan through the file. That in turn \r\r\n ** helps the operating system to deliver pages from the disk more rapidly.\r\r\n **\r\r\n ** An O(n^2) insertion sort algorithm is used, but since n is never more \r\r\n ** than (NB+2) (a small constant), that should not be a problem.\r\r\n **\r\r\n ** When NB==3, this one optimization makes the database about 25% faster \r\r\n ** for large insertions and deletions.\r\r\n */\r\r\n for(i=0; i<nNew; i++){\r\r\n aPgOrder[i] = aPgno[i] = apNew[i]->pgno;\r\r\n aPgFlags[i] = apNew[i]->pDbPage->flags;\r\r\n for(j=0; j<i; j++){\r\r\n if( aPgno[j]==aPgno[i] ){\r\r\n /* This branch is taken if the set of sibling pages somehow contains\r\r\n ** duplicate entries. This can happen if the database is corrupt. \r\r\n ** It would be simpler to detect this as part of the loop below, but\r\r\n ** we do the detection here in order to avoid populating the pager\r\r\n ** cache with two separate objects associated with the same\r\r\n ** page number. */\r\r\n assert( CORRUPT_DB );\r\r\n rc = SQLITE_CORRUPT_BKPT;\r\r\n goto balance_cleanup;\r\r\n }\r\r\n }\r\r\n }\r\r\n for(i=0; i<nNew; i++){\r\r\n int iBest = 0; /* aPgno[] index of page number to use */\r\r\n for(j=1; j<nNew; j++){\r\r\n if( aPgOrder[j]<aPgOrder[iBest] ) iBest = j;\r\r\n }\r\r\n pgno = aPgOrder[iBest];\r\r\n aPgOrder[iBest] = 0xffffffff;\r\r\n if( iBest!=i ){\r\r\n if( iBest>i ){\r\r\n sqlite3PagerRekey(apNew[iBest]->pDbPage, pBt->nPage+iBest+1, 0);\r\r\n }\r\r\n sqlite3PagerRekey(apNew[i]->pDbPage, pgno, aPgFlags[iBest]);\r\r\n apNew[i]->pgno = pgno;\r\r\n }\r\r\n }\r\r\n\r\r\n TRACE((\"BALANCE: new: %d(%d nc=%d) %d(%d nc=%d) %d(%d nc=%d) \"\r\r\n \"%d(%d nc=%d) %d(%d nc=%d)\\n\",\r\r\n apNew[0]->pgno, szNew[0], cntNew[0],\r\r\n nNew>=2 ? apNew[1]->pgno : 0, nNew>=2 ? szNew[1] : 0,\r\r\n nNew>=2 ? cntNew[1] - cntNew[0] - !leafData : 0,\r\r\n nNew>=3 ? apNew[2]->pgno : 0, nNew>=3 ? szNew[2] : 0,\r\r\n nNew>=3 ? cntNew[2] - cntNew[1] - !leafData : 0,\r\r\n nNew>=4 ? apNew[3]->pgno : 0, nNew>=4 ? szNew[3] : 0,\r\r\n nNew>=4 ? cntNew[3] - cntNew[2] - !leafData : 0,\r\r\n nNew>=5 ? apNew[4]->pgno : 0, nNew>=5 ? szNew[4] : 0,\r\r\n nNew>=5 ? cntNew[4] - cntNew[3] - !leafData : 0\r\r\n ));\r\r\n\r\r\n assert( sqlite3PagerIswriteable(pParent->pDbPage) );\r\r\n put4byte(pRight, apNew[nNew-1]->pgno);\r\r\n\r\r\n /* If the sibling pages are not leaves, ensure that the right-child pointer\r\r\n ** of the right-most new sibling page is set to the value that was \r\r\n ** originally in the same field of the right-most old sibling page. */\r\r\n if( (pageFlags & PTF_LEAF)==0 && nOld!=nNew ){\r\r\n MemPage *pOld = (nNew>nOld ? apNew : apOld)[nOld-1];\r\r\n memcpy(&apNew[nNew-1]->aData[8], &pOld->aData[8], 4);\r\r\n }\r\r\n\r\r\n /* Make any required updates to pointer map entries associated with \r\r\n ** cells stored on sibling pages following the balance operation. Pointer\r\r\n ** map entries associated with divider cells are set by the insertCell()\r\r\n ** routine. The associated pointer map entries are:\r\r\n **\r\r\n ** a) if the cell contains a reference to an overflow chain, the\r\r\n ** entry associated with the first page in the overflow chain, and\r\r\n **\r\r\n ** b) if the sibling pages are not leaves, the child page associated\r\r\n ** with the cell.\r\r\n **\r\r\n ** If the sibling pages are not leaves, then the pointer map entry \r\r\n ** associated with the right-child of each sibling may also need to be \r\r\n ** updated. This happens below, after the sibling pages have been \r\r\n ** populated, not here.\r\r\n */\r\r\n if( ISAUTOVACUUM ){\r\r\n MemPage *pNew = apNew[0];\r\r\n u8 *aOld = pNew->aData;\r\r\n int cntOldNext = pNew->nCell + pNew->nOverflow;\r\r\n int usableSize = pBt->usableSize;\r\r\n int iNew = 0;\r\r\n int iOld = 0;\r\r\n\r\r\n for(i=0; i<b.nCell; i++){\r\r\n u8 *pCell = b.apCell[i];\r\r\n if( i==cntOldNext ){\r\r\n MemPage *pOld = (++iOld)<nNew ? apNew[iOld] : apOld[iOld];\r\r\n cntOldNext += pOld->nCell + pOld->nOverflow + !leafData;\r\r\n aOld = pOld->aData;\r\r\n }\r\r\n if( i==cntNew[iNew] ){\r\r\n pNew = apNew[++iNew];\r\r\n if( !leafData ) continue;\r\r\n }\r\r\n\r\r\n /* Cell pCell is destined for new sibling page pNew. Originally, it\r\r\n ** was either part of sibling page iOld (possibly an overflow cell), \r\r\n ** or else the divider cell to the left of sibling page iOld. So,\r\r\n ** if sibling page iOld had the same page number as pNew, and if\r\r\n ** pCell really was a part of sibling page iOld (not a divider or\r\r\n ** overflow cell), we can skip updating the pointer map entries. */\r\r\n if( iOld>=nNew\r\r\n || pNew->pgno!=aPgno[iOld]\r\r\n || !SQLITE_WITHIN(pCell,aOld,&aOld[usableSize])\r\r\n ){\r\r\n if( !leafCorrection ){\r\r\n ptrmapPut(pBt, get4byte(pCell), PTRMAP_BTREE, pNew->pgno, &rc);\r\r\n }\r\r\n if( cachedCellSize(&b,i)>pNew->minLocal ){\r\r\n ptrmapPutOvflPtr(pNew, pCell, &rc);\r\r\n }\r\r\n if( rc ) goto balance_cleanup;\r\r\n }\r\r\n }\r\r\n }\r\r\n\r\r\n /* Insert new divider cells into pParent. */\r\r\n for(i=0; i<nNew-1; i++){\r\r\n u8 *pCell;\r\r\n u8 *pTemp;\r\r\n int sz;\r\r\n MemPage *pNew = apNew[i];\r\r\n j = cntNew[i];\r\r\n\r\r\n assert( j<nMaxCells );\r\r\n assert( b.apCell[j]!=0 );\r\r\n pCell = b.apCell[j];\r\r\n sz = b.szCell[j] + leafCorrection;\r\r\n pTemp = &aOvflSpace[iOvflSpace];\r\r\n if( !pNew->leaf ){\r\r\n memcpy(&pNew->aData[8], pCell, 4);\r\r\n }else if( leafData ){\r\r\n /* If the tree is a leaf-data tree, and the siblings are leaves, \r\r\n ** then there is no divider cell in b.apCell[]. Instead, the divider \r\r\n ** cell consists of the integer key for the right-most cell of \r\r\n ** the sibling-page assembled above only.\r\r\n */\r\r\n CellInfo info;\r\r\n j--;\r\r\n pNew->xParseCell(pNew, b.apCell[j], &info);\r\r\n pCell = pTemp;\r\r\n sz = 4 + putVarint(&pCell[4], info.nKey);\r\r\n pTemp = 0;\r\r\n }else{\r\r\n pCell -= 4;\r\r\n /* Obscure case for non-leaf-data trees: If the cell at pCell was\r\r\n ** previously stored on a leaf node, and its reported size was 4\r\r\n ** bytes, then it may actually be smaller than this \r\r\n ** (see btreeParseCellPtr(), 4 bytes is the minimum size of\r\r\n ** any cell). But it is important to pass the correct size to \r\r\n ** insertCell(), so reparse the cell now.\r\r\n **\r\r\n ** This can only happen for b-trees used to evaluate \"IN (SELECT ...)\"\r\r\n ** and WITHOUT ROWID tables with exactly one column which is the\r\r\n ** primary key.\r\r\n */\r\r\n if( b.szCell[j]==4 ){\r\r\n assert(leafCorrection==4);\r\r\n sz = pParent->xCellSize(pParent, pCell);\r\r\n }\r\r\n }\r\r\n iOvflSpace += sz;\r\r\n assert( sz<=pBt->maxLocal+23 );\r\r\n assert( iOvflSpace <= (int)pBt->pageSize );\r\r\n insertCell(pParent, nxDiv+i, pCell, sz, pTemp, pNew->pgno, &rc);\r\r\n if( rc!=SQLITE_OK ) goto balance_cleanup;\r\r\n assert( sqlite3PagerIswriteable(pParent->pDbPage) );\r\r\n }\r\r\n\r\r\n /* Now update the actual sibling pages. The order in which they are updated\r\r\n ** is important, as this code needs to avoid disrupting any page from which\r\r\n ** cells may still to be read. In practice, this means:\r\r\n **\r\r\n ** (1) If cells are moving left (from apNew[iPg] to apNew[iPg-1])\r\r\n ** then it is not safe to update page apNew[iPg] until after\r\r\n ** the left-hand sibling apNew[iPg-1] has been updated.\r\r\n **\r\r\n ** (2) If cells are moving right (from apNew[iPg] to apNew[iPg+1])\r\r\n ** then it is not safe to update page apNew[iPg] until after\r\r\n ** the right-hand sibling apNew[iPg+1] has been updated.\r\r\n **\r\r\n ** If neither of the above apply, the page is safe to update.\r\r\n **\r\r\n ** The iPg value in the following loop starts at nNew-1 goes down\r\r\n ** to 0, then back up to nNew-1 again, thus making two passes over\r\r\n ** the pages. On the initial downward pass, only condition (1) above\r\r\n ** needs to be tested because (2) will always be true from the previous\r\r\n ** step. On the upward pass, both conditions are always true, so the\r\r\n ** upwards pass simply processes pages that were missed on the downward\r\r\n ** pass.\r\r\n */\r\r\n for(i=1-nNew; i<nNew; i++){\r\r\n int iPg = i<0 ? -i : i;\r\r\n assert( iPg>=0 && iPg<nNew );\r\r\n if( abDone[iPg] ) continue; /* Skip pages already processed */\r\r\n if( i>=0 /* On the upwards pass, or... */\r\r\n || cntOld[iPg-1]>=cntNew[iPg-1] /* Condition (1) is true */\r\r\n ){\r\r\n int iNew;\r\r\n int iOld;\r\r\n int nNewCell;\r\r\n\r\r\n /* Verify condition (1): If cells are moving left, update iPg\r\r\n ** only after iPg-1 has already been updated. */\r\r\n assert( iPg==0 || cntOld[iPg-1]>=cntNew[iPg-1] || abDone[iPg-1] );\r\r\n\r\r\n /* Verify condition (2): If cells are moving right, update iPg\r\r\n ** only after iPg+1 has already been updated. */\r\r\n assert( cntNew[iPg]>=cntOld[iPg] || abDone[iPg+1] );\r\r\n\r\r\n if( iPg==0 ){\r\r\n iNew = iOld = 0;\r\r\n nNewCell = cntNew[0];\r\r\n }else{\r\r\n iOld = iPg<nOld ? (cntOld[iPg-1] + !leafData) : b.nCell;\r\r\n iNew = cntNew[iPg-1] + !leafData;\r\r\n nNewCell = cntNew[iPg] - iNew;\r\r\n }\r\r\n\r\r\n rc = editPage(apNew[iPg], iOld, iNew, nNewCell, &b);\r\r\n if( rc ) goto balance_cleanup;\r\r\n abDone[iPg]++;\r\r\n apNew[iPg]->nFree = usableSpace-szNew[iPg];\r\r\n assert( apNew[iPg]->nOverflow==0 );\r\r\n assert( apNew[iPg]->nCell==nNewCell );\r\r\n }\r\r\n }\r\r\n\r\r\n /* All pages have been processed exactly once */\r\r\n assert( memcmp(abDone, \"\\01\\01\\01\\01\\01\", nNew)==0 );\r\r\n\r\r\n assert( nOld>0 );\r\r\n assert( nNew>0 );\r\r\n\r\r\n if( isRoot && pParent->nCell==0 && pParent->hdrOffset<=apNew[0]->nFree ){\r\r\n /* The root page of the b-tree now contains no cells. The only sibling\r\r\n ** page is the right-child of the parent. Copy the contents of the\r\r\n ** child page into the parent, decreasing the overall height of the\r\r\n ** b-tree structure by one. This is described as the \"balance-shallower\"\r\r\n ** sub-algorithm in some documentation.\r\r\n **\r\r\n ** If this is an auto-vacuum database, the call to copyNodeContent() \r\r\n ** sets all pointer-map entries corresponding to database image pages \r\r\n ** for which the pointer is stored within the content being copied.\r\r\n **\r\r\n ** It is critical that the child page be defragmented before being\r\r\n ** copied into the parent, because if the parent is page 1 then it will\r\r\n ** by smaller than the child due to the database header, and so all the\r\r\n ** free space needs to be up front.\r\r\n */\r\r\n assert( nNew==1 || CORRUPT_DB );\r\r\n rc = defragmentPage(apNew[0]);\r\r\n testcase( rc!=SQLITE_OK );\r\r\n assert( apNew[0]->nFree == \r\r\n (get2byte(&apNew[0]->aData[5])-apNew[0]->cellOffset-apNew[0]->nCell*2)\r\r\n || rc!=SQLITE_OK\r\r\n );\r\r\n copyNodeContent(apNew[0], pParent, &rc);\r\r\n freePage(apNew[0], &rc);\r\r\n }else if( ISAUTOVACUUM && !leafCorrection ){\r\r\n /* Fix the pointer map entries associated with the right-child of each\r\r\n ** sibling page. All other pointer map entries have already been taken\r\r\n ** care of. */\r\r\n for(i=0; i<nNew; i++){\r\r\n u32 key = get4byte(&apNew[i]->aData[8]);\r\r\n ptrmapPut(pBt, key, PTRMAP_BTREE, apNew[i]->pgno, &rc);\r\r\n }\r\r\n }\r\r\n\r\r\n assert( pParent->isInit );\r\r\n TRACE((\"BALANCE: finished: old=%d new=%d cells=%d\\n\",\r\r\n nOld, nNew, b.nCell));\r\r\n\r\r\n /* Free any old pages that were not reused as new pages.\r\r\n */\r\r\n for(i=nNew; i<nOld; i++){\r\r\n freePage(apOld[i], &rc);\r\r\n }\r\r\n\r\r\n#if 0\r\r\n if( ISAUTOVACUUM && rc==SQLITE_OK && apNew[0]->isInit ){\r\r\n /* The ptrmapCheckPages() contains assert() statements that verify that\r\r\n ** all pointer map pages are set correctly. This is helpful while \r\r\n ** debugging. This is usually disabled because a corrupt database may\r\r\n ** cause an assert() statement to fail. */\r\r\n ptrmapCheckPages(apNew, nNew);\r\r\n ptrmapCheckPages(&pParent, 1);\r\r\n }\r\r\n#endif\r\r\n\r\r\n /*\r\r\n ** Cleanup before returning.\r\r\n */\r\r\nbalance_cleanup:\r\r\n sqlite3ScratchFree(b.apCell);\r\r\n for(i=0; i<nOld; i++){\r\r\n releasePage(apOld[i]);\r\r\n }\r\r\n for(i=0; i<nNew; i++){\r\r\n releasePage(apNew[i]);\r\r\n }\r\r\n\r\r\n return rc;\r\r\n}\r\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "0"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "WORD32 ih264d_video_decode(iv_obj_t *dec_hdl, void *pv_api_ip, void *pv_api_op)\r\r\n{\r\r\n /* ! */\r\r\n\r\r\n dec_struct_t * ps_dec = (dec_struct_t *)(dec_hdl->pv_codec_handle);\r\r\n\r\r\n WORD32 i4_err_status = 0;\r\r\n UWORD8 *pu1_buf = NULL;\r\r\n WORD32 buflen;\r\r\n UWORD32 u4_max_ofst, u4_length_of_start_code = 0;\r\r\n\r\r\n UWORD32 bytes_consumed = 0;\r\r\n UWORD32 cur_slice_is_nonref = 0;\r\r\n UWORD32 u4_next_is_aud;\r\r\n UWORD32 u4_first_start_code_found = 0;\r\r\n WORD32 ret = 0,api_ret_value = IV_SUCCESS;\r\r\n WORD32 header_data_left = 0,frame_data_left = 0;\r\r\n UWORD8 *pu1_bitstrm_buf;\r\r\n ivd_video_decode_ip_t *ps_dec_ip;\r\r\n ivd_video_decode_op_t *ps_dec_op;\r\r\n\r\r\n ithread_set_name((void*)\"Parse_thread\");\r\r\n\r\r\n ps_dec_ip = (ivd_video_decode_ip_t *)pv_api_ip;\r\r\n ps_dec_op = (ivd_video_decode_op_t *)pv_api_op;\r\r\n ps_dec->pv_dec_out = ps_dec_op;\r\r\n if(ps_dec->init_done != 1)\r\r\n {\r\r\n return IV_FAIL;\r\r\n }\r\r\n\r\r\n /*Data memory barries instruction,so that bitstream write by the application is complete*/\r\r\n DATA_SYNC();\r\r\n\r\r\n if(0 == ps_dec->u1_flushfrm)\r\r\n {\r\r\n if(ps_dec_ip->pv_stream_buffer == NULL)\r\r\n {\r\r\n ps_dec_op->u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM;\r\r\n ps_dec_op->u4_error_code |= IVD_DEC_FRM_BS_BUF_NULL;\r\r\n return IV_FAIL;\r\r\n }\r\r\n if(ps_dec_ip->u4_num_Bytes <= 0)\r\r\n {\r\r\n ps_dec_op->u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM;\r\r\n ps_dec_op->u4_error_code |= IVD_DEC_NUMBYTES_INV;\r\r\n return IV_FAIL;\r\r\n\r\r\n }\r\r\n }\r\r\n ps_dec->u1_pic_decode_done = 0;\r\r\n\r\r\n ps_dec_op->u4_num_bytes_consumed = 0;\r\r\n\r\r\n ps_dec->ps_out_buffer = NULL;\r\r\n\r\r\n if(ps_dec_ip->u4_size\r\r\n >= offsetof(ivd_video_decode_ip_t, s_out_buffer))\r\r\n ps_dec->ps_out_buffer = &ps_dec_ip->s_out_buffer;\r\r\n\r\r\n ps_dec->u4_fmt_conv_cur_row = 0;\r\r\n\r\r\n ps_dec->u4_output_present = 0;\r\r\n ps_dec->s_disp_op.u4_error_code = 1;\r\r\n ps_dec->u4_fmt_conv_num_rows = FMT_CONV_NUM_ROWS;\r\r\n if(0 == ps_dec->u4_share_disp_buf\r\r\n && ps_dec->i4_decode_header == 0)\r\r\n {\r\r\n UWORD32 i;\r\r\n if(ps_dec->ps_out_buffer->u4_num_bufs == 0)\r\r\n {\r\r\n ps_dec_op->u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM;\r\r\n ps_dec_op->u4_error_code |= IVD_DISP_FRM_ZERO_OP_BUFS;\r\r\n return IV_FAIL;\r\r\n }\r\r\n\r\r\n for(i = 0; i < ps_dec->ps_out_buffer->u4_num_bufs; i++)\r\r\n {\r\r\n if(ps_dec->ps_out_buffer->pu1_bufs[i] == NULL)\r\r\n {\r\r\n ps_dec_op->u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM;\r\r\n ps_dec_op->u4_error_code |= IVD_DISP_FRM_OP_BUF_NULL;\r\r\n return IV_FAIL;\r\r\n }\r\r\n\r\r\n if(ps_dec->ps_out_buffer->u4_min_out_buf_size[i] == 0)\r\r\n {\r\r\n ps_dec_op->u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM;\r\r\n ps_dec_op->u4_error_code |=\r\r\n IVD_DISP_FRM_ZERO_OP_BUF_SIZE;\r\r\n return IV_FAIL;\r\r\n }\r\r\n }\r\r\n }\r\r\n\r\r\n if(ps_dec->u4_total_frames_decoded >= NUM_FRAMES_LIMIT)\r\r\n {\r\r\n ps_dec_op->u4_error_code = ERROR_FRAME_LIMIT_OVER;\r\r\n return IV_FAIL;\r\r\n }\r\r\n\r\r\n /* ! */\r\r\n ps_dec->u4_ts = ps_dec_ip->u4_ts;\r\r\n\r\r\n ps_dec_op->u4_error_code = 0;\r\r\n ps_dec_op->e_pic_type = -1;\r\r\n ps_dec_op->u4_output_present = 0;\r\r\n ps_dec_op->u4_frame_decoded_flag = 0;\r\r\n\r\r\n ps_dec->i4_frametype = -1;\r\r\n ps_dec->i4_content_type = -1;\r\r\n /*\r\r\n * For field pictures, set the bottom and top picture decoded u4_flag correctly.\r\r\n */\r\r\n {\r\r\n if((TOP_FIELD_ONLY | BOT_FIELD_ONLY) == ps_dec->u1_top_bottom_decoded)\r\r\n {\r\r\n ps_dec->u1_top_bottom_decoded = 0;\r\r\n }\r\r\n }\r\r\n ps_dec->u4_slice_start_code_found = 0;\r\r\n\r\r\n /* In case the deocder is not in flush mode(in shared mode),\r\r\n then decoder has to pick up a buffer to write current frame.\r\r\n Check if a frame is available in such cases */\r\r\n\r\r\n if(ps_dec->u1_init_dec_flag == 1 && ps_dec->u4_share_disp_buf == 1\r\r\n && ps_dec->u1_flushfrm == 0)\r\r\n {\r\r\n UWORD32 i;\r\r\n\r\r\n WORD32 disp_avail = 0, free_id;\r\r\n\r\r\n /* Check if at least one buffer is available with the codec */\r\r\n /* If not then return to application with error */\r\r\n for(i = 0; i < ps_dec->u1_pic_bufs; i++)\r\r\n {\r\r\n if(0 == ps_dec->u4_disp_buf_mapping[i]\r\r\n || 1 == ps_dec->u4_disp_buf_to_be_freed[i])\r\r\n {\r\r\n disp_avail = 1;\r\r\n break;\r\r\n }\r\r\n\r\r\n }\r\r\n\r\r\n if(0 == disp_avail)\r\r\n {\r\r\n /* If something is queued for display wait for that buffer to be returned */\r\r\n\r\r\n ps_dec_op->u4_error_code = IVD_DEC_REF_BUF_NULL;\r\r\n ps_dec_op->u4_error_code |= (1 << IVD_UNSUPPORTEDPARAM);\r\r\n return (IV_FAIL);\r\r\n }\r\r\n\r\r\n while(1)\r\r\n {\r\r\n pic_buffer_t *ps_pic_buf;\r\r\n ps_pic_buf = (pic_buffer_t *)ih264_buf_mgr_get_next_free(\r\r\n (buf_mgr_t *)ps_dec->pv_pic_buf_mgr, &free_id);\r\r\n\r\r\n if(ps_pic_buf == NULL)\r\r\n {\r\r\n UWORD32 i, display_queued = 0;\r\r\n\r\r\n /* check if any buffer was given for display which is not returned yet */\r\r\n for(i = 0; i < (MAX_DISP_BUFS_NEW); i++)\r\r\n {\r\r\n if(0 != ps_dec->u4_disp_buf_mapping[i])\r\r\n {\r\r\n display_queued = 1;\r\r\n break;\r\r\n }\r\r\n }\r\r\n /* If some buffer is queued for display, then codec has to singal an error and wait\r\r\n for that buffer to be returned.\r\r\n If nothing is queued for display then codec has ownership of all display buffers\r\r\n and it can reuse any of the existing buffers and continue decoding */\r\r\n\r\r\n if(1 == display_queued)\r\r\n {\r\r\n /* If something is queued for display wait for that buffer to be returned */\r\r\n ps_dec_op->u4_error_code = IVD_DEC_REF_BUF_NULL;\r\r\n ps_dec_op->u4_error_code |= (1\r\r\n << IVD_UNSUPPORTEDPARAM);\r\r\n return (IV_FAIL);\r\r\n }\r\r\n }\r\r\n else\r\r\n {\r\r\n /* If the buffer is with display, then mark it as in use and then look for a buffer again */\r\r\n if(1 == ps_dec->u4_disp_buf_mapping[free_id])\r\r\n {\r\r\n ih264_buf_mgr_set_status(\r\r\n (buf_mgr_t *)ps_dec->pv_pic_buf_mgr,\r\r\n free_id,\r\r\n BUF_MGR_IO);\r\r\n }\r\r\n else\r\r\n {\r\r\n /**\r\r\n * Found a free buffer for present call. Release it now.\r\r\n * Will be again obtained later.\r\r\n */\r\r\n ih264_buf_mgr_release((buf_mgr_t *)ps_dec->pv_pic_buf_mgr,\r\r\n free_id,\r\r\n BUF_MGR_IO);\r\r\n break;\r\r\n }\r\r\n }\r\r\n }\r\r\n\r\r\n }\r\r\n\r\r\n if(ps_dec->u1_flushfrm && ps_dec->u1_init_dec_flag)\r\r\n {\r\r\n\r\r\n ih264d_get_next_display_field(ps_dec, ps_dec->ps_out_buffer,\r\r\n &(ps_dec->s_disp_op));\r\r\n if(0 == ps_dec->s_disp_op.u4_error_code)\r\r\n {\r\r\n ps_dec->u4_fmt_conv_cur_row = 0;\r\r\n ps_dec->u4_fmt_conv_num_rows = ps_dec->s_disp_frame_info.u4_y_ht;\r\r\n ih264d_format_convert(ps_dec, &(ps_dec->s_disp_op),\r\r\n ps_dec->u4_fmt_conv_cur_row,\r\r\n ps_dec->u4_fmt_conv_num_rows);\r\r\n ps_dec->u4_fmt_conv_cur_row += ps_dec->u4_fmt_conv_num_rows;\r\r\n ps_dec->u4_output_present = 1;\r\r\n\r\r\n }\r\r\n ih264d_release_display_field(ps_dec, &(ps_dec->s_disp_op));\r\r\n\r\r\n ps_dec_op->u4_pic_wd = (UWORD32)ps_dec->u2_disp_width;\r\r\n ps_dec_op->u4_pic_ht = (UWORD32)ps_dec->u2_disp_height;\r\r\n\r\r\n ps_dec_op->u4_new_seq = 0;\r\r\n\r\r\n ps_dec_op->u4_output_present = ps_dec->u4_output_present;\r\r\n ps_dec_op->u4_progressive_frame_flag =\r\r\n ps_dec->s_disp_op.u4_progressive_frame_flag;\r\r\n ps_dec_op->e_output_format =\r\r\n ps_dec->s_disp_op.e_output_format;\r\r\n ps_dec_op->s_disp_frm_buf = ps_dec->s_disp_op.s_disp_frm_buf;\r\r\n ps_dec_op->e4_fld_type = ps_dec->s_disp_op.e4_fld_type;\r\r\n ps_dec_op->u4_ts = ps_dec->s_disp_op.u4_ts;\r\r\n ps_dec_op->u4_disp_buf_id = ps_dec->s_disp_op.u4_disp_buf_id;\r\r\n\r\r\n /*In the case of flush ,since no frame is decoded set pic type as invalid*/\r\r\n ps_dec_op->u4_is_ref_flag = -1;\r\r\n ps_dec_op->e_pic_type = IV_NA_FRAME;\r\r\n ps_dec_op->u4_frame_decoded_flag = 0;\r\r\n\r\r\n if(0 == ps_dec->s_disp_op.u4_error_code)\r\r\n {\r\r\n return (IV_SUCCESS);\r\r\n }\r\r\n else\r\r\n return (IV_FAIL);\r\r\n\r\r\n }\r\r\n if(ps_dec->u1_res_changed == 1)\r\r\n {\r\r\n /*if resolution has changed and all buffers have been flushed, reset decoder*/\r\r\n ih264d_init_decoder(ps_dec);\r\r\n }\r\r\n\r\r\n ps_dec->u4_prev_nal_skipped = 0;\r\r\n\r\r\n ps_dec->u2_cur_mb_addr = 0;\r\r\n ps_dec->u2_total_mbs_coded = 0;\r\r\n ps_dec->u2_cur_slice_num = 0;\r\r\n ps_dec->cur_dec_mb_num = 0;\r\r\n ps_dec->cur_recon_mb_num = 0;\r\r\n ps_dec->u4_first_slice_in_pic = 2;\r\r\n ps_dec->u1_slice_header_done = 0;\r\r\n ps_dec->u1_dangling_field = 0;\r\r\n\r\r\n ps_dec->u4_dec_thread_created = 0;\r\r\n ps_dec->u4_bs_deblk_thread_created = 0;\r\r\n ps_dec->u4_cur_bs_mb_num = 0;\r\r\n\r\r\n DEBUG_THREADS_PRINTF(\" Starting process call\\n\");\r\r\n\r\r\n\r\r\n ps_dec->u4_pic_buf_got = 0;\r\r\n\r\r\n do\r\r\n {\r\r\n WORD32 buf_size;\r\r\n\r\r\n pu1_buf = (UWORD8*)ps_dec_ip->pv_stream_buffer\r\r\n + ps_dec_op->u4_num_bytes_consumed;\r\r\n\r\r\n u4_max_ofst = ps_dec_ip->u4_num_Bytes\r\r\n - ps_dec_op->u4_num_bytes_consumed;\r\r\n\r\r\n /* If dynamic bitstream buffer is not allocated and\r\r\n * header decode is done, then allocate dynamic bitstream buffer\r\r\n */\r\r\n if((NULL == ps_dec->pu1_bits_buf_dynamic) &&\r\r\n (ps_dec->i4_header_decoded & 1))\r\r\n {\r\r\n WORD32 size;\r\r\n\r\r\n void *pv_buf;\r\r\n void *pv_mem_ctxt = ps_dec->pv_mem_ctxt;\r\r\n size = MAX(256000, ps_dec->u2_pic_wd * ps_dec->u2_pic_ht * 3 / 2);\r\r\n pv_buf = ps_dec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n ps_dec->pu1_bits_buf_dynamic = pv_buf;\r\r\n ps_dec->u4_dynamic_bits_buf_size = size;\r\r\n }\r\r\n\r\r\n if(ps_dec->pu1_bits_buf_dynamic)\r\r\n {\r\r\n pu1_bitstrm_buf = ps_dec->pu1_bits_buf_dynamic;\r\r\n buf_size = ps_dec->u4_dynamic_bits_buf_size;\r\r\n }\r\r\n else\r\r\n {\r\r\n pu1_bitstrm_buf = ps_dec->pu1_bits_buf_static;\r\r\n buf_size = ps_dec->u4_static_bits_buf_size;\r\r\n }\r\r\n\r\r\n u4_next_is_aud = 0;\r\r\n\r\r\n buflen = ih264d_find_start_code(pu1_buf, 0, u4_max_ofst,\r\r\n &u4_length_of_start_code,\r\r\n &u4_next_is_aud);\r\r\n\r\r\n if(buflen == -1)\r\r\n buflen = 0;\r\r\n /* Ignore bytes beyond the allocated size of intermediate buffer */\r\r\n buflen = MIN(buflen, buf_size);\r\r\n\r\r\n bytes_consumed = buflen + u4_length_of_start_code;\r\r\n ps_dec_op->u4_num_bytes_consumed += bytes_consumed;\r\r\n\r\r\n {\r\r\n UWORD8 u1_firstbyte, u1_nal_ref_idc;\r\r\n\r\r\n if(ps_dec->i4_app_skip_mode == IVD_SKIP_B)\r\r\n {\r\r\n u1_firstbyte = *(pu1_buf + u4_length_of_start_code);\r\r\n u1_nal_ref_idc = (UWORD8)(NAL_REF_IDC(u1_firstbyte));\r\r\n if(u1_nal_ref_idc == 0)\r\r\n {\r\r\n /*skip non reference frames*/\r\r\n cur_slice_is_nonref = 1;\r\r\n continue;\r\r\n }\r\r\n else\r\r\n {\r\r\n if(1 == cur_slice_is_nonref)\r\r\n {\r\r\n /*We have encountered a referenced frame,return to app*/\r\r\n ps_dec_op->u4_num_bytes_consumed -=\r\r\n bytes_consumed;\r\r\n ps_dec_op->e_pic_type = IV_B_FRAME;\r\r\n ps_dec_op->u4_error_code =\r\r\n IVD_DEC_FRM_SKIPPED;\r\r\n ps_dec_op->u4_error_code |= (1\r\r\n << IVD_UNSUPPORTEDPARAM);\r\r\n ps_dec_op->u4_frame_decoded_flag = 0;\r\r\n ps_dec_op->u4_size =\r\r\n sizeof(ivd_video_decode_op_t);\r\r\n /*signal the decode thread*/\r\r\n ih264d_signal_decode_thread(ps_dec);\r\r\n /* close deblock thread if it is not closed yet*/\r\r\n if(ps_dec->u4_num_cores == 3)\r\r\n {\r\r\n ih264d_signal_bs_deblk_thread(ps_dec);\r\r\n }\r\r\n\r\r\n return (IV_FAIL);\r\r\n }\r\r\n }\r\r\n\r\r\n }\r\r\n\r\r\n }\r\r\n\r\r\n\r\r\n if(buflen)\r\r\n {\r\r\n memcpy(pu1_bitstrm_buf, pu1_buf + u4_length_of_start_code,\r\r\n buflen);\r\r\n /* Decoder may read extra 8 bytes near end of the frame */\r\r\n if((buflen + 8) < buf_size)\r\r\n {\r\r\n memset(pu1_bitstrm_buf + buflen, 0, 8);\r\r\n }\r\r\n u4_first_start_code_found = 1;\r\r\n\r\r\n }\r\r\n else\r\r\n {\r\r\n /*start code not found*/\r\r\n\r\r\n if(u4_first_start_code_found == 0)\r\r\n {\r\r\n /*no start codes found in current process call*/\r\r\n\r\r\n ps_dec->i4_error_code = ERROR_START_CODE_NOT_FOUND;\r\r\n ps_dec_op->u4_error_code |= 1 << IVD_INSUFFICIENTDATA;\r\r\n\r\r\n if(ps_dec->u4_pic_buf_got == 0)\r\r\n {\r\r\n\r\r\n ih264d_fill_output_struct_from_context(ps_dec,\r\r\n ps_dec_op);\r\r\n\r\r\n ps_dec_op->u4_error_code = ps_dec->i4_error_code;\r\r\n ps_dec_op->u4_frame_decoded_flag = 0;\r\r\n\r\r\n return (IV_FAIL);\r\r\n }\r\r\n else\r\r\n {\r\r\n ps_dec->u1_pic_decode_done = 1;\r\r\n continue;\r\r\n }\r\r\n }\r\r\n else\r\r\n {\r\r\n /* a start code has already been found earlier in the same process call*/\r\r\n frame_data_left = 0;\r\r\n continue;\r\r\n }\r\r\n\r\r\n }\r\r\n\r\r\n ps_dec->u4_return_to_app = 0;\r\r\n ret = ih264d_parse_nal_unit(dec_hdl, ps_dec_op,\r\r\n pu1_bitstrm_buf, buflen);\r\r\n if(ret != OK)\r\r\n {\r\r\n UWORD32 error = ih264d_map_error(ret);\r\r\n ps_dec_op->u4_error_code = error | ret;\r\r\n api_ret_value = IV_FAIL;\r\r\n\r\r\n if((ret == IVD_RES_CHANGED)\r\r\n || (ret == IVD_MEM_ALLOC_FAILED)\r\r\n || (ret == ERROR_UNAVAIL_PICBUF_T)\r\r\n || (ret == ERROR_UNAVAIL_MVBUF_T))\r\r\n {\r\r\n break;\r\r\n }\r\r\n\r\r\n if((ret == ERROR_INCOMPLETE_FRAME) || (ret == ERROR_DANGLING_FIELD_IN_PIC))\r\r\n {\r\r\n ps_dec_op->u4_num_bytes_consumed -= bytes_consumed;\r\r\n api_ret_value = IV_FAIL;\r\r\n break;\r\r\n }\r\r\n\r\r\n if(ret == ERROR_IN_LAST_SLICE_OF_PIC)\r\r\n {\r\r\n api_ret_value = IV_FAIL;\r\r\n break;\r\r\n }\r\r\n\r\r\n }\r\r\n\r\r\n if(ps_dec->u4_return_to_app)\r\r\n {\r\r\n /*We have encountered a referenced frame,return to app*/\r\r\n ps_dec_op->u4_num_bytes_consumed -= bytes_consumed;\r\r\n ps_dec_op->u4_error_code = IVD_DEC_FRM_SKIPPED;\r\r\n ps_dec_op->u4_error_code |= (1 << IVD_UNSUPPORTEDPARAM);\r\r\n ps_dec_op->u4_frame_decoded_flag = 0;\r\r\n ps_dec_op->u4_size = sizeof(ivd_video_decode_op_t);\r\r\n /*signal the decode thread*/\r\r\n ih264d_signal_decode_thread(ps_dec);\r\r\n /* close deblock thread if it is not closed yet*/\r\r\n if(ps_dec->u4_num_cores == 3)\r\r\n {\r\r\n ih264d_signal_bs_deblk_thread(ps_dec);\r\r\n }\r\r\n return (IV_FAIL);\r\r\n\r\r\n }\r\r\n\r\r\n\r\r\n\r\r\n header_data_left = ((ps_dec->i4_decode_header == 1)\r\r\n && (ps_dec->i4_header_decoded != 3)\r\r\n && (ps_dec_op->u4_num_bytes_consumed\r\r\n < ps_dec_ip->u4_num_Bytes));\r\r\n frame_data_left = (((ps_dec->i4_decode_header == 0)\r\r\n && ((ps_dec->u1_pic_decode_done == 0)\r\r\n || (u4_next_is_aud == 1)))\r\r\n && (ps_dec_op->u4_num_bytes_consumed\r\r\n < ps_dec_ip->u4_num_Bytes));\r\r\n }\r\r\n while(( header_data_left == 1)||(frame_data_left == 1));\r\r\n\r\r\n if((ps_dec->u4_slice_start_code_found == 1)\r\r\n && (ret != IVD_MEM_ALLOC_FAILED)\r\r\n && ps_dec->u2_total_mbs_coded < ps_dec->u2_frm_ht_in_mbs * ps_dec->u2_frm_wd_in_mbs)\r\r\n {\r\r\n WORD32 num_mb_skipped;\r\r\n WORD32 prev_slice_err;\r\r\n pocstruct_t temp_poc;\r\r\n WORD32 ret1;\r\r\n\r\r\n num_mb_skipped = (ps_dec->u2_frm_ht_in_mbs * ps_dec->u2_frm_wd_in_mbs)\r\r\n - ps_dec->u2_total_mbs_coded;\r\r\n\r\r\n if(ps_dec->u4_first_slice_in_pic && (ps_dec->u4_pic_buf_got == 0))\r\r\n prev_slice_err = 1;\r\r\n else\r\r\n prev_slice_err = 2;\r\r\n\r\r\n ret1 = ih264d_mark_err_slice_skip(ps_dec, num_mb_skipped, ps_dec->u1_nal_unit_type == IDR_SLICE_NAL, ps_dec->ps_cur_slice->u2_frame_num,\r\r\n &temp_poc, prev_slice_err);\r\r\n\r\r\n if((ret1 == ERROR_UNAVAIL_PICBUF_T) || (ret1 == ERROR_UNAVAIL_MVBUF_T))\r\r\n {\r\r\n return IV_FAIL;\r\r\n }\r\r\n }\r\r\n\r\r\n if((ret == IVD_RES_CHANGED)\r\r\n || (ret == IVD_MEM_ALLOC_FAILED)\r\r\n || (ret == ERROR_UNAVAIL_PICBUF_T)\r\r\n || (ret == ERROR_UNAVAIL_MVBUF_T))\r\r\n {\r\r\n\r\r\n /* signal the decode thread */\r\r\n ih264d_signal_decode_thread(ps_dec);\r\r\n /* close deblock thread if it is not closed yet */\r\r\n if(ps_dec->u4_num_cores == 3)\r\r\n {\r\r\n ih264d_signal_bs_deblk_thread(ps_dec);\r\r\n }\r\r\n /* dont consume bitstream for change in resolution case */\r\r\n if(ret == IVD_RES_CHANGED)\r\r\n {\r\r\n ps_dec_op->u4_num_bytes_consumed -= bytes_consumed;\r\r\n }\r\r\n return IV_FAIL;\r\r\n }\r\r\n\r\r\n\r\r\n if(ps_dec->u1_separate_parse)\r\r\n {\r\r\n /* If Format conversion is not complete,\r\r\n complete it here */\r\r\n if(ps_dec->u4_num_cores == 2)\r\r\n {\r\r\n\r\r\n /*do deblocking of all mbs*/\r\r\n if((ps_dec->u4_nmb_deblk == 0) &&(ps_dec->u4_start_recon_deblk == 1) && (ps_dec->ps_cur_sps->u1_mb_aff_flag == 0))\r\r\n {\r\r\n UWORD32 u4_num_mbs,u4_max_addr;\r\r\n tfr_ctxt_t s_tfr_ctxt;\r\r\n tfr_ctxt_t *ps_tfr_cxt = &s_tfr_ctxt;\r\r\n pad_mgr_t *ps_pad_mgr = &ps_dec->s_pad_mgr;\r\r\n\r\r\n /*BS is done for all mbs while parsing*/\r\r\n u4_max_addr = (ps_dec->u2_frm_wd_in_mbs * ps_dec->u2_frm_ht_in_mbs) - 1;\r\r\n ps_dec->u4_cur_bs_mb_num = u4_max_addr + 1;\r\r\n\r\r\n\r\r\n ih264d_init_deblk_tfr_ctxt(ps_dec, ps_pad_mgr, ps_tfr_cxt,\r\r\n ps_dec->u2_frm_wd_in_mbs, 0);\r\r\n\r\r\n\r\r\n u4_num_mbs = u4_max_addr\r\r\n - ps_dec->u4_cur_deblk_mb_num + 1;\r\r\n\r\r\n DEBUG_PERF_PRINTF(\"mbs left for deblocking= %d \\n\",u4_num_mbs);\r\r\n\r\r\n if(u4_num_mbs != 0)\r\r\n ih264d_check_mb_map_deblk(ps_dec, u4_num_mbs,\r\r\n ps_tfr_cxt,1);\r\r\n\r\r\n ps_dec->u4_start_recon_deblk = 0;\r\r\n\r\r\n }\r\r\n\r\r\n }\r\r\n\r\r\n /*signal the decode thread*/\r\r\n ih264d_signal_decode_thread(ps_dec);\r\r\n /* close deblock thread if it is not closed yet*/\r\r\n if(ps_dec->u4_num_cores == 3)\r\r\n {\r\r\n ih264d_signal_bs_deblk_thread(ps_dec);\r\r\n }\r\r\n }\r\r\n\r\r\n\r\r\n DATA_SYNC();\r\r\n\r\r\n\r\r\n if((ps_dec_op->u4_error_code & 0xff)\r\r\n != ERROR_DYNAMIC_RESOLUTION_NOT_SUPPORTED)\r\r\n {\r\r\n ps_dec_op->u4_pic_wd = (UWORD32)ps_dec->u2_disp_width;\r\r\n ps_dec_op->u4_pic_ht = (UWORD32)ps_dec->u2_disp_height;\r\r\n }\r\r\n\r\r\n if(ps_dec->i4_header_decoded != 3)\r\r\n {\r\r\n ps_dec_op->u4_error_code |= (1 << IVD_INSUFFICIENTDATA);\r\r\n\r\r\n }\r\r\n\r\r\n if(ps_dec->i4_decode_header == 1 && ps_dec->i4_header_decoded != 3)\r\r\n {\r\r\n ps_dec_op->u4_error_code |= (1 << IVD_INSUFFICIENTDATA);\r\r\n\r\r\n }\r\r\n if(ps_dec->u4_prev_nal_skipped)\r\r\n {\r\r\n /*We have encountered a referenced frame,return to app*/\r\r\n ps_dec_op->u4_error_code = IVD_DEC_FRM_SKIPPED;\r\r\n ps_dec_op->u4_error_code |= (1 << IVD_UNSUPPORTEDPARAM);\r\r\n ps_dec_op->u4_frame_decoded_flag = 0;\r\r\n ps_dec_op->u4_size = sizeof(ivd_video_decode_op_t);\r\r\n /* close deblock thread if it is not closed yet*/\r\r\n if(ps_dec->u4_num_cores == 3)\r\r\n {\r\r\n ih264d_signal_bs_deblk_thread(ps_dec);\r\r\n }\r\r\n return (IV_FAIL);\r\r\n\r\r\n }\r\r\n\r\r\n if((ps_dec->u4_slice_start_code_found == 1)\r\r\n && (ERROR_DANGLING_FIELD_IN_PIC != i4_err_status))\r\r\n {\r\r\n /*\r\r\n * For field pictures, set the bottom and top picture decoded u4_flag correctly.\r\r\n */\r\r\n\r\r\n if(ps_dec->ps_cur_slice->u1_field_pic_flag)\r\r\n {\r\r\n if(1 == ps_dec->ps_cur_slice->u1_bottom_field_flag)\r\r\n {\r\r\n ps_dec->u1_top_bottom_decoded |= BOT_FIELD_ONLY;\r\r\n }\r\r\n else\r\r\n {\r\r\n ps_dec->u1_top_bottom_decoded |= TOP_FIELD_ONLY;\r\r\n }\r\r\n }\r\r\n\r\r\n /* if new frame in not found (if we are still getting slices from previous frame)\r\r\n * ih264d_deblock_display is not called. Such frames will not be added to reference /display\r\r\n */\r\r\n if((ps_dec->ps_dec_err_status->u1_err_flag & REJECT_CUR_PIC) == 0)\r\r\n {\r\r\n /* Calling Function to deblock Picture and Display */\r\r\n ret = ih264d_deblock_display(ps_dec);\r\r\n if(ret != 0)\r\r\n {\r\r\n return IV_FAIL;\r\r\n }\r\r\n }\r\r\n\r\r\n\r\r\n /*set to complete ,as we dont support partial frame decode*/\r\r\n if(ps_dec->i4_header_decoded == 3)\r\r\n {\r\r\n ps_dec->u2_total_mbs_coded = ps_dec->ps_cur_sps->u2_max_mb_addr + 1;\r\r\n }\r\r\n\r\r\n /*Update the i4_frametype at the end of picture*/\r\r\n if(ps_dec->ps_cur_slice->u1_nal_unit_type == IDR_SLICE_NAL)\r\r\n {\r\r\n ps_dec->i4_frametype = IV_IDR_FRAME;\r\r\n }\r\r\n else if(ps_dec->i4_pic_type == B_SLICE)\r\r\n {\r\r\n ps_dec->i4_frametype = IV_B_FRAME;\r\r\n }\r\r\n else if(ps_dec->i4_pic_type == P_SLICE)\r\r\n {\r\r\n ps_dec->i4_frametype = IV_P_FRAME;\r\r\n }\r\r\n else if(ps_dec->i4_pic_type == I_SLICE)\r\r\n {\r\r\n ps_dec->i4_frametype = IV_I_FRAME;\r\r\n }\r\r\n else\r\r\n {\r\r\n H264_DEC_DEBUG_PRINT(\"Shouldn't come here\\n\");\r\r\n }\r\r\n\r\r\n ps_dec->i4_content_type = ps_dec->ps_cur_slice->u1_field_pic_flag;\r\r\n\r\r\n ps_dec->u4_total_frames_decoded = ps_dec->u4_total_frames_decoded + 2;\r\r\n ps_dec->u4_total_frames_decoded = ps_dec->u4_total_frames_decoded\r\r\n - ps_dec->ps_cur_slice->u1_field_pic_flag;\r\r\n\r\r\n }\r\r\n\r\r\n /* close deblock thread if it is not closed yet*/\r\r\n if(ps_dec->u4_num_cores == 3)\r\r\n {\r\r\n ih264d_signal_bs_deblk_thread(ps_dec);\r\r\n }\r\r\n\r\r\n\r\r\n {\r\r\n /* In case the decoder is configured to run in low delay mode,\r\r\n * then get display buffer and then format convert.\r\r\n * Note in this mode, format conversion does not run paralelly in a thread and adds to the codec cycles\r\r\n */\r\r\n\r\r\n if((IVD_DECODE_FRAME_OUT == ps_dec->e_frm_out_mode)\r\r\n && ps_dec->u1_init_dec_flag)\r\r\n {\r\r\n\r\r\n ih264d_get_next_display_field(ps_dec, ps_dec->ps_out_buffer,\r\r\n &(ps_dec->s_disp_op));\r\r\n if(0 == ps_dec->s_disp_op.u4_error_code)\r\r\n {\r\r\n ps_dec->u4_fmt_conv_cur_row = 0;\r\r\n ps_dec->u4_output_present = 1;\r\r\n }\r\r\n }\r\r\n\r\r\n ih264d_fill_output_struct_from_context(ps_dec, ps_dec_op);\r\r\n\r\r\n /* If Format conversion is not complete,\r\r\n complete it here */\r\r\n if(ps_dec->u4_output_present &&\r\r\n (ps_dec->u4_fmt_conv_cur_row < ps_dec->s_disp_frame_info.u4_y_ht))\r\r\n {\r\r\n ps_dec->u4_fmt_conv_num_rows = ps_dec->s_disp_frame_info.u4_y_ht\r\r\n - ps_dec->u4_fmt_conv_cur_row;\r\r\n ih264d_format_convert(ps_dec, &(ps_dec->s_disp_op),\r\r\n ps_dec->u4_fmt_conv_cur_row,\r\r\n ps_dec->u4_fmt_conv_num_rows);\r\r\n ps_dec->u4_fmt_conv_cur_row += ps_dec->u4_fmt_conv_num_rows;\r\r\n }\r\r\n\r\r\n ih264d_release_display_field(ps_dec, &(ps_dec->s_disp_op));\r\r\n }\r\r\n\r\r\n if(ps_dec->i4_decode_header == 1 && (ps_dec->i4_header_decoded & 1) == 1)\r\r\n {\r\r\n ps_dec_op->u4_progressive_frame_flag = 1;\r\r\n if((NULL != ps_dec->ps_cur_sps) && (1 == (ps_dec->ps_cur_sps->u1_is_valid)))\r\r\n {\r\r\n if((0 == ps_dec->ps_sps->u1_frame_mbs_only_flag)\r\r\n && (0 == ps_dec->ps_sps->u1_mb_aff_flag))\r\r\n ps_dec_op->u4_progressive_frame_flag = 0;\r\r\n\r\r\n }\r\r\n }\r\r\n\r\r\n /*Data memory barrier instruction,so that yuv write by the library is complete*/\r\r\n DATA_SYNC();\r\r\n\r\r\n H264_DEC_DEBUG_PRINT(\"The num bytes consumed: %d\\n\",\r\r\n ps_dec_op->u4_num_bytes_consumed);\r\r\n return api_ret_value;\r\r\n}\r\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "0"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n\r\n#include \"cryptlib.h\"\r\n#include <openssl/safestack.h>\r\n#if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_WIN16)\r\n\r\n#endif\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include </trace.h> \r\n\r\nstruct stack_st_CRYPTO_dynlock \r\n{\r\n _STACK stack;\r\n}\r\n;\r\n\r\nstatic const char *const lock_names[41] = {(\"<<ERROR>>\"), (\"err\"), (\"ex_data\"), (\"x509\"), (\"x509_info\"), (\"x509_pkey\"), (\"x509_crl\"), (\"x509_req\"), (\"dsa\"), (\"rsa\"), (\"evp_pkey\"), (\"x509_store\"), (\"ssl_ctx\"), (\"ssl_cert\"), (\"ssl_session\"), (\"ssl_sess_cert\"), (\"ssl\"), (\"ssl_method\"), (\"rand\"), (\"rand2\"), (\"debug_malloc\"), (\"BIO\"), (\"gethostbyname\"), (\"getservbyname\"), (\"readdir\"), (\"RSA_blinding\"), (\"dh\"), (\"debug_malloc2\"), (\"dso\"), (\"dynlock\"), (\"engine\"), (\"ui\"), (\"ecdsa\"), (\"ec\"), (\"ecdh\"), (\"bn\"), (\"ec_pre_comp\"), (\"store\"), (\"comp\"), (\"fips\"), (\"fips2\")\r\n#if CRYPTO_NUM_LOCKS != 41\r\n# error \"Inconsistency between crypto.h and cryptlib.c\"\r\n#endif\r\n};\r\n\r\nstatic struct stack_st_OPENSSL_STRING *app_locks = ((void *)0);\r\n\r\nstatic struct stack_st_CRYPTO_dynlock *dyn_locks = ((void *)0);\r\nstatic void (*locking_callback)(int , int , const char *, int ) = 0;\r\nstatic int (*add_lock_callback)(int *, int , int , const char *, int ) = 0;\r\n#ifndef OPENSSL_NO_DEPRECATED\r\nstatic unsigned long (*id_callback)() = 0;\r\n#endif\r\nstatic void (*threadid_callback)(CRYPTO_THREADID *) = 0;\r\nstatic struct CRYPTO_dynlock_value *(*dynlock_create_callback)(const char *, int ) = 0;\r\nstatic void (*dynlock_lock_callback)(int , struct CRYPTO_dynlock_value *, const char *, int ) = 0;\r\nstatic void (*dynlock_destroy_callback)(struct CRYPTO_dynlock_value *, const char *, int ) = 0;\r\nint caprylic_airfields = 0;\r\nint global_variable;\r\n\r\nunion themistian_ingles \r\n{\r\n char *launch_sherm;\r\n double satisfiedly_subarticulately;\r\n char *monos_parodontium;\r\n char eloiners_alans;\r\n int cervicitis_sabian;\r\n}\r\n;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid dandis_needlebook(int botulin_baddest,union themistian_ingles guffaws_butylates);\r\nvoid balkanite_hesychastic(int skidproof_analphabetic,union themistian_ingles sialosemeiology_atavist);\r\n\r\nint CRYPTO_get_new_lockid(char *name)\r\n{\r\n char *str;\r\n int i;\r\n#if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_WIN16)\r\n\r\n#endif\r\n if (app_locks == ((void *)0) && (app_locks = ((struct stack_st_OPENSSL_STRING *)(sk_new_null()))) == ((void *)0)) {\r\n ERR_put_error(15,101,1 | 64,\"cryptlib.c\",215);\r\n return 0;\r\n }\r\n if ((str = BUF_strdup(name)) == ((void *)0)) {\r\n ERR_put_error(15,101,1 | 64,\"cryptlib.c\",220);\r\n return 0;\r\n }\r\n i = sk_push(((_STACK *)((1?app_locks : ((struct stack_st_OPENSSL_STRING *)0)))),((void *)((1?str : ((char *)0)))));\r\n if (!i) {\r\n CRYPTO_free(str);\r\n }\r\n else {\r\n\r\n i += 41;\r\n }\r\n return i;\r\n}\r\n\r\nint CRYPTO_num_locks()\r\n{\r\n return 41;\r\n}\r\n\r\nint CRYPTO_get_new_dynlockid()\r\n{\r\n int i = 0;\r\n CRYPTO_dynlock *pointer = ((void *)0);\r\n if (dynlock_create_callback == ((void *)0)) {\r\n ERR_put_error(15,103,100,\"cryptlib.c\",243);\r\n return 0;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",246);\r\n if (dyn_locks == ((void *)0) && (dyn_locks = ((struct stack_st_CRYPTO_dynlock *)(sk_new_null()))) == ((void *)0)) {\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",250);\r\n ERR_put_error(15,103,1 | 64,\"cryptlib.c\",251);\r\n return 0;\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",254);\r\n pointer = ((CRYPTO_dynlock *)(CRYPTO_malloc(((int )(sizeof(CRYPTO_dynlock ))),\"cryptlib.c\",256)));\r\n if (pointer == ((void *)0)) {\r\n ERR_put_error(15,103,1 | 64,\"cryptlib.c\",259);\r\n return 0;\r\n }\r\n pointer -> references = 1;\r\n pointer -> data = dynlock_create_callback(\"cryptlib.c\",263);\r\n if (pointer -> data == ((void *)0)) {\r\n CRYPTO_free(pointer);\r\n ERR_put_error(15,103,1 | 64,\"cryptlib.c\",267);\r\n return 0;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",271);\r\n\r\n i = sk_find(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),((void *)((1?((void *)0) : ((CRYPTO_dynlock *)0)))));\r\n\r\n if (i == - 1) {\r\n\r\n i = sk_push(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),((void *)((1?pointer : ((CRYPTO_dynlock *)0))))) - 1;\r\n }\r\n else {\r\n\r\n (void )(sk_set(((_STACK *)(1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0))),i,((void *)(1?pointer : ((CRYPTO_dynlock *)0)))));\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",285);\r\n if (i == - 1) {\r\n dynlock_destroy_callback(pointer -> data,\"cryptlib.c\",289);\r\n CRYPTO_free(pointer);\r\n }\r\n else {\r\n\r\n i += 1;\r\n }\r\n return -i;\r\n}\r\n\r\nvoid CRYPTO_destroy_dynlockid(int i)\r\n{\r\n CRYPTO_dynlock *pointer = ((void *)0);\r\n if (i) {\r\n i = -i - 1;\r\n }\r\n if (dynlock_destroy_callback == ((void *)0)) {\r\n return ;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",305);\r\n if (dyn_locks == ((void *)0) || i >= sk_num(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))))) {\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",309);\r\n return ;\r\n }\r\n pointer = ((CRYPTO_dynlock *)(sk_value(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),i)));\r\n if (pointer != ((void *)0)) {\r\n --pointer -> references;\r\n#ifdef REF_CHECK\r\n#endif\r\n if (pointer -> references <= 0) {\r\n (void )(sk_set(((_STACK *)(1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0))),i,((void *)(1?((void *)0) : ((CRYPTO_dynlock *)0)))));\r\n }\r\n else {\r\n pointer = ((void *)0);\r\n }\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",331);\r\n if (pointer) {\r\n dynlock_destroy_callback(pointer -> data,\"cryptlib.c\",335);\r\n CRYPTO_free(pointer);\r\n }\r\n}\r\n\r\nstruct CRYPTO_dynlock_value *CRYPTO_get_dynlock_value(int i)\r\n{\r\n CRYPTO_dynlock *pointer = ((void *)0);\r\n if (i) {\r\n i = -i - 1;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",346);\r\n if (dyn_locks != ((void *)0) && i < sk_num(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))))) {\r\n pointer = ((CRYPTO_dynlock *)(sk_value(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),i)));\r\n }\r\n if (pointer) {\r\n pointer -> references++;\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",353);\r\n if (pointer) {\r\n return pointer -> data;\r\n }\r\n return ((void *)0);\r\n}\r\n\r\nstruct CRYPTO_dynlock_value *(*CRYPTO_get_dynlock_create_callback())(const char *, int )\r\n{\r\n return dynlock_create_callback;\r\n}\r\n\r\nvoid (*CRYPTO_get_dynlock_lock_callback())(int , struct CRYPTO_dynlock_value *, const char *, int )\r\n{\r\n return dynlock_lock_callback;\r\n}\r\n\r\nvoid (*CRYPTO_get_dynlock_destroy_callback())(struct CRYPTO_dynlock_value *, const char *, int )\r\n{\r\n return dynlock_destroy_callback;\r\n}\r\n\r\nvoid CRYPTO_set_dynlock_create_callback(struct CRYPTO_dynlock_value *(*func)(const char *, int ))\r\n{\r\n dynlock_create_callback = func;\r\n}\r\n\r\nvoid CRYPTO_set_dynlock_lock_callback(void (*func)(int , struct CRYPTO_dynlock_value *, const char *, int ))\r\n{\r\n dynlock_lock_callback = func;\r\n}\r\n\r\nvoid CRYPTO_set_dynlock_destroy_callback(void (*func)(struct CRYPTO_dynlock_value *, const char *, int ))\r\n{\r\n dynlock_destroy_callback = func;\r\n}\r\n\r\nvoid (*CRYPTO_get_locking_callback())(int , int , const char *, int )\r\n{\r\n return locking_callback;\r\n}\r\n\r\nint (*CRYPTO_get_add_lock_callback())(int *, int , int , const char *, int )\r\n{\r\n return add_lock_callback;\r\n}\r\n\r\nvoid CRYPTO_set_locking_callback(void (*func)(int , int , const char *, int ))\r\n{\r\n\r\n OPENSSL_init();\r\n locking_callback = func;\r\n}\r\n\r\nvoid CRYPTO_set_add_lock_callback(int (*func)(int *, int , int , const char *, int ))\r\n{\r\n add_lock_callback = func;\r\n}\r\n\r\n\r\nvoid CRYPTO_THREADID_set_numeric(CRYPTO_THREADID *id,unsigned long val)\r\n{\r\n memset(id,0,sizeof(( *id)));\r\n id -> val = val;\r\n}\r\nstatic const unsigned char hash_coeffs[] = {(3), (5), (7), (11), (13), (17), (19), (23)};\r\n\r\nvoid CRYPTO_THREADID_set_pointer(CRYPTO_THREADID *id,void *ptr)\r\n{\r\n unsigned char *dest = ((void *)(&id -> val));\r\n unsigned int accum = 0;\r\n unsigned char dnum = (sizeof(id -> val));\r\n memset(id,0,sizeof(( *id)));\r\n id -> ptr = ptr;\r\n if (sizeof(id -> val) >= sizeof(id -> ptr)) {\r\n\r\n id -> val = ((unsigned long )(id -> ptr));\r\n return ;\r\n }\r\n\r\n while(dnum--){\r\n const unsigned char *src = ((void *)(&id -> ptr));\r\n unsigned char snum = (sizeof(id -> ptr));\r\n while(snum--)\r\n accum += (( *(src++)) * hash_coeffs[snum + dnum & 7]);\r\n accum += dnum;\r\n *(dest++) = (accum & 255);\r\n }\r\n}\r\n\r\nint CRYPTO_THREADID_set_callback(void (*func)(CRYPTO_THREADID *))\r\n{\r\n if (threadid_callback) {\r\n return 0;\r\n }\r\n threadid_callback = func;\r\n return 1;\r\n}\r\n\r\nvoid (*CRYPTO_THREADID_get_callback())(CRYPTO_THREADID *)\r\n{\r\n return threadid_callback;\r\n}\r\n\r\nvoid CRYPTO_THREADID_current(CRYPTO_THREADID *id)\r\n{\r\n if (threadid_callback) {\r\n threadid_callback(id);\r\n return ;\r\n }\r\n#ifndef OPENSSL_NO_DEPRECATED\r\n\r\n if (id_callback) {\r\n CRYPTO_THREADID_set_numeric(id,id_callback());\r\n return ;\r\n }\r\n#endif\r\n\r\n#ifdef OPENSSL_SYS_WIN16\r\n#elif defined(OPENSSL_SYS_WIN32)\r\n#elif defined(OPENSSL_SYS_BEOS)\r\n#else\r\n\r\n CRYPTO_THREADID_set_pointer(id,((void *)(__errno_location())));\r\n#endif\r\n}\r\n\r\nint CRYPTO_THREADID_cmp(const CRYPTO_THREADID *a,const CRYPTO_THREADID *b)\r\n{\r\n return memcmp(a,b,sizeof(( *a)));\r\n}\r\n\r\nvoid CRYPTO_THREADID_cpy(CRYPTO_THREADID *dest,const CRYPTO_THREADID *src)\r\n{\r\n memcpy(dest,src,sizeof(( *src)));\r\n}\r\n\r\nunsigned long CRYPTO_THREADID_hash(const CRYPTO_THREADID *id)\r\n{\r\n return id -> val;\r\n}\r\n#ifndef OPENSSL_NO_DEPRECATED\r\n\r\nunsigned long (*CRYPTO_get_id_callback())()\r\n{\r\n return id_callback;\r\n}\r\n\r\nvoid CRYPTO_set_id_callback(unsigned long (*func)())\r\n{\r\n id_callback = func;\r\n}\r\n\r\nunsigned long CRYPTO_thread_id()\r\n{\r\n unsigned long ret = 0;\r\n if (id_callback == ((void *)0)) {\r\n#ifdef OPENSSL_SYS_WIN16\r\n#elif defined(OPENSSL_SYS_WIN32)\r\n#elif defined(GETPID_IS_MEANINGLESS)\r\n#elif defined(OPENSSL_SYS_BEOS)\r\n#else\r\n ret = ((unsigned long )(getpid()));\r\n#endif\r\n }\r\n else {\r\n ret = id_callback();\r\n }\r\n return ret;\r\n}\r\n#endif\r\n\r\nvoid CRYPTO_lock(int mode,int type,const char *file,int line)\r\n{\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n if (type < 0) {\r\n if (dynlock_lock_callback != ((void *)0)) {\r\n struct CRYPTO_dynlock_value *pointer = CRYPTO_get_dynlock_value(type);\r\n (void )(pointer != ((void *)0)?0 : ((OpenSSLDie(\"cryptlib.c\",595,\"pointer != NULL\") , 1)));\r\n dynlock_lock_callback(mode,pointer,file,line);\r\n CRYPTO_destroy_dynlockid(type);\r\n }\r\n }\r\n else {\r\n if (locking_callback != ((void *)0)) {\r\n locking_callback(mode,type,file,line);\r\n }\r\n }\r\n}\r\n\r\nint CRYPTO_add_lock(int *pointer,int amount,int type,const char *file,int line)\r\n{\r\n int melilite_spittles = 7;\r\n union themistian_ingles preincreasing_strictish;\r\n int toastable_pontypool = 13;\r\n char *grecomania_negritise;\r\n int ret = 0;\r\n if (__sync_bool_compare_and_swap(&caprylic_airfields,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&grecomania_negritise,\"4921\",toastable_pontypool);\r\n if (grecomania_negritise != 0) {;\r\n preincreasing_strictish . launch_sherm = grecomania_negritise;\r\n dandis_needlebook(melilite_spittles,preincreasing_strictish);\r\n }\r\n }\r\n }\r\n if (add_lock_callback != ((void *)0)) {\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n ret = add_lock_callback(pointer,amount,type,file,line);\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n }\r\n else {\r\n CRYPTO_lock(1 | 8,type,file,line);\r\n ret = *pointer + amount;\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n *pointer = ret;\r\n CRYPTO_lock(2 | 8,type,file,line);\r\n }\r\n return ret;\r\n}\r\n\r\nconst char *CRYPTO_get_lock_name(int type)\r\n{\r\n if (type < 0) {\r\n return \"dynamic\";\r\n }\r\n else {\r\n if (type < 41) {\r\n return lock_names[type];\r\n }\r\n else {\r\n if (type - 41 > sk_num(((_STACK *)((1?app_locks : ((struct stack_st_OPENSSL_STRING *)0)))))) {\r\n return \"ERROR\";\r\n }\r\n else {\r\n return ((OPENSSL_STRING )(sk_value(((_STACK *)(1?app_locks : ((struct stack_st_OPENSSL_STRING *)0))),type - 41)));\r\n }\r\n }\r\n }\r\n}\r\n#if\tdefined(__i386) || defined(__i386__) || defined(_M_IX86) || \\\r\n\tdefined(__INTEL__) || \\\r\n\tdefined(__x86_64) || defined(__x86_64__) || defined(_M_AMD64) || defined(_M_X64)\r\nunsigned int OPENSSL_ia32cap_P[2];\r\n\r\nunsigned long *OPENSSL_ia32cap_loc()\r\n{\r\n if (sizeof(long ) == 4) {\r\n\r\n OPENSSL_ia32cap_P[1] = 0;\r\n }\r\n return (unsigned long *)OPENSSL_ia32cap_P;\r\n}\r\n#if defined(OPENSSL_CPUID_OBJ) && !defined(OPENSSL_NO_ASM) && !defined(I386_ONLY)\r\n#define OPENSSL_CPUID_SETUP\r\n#if defined(_WIN32)\r\n#else\r\ntypedef unsigned long long IA32CAP;\r\n#endif\r\n\r\nvoid OPENSSL_cpuid_setup()\r\n{\r\n static int trigger = 0;\r\n extern IA32CAP OPENSSL_ia32_cpuid();\r\n IA32CAP vec;\r\n char *env;\r\n if (trigger) {\r\n return ;\r\n }\r\n trigger = 1;\r\n if (env = getenv(\"OPENSSL_ia32cap\")) {\r\n int off = env[0] == '~'?1 : 0;\r\n#if defined(_WIN32)\r\n#else\r\n if (!sscanf((env + off),\"%lli\",((long long *)(&vec)))) {\r\n vec = (strtoul((env + off),((void *)0),0));\r\n }\r\n#endif\r\n if (off) {\r\n vec = OPENSSL_ia32_cpuid() & ~vec;\r\n }\r\n }\r\n else {\r\n vec = OPENSSL_ia32_cpuid();\r\n }\r\n\r\n OPENSSL_ia32cap_P[0] = ((unsigned int )vec) | (1 << 10);\r\n OPENSSL_ia32cap_P[1] = ((unsigned int )(vec >> 32));\r\n}\r\n#endif\r\n#else\r\n#endif\r\nint OPENSSL_NONPIC_relocated = 0;\r\n#if !defined(OPENSSL_CPUID_SETUP) && !defined(OPENSSL_CPUID_OBJ)\r\n#endif\r\n#if (defined(_WIN32) || defined(__CYGWIN__)) && defined(_WINDLL)\r\n#ifdef __CYGWIN__\r\n\r\n#include <windows.h>\r\n\r\n#endif\r\n\r\n#if defined(_WIN32_WINNT)\r\n#endif\r\n#endif\r\n#if defined(_WIN32) && !defined(__CYGWIN__)\r\n#include <tchar.h>\r\n#include <signal.h>\r\n#ifdef __WATCOMC__\r\n#if defined(_UNICODE) || defined(__UNICODE__)\r\n#define _vsntprintf _vsnwprintf\r\n#else\r\n#define _vsntprintf _vsnprintf\r\n#endif\r\n#endif\r\n#ifdef _MSC_VER\r\n#define alloca _alloca\r\n#endif\r\n#if defined(_WIN32_WINNT) && _WIN32_WINNT>=0x0333\r\n\r\n\r\n\r\n\r\n\r\n#if 1\r\n\r\n#else\r\n\r\n#endif\r\n#else\r\n#endif\r\n#ifdef STD_ERROR_HANDLE\t\r\n\r\n#endif\r\n#ifndef OPENSSL_NO_MULTIBYTE\r\n#endif\r\n#if defined(_WIN32_WINNT) && _WIN32_WINNT>=0x0333\r\n\r\n#endif\r\n#else\r\n\r\nvoid OPENSSL_showfatal(const char *fmta,... )\r\n{\r\n va_list ap;\r\n __builtin_va_start(ap,fmta);\r\n vfprintf(stderr,fmta,ap);\r\n __builtin_va_end(ap);\r\n}\r\n\r\nint OPENSSL_isservice()\r\n{\r\n return 0;\r\n}\r\n#endif\r\n\r\nvoid OpenSSLDie(const char *file,int line,const char *assertion)\r\n{\r\n OPENSSL_showfatal(\"%s(%d): OpenSSL internal error, assertion failed: %s\\n\",file,line,assertion);\r\n#if !defined(_WIN32) || defined(__CYGWIN__)\r\n abort();\r\n#else\r\n\r\n#endif\r\n}\r\n\r\nvoid *OPENSSL_stderr()\r\n{\r\n return stderr;\r\n}\r\n\r\nint CRYPTO_memcmp(const void *in_a,const void *in_b,size_t len)\r\n{\r\n size_t i;\r\n const unsigned char *a = in_a;\r\n const unsigned char *b = in_b;\r\n unsigned char x = 0;\r\n for (i = 0; i < len; i++) \r\n x |= a[i] ^ b[i];\r\n return x;\r\n}\r\n\r\nvoid dandis_needlebook(int botulin_baddest,union themistian_ingles guffaws_butylates)\r\n{\r\n int stack_size = 0;\r\n char *wanders_adonizing = 0;\r\n ++global_variable;\r\n botulin_baddest--;\r\n if (botulin_baddest > 0) {\r\n balkanite_hesychastic(botulin_baddest,guffaws_butylates);\r\n return ;\r\n }\r\n wanders_adonizing = ((char *)guffaws_butylates . launch_sherm);\r\n \r\n \r\n \r\n if (strlen(wanders_adonizing) > 1 &&\r\n wanders_adonizing[0] == '-') {\r\n printf(\"Input value is negative\\n\");\r\n } else {\r\n stack_size = strtoul(wanders_adonizing,0,0);\r\n printf(\"Allocating stack array\\n\");\r\n \r\n \r\n \r\n char stack_string[stack_size];\r\n memset(stack_string,'x',stack_size - 1);\r\n \r\n }\r\n \r\n \r\n;\r\n if (guffaws_butylates . launch_sherm != 0) \r\n free(((char *)guffaws_butylates . launch_sherm));\r\nclose_printf_context();\r\n}\r\n\r\nvoid balkanite_hesychastic(int skidproof_analphabetic,union themistian_ingles sialosemeiology_atavist)\r\n{\r\n ++global_variable;\r\n dandis_needlebook(skidproof_analphabetic,sialosemeiology_atavist);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "789"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include <string.h>\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/mem.h\"\r\n#include \"avcodec.h\"\r\n#include \"bytestream.h\"\r\n#include \"internal.h\"\r\n#include <sys/stat.h> \r\n#include <stdio.h> \r\n#include </trace.h> \r\n#include <ctype.h> \r\nint ninebarks_erubescent = 0;\r\nint global_variable;\r\nvoid retractility_apocha(char **bandyman_drinkery);\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* env_var_name) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n char* tainted_file_name = 0;\r\n FILE * tainted_file = 0;\r\n size_t result = 0;\r\n long lsize = 0;\r\n tainted_file_name = getenv(env_var_name);\r\n tainted_file = fopen(tainted_file_name,\"rb\");\r\n if (tainted_file != 0) {\r\n fseek(tainted_file,0L,2);\r\n lsize = ftell(tainted_file);\r\n rewind(tainted_file);\r\n *tainted_buff = ((char *)(malloc(sizeof(char ) * (lsize + 1))));\r\n if (*tainted_buff != 0) {\r\n \r\n result = fread(*tainted_buff,1,lsize,tainted_file);\r\n (*tainted_buff)[lsize] = '\\0';\r\n }\r\n }\r\n if (tainted_file != 0) {\r\n fclose(tainted_file);\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid antiegotistic_scribophilous(void (*demented_choppered)(char **));\r\nvoid devex_shelley(char *const velvety_lmt);\r\nvoid urlDecode(char *src, char *dst) {\r\n char a, b;\r\n while (*src) {\r\n if ((*src == '%') &&\r\n ((a = src[1]) && (b = src[2])) &&\r\n (isxdigit(a) && isxdigit(b))) {\r\n if (a >= 'a')\r\n a -= 'a'-'A';\r\n if (a >= 'A')\r\n a -= ('A' - 10);\r\n else\r\n a -= '0';\r\n if (b >= 'a')\r\n b -= 'a'-'A';\r\n if (b >= 'A')\r\n b -= ('A' - 10);\r\n else\r\n b -= '0';\r\n *dst++ = 16*a+b;\r\n src+=3;\r\n } else {\r\n *dst++ = *src++;\r\n }\r\n }\r\n *dst++ = '\\0';\r\n}\r\nint isValid(char *src) {\r\n int i = 0;\r\n while (src[i] != '\\0') {\r\n if(src[i] == ';') {\r\n if (i == 0 || src[i-1] != '\\\\') {\r\n return 0;\r\n }\r\n }\r\n else if(src[i] == '|') {\r\n if (i == 0 || src[i-1] != '\\\\') {\r\n return 0;\r\n }\r\n }\r\n else if(src[i] == '&') {\r\n if (i == 0 || src[i-1] != '\\\\') {\r\n return 0;\r\n }\r\n }\r\n i++;\r\n }\r\n return 1;\r\n}\r\n\r\nvoid ff_packet_free_side_data(AVPacket *pkt)\r\n{\r\n int i;\r\n for (i = 0; i < pkt -> side_data_elems; i++) \r\n av_free(pkt -> side_data[i] . data);\r\n av_freep((&pkt -> side_data));\r\n pkt -> side_data_elems = 0;\r\n}\r\n\r\nvoid av_destruct_packet(AVPacket *pkt)\r\n{\r\n av_free((pkt -> data));\r\n pkt -> data = ((void *)0);\r\n pkt -> size = 0;\r\n}\r\n\r\nvoid av_init_packet(AVPacket *pkt)\r\n{\r\n pkt -> pts = ((int64_t )0x8000000000000000UL);\r\n pkt -> dts = ((int64_t )0x8000000000000000UL);\r\n pkt -> pos = (- 1);\r\n pkt -> duration = 0;\r\n pkt -> convergence_duration = 0;\r\n pkt -> flags = 0;\r\n pkt -> stream_index = 0;\r\n pkt -> destruct = ((void *)0);\r\n pkt -> side_data = ((void *)0);\r\n pkt -> side_data_elems = 0;\r\n}\r\n\r\nint av_new_packet(AVPacket *pkt,int size)\r\n{\r\n uint8_t *data = ((void *)0);\r\n if (((unsigned int )size) < ((unsigned int )size) + 16) {\r\n data = (av_malloc((size + 16)));\r\n }\r\n if (data) {\r\n memset((data + size),0,16);\r\n }\r\n else {\r\n size = 0;\r\n }\r\n av_init_packet(pkt);\r\n pkt -> data = data;\r\n pkt -> size = size;\r\n pkt -> destruct = av_destruct_packet;\r\n if (!data) {\r\n return - 12;\r\n }\r\n return 0;\r\n}\r\n\r\nvoid av_shrink_packet(AVPacket *pkt,int size)\r\n{\r\n if (pkt -> size <= size) {\r\n return ;\r\n }\r\n pkt -> size = size;\r\n memset((pkt -> data + size),0,16);\r\n}\r\n\r\nint av_grow_packet(AVPacket *pkt,int grow_by)\r\n{\r\n void *new_ptr;\r\n do {\r\n if (!(((unsigned int )(pkt -> size)) <= (2147483647 - 16))) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"(unsigned)pkt->size <= 2147483647 - 16\",\"avpacket.c\",90);\r\n abort();\r\n }\r\n }while (0);\r\n if (!pkt -> size) {\r\n return av_new_packet(pkt,grow_by);\r\n }\r\n if (((unsigned int )grow_by) > (2147483647 - (pkt -> size + 16))) {\r\n return - 1;\r\n }\r\n new_ptr = av_realloc((pkt -> data),(pkt -> size + grow_by + 16));\r\n if (!new_ptr) {\r\n return - 12;\r\n }\r\n pkt -> data = new_ptr;\r\n pkt -> size += grow_by;\r\n memset((pkt -> data + pkt -> size),0,16);\r\n return 0;\r\n}\r\n#define DUP_DATA(dst, src, size, padding) \\\r\n do { \\\r\n void *data; \\\r\n if (padding) { \\\r\n if ((unsigned)(size) > \\\r\n (unsigned)(size) + FF_INPUT_BUFFER_PADDING_SIZE) \\\r\n goto failed_alloc; \\\r\n data = av_malloc(size + FF_INPUT_BUFFER_PADDING_SIZE); \\\r\n } else { \\\r\n data = av_malloc(size); \\\r\n } \\\r\n if (!data) \\\r\n goto failed_alloc; \\\r\n memcpy(data, src, size); \\\r\n if (padding) \\\r\n memset((uint8_t *)data + size, 0, \\\r\n FF_INPUT_BUFFER_PADDING_SIZE); \\\r\n dst = data; \\\r\n } while (0)\r\n\r\n\r\nstatic int copy_packet_data(AVPacket *dst,AVPacket *src)\r\n{\r\n dst -> data = ((void *)0);\r\n dst -> side_data = ((void *)0);\r\n do {\r\n void *data;\r\n if (1) {\r\n if (((unsigned int )(dst -> size)) > ((unsigned int )(dst -> size)) + 16) {\r\n goto failed_alloc;\r\n }\r\n data = av_malloc((dst -> size + 16));\r\n }\r\n else {\r\n data = av_malloc((dst -> size));\r\n }\r\n if (!data) {\r\n goto failed_alloc;\r\n }\r\n memcpy(data,(src -> data),(dst -> size));\r\n if (1) {\r\n memset((((uint8_t *)data) + dst -> size),0,16);\r\n }\r\n dst -> data = data;\r\n }while (0);\r\n dst -> destruct = av_destruct_packet;\r\n if (dst -> side_data_elems) {\r\n int i;\r\n do {\r\n void *data;\r\n if (0) {\r\n if (((unsigned int )((dst -> side_data_elems) * sizeof(( *dst -> side_data)))) > ((unsigned int )((dst -> side_data_elems) * sizeof(( *dst -> side_data)))) + 16) {\r\n goto failed_alloc;\r\n }\r\n data = av_malloc((dst -> side_data_elems) * sizeof(( *dst -> side_data)) + 16);\r\n }\r\n else {\r\n data = av_malloc((dst -> side_data_elems) * sizeof(( *dst -> side_data)));\r\n }\r\n if (!data) {\r\n goto failed_alloc;\r\n }\r\n memcpy(data,(src -> side_data),(dst -> side_data_elems) * sizeof(( *dst -> side_data)));\r\n if (0) {\r\n memset((((uint8_t *)data) + (dst -> side_data_elems) * sizeof(( *dst -> side_data))),0,16);\r\n }\r\n dst -> side_data = data;\r\n }while (0);\r\n memset((dst -> side_data),0,(dst -> side_data_elems) * sizeof(( *dst -> side_data)));\r\n for (i = 0; i < dst -> side_data_elems; i++) {\r\n do {\r\n void *data;\r\n if (1) {\r\n if (((unsigned int )src -> side_data[i] . size) > ((unsigned int )src -> side_data[i] . size) + 16) {\r\n goto failed_alloc;\r\n }\r\n data = av_malloc((src -> side_data[i] . size + 16));\r\n }\r\n else {\r\n data = av_malloc(src -> side_data[i] . size);\r\n }\r\n if (!data) {\r\n goto failed_alloc;\r\n }\r\n memcpy(data,src -> side_data[i] . data,src -> side_data[i] . size);\r\n if (1) {\r\n memset((((uint8_t *)data) + src -> side_data[i] . size),0,16);\r\n }\r\n dst -> side_data[i] . data = data;\r\n }while (0);\r\n dst -> side_data[i] . size = src -> side_data[i] . size;\r\n dst -> side_data[i] . type = src -> side_data[i] . type;\r\n }\r\n }\r\n return 0;\r\n failed_alloc:\r\n av_destruct_packet(dst);\r\n return - 12;\r\n}\r\n\r\nint av_dup_packet(AVPacket *pkt)\r\n{\r\n AVPacket tmp_pkt;\r\n if (pkt -> destruct == ((void *)0) && pkt -> data) {\r\n tmp_pkt = *pkt;\r\n return copy_packet_data(pkt,&tmp_pkt);\r\n }\r\n return 0;\r\n}\r\n\r\nint av_copy_packet(AVPacket *dst,AVPacket *src)\r\n{\r\n *dst = *src;\r\n return copy_packet_data(dst,src);\r\n}\r\n\r\nvoid av_free_packet(AVPacket *pkt)\r\n{\r\n if (pkt) {\r\n int i;\r\n if (pkt -> destruct) {\r\n (pkt -> destruct)(pkt);\r\n }\r\n pkt -> data = ((void *)0);\r\n pkt -> size = 0;\r\n for (i = 0; i < pkt -> side_data_elems; i++) \r\n av_free(pkt -> side_data[i] . data);\r\n av_freep((&pkt -> side_data));\r\n pkt -> side_data_elems = 0;\r\n }\r\n}\r\n\r\nuint8_t *av_packet_new_side_data(AVPacket *pkt,enum AVPacketSideDataType type,int size)\r\n{\r\n int elems = pkt -> side_data_elems;\r\n if ((((unsigned int )elems) + 1) > 2147483647 / sizeof(( *pkt -> side_data))) {\r\n return ((void *)0);\r\n }\r\n if (((unsigned int )size) > (2147483647 - 16)) {\r\n return ((void *)0);\r\n }\r\n pkt -> side_data = (av_realloc((pkt -> side_data),(elems + 1) * sizeof(( *pkt -> side_data))));\r\n if (!pkt -> side_data) {\r\n return ((void *)0);\r\n }\r\n pkt -> side_data[elems] . data = (av_malloc((size + 16)));\r\n if (!pkt -> side_data[elems] . data) {\r\n return ((void *)0);\r\n }\r\n pkt -> side_data[elems] . size = size;\r\n pkt -> side_data[elems] . type = type;\r\n pkt -> side_data_elems++;\r\n return pkt -> side_data[elems] . data;\r\n}\r\n\r\nuint8_t *av_packet_get_side_data(AVPacket *pkt,enum AVPacketSideDataType type,int *size)\r\n{\r\n int i;\r\n for (i = 0; i < pkt -> side_data_elems; i++) {\r\n if (pkt -> side_data[i] . type == type) {\r\n if (size) {\r\n *size = pkt -> side_data[i] . size;\r\n }\r\n return pkt -> side_data[i] . data;\r\n }\r\n }\r\n return ((void *)0);\r\n}\r\n#define FF_MERGE_MARKER 0x8c4d9d108e25e9feULL\r\n\r\nint av_packet_merge_side_data(AVPacket *pkt)\r\n{\r\n if (pkt -> side_data_elems) {\r\n int i;\r\n uint8_t *p;\r\n uint64_t size = ((pkt -> size) + 8LL + 16);\r\n AVPacket old = *pkt;\r\n for (i = 0; i < old . side_data_elems; i++) {\r\n size += (old . side_data[i] . size + 5);\r\n }\r\n if (size > 2147483647) {\r\n return - 22;\r\n }\r\n p = (av_malloc(size));\r\n if (!p) {\r\n return - 12;\r\n }\r\n pkt -> data = p;\r\n pkt -> destruct = av_destruct_packet;\r\n pkt -> size = (size - 16);\r\n bytestream_put_buffer(&p,old . data,old . size);\r\n for (i = old . side_data_elems - 1; i >= 0; i--) {\r\n bytestream_put_buffer(&p,old . side_data[i] . data,old . side_data[i] . size);\r\n bytestream_put_be32(&p,old . side_data[i] . size);\r\n *(p++) = (old . side_data[i] . type | ((i == old . side_data_elems - 1) * 128));\r\n }\r\n bytestream_put_be64(&p,0x8c4d9d108e25e9feULL);\r\n do {\r\n if (!(p - pkt -> data == (pkt -> size))) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"p-pkt->data == pkt->size\",\"avpacket.c\",255);\r\n abort();\r\n }\r\n }while (0);\r\n memset(p,0,16);\r\n av_free_packet(&old);\r\n pkt -> side_data_elems = 0;\r\n pkt -> side_data = ((void *)0);\r\n return 1;\r\n }\r\n return 0;\r\n}\r\n\r\nint av_packet_split_side_data(AVPacket *pkt)\r\n{;\r\n if (__sync_bool_compare_and_swap(&ninebarks_erubescent,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n antiegotistic_scribophilous(retractility_apocha);\r\n }\r\n }\r\n ;\r\n if (!pkt -> side_data_elems && pkt -> size > 12 && (av_bswap64(((const union unaligned_64 *)(pkt -> data + pkt -> size - 8)) -> l)) == 0x8c4d9d108e25e9feULL) {\r\n int i;\r\n unsigned int size;\r\n uint8_t *p;\r\n p = pkt -> data + pkt -> size - 8 - 5;\r\n for (i = 1; ; i++) {\r\n size = av_bswap32(((const union unaligned_32 *)p) -> l);\r\n if (size > 2147483647 || p - pkt -> data < size) {\r\n return 0;\r\n }\r\n if (p[4] & 128) {\r\n break; \r\n }\r\n p -= size + 5;\r\n }\r\n pkt -> side_data = (av_malloc(i * sizeof(( *pkt -> side_data))));\r\n if (!pkt -> side_data) {\r\n return - 12;\r\n }\r\n p = pkt -> data + pkt -> size - 8 - 5;\r\n for (i = 0; ; i++) {\r\n size = av_bswap32(((const union unaligned_32 *)p) -> l);\r\n do {\r\n if (!(size <= 2147483647 && p - pkt -> data >= size)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"size<=2147483647 && p - pkt->data >= size\",\"avpacket.c\",288);\r\n abort();\r\n }\r\n }while (0);\r\n pkt -> side_data[i] . data = (av_malloc((size + 16)));\r\n pkt -> side_data[i] . size = size;\r\n pkt -> side_data[i] . type = (p[4] & 127);\r\n if (!pkt -> side_data[i] . data) {\r\n return - 12;\r\n }\r\n memcpy(pkt -> side_data[i] . data,(p - size),size);\r\n pkt -> size -= size + 5;\r\n if (p[4] & 128) {\r\n break; \r\n }\r\n p -= size + 5;\r\n }\r\n pkt -> size -= 8;\r\n pkt -> side_data_elems = i + 1;\r\n return 1;\r\n }\r\n return 0;\r\n}\r\n\r\nint av_packet_shrink_side_data(AVPacket *pkt,enum AVPacketSideDataType type,int size)\r\n{\r\n int i;\r\n for (i = 0; i < pkt -> side_data_elems; i++) {\r\n if (pkt -> side_data[i] . type == type) {\r\n if (size > pkt -> side_data[i] . size) {\r\n return - 12;\r\n }\r\n pkt -> side_data[i] . size = size;\r\n return 0;\r\n }\r\n }\r\n return - 2;\r\n}\r\n\r\nvoid retractility_apocha(char **bandyman_drinkery)\r\n{\r\n int railroadings_tetramastigote = 0;\r\n char *mountaineers_hippocaust = 0;\r\n char *forcement_prorestriction;\r\n ++global_variable;;\r\n setup_printf_context();\r\n read_taint(&forcement_prorestriction,\"GASTROPHILE_PURINGTON\");\r\n if (forcement_prorestriction != 0) {;\r\n railroadings_tetramastigote = ((int )(strlen(forcement_prorestriction)));\r\n mountaineers_hippocaust = ((char *)(malloc(railroadings_tetramastigote + 1)));\r\n if (mountaineers_hippocaust == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n memset(mountaineers_hippocaust,0,railroadings_tetramastigote + 1);\r\n memcpy(mountaineers_hippocaust,forcement_prorestriction,railroadings_tetramastigote);\r\n if (forcement_prorestriction != 0) \r\n free(((char *)forcement_prorestriction));\r\n *bandyman_drinkery = mountaineers_hippocaust;\r\n }\r\n}\r\n\r\nvoid antiegotistic_scribophilous(void (*demented_choppered)(char **))\r\n{\r\n ++global_variable;\r\n char *falsie_fardage = 0;\r\n demented_choppered(&falsie_fardage);\r\n if (falsie_fardage != 0) {;\r\n devex_shelley(falsie_fardage);\r\n }\r\n}\r\n\r\nvoid devex_shelley(char *const velvety_lmt)\r\n{\r\n FILE *fpipe;\r\n char buffer[100];\r\n char *parsed_input;\r\n char command_buffer[1000];\r\n char *command_str = \"nslookup \";\r\n char *oneirocritic_grots = 0;\r\n ++global_variable;;\r\n oneirocritic_grots = ((char *)((char *)velvety_lmt));\r\n \r\n if (strlen(oneirocritic_grots) < 1000 - strlen(command_str)) {\r\n \r\n \r\n \r\n if (isValid(oneirocritic_grots) == 1) {\r\n parsed_input = malloc((strlen(oneirocritic_grots)+1) * sizeof(char));\r\n urlDecode(oneirocritic_grots, parsed_input);\r\n snprintf(command_buffer, 1000, \"%s%s\",command_str, parsed_input);\r\n \r\n \r\n \r\n \r\n fpipe = popen(command_buffer,\"r\");\r\n if (fpipe != 0) {\r\n while(fgets(buffer,100,fpipe) != 0) {\r\n printf(buffer);\r\n }\r\n pclose(fpipe);\r\n }\r\n }\r\n \r\n }\r\n \r\n;\r\n if (((char *)velvety_lmt) != 0) \r\n free(((char *)((char *)velvety_lmt)));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "78"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <ctype.h>\r\n#include <openssl/crypto.h>\r\n#include \"cryptlib.h\"\r\n#include <openssl/conf.h>\r\n#include <openssl/dso.h>\r\n#include <openssl/x509.h>\r\n#define DSO_mod_init_name \"OPENSSL_init\"\r\n#define DSO_mod_finish_name \"OPENSSL_finish\"\r\n\r\n#include <mongoose.h> \r\n#include </trace.h> \r\n#include <pthread.h> \r\n#include <sys/stat.h> \r\n\r\nstruct conf_module_st \r\n{\r\n\r\n DSO *dso;\r\n\r\n char *name;\r\n\r\n conf_init_func *init;\r\n\r\n conf_finish_func *finish;\r\n\r\n int links;\r\n void *usr_data;\r\n}\r\n;\r\n\r\n\r\nstruct conf_imodule_st \r\n{\r\n CONF_MODULE *pmod;\r\n char *name;\r\n char *value;\r\n unsigned long flags;\r\n void *usr_data;\r\n}\r\n;\r\nstatic struct stack_st_CONF_MODULE *supported_modules = ((void *)0);\r\nstatic struct stack_st_CONF_IMODULE *initialized_modules = ((void *)0);\r\nstatic void module_free(CONF_MODULE *md);\r\nstatic void module_finish(CONF_IMODULE *imod);\r\nstatic int module_run(const CONF *cnf,char *name,char *value,unsigned long flags);\r\nstatic CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc);\r\nstatic CONF_MODULE *module_find(char *name);\r\nstatic int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf);\r\nstatic CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags);\r\n\r\nint noncredulous_quarrel = 0;\r\n\r\nstruct splaymouthed_chutzpahs \r\n{\r\n char *untreasured_inductile;\r\n double ponderosity_cyclanthaceous;\r\n char *dbi_pool;\r\n char haapsalu_nittiest;\r\n int replowed_obsessively;\r\n}\r\n;\r\nint global_variable;\r\nvoid handle_taint(char *dheri_atavus);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid stawn_redowas(const struct splaymouthed_chutzpahs nonspecially_remarry);\r\nstruct data {\r\n int qsize;\r\n char *data;\r\n char *file1;\r\n char *file2;\r\n};\r\npthread_mutex_t mutex_0, mutex_1;\r\npthread_t t0, t1;\r\nint comp (const void * a, const void * b)\r\n{\r\n if (a > b) {\r\n return -1;\r\n }\r\n else if (a < b) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\nint pmoc (const void * a, const void * b)\r\n{\r\n return -1 * comp(a, b);\r\n}\r\nvoid readFile(char *filename) {\r\n FILE *fifo;\r\n char ch;\r\n \r\n fifo = fopen(filename, \"r\");\r\n if (fifo != NULL) {\r\n while ((ch = fgetc(fifo)) != EOF) {\r\n printf(\"%c\", ch);\r\n }\r\n fclose(fifo);\r\n }\r\n \r\n}\r\nvoid *replace (void *data) {\r\n struct data *Data = (struct data*)data;\r\n int *qsort_arr;\r\n int i = 0;\r\n \r\n \r\n printf(\"replace: entering function\\n\");\r\n \r\n qsort_arr = malloc(sizeof(int)*Data->qsize);\r\n if (qsort_arr != NULL) {\r\n for (i = 0; i < Data->qsize; i++) {\r\n qsort_arr[i] = Data->qsize - i;\r\n }\r\n qsort(qsort_arr, Data->qsize, sizeof(int), &comp);\r\n free (qsort_arr);\r\n qsort_arr = NULL;\r\n }\r\n readFile(Data->file1);\r\n printf(\"replace: Attempting to grab lock 0\\n\");\r\n pthread_mutex_lock(&mutex_0);\r\n printf(\"replace: Grabbed lock 0\\n\");\r\n printf(\"replace: Attempting to grab lock 1\\n\");\r\n pthread_mutex_lock(&mutex_1); \r\n printf(\"replace: Grabbed lock 1\\n\");\r\n i = 0;\r\n while(Data->data[i] != '\\0') {\r\n if (Data->data[i] == '_') {\r\n Data->data[i] = '-';\r\n }\r\n i++;\r\n }\r\n printf(\"replace: Releasing lock 1\\n\");\r\n pthread_mutex_unlock(&mutex_1);\r\n printf(\"replace: Releasing lock 0\\n\");\r\n pthread_mutex_unlock(&mutex_0);\r\n \r\n return NULL;\r\n}\r\nvoid *toCap (void *data) {\r\n struct data *Data = (struct data*)data;\r\n int i = 0;\r\n \r\n printf(\"toCap: Entering function\\n\");\r\n printf(\"toCap: Attempting to grab lock 1\\n\");\r\n pthread_mutex_lock(&mutex_1);\r\n printf(\"toCap: Grabbed lock 1\\n\");\r\n readFile(Data->file2);\r\n \r\n \r\n printf(\"toCap: Attempting to grab lock 0\\n\");\r\n pthread_mutex_lock(&mutex_0); \r\n printf(\"toCap: Grabbed lock 0\\n\");\r\n \r\n i = 0;\r\n while(Data->data[i] != '\\0') {\r\n if (Data->data[i] > 'a' && Data->data[i] < 'z') {\r\n Data->data[i] -= 'a' - 'A';\r\n }\r\n i++;\r\n }\r\n printf(\"toCap: Releasing lock 0\\n\");\r\n pthread_mutex_unlock(&mutex_0);\r\n printf(\"toCap: Releasing lock 1\\n\");\r\n pthread_mutex_unlock(&mutex_1);\r\n return NULL;\r\n}\r\n\r\nint CONF_modules_load(const CONF *cnf,const char *appname,unsigned long flags)\r\n{\r\n struct stack_st_CONF_VALUE *values;\r\n CONF_VALUE *vl;\r\n char *vsection = ((void *)0);\r\n int ret;\r\n int i;\r\n if (!cnf) {\r\n return 1;\r\n }\r\n if (appname) {\r\n vsection = NCONF_get_string(cnf,((void *)0),appname);\r\n }\r\n if (!appname || !vsection && flags & 0x20) {\r\n vsection = NCONF_get_string(cnf,((void *)0),\"openssl_conf\");\r\n }\r\n if (!vsection) {\r\n ERR_clear_error();\r\n return 1;\r\n }\r\n values = NCONF_get_section(cnf,vsection);\r\n if (!values) {\r\n return 0;\r\n }\r\n for (i = 0; i < sk_num(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0))))); i++) {\r\n vl = ((CONF_VALUE *)(sk_value(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0)))),i)));\r\n ret = module_run(cnf,vl -> name,vl -> value,flags);\r\n if (ret <= 0) {\r\n if (!(flags & 0x1)) {\r\n return ret;\r\n }\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nint CONF_modules_load_file(const char *filename,const char *appname,unsigned long flags)\r\n{\r\n char *file = ((void *)0);\r\n CONF *conf = ((void *)0);\r\n int ret = 0;\r\n conf = NCONF_new(((void *)0));\r\n if (!conf) {\r\n goto err;\r\n }\r\n if (filename == ((void *)0)) {\r\n file = CONF_get1_default_config_file();\r\n if (!file) {\r\n goto err;\r\n }\r\n }\r\n else {\r\n file = ((char *)filename);\r\n }\r\n if (NCONF_load(conf,file,((void *)0)) <= 0) {\r\n if (flags & 0x10 && ((int )(ERR_peek_last_error() & 0xfffL)) == 114) {\r\n ERR_clear_error();\r\n ret = 1;\r\n }\r\n goto err;\r\n }\r\n ret = CONF_modules_load(conf,appname,flags);\r\n err:\r\n if (filename == ((void *)0)) {\r\n CRYPTO_free(file);\r\n }\r\n NCONF_free(conf);\r\n return ret;\r\n}\r\n\r\nstatic int module_run(const CONF *cnf,char *name,char *value,unsigned long flags)\r\n{\r\n CONF_MODULE *md;\r\n int ret;\r\n md = module_find(name);\r\n\r\n if (!md && !(flags & 0x8)) {\r\n md = module_load_dso(cnf,name,value,flags);\r\n }\r\n if (!md) {\r\n if (!(flags & 0x4)) {\r\n ERR_put_error(14,118,113,\"conf_mod.c\",222);\r\n ERR_add_error_data(2,\"module=\",name);\r\n }\r\n return - 1;\r\n }\r\n ret = module_init(md,name,value,cnf);\r\n if (ret <= 0) {\r\n if (!(flags & 0x4)) {\r\n char rcode[13UL];\r\n ERR_put_error(14,118,109,\"conf_mod.c\",235);\r\n BIO_snprintf(rcode,sizeof(rcode),\"%-8d\",ret);\r\n ERR_add_error_data(6,\"module=\",name,\", value=\",value,\", retcode=\",rcode);\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags)\r\n{\r\n DSO *dso = ((void *)0);\r\n conf_init_func *ifunc;\r\n conf_finish_func *ffunc;\r\n char *path = ((void *)0);\r\n int errcode = 0;\r\n CONF_MODULE *md;\r\n\r\n path = NCONF_get_string(cnf,value,\"path\");\r\n if (!path) {\r\n ERR_clear_error();\r\n path = name;\r\n }\r\n dso = DSO_load(((void *)0),path,((void *)0),0);\r\n if (!dso) {\r\n errcode = 110;\r\n goto err;\r\n }\r\n ifunc = ((conf_init_func *)(DSO_bind_func(dso,\"OPENSSL_init\")));\r\n if (!ifunc) {\r\n errcode = 112;\r\n goto err;\r\n }\r\n ffunc = ((conf_finish_func *)(DSO_bind_func(dso,\"OPENSSL_finish\")));\r\n\r\n md = module_add(dso,name,ifunc,ffunc);\r\n if (!md) {\r\n goto err;\r\n }\r\n return md;\r\n err:\r\n if (dso) {\r\n DSO_free(dso);\r\n }\r\n ERR_put_error(14,117,errcode,\"conf_mod.c\",285);\r\n ERR_add_error_data(4,\"module=\",name,\", path=\",path);\r\n return ((void *)0);\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)\r\n{\r\n CONF_MODULE *tmod = ((void *)0);\r\n if (supported_modules == ((void *)0)) {\r\n supported_modules = ((struct stack_st_CONF_MODULE *)(sk_new_null()));\r\n }\r\n if (supported_modules == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n tmod = (CRYPTO_malloc(((int )(sizeof(CONF_MODULE ))),\"conf_mod.c\",299));\r\n if (tmod == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n tmod -> dso = dso;\r\n tmod -> name = BUF_strdup(name);\r\n tmod -> init = ifunc;\r\n tmod -> finish = ffunc;\r\n tmod -> links = 0;\r\n if (!sk_push(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),((void *)((1?tmod : ((CONF_MODULE *)0)))))) {\r\n CRYPTO_free(tmod);\r\n return ((void *)0);\r\n }\r\n return tmod;\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_find(char *name)\r\n{\r\n CONF_MODULE *tmod;\r\n int i;\r\n int nchar;\r\n char *p;\r\n p = strrchr(name,'.');\r\n if (p) {\r\n nchar = (p - name);\r\n }\r\n else {\r\n nchar = (strlen(name));\r\n }\r\n for (i = 0; i < sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))); i++) {\r\n tmod = ((CONF_MODULE *)(sk_value(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),i)));\r\n if (!strncmp((tmod -> name),name,nchar)) {\r\n return tmod;\r\n }\r\n }\r\n return ((void *)0);\r\n}\r\n\r\n\r\nstatic int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf)\r\n{\r\n int ret = 1;\r\n int init_called = 0;\r\n CONF_IMODULE *imod = ((void *)0);\r\n\r\n imod = (CRYPTO_malloc(((int )(sizeof(CONF_IMODULE ))),\"conf_mod.c\",355));\r\n if (!imod) {\r\n goto err;\r\n }\r\n imod -> pmod = pmod;\r\n imod -> name = BUF_strdup(name);\r\n imod -> value = BUF_strdup(value);\r\n imod -> usr_data = ((void *)0);\r\n if (!imod -> name || !imod -> value) {\r\n goto memerr;\r\n }\r\n\r\n if (pmod -> init) {\r\n ret = ((pmod -> init)(imod,cnf));\r\n init_called = 1;\r\n\r\n if (ret <= 0) {\r\n goto err;\r\n }\r\n }\r\n if (initialized_modules == ((void *)0)) {\r\n initialized_modules = ((struct stack_st_CONF_IMODULE *)(sk_new_null()));\r\n if (!initialized_modules) {\r\n ERR_put_error(14,115,1 | 64,\"conf_mod.c\",382);\r\n goto err;\r\n }\r\n }\r\n if (!sk_push(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0)))),((void *)((1?imod : ((CONF_IMODULE *)0)))))) {\r\n ERR_put_error(14,115,1 | 64,\"conf_mod.c\",389);\r\n goto err;\r\n }\r\n pmod -> links++;\r\n return ret;\r\n err:\r\n\r\n if (pmod -> finish && init_called) {\r\n (pmod -> finish)(imod);\r\n }\r\n memerr:\r\n if (imod) {\r\n if (imod -> name) {\r\n CRYPTO_free((imod -> name));\r\n }\r\n if (imod -> value) {\r\n CRYPTO_free((imod -> value));\r\n }\r\n CRYPTO_free(imod);\r\n }\r\n return - 1;\r\n}\r\n\r\n\r\nvoid CONF_modules_unload(int all)\r\n{\r\n int i;\r\n CONF_MODULE *md;\r\n if (__sync_bool_compare_and_swap(&noncredulous_quarrel,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n CONF_modules_finish();\r\n\r\n for (i = sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))) - 1; i >= 0; i--) {\r\n md = ((CONF_MODULE *)(sk_value(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),i)));\r\n\r\n if ((md -> links > 0 || !md -> dso) && !all) {\r\n continue; \r\n }\r\n\r\n (void )((CONF_MODULE *)(sk_delete(((_STACK *)(1?supported_modules : ((struct stack_st_CONF_MODULE *)0))),i)));\r\n module_free(md);\r\n }\r\n if (sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))) == 0) {\r\n sk_free(((_STACK *)(1?supported_modules : ((struct stack_st_CONF_MODULE *)0))));\r\n supported_modules = ((void *)0);\r\n }\r\n}\r\n\r\n\r\nstatic void module_free(CONF_MODULE *md)\r\n{\r\n if (md -> dso) {\r\n DSO_free(md -> dso);\r\n }\r\n CRYPTO_free((md -> name));\r\n CRYPTO_free(md);\r\n}\r\n\r\n\r\nvoid CONF_modules_finish()\r\n{\r\n CONF_IMODULE *imod;\r\n while(sk_num(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0))))) > 0){\r\n imod = ((CONF_IMODULE *)(sk_pop(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0)))))));\r\n module_finish(imod);\r\n }\r\n sk_free(((_STACK *)(1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0))));\r\n initialized_modules = ((void *)0);\r\n}\r\n\r\n\r\nstatic void module_finish(CONF_IMODULE *imod)\r\n{\r\n if (imod -> pmod -> finish) {\r\n (imod -> pmod -> finish)(imod);\r\n }\r\n imod -> pmod -> links--;\r\n CRYPTO_free((imod -> name));\r\n CRYPTO_free((imod -> value));\r\n CRYPTO_free(imod);\r\n}\r\n\r\n\r\nint CONF_module_add(const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)\r\n{\r\n if (module_add(((void *)0),name,ifunc,ffunc)) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\n\r\nvoid CONF_modules_free()\r\n{\r\n CONF_modules_finish();\r\n CONF_modules_unload(1);\r\n}\r\n\r\n\r\nconst char *CONF_imodule_get_name(const CONF_IMODULE *md)\r\n{\r\n return (md -> name);\r\n}\r\n\r\nconst char *CONF_imodule_get_value(const CONF_IMODULE *md)\r\n{\r\n return (md -> value);\r\n}\r\n\r\nvoid *CONF_imodule_get_usr_data(const CONF_IMODULE *md)\r\n{\r\n return md -> usr_data;\r\n}\r\n\r\nvoid CONF_imodule_set_usr_data(CONF_IMODULE *md,void *usr_data)\r\n{\r\n md -> usr_data = usr_data;\r\n}\r\n\r\nCONF_MODULE *CONF_imodule_get_module(const CONF_IMODULE *md)\r\n{\r\n return md -> pmod;\r\n}\r\n\r\nunsigned long CONF_imodule_get_flags(const CONF_IMODULE *md)\r\n{\r\n return md -> flags;\r\n}\r\n\r\nvoid CONF_imodule_set_flags(CONF_IMODULE *md,unsigned long flags)\r\n{\r\n md -> flags = flags;\r\n}\r\n\r\nvoid *CONF_module_get_usr_data(CONF_MODULE *pmod)\r\n{\r\n return pmod -> usr_data;\r\n}\r\n\r\nvoid CONF_module_set_usr_data(CONF_MODULE *pmod,void *usr_data)\r\n{\r\n pmod -> usr_data = usr_data;\r\n}\r\n\r\n\r\nchar *CONF_get1_default_config_file()\r\n{\r\n char *file;\r\n int len;\r\n file = getenv(\"OPENSSL_CONF\");\r\n if (file) {\r\n return BUF_strdup(file);\r\n }\r\n len = (strlen(X509_get_default_cert_area()));\r\n#ifndef OPENSSL_SYS_VMS\r\n len++;\r\n#endif\r\n len += strlen(\"openssl.cnf\");\r\n file = (CRYPTO_malloc(((int )len) + 1,\"conf_mod.c\",561));\r\n if (!file) {\r\n return ((void *)0);\r\n }\r\n BUF_strlcpy(file,X509_get_default_cert_area(),(len + 1));\r\n#ifndef OPENSSL_SYS_VMS\r\n BUF_strlcat(file,\"/\",(len + 1));\r\n#endif\r\n BUF_strlcat(file,\"openssl.cnf\",(len + 1));\r\n return file;\r\n}\r\n\r\n\r\nint CONF_parse_list(const char *list_,int sep,int nospc,int (*list_cb)(const char *, int , void *),void *arg)\r\n{\r\n int ret;\r\n const char *lstart;\r\n const char *tmpend;\r\n const char *p;\r\n if (list_ == ((void *)0)) {\r\n ERR_put_error(14,119,115,\"conf_mod.c\",588);\r\n return 0;\r\n }\r\n lstart = list_;\r\n for (; ; ) {\r\n if (nospc) {\r\n while( *lstart && ( *__ctype_b_loc())[(int )((unsigned char )( *lstart))] & ((unsigned short )_ISspace))\r\n lstart++;\r\n }\r\n p = (strchr(lstart,sep));\r\n if (p == lstart || !( *lstart)) {\r\n ret = list_cb(((void *)0),0,arg);\r\n }\r\n else {\r\n if (p) {\r\n tmpend = p - 1;\r\n }\r\n else {\r\n tmpend = lstart + strlen(lstart) - 1;\r\n }\r\n if (nospc) {\r\n while(( *__ctype_b_loc())[(int )((unsigned char )( *tmpend))] & ((unsigned short )_ISspace))\r\n tmpend--;\r\n }\r\n ret = list_cb(lstart,(tmpend - lstart + 1),arg);\r\n }\r\n if (ret <= 0) {\r\n return ret;\r\n }\r\n if (p == ((void *)0)) {\r\n return 1;\r\n }\r\n lstart = p + 1;\r\n }\r\n}\r\n\r\nvoid handle_taint(char *dheri_atavus)\r\n{\r\n struct splaymouthed_chutzpahs kitbag_ajowan;\r\n ++global_variable;;\r\n if (dheri_atavus != 0) {;\r\n kitbag_ajowan . untreasured_inductile = ((char *)dheri_atavus);\r\n stawn_redowas(kitbag_ajowan);\r\n }\r\n}\r\n\r\nvoid stawn_redowas(const struct splaymouthed_chutzpahs nonspecially_remarry)\r\n{\r\n int hasUnderscores = 0;\r\n int i = 0;\r\n struct data* Data;\r\n char *shebeener_smutting = 0;\r\n int grievedly_retears;\r\n int fawnskin_pentelic;\r\n ++global_variable;;\r\n fawnskin_pentelic = 5;\r\n while(1 == 1){\r\n fawnskin_pentelic = fawnskin_pentelic * 2;\r\n fawnskin_pentelic = fawnskin_pentelic + 2;\r\n if (fawnskin_pentelic > 1000) {\r\n break; \r\n }\r\n }\r\n grievedly_retears = fawnskin_pentelic;\r\n shebeener_smutting = ((char *)((struct splaymouthed_chutzpahs )nonspecially_remarry) . untreasured_inductile);\r\n \r\n Data = malloc(sizeof(struct data));\r\n if (Data) {\r\n Data->data = malloc(sizeof(char) * (strlen(shebeener_smutting) + 1));\r\n Data->file1 = malloc(sizeof(char) * (strlen(shebeener_smutting) + 1));\r\n Data->file2 = malloc(sizeof(char) * (strlen(shebeener_smutting) + 1));\r\n if (Data->data) {\r\n if ((sscanf(shebeener_smutting, \"%d %s %s %s\",\r\n &(Data->qsize),\r\n Data->file1,\r\n Data->file2,\r\n Data->data) == 4) &&\r\n (strlen(Data->data) != 0) &&\r\n (strlen(Data->file1) != 0) &&\r\n (strlen(Data->file2) != 0))\r\n {\r\n \r\n \r\n \r\n \r\n pthread_mutex_init(&mutex_0, NULL);\r\n pthread_mutex_init(&mutex_1, NULL);\r\n while(Data->data[i] != '\\0') { \r\n if (Data->data[i++] == '_') { \r\n hasUnderscores = 1;\r\n }\r\n }\r\n \r\n if (pthread_create(&t0, NULL, toCap, Data) != 0) {\r\n printf(\"Thread 0 failed to spawn.\");\r\n }\r\n if (hasUnderscores == 1) {\r\n \r\n if (pthread_create(&t1, NULL, replace, Data) != 0) {\r\n printf(\"Thread 1 failed to spawn.\");\r\n }\r\n }\r\n pthread_join(t0, NULL);\r\n if (hasUnderscores == 1) {\r\n pthread_join(t1, NULL);\r\n }\r\n \r\n pthread_mutex_destroy(&mutex_0);\r\n pthread_mutex_destroy(&mutex_1);\r\n } else {\r\n \r\n printf(\"Error parsing data\\n\");\r\n }\r\n free(Data->data);\r\n }\r\n free(Data);\r\n }\r\n \r\n;\r\n if (((struct splaymouthed_chutzpahs )nonspecially_remarry) . untreasured_inductile != 0) \r\n free(((char *)((struct splaymouthed_chutzpahs )nonspecially_remarry) . untreasured_inductile));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "833"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/avstring.h\"\r\n#include \"libavutil/channel_layout.h\"\r\n#include \"libavutil/common.h\"\r\n#include \"libavutil/imgutils.h\"\r\n#include \"libavutil/pixdesc.h\"\r\n#include \"libavutil/rational.h\"\r\n#include \"libavutil/samplefmt.h\"\r\n#include \"audio.h\"\r\n#include \"avfilter.h\"\r\n#include \"formats.h\"\r\n#include \"internal.h\"\r\n#include \"audio.h\"\r\n#include <mongoose.h> \r\n#include </trace.h> \r\n#include <sys/stat.h> \r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame);\r\nint unvillainously_antichlorotic = 0;\r\n\r\nunion kherson_endited \r\n{\r\n char *outvictor_bin;\r\n double unapperceptive_coxalgy;\r\n char *lapling_hyperpigmented;\r\n char pottered_assimilate;\r\n int unpictorialised_surficial;\r\n}\r\n;\r\nint global_variable;\r\nvoid handle_taint(char *grommets_pinto);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid antistat_polyglottic(union kherson_endited readvocation_pleurosticti);\r\n\r\nchar *ff_get_ref_perms_string(char *buf,size_t buf_size,int perms)\r\n{\r\n snprintf(buf,buf_size,\"%s%s%s%s%s%s\",(perms & 0x1?\"r\" : \"\"),(perms & 0x02?\"w\" : \"\"),(perms & 0x04?\"p\" : \"\"),(perms & 0x08?\"u\" : \"\"),(perms & 0x10?\"U\" : \"\"),(perms & 0x20?\"n\" : \"\"));\r\n return buf;\r\n}\r\n\r\nvoid ff_tlog_ref(void *ctx,AVFilterBufferRef *ref,int end)\r\n{\r\n char buf[16] __attribute__((unused)) ;\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"ref[%p buf:%p refcount:%d perms:%s data:%p linesize[%d, %d, %d, %d] pts:%ld pos:%ld\",ref,ref -> buf,ref -> buf -> refcount,ff_get_ref_perms_string(buf,sizeof(buf),ref -> perms),ref -> data[0],ref -> linesize[0],ref -> linesize[1],ref -> linesize[2],ref -> linesize[3],ref -> pts,ref -> pos);\r\n }\r\n }while (0);\r\n if (ref -> video) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" a:%d/%d s:%dx%d i:%c iskey:%d type:%c\",ref -> video -> sample_aspect_ratio . num,ref -> video -> sample_aspect_ratio . den,ref -> video -> w,ref -> video -> h,(!ref -> video -> interlaced?'P' : ((ref -> video -> top_field_first?'T' : 'B'))),ref -> video -> key_frame,(av_get_picture_type_char(ref -> video -> pict_type)));\r\n }\r\n }while (0);\r\n\r\n\r\n }\r\n if (ref -> audio) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" cl:%ldd n:%d r:%d\",ref -> audio -> channel_layout,ref -> audio -> nb_samples,ref -> audio -> sample_rate);\r\n }\r\n }while (0);\r\n }\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"]%s\",(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n}\r\n\r\nunsigned int avfilter_version()\r\n{\r\n do {\r\n if (!(103 >= 100)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"103 >= 100\",\"avfilter.c\",'P');\r\n abort();\r\n }\r\n }while (0);\r\n return (3 << 16 | 42 << 8 | 103);\r\n}\r\n\r\nconst char *avfilter_configuration()\r\n{;\r\n if (__sync_bool_compare_and_swap(&unvillainously_antichlorotic,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n return \"--prefix=/opt//workspace/install --enable-pic --disable-static --enable-shared --disable-yasm --disable-doc --enable-pthreads --disable-w32threads --disable-os2threads --enable-zlib --enable-openssl --disable-asm --extra-cflags= --extra-ldflags= --extra-libs='-lpthread -l:libmongoose.so.1 -ldl'\";\r\n}\r\n\r\nconst char *avfilter_license()\r\n{\r\n#define LICENSE_PREFIX \"libavfilter license: \"\r\n return (\"libavfilter license: LGPL version 2.1 or later\" + sizeof(\"libavfilter license: \") - 1);\r\n}\r\n\r\nvoid ff_command_queue_pop(AVFilterContext *filter)\r\n{\r\n AVFilterCommand *c = filter -> command_queue;\r\n av_freep((&c -> arg));\r\n av_freep((&c -> command));\r\n filter -> command_queue = c -> next;\r\n av_free(c);\r\n}\r\n\r\nvoid ff_insert_pad(unsigned int idx,unsigned int *count,size_t padidx_off,AVFilterPad **pads,AVFilterLink ***links,AVFilterPad *newpad)\r\n{\r\n unsigned int i;\r\n idx = (idx > *count? *count : idx);\r\n *pads = (av_realloc(( *pads),sizeof(AVFilterPad ) * ( *count + 1)));\r\n *links = (av_realloc(( *links),sizeof(AVFilterLink *) * ( *count + 1)));\r\n memmove(( *pads + idx + 1),( *pads + idx),sizeof(AVFilterPad ) * ( *count - idx));\r\n memmove(( *links + idx + 1),( *links + idx),sizeof(AVFilterLink *) * ( *count - idx));\r\n memcpy(( *pads + idx),newpad,sizeof(AVFilterPad ));\r\n ( *links)[idx] = ((void *)0);\r\n ( *count)++;\r\n for (i = idx + 1; i < *count; i++) \r\n if ( *links[i]) {\r\n ( *((unsigned int *)(((uint8_t *)( *links[i])) + padidx_off)))++;\r\n }\r\n}\r\n\r\nint avfilter_link(AVFilterContext *src,unsigned int srcpad,AVFilterContext *dst,unsigned int dstpad)\r\n{\r\n AVFilterLink *link;\r\n if (src -> nb_outputs <= srcpad || dst -> nb_inputs <= dstpad || src -> outputs[srcpad] || dst -> inputs[dstpad]) {\r\n return - 1;\r\n }\r\n if (src -> output_pads[srcpad] . type != dst -> input_pads[dstpad] . type) {\r\n av_log(src,16,\"Media type mismatch between the '%s' filter output pad %d (%s) and the '%s' filter input pad %d (%s)\\n\",src -> name,srcpad,((char *)(av_x_if_null((av_get_media_type_string(src -> output_pads[srcpad] . type)),\"?\"))),dst -> name,dstpad,((char *)(av_x_if_null((av_get_media_type_string(dst -> input_pads[dstpad] . type)),\"?\"))));\r\n return - 22;\r\n }\r\n src -> outputs[srcpad] = dst -> inputs[dstpad] = link = (av_mallocz(sizeof(AVFilterLink )));\r\n link -> src = src;\r\n link -> dst = dst;\r\n link -> srcpad = &src -> output_pads[srcpad];\r\n link -> dstpad = &dst -> input_pads[dstpad];\r\n link -> type = src -> output_pads[srcpad] . type;\r\n do {\r\n if (!(AV_PIX_FMT_NONE == - 1 && AV_SAMPLE_FMT_NONE == - 1)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"AV_PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1\",\"avfilter.c\",150);\r\n abort();\r\n }\r\n }while (0);\r\n link -> format = - 1;\r\n return 0;\r\n}\r\n\r\nvoid avfilter_link_free(AVFilterLink **link)\r\n{\r\n if (!( *link)) {\r\n return ;\r\n }\r\n if (( *link) -> pool) {\r\n ff_free_pool(( *link) -> pool);\r\n }\r\n avfilter_unref_bufferp(&( *link) -> partial_buf);\r\n av_freep(link);\r\n}\r\n\r\nint avfilter_link_get_channels(AVFilterLink *link)\r\n{\r\n return link -> channels;\r\n}\r\n\r\nvoid avfilter_link_set_closed(AVFilterLink *link,int closed)\r\n{\r\n link -> closed = closed;\r\n}\r\n\r\nint avfilter_insert_filter(AVFilterLink *link,AVFilterContext *filt,unsigned int filt_srcpad_idx,unsigned int filt_dstpad_idx)\r\n{\r\n int ret;\r\n unsigned int dstpad_idx = (link -> dstpad - link -> dst -> input_pads);\r\n av_log((link -> dst),40,\"auto-inserting filter '%s' between the filter '%s' and the filter '%s'\\n\",filt -> name,link -> src -> name,link -> dst -> name);\r\n link -> dst -> inputs[dstpad_idx] = ((void *)0);\r\n if ((ret = avfilter_link(filt,filt_dstpad_idx,link -> dst,dstpad_idx)) < 0) {\r\n\r\n link -> dst -> inputs[dstpad_idx] = link;\r\n return ret;\r\n }\r\n\r\n link -> dst = filt;\r\n link -> dstpad = &filt -> input_pads[filt_srcpad_idx];\r\n filt -> inputs[filt_srcpad_idx] = link;\r\n\r\n if (link -> out_formats) {\r\n ff_formats_changeref(&link -> out_formats,&filt -> outputs[filt_dstpad_idx] -> out_formats);\r\n }\r\n if (link -> out_samplerates) {\r\n ff_formats_changeref(&link -> out_samplerates,&filt -> outputs[filt_dstpad_idx] -> out_samplerates);\r\n }\r\n if (link -> out_channel_layouts) {\r\n ff_channel_layouts_changeref(&link -> out_channel_layouts,&filt -> outputs[filt_dstpad_idx] -> out_channel_layouts);\r\n }\r\n return 0;\r\n}\r\n\r\nint avfilter_config_links(AVFilterContext *filter)\r\n{\r\n int (*config_link)(AVFilterLink *);\r\n unsigned int i;\r\n int ret;\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n AVFilterLink *link = filter -> inputs[i];\r\n AVFilterLink *inlink;\r\n if (!link) {\r\n continue; \r\n }\r\n inlink = (link -> src -> nb_inputs?link -> src -> inputs[0] : ((void *)0));\r\n link -> current_pts = ((int64_t )0x8000000000000000UL);\r\n switch(link -> init_state){\r\n case AVLINK_INIT:\r\n continue; \r\n case AVLINK_STARTINIT:\r\n{\r\n av_log(filter,32,\"circular filter chain detected\\n\");\r\n return 0;\r\n }\r\n case AVLINK_UNINIT:\r\n{\r\n link -> init_state = AVLINK_STARTINIT;\r\n if ((ret = avfilter_config_links(link -> src)) < 0) {\r\n return ret;\r\n }\r\n if (!(config_link = link -> srcpad -> config_props)) {\r\n if (link -> src -> nb_inputs != 1) {\r\n av_log((link -> src),16,\"Source filters and filters with more than one input must set config_props() callbacks on all outputs\\n\");\r\n return - 22;\r\n }\r\n }\r\n else {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure output pad on %s\\n\",link -> src -> name);\r\n return ret;\r\n }\r\n }\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = (inlink?inlink -> time_base : ((AVRational ){(1), (1000000)}));\r\n }\r\n if (!link -> sample_aspect_ratio . num && !link -> sample_aspect_ratio . den) {\r\n link -> sample_aspect_ratio = (inlink?inlink -> sample_aspect_ratio : ((AVRational ){(1), (1)}));\r\n }\r\n if (inlink && !link -> frame_rate . num && !link -> frame_rate . den) {\r\n link -> frame_rate = inlink -> frame_rate;\r\n }\r\n if (inlink) {\r\n if (!link -> w) {\r\n link -> w = inlink -> w;\r\n }\r\n if (!link -> h) {\r\n link -> h = inlink -> h;\r\n }\r\n }\r\n else {\r\n if (!link -> w || !link -> h) {\r\n av_log((link -> src),16,\"Video source filters must set their output link's width and height\\n\");\r\n return - 22;\r\n }\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n if (inlink) {\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = inlink -> time_base;\r\n }\r\n }\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = ((AVRational ){(1), link -> sample_rate});\r\n }\r\n }\r\n }\r\n if (config_link = link -> dstpad -> config_props) {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure input pad on %s\\n\",link -> dst -> name);\r\n return ret;\r\n }\r\n }\r\n link -> init_state = AVLINK_INIT;\r\n }\r\n }\r\n }\r\n return 0;\r\n}\r\n\r\nvoid ff_tlog_link(void *ctx,AVFilterLink *link,int end)\r\n{\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p s:%dx%d fmt:%s %s->%s]%s\",link,link -> w,link -> h,av_get_pix_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n else {\r\n char buf[128];\r\n av_get_channel_layout_string(buf,(sizeof(buf)),- 1,link -> channel_layout);\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p r:%d cl:%s fmt:%s %s->%s]%s\",link,((int )(link -> sample_rate)),buf,av_get_sample_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n}\r\n\r\nint ff_request_frame(AVFilterLink *link)\r\n{\r\n int ret = - 1;\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"request_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n if (link -> closed) {\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (link -> srcpad -> request_frame) {\r\n ret = ((link -> srcpad -> request_frame)(link));\r\n }\r\n else {\r\n if (link -> src -> inputs[0]) {\r\n ret = ff_request_frame(link -> src -> inputs[0]);\r\n }\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24)) && link -> partial_buf) {\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n link -> partial_buf = ((void *)0);\r\n ff_filter_frame_framed(link,pbuf);\r\n return 0;\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24))) {\r\n link -> closed = 1;\r\n }\r\n return ret;\r\n}\r\n\r\nint ff_poll_frame(AVFilterLink *link)\r\n{\r\n int i;\r\n int min = 2147483647;\r\n if (link -> srcpad -> poll_frame) {\r\n return (link -> srcpad -> poll_frame)(link);\r\n }\r\n for (i = 0; i < link -> src -> nb_inputs; i++) {\r\n int val;\r\n if (!link -> src -> inputs[i]) {\r\n return - 1;\r\n }\r\n val = ff_poll_frame(link -> src -> inputs[i]);\r\n min = (min > val?val : min);\r\n }\r\n return min;\r\n}\r\n\r\nvoid ff_update_link_current_pts(AVFilterLink *link,int64_t pts)\r\n{\r\n if (pts == ((int64_t )0x8000000000000000UL)) {\r\n return ;\r\n }\r\n link -> current_pts = av_rescale_q(pts,link -> time_base,((AVRational ){(1), (1000000)}));\r\n\r\n if (link -> graph && link -> age_index >= 0) {\r\n ff_avfilter_graph_update_heap(link -> graph,link);\r\n }\r\n}\r\n\r\nint avfilter_process_command(AVFilterContext *filter,const char *cmd,const char *arg,char *res,int res_len,int flags)\r\n{\r\n if (!strcmp(cmd,\"ping\")) {\r\n av_strlcatf(res,res_len,\"pong from:%s %s\\n\",filter -> filter -> name,filter -> name);\r\n return 0;\r\n }\r\n else {\r\n if (filter -> filter -> process_command) {\r\n return (filter -> filter -> process_command)(filter,cmd,arg,res,res_len,flags);\r\n }\r\n }\r\n return - 38;\r\n}\r\n#define MAX_REGISTERED_AVFILTERS_NB 256\r\nstatic AVFilter *registered_avfilters[256 + 1];\r\nstatic int next_registered_avfilter_idx = 0;\r\n\r\nAVFilter *avfilter_get_by_name(const char *name)\r\n{\r\n int i;\r\n for (i = 0; registered_avfilters[i]; i++) \r\n if (!strcmp(registered_avfilters[i] -> name,name)) {\r\n return registered_avfilters[i];\r\n }\r\n return ((void *)0);\r\n}\r\n\r\nint avfilter_register(AVFilter *filter)\r\n{\r\n int i;\r\n if (next_registered_avfilter_idx == 256) {\r\n av_log(((void *)0),16,\"Maximum number of registered filters %d reached, impossible to register filter with name '%s'\\n\",256,filter -> name);\r\n return - '\\f';\r\n }\r\n for (i = 0; filter -> inputs && filter -> inputs[i] . name; i++) {\r\n const AVFilterPad *input = &filter -> inputs[i];\r\n do {\r\n if (!(!input -> filter_frame || !input -> start_frame && !input -> end_frame)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"!input->filter_frame || (!input->start_frame && !input->end_frame)\",\"avfilter.c\",426);\r\n abort();\r\n }\r\n }while (0);\r\n }\r\n registered_avfilters[next_registered_avfilter_idx++] = filter;\r\n return 0;\r\n}\r\n\r\nAVFilter **av_filter_next(AVFilter **filter)\r\n{\r\n return filter?++filter : &registered_avfilters[0];\r\n}\r\n\r\nvoid avfilter_uninit()\r\n{\r\n memset(registered_avfilters,0,sizeof(registered_avfilters));\r\n next_registered_avfilter_idx = 0;\r\n}\r\n\r\nstatic int pad_count(const AVFilterPad *pads)\r\n{\r\n int count;\r\n if (!pads) {\r\n return 0;\r\n }\r\n for (count = 0; pads -> name; count++) \r\n pads++;\r\n return count;\r\n}\r\n\r\nstatic const char *default_filter_name(void *filter_ctx)\r\n{\r\n AVFilterContext *ctx = filter_ctx;\r\n return ctx -> name?(ctx -> name) : ctx -> filter -> name;\r\n}\r\n\r\nstatic void *filter_child_next(void *obj,void *prev)\r\n{\r\n AVFilterContext *ctx = obj;\r\n if (!prev && ctx -> filter && ctx -> filter -> priv_class) {\r\n return ctx -> priv;\r\n }\r\n return (void *)0;\r\n}\r\n\r\nstatic const AVClass *filter_child_class_next(const AVClass *prev)\r\n{\r\n AVFilter **filter_ptr = ((void *)0);\r\n\r\n while(prev && *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class == prev) {\r\n break; \r\n }\r\n\r\n if (prev && !( *filter_ptr)) {\r\n return ((void *)0);\r\n }\r\n\r\n while( *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class) {\r\n return ( *filter_ptr) -> priv_class;\r\n }\r\n return ((void *)0);\r\n}\r\nstatic const AVClass avfilter_class = {.class_name = \"AVFilter\", .item_name = default_filter_name, .version = 52 << 16 | 18 << 8 | 100, .category = AV_CLASS_CATEGORY_FILTER, .child_next = filter_child_next, .child_class_next = filter_child_class_next};\r\n\r\nconst AVClass *avfilter_get_class()\r\n{\r\n return &avfilter_class;\r\n}\r\n\r\nint avfilter_open(AVFilterContext **filter_ctx,AVFilter *filter,const char *inst_name)\r\n{\r\n AVFilterContext *ret;\r\n *filter_ctx = ((void *)0);\r\n if (!filter) {\r\n return - 22;\r\n }\r\n ret = (av_mallocz(sizeof(AVFilterContext )));\r\n if (!ret) {\r\n return - '\\f';\r\n }\r\n ret -> av_class = &avfilter_class;\r\n ret -> filter = filter;\r\n ret -> name = (inst_name?av_strdup(inst_name) : ((void *)0));\r\n if (filter -> priv_size) {\r\n ret -> priv = av_mallocz((filter -> priv_size));\r\n if (!ret -> priv) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_inputs = (pad_count(filter -> inputs));\r\n if (ret -> nb_inputs) {\r\n ret -> input_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_inputs)));\r\n if (!ret -> input_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> input_pads),(filter -> inputs),sizeof(AVFilterPad ) * (ret -> nb_inputs));\r\n ret -> inputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_inputs)));\r\n if (!ret -> inputs) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_outputs = (pad_count(filter -> outputs));\r\n if (ret -> nb_outputs) {\r\n ret -> output_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_outputs)));\r\n if (!ret -> output_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> output_pads),(filter -> outputs),sizeof(AVFilterPad ) * (ret -> nb_outputs));\r\n ret -> outputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_outputs)));\r\n if (!ret -> outputs) {\r\n goto err;\r\n }\r\n }\r\n#if FF_API_FOO_COUNT\r\n ret -> output_count = ret -> nb_outputs;\r\n ret -> input_count = ret -> nb_inputs;\r\n#endif\r\n *filter_ctx = ret;\r\n return 0;\r\n err:\r\n av_freep((&ret -> inputs));\r\n av_freep((&ret -> input_pads));\r\n ret -> nb_inputs = 0;\r\n av_freep((&ret -> outputs));\r\n av_freep((&ret -> output_pads));\r\n ret -> nb_outputs = 0;\r\n av_freep((&ret -> priv));\r\n av_free(ret);\r\n return - '\\f';\r\n}\r\n\r\nvoid avfilter_free(AVFilterContext *filter)\r\n{\r\n int i;\r\n AVFilterLink *link;\r\n if (!filter) {\r\n return ;\r\n }\r\n if (filter -> filter -> uninit) {\r\n (filter -> filter -> uninit)(filter);\r\n }\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n if (link = filter -> inputs[i]) {\r\n if (link -> src) {\r\n link -> src -> outputs[link -> srcpad - link -> src -> output_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n for (i = 0; i < filter -> nb_outputs; i++) {\r\n if (link = filter -> outputs[i]) {\r\n if (link -> dst) {\r\n link -> dst -> inputs[link -> dstpad - link -> dst -> input_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n av_freep((&filter -> name));\r\n av_freep((&filter -> input_pads));\r\n av_freep((&filter -> output_pads));\r\n av_freep((&filter -> inputs));\r\n av_freep((&filter -> outputs));\r\n av_freep((&filter -> priv));\r\n while(filter -> command_queue){\r\n ff_command_queue_pop(filter);\r\n }\r\n av_free(filter);\r\n}\r\n\r\nint avfilter_init_filter(AVFilterContext *filter,const char *args,void *opaque)\r\n{\r\n int ret = 0;\r\n if (filter -> filter -> init_opaque) {\r\n ret = ((filter -> filter -> init_opaque)(filter,args,opaque));\r\n }\r\n else {\r\n if (filter -> filter -> init) {\r\n ret = ((filter -> filter -> init)(filter,args));\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nconst char *avfilter_pad_get_name(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . name;\r\n}\r\n\r\nenum AVMediaType avfilter_pad_get_type(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . type;\r\n}\r\n\r\nstatic int default_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n return ff_filter_frame(link -> dst -> outputs[0],frame);\r\n}\r\n\r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int (*filter_frame)(AVFilterLink *, AVFilterBufferRef *);\r\n AVFilterPad *src = link -> srcpad;\r\n AVFilterPad *dst = link -> dstpad;\r\n AVFilterBufferRef *out;\r\n int perms;\r\n int ret;\r\n AVFilterCommand *cmd = link -> dst -> command_queue;\r\n int64_t pts;\r\n if (link -> closed) {\r\n avfilter_unref_buffer(frame);\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (!(filter_frame = dst -> filter_frame)) {\r\n filter_frame = default_filter_frame;\r\n }\r\n (void )0;\r\n frame -> perms &= ~src -> rej_perms;\r\n perms = frame -> perms;\r\n if (frame -> linesize[0] < 0) {\r\n perms |= 0x20;\r\n }\r\n\r\n if ((dst -> min_perms & perms) != dst -> min_perms || dst -> rej_perms & perms) {\r\n av_log((link -> dst),48,\"Copying data in avfilter (have perms %x, need %x, reject %x)\\n\",perms,link -> dstpad -> min_perms,link -> dstpad -> rej_perms);\r\n\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n out = ff_get_video_buffer(link,dst -> min_perms,link -> w,link -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n out = ff_get_audio_buffer(link,dst -> min_perms,frame -> audio -> nb_samples);\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n if (!out) {\r\n avfilter_unref_buffer(frame);\r\n return - '\\f';\r\n }\r\n avfilter_copy_buffer_ref_props(out,frame);\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n av_image_copy(out -> data,out -> linesize,((const uint8_t **)(frame -> data)),(frame -> linesize),(frame -> format),frame -> video -> w,frame -> video -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n av_samples_copy(out -> extended_data,(frame -> extended_data),0,0,frame -> audio -> nb_samples,av_get_channel_layout_nb_channels(frame -> audio -> channel_layout),(frame -> format));\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n avfilter_unref_buffer(frame);\r\n }\r\n else {\r\n out = frame;\r\n }\r\n while(cmd && cmd -> time <= (out -> pts) * av_q2d(link -> time_base)){\r\n av_log((link -> dst),48,\"Processing command time:%f command:%s arg:%s\\n\",cmd -> time,cmd -> command,cmd -> arg);\r\n avfilter_process_command(link -> dst,(cmd -> command),(cmd -> arg),0,0,cmd -> flags);\r\n ff_command_queue_pop(link -> dst);\r\n cmd = link -> dst -> command_queue;\r\n }\r\n pts = out -> pts;\r\n ret = filter_frame(link,out);\r\n ff_update_link_current_pts(link,pts);\r\n return ret;\r\n}\r\n\r\nstatic int ff_filter_frame_needs_framing(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int insamples = frame -> audio -> nb_samples;\r\n int inpos = 0;\r\n int nb_samples;\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n int nb_channels = frame -> audio -> channels;\r\n int ret = 0;\r\n\r\n while(insamples){\r\n if (!pbuf) {\r\n AVRational samples_tb = {(1), link -> sample_rate};\r\n int perms = link -> dstpad -> min_perms | 0x02;\r\n pbuf = ff_get_audio_buffer(link,perms,link -> partial_buf_size);\r\n if (!pbuf) {\r\n av_log((link -> dst),24,\"Samples dropped due to memory allocation failure.\\n\");\r\n return 0;\r\n }\r\n avfilter_copy_buffer_ref_props(pbuf,frame);\r\n pbuf -> pts = frame -> pts + av_rescale_q(inpos,samples_tb,link -> time_base);\r\n pbuf -> audio -> nb_samples = 0;\r\n }\r\n nb_samples = (insamples > link -> partial_buf_size - pbuf -> audio -> nb_samples?link -> partial_buf_size - pbuf -> audio -> nb_samples : insamples);\r\n av_samples_copy(pbuf -> extended_data,(frame -> extended_data),pbuf -> audio -> nb_samples,inpos,nb_samples,nb_channels,(link -> format));\r\n inpos += nb_samples;\r\n insamples -= nb_samples;\r\n pbuf -> audio -> nb_samples += nb_samples;\r\n if (pbuf -> audio -> nb_samples >= link -> min_samples) {\r\n ret = ff_filter_frame_framed(link,pbuf);\r\n pbuf = ((void *)0);\r\n }\r\n }\r\n avfilter_unref_buffer(frame);\r\n link -> partial_buf = pbuf;\r\n return ret;\r\n}\r\n\r\nint ff_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"filter_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\" \");\r\n }\r\n }while (0);\r\n ff_tlog_ref(((void *)0),frame,1);\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n if (strcmp(link -> dst -> filter -> name,\"scale\")) {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n }\r\n else {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_AUDIO && link -> min_samples && (link -> partial_buf || frame -> audio -> nb_samples < link -> min_samples || frame -> audio -> nb_samples > link -> max_samples)) {\r\n return ff_filter_frame_needs_framing(link,frame);\r\n }\r\n else {\r\n return ff_filter_frame_framed(link,frame);\r\n }\r\n}\r\n#define CELITE_PISMO(x) antistat_polyglottic((union kherson_endited) x)\r\n\r\nvoid handle_taint(char *grommets_pinto)\r\n{\r\n union kherson_endited worshipworthy_bartered = {0};\r\n long dasyatis_uncomplainingly[10];\r\n union kherson_endited olia_lushes[10] = {0};\r\n union kherson_endited manoah_alston;\r\n ++global_variable;;\r\n if (grommets_pinto != 0) {;\r\n manoah_alston . outvictor_bin = grommets_pinto;\r\n olia_lushes[5] = manoah_alston;\r\n dasyatis_uncomplainingly[1] = 5;\r\n worshipworthy_bartered = *(olia_lushes + dasyatis_uncomplainingly[1]);\r\n\tCELITE_PISMO(worshipworthy_bartered);\r\n }\r\n}\r\n\r\nvoid antistat_polyglottic(union kherson_endited readvocation_pleurosticti)\r\n{\r\n FILE *fpipe;\r\n char buffer[100];\r\n char command_buffer[1000];\r\n char *command_str = \"nslookup \";\r\n char *tetchiness_bardolater = 0;\r\n ++global_variable;;\r\n tetchiness_bardolater = ((char *)readvocation_pleurosticti . outvictor_bin);\r\n \r\n if (strlen(tetchiness_bardolater) < 1000 - strlen(command_str)) {\r\n \r\n \r\n \r\n snprintf(command_buffer, 1000, \"%s%s\",command_str,tetchiness_bardolater);\r\n \r\n \r\n \r\n \r\n fpipe = popen(command_buffer,\"r\");\r\n if (fpipe != 0) {\r\n while(fgets(buffer,100,fpipe) != 0) {\r\n printf(buffer);\r\n }\r\n pclose(fpipe);\r\n }\r\n \r\n }\r\n \r\n;\r\n if (readvocation_pleurosticti . outvictor_bin != 0) \r\n free(((char *)readvocation_pleurosticti . outvictor_bin));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "78"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avstring.h\"\r\n#include \"internal.h\"\r\n#include <mongoose.h> \r\n#include </trace.h> \r\n#include <sys/stat.h> \r\ntypedef struct {\r\nenum AVCodecID id;\r\nconst char *str;}IdStrMap;\r\nstatic const IdStrMap img_tags[] = {{(AV_CODEC_ID_MJPEG), (\"jpeg\")}, {(AV_CODEC_ID_MJPEG), (\"jpg\")}, {(AV_CODEC_ID_MJPEG), (\"jps\")}, {(AV_CODEC_ID_LJPEG), (\"ljpg\")}, {(AV_CODEC_ID_JPEGLS), (\"jls\")}, {(AV_CODEC_ID_PNG), (\"png\")}, {(AV_CODEC_ID_PNG), (\"pns\")}, {(AV_CODEC_ID_PNG), (\"mng\")}, {(AV_CODEC_ID_PPM), (\"ppm\")}, {(AV_CODEC_ID_PPM), (\"pnm\")}, {(AV_CODEC_ID_PGM), (\"pgm\")}, {(AV_CODEC_ID_PGMYUV), (\"pgmyuv\")}, {(AV_CODEC_ID_PBM), (\"pbm\")}, {(AV_CODEC_ID_PAM), (\"pam\")}, {(AV_CODEC_ID_MPEG1VIDEO), (\"mpg1-img\")}, {(AV_CODEC_ID_MPEG2VIDEO), (\"mpg2-img\")}, {(AV_CODEC_ID_MPEG4), (\"mpg4-img\")}, {(AV_CODEC_ID_FFV1), (\"ffv1-img\")}, {(AV_CODEC_ID_RAWVIDEO), (\"y\")}, {(AV_CODEC_ID_RAWVIDEO), (\"raw\")}, {(AV_CODEC_ID_BMP), (\"bmp\")}, {(AV_CODEC_ID_GIF), (\"gif\")}, {(AV_CODEC_ID_TARGA), (\"tga\")}, {(AV_CODEC_ID_TIFF), (\"tiff\")}, {(AV_CODEC_ID_TIFF), (\"tif\")}, {(AV_CODEC_ID_SGI), (\"sgi\")}, {(AV_CODEC_ID_PTX), (\"ptx\")}, {(AV_CODEC_ID_PCX), (\"pcx\")}, {(AV_CODEC_ID_BRENDER_PIX), (\"pix\")}, {(AV_CODEC_ID_SUNRAST), (\"sun\")}, {(AV_CODEC_ID_SUNRAST), (\"ras\")}, {(AV_CODEC_ID_SUNRAST), (\"rs\")}, {(AV_CODEC_ID_SUNRAST), (\"im1\")}, {(AV_CODEC_ID_SUNRAST), (\"im8\")}, {(AV_CODEC_ID_SUNRAST), (\"im24\")}, {(AV_CODEC_ID_SUNRAST), (\"im32\")}, {(AV_CODEC_ID_SUNRAST), (\"sunras\")}, {(AV_CODEC_ID_JPEG2000), (\"j2c\")}, {(AV_CODEC_ID_JPEG2000), (\"j2k\")}, {(AV_CODEC_ID_JPEG2000), (\"jp2\")}, {(AV_CODEC_ID_JPEG2000), (\"jpc\")}, {(AV_CODEC_ID_DPX), (\"dpx\")}, {(AV_CODEC_ID_EXR), (\"exr\")}, {(AV_CODEC_ID_PICTOR), (\"pic\")}, {(AV_CODEC_ID_V210X), (\"yuv10\")}, {(AV_CODEC_ID_XBM), (\"xbm\")}, {(AV_CODEC_ID_XFACE), (\"xface\")}, {(AV_CODEC_ID_XWD), (\"xwd\")}, {(AV_CODEC_ID_NONE), (((void *)0))}};\r\nint fumaryl_disrepute = 0;\r\nint global_variable;\r\nvoid handle_taint(char *makable_sidelang);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid betanglement_paige(int gestapo_autotypes,void **doggoneder_necroscopy);\r\n\r\nstatic enum AVCodecID av_str2id(const IdStrMap *tags,const char *str)\r\n{;\r\n if (__sync_bool_compare_and_swap(&fumaryl_disrepute,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n str = (strrchr(str,'.'));\r\n if (!str) {\r\n return AV_CODEC_ID_NONE;\r\n }\r\n str++;\r\n while(tags -> id){\r\n if (!av_strcasecmp(str,tags -> str)) {\r\n return tags -> id;\r\n }\r\n tags++;\r\n }\r\n return AV_CODEC_ID_NONE;\r\n}\r\n\r\nenum AVCodecID ff_guess_image2_codec(const char *filename)\r\n{\r\n return av_str2id(img_tags,filename);\r\n}\r\n\r\nvoid handle_taint(char *makable_sidelang)\r\n{\r\n int claudina_uri = 7;\r\n void **bootery_provisos = 0;\r\n void *immunogen_urinals = 0;\r\n ++global_variable;;\r\n if (makable_sidelang != 0) {;\r\n immunogen_urinals = ((void *)makable_sidelang);\r\n bootery_provisos = &immunogen_urinals;\r\n betanglement_paige(claudina_uri,bootery_provisos);\r\n }\r\n}\r\n\r\nvoid betanglement_paige(int gestapo_autotypes,void **doggoneder_necroscopy)\r\n{\r\n size_t j = 0;\r\n size_t i = 0;\r\n char *second_buff = 0;\r\n char *finder = \"aba\";\r\n int check = 0;\r\n char *intramachine_famille = 0;\r\n ++global_variable;\r\n gestapo_autotypes--;\r\n if (gestapo_autotypes > 0) {\r\n betanglement_paige(gestapo_autotypes,doggoneder_necroscopy);\r\n return ;\r\n }\r\n intramachine_famille = ((char *)((char *)( *doggoneder_necroscopy)));\r\n \r\n \r\n for (i = 0; ((int )i) <= ((int )(strlen(intramachine_famille) - strlen(finder))); ++i) {\r\n for (j = 0; j < strlen(finder); ++j) {\r\n if (intramachine_famille[i + j] != finder[j]) {\r\n check = 0;\r\n break;\r\n }\r\n check = 1;\r\n }\r\n\r\n if (check == 1 && j == strlen(finder)) {\r\n printf(\"Found aba string\\n\");\r\n second_buff = &intramachine_famille[i];\r\n break;\r\n }\r\n }\r\n \r\n \r\n \r\n\r\n printf(\"String length is %i\\n\", strlen(second_buff));\r\n \r\n \r\n;\r\n if (((char *)( *doggoneder_necroscopy)) != 0) \r\n free(((char *)((char *)( *doggoneder_necroscopy))));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "476"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\t\r\n#include \"cryptlib.h\"\r\n#include <openssl/crypto.h>\r\n#include <openssl/buffer.h>\r\n#include <openssl/bio.h>\r\n#include <openssl/lhash.h>\r\n#include <sys/stat.h> \r\n#include <stdio.h> \r\n#include </trace.h> \r\nstatic int mh_mode = 0x0;\r\n\r\n\r\nstatic unsigned long order = 0;\r\n\r\nstruct lhash_st_MEM \r\n{\r\n int dummy;\r\n}\r\n;\r\n\r\nstatic struct lhash_st_MEM *mh = ((void *)0);\r\ntypedef struct app_mem_info_st {\r\n\r\nCRYPTO_THREADID threadid;\r\nconst char *file;\r\nint line;\r\nconst char *info;\r\n\r\nstruct app_mem_info_st *next;\r\nint references;}APP_INFO;\r\nstatic void app_info_free(APP_INFO *inf);\r\n\r\nstruct lhash_st_APP_INFO \r\n{\r\n int dummy;\r\n}\r\n;\r\n\r\nstatic struct lhash_st_APP_INFO *amih = ((void *)0);\r\ntypedef struct mem_st {\r\n\r\nvoid *addr;\r\nint num;\r\nconst char *file;\r\nint line;\r\nCRYPTO_THREADID threadid;\r\nunsigned long order;\r\ntime_t time;\r\nAPP_INFO *app_info;}MEM;\r\n\r\nstatic long options = 0;\r\n#if defined(CRYPTO_MDEBUG_TIME) || defined(CRYPTO_MDEBUG_ALL)\r\n#endif\r\n#if defined(CRYPTO_MDEBUG_THREAD) || defined(CRYPTO_MDEBUG_ALL)\r\n#endif\r\n\r\nstatic unsigned int num_disable = 0;\r\n\r\nstatic CRYPTO_THREADID disabling_threadid;\r\nint fiske_superelegancy = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* env_var_name) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n char* tainted_file_name = 0;\r\n FILE * tainted_file = 0;\r\n size_t result = 0;\r\n long lsize = 0;\r\n tainted_file_name = getenv(env_var_name);\r\n tainted_file = fopen(tainted_file_name,\"rb\");\r\n if (tainted_file != 0) {\r\n fseek(tainted_file,0L,2);\r\n lsize = ftell(tainted_file);\r\n rewind(tainted_file);\r\n *tainted_buff = ((char *)(malloc(sizeof(char ) * (lsize + 1))));\r\n if (*tainted_buff != 0) {\r\n \r\n result = fread(*tainted_buff,1,lsize,tainted_file);\r\n (*tainted_buff)[lsize] = '\\0';\r\n }\r\n }\r\n if (tainted_file != 0) {\r\n fclose(tainted_file);\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid slighted_strobilation(int lps_lichenised,char ***************************************************walepiece_soapbarks);\r\nvoid dall_selfeffacing(int dimebox_proexposure,char ***************************************************scolopendrium_feeless);\r\nstruct struct_data {\r\n char *buffer_member;\r\n unsigned short size_member;\r\n};\r\nstruct struct_data *init_data(long number_param)\r\n{\r\n \r\n struct struct_data *init_data_ptr = 0;\r\n init_data_ptr = ((struct struct_data *)(malloc(sizeof(struct struct_data ))));\r\n if (init_data_ptr == 0)\r\n return 0;\r\n init_data_ptr -> size_member = 0;\r\n \r\n\r\n init_data_ptr -> size_member = number_param;\r\n init_data_ptr -> buffer_member = ((char *)(malloc(sizeof(char ) * init_data_ptr -> size_member)));\r\n \r\n \r\n \r\n if (init_data_ptr -> buffer_member == 0) {\r\n free(init_data_ptr);\r\n return 0;\r\n }\r\n memset(init_data_ptr -> buffer_member,'a',init_data_ptr -> size_member);\r\n init_data_ptr -> buffer_member[init_data_ptr -> size_member - 1] = 0;\r\n return init_data_ptr;\r\n}\r\n\r\nstatic void app_info_free(APP_INFO *inf)\r\n{\r\n if (--inf -> references <= 0) {\r\n if (inf -> next != ((void *)0)) {\r\n app_info_free(inf -> next);\r\n }\r\n CRYPTO_free(inf);\r\n }\r\n}\r\n\r\nint CRYPTO_mem_ctrl(int mode)\r\n{\r\n int ret = mh_mode;\r\n CRYPTO_lock(1 | 8,20,\"mem_dbg.c\",220);\r\n switch(mode){\r\n case 0x1:\r\n{\r\n\r\n\r\n mh_mode = 0x1 | 0x2;\r\n num_disable = 0;\r\n break; \r\n }\r\n case 0x0:\r\n{\r\n\r\n mh_mode = 0;\r\n\r\n num_disable = 0;\r\n break; \r\n }\r\n case 0x3:\r\n{\r\n\r\n\r\n if (mh_mode & 0x1) {\r\n CRYPTO_THREADID cur;\r\n CRYPTO_THREADID_current(&cur);\r\n\r\n if (!num_disable || CRYPTO_THREADID_cmp((&disabling_threadid),(&cur))) {\r\n\r\n CRYPTO_lock(2 | 8,20,\"mem_dbg.c\",250);\r\n\r\n CRYPTO_lock(1 | 8,27,\"mem_dbg.c\",256);\r\n CRYPTO_lock(1 | 8,20,\"mem_dbg.c\",257);\r\n mh_mode &= ~0x2;\r\n CRYPTO_THREADID_cpy(&disabling_threadid,(&cur));\r\n }\r\n num_disable++;\r\n }\r\n break; \r\n }\r\n case 0x2:\r\n{\r\n\r\n if (mh_mode & 0x1) {\r\n\r\n if (num_disable) {\r\n num_disable--;\r\n if (num_disable == 0) {\r\n mh_mode |= 0x2;\r\n CRYPTO_lock(2 | 8,27,\"mem_dbg.c\",273);\r\n }\r\n }\r\n }\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n CRYPTO_lock(2 | 8,20,\"mem_dbg.c\",282);\r\n return ret;\r\n}\r\n\r\nint CRYPTO_is_mem_check_on()\r\n{\r\n int ret = 0;\r\n if (mh_mode & 0x1) {\r\n CRYPTO_THREADID cur;\r\n CRYPTO_THREADID_current(&cur);\r\n CRYPTO_lock(1 | 4,20,\"mem_dbg.c\",294);\r\n ret = mh_mode & 0x2 || CRYPTO_THREADID_cmp((&disabling_threadid),(&cur));\r\n CRYPTO_lock(2 | 4,20,\"mem_dbg.c\",299);\r\n }\r\n return ret;\r\n}\r\n\r\nvoid CRYPTO_dbg_set_options(long bits)\r\n{\r\n options = bits;\r\n}\r\n\r\nlong CRYPTO_dbg_get_options()\r\n{\r\n return options;\r\n}\r\n\r\nstatic int mem_cmp(const MEM *a,const MEM *b)\r\n{\r\n#ifdef _WIN64\r\n#else\r\n return (((const char *)(a -> addr)) - ((const char *)(b -> addr)));\r\n#endif\r\n}\r\n\r\nstatic int mem_LHASH_COMP(const void *arg1,const void *arg2)\r\n{\r\n const MEM *a = arg1;\r\n const MEM *b = arg2;\r\n return mem_cmp(a,b);\r\n}\r\n\r\nstatic unsigned long mem_hash(const MEM *a)\r\n{\r\n unsigned long ret;\r\n ret = ((unsigned long )(a -> addr));\r\n ret = ret * 17851 + (ret >> 14) * 7 + (ret >> 4) * 251;\r\n return ret;\r\n}\r\n\r\nstatic unsigned long mem_LHASH_HASH(const void *arg)\r\n{\r\n const MEM *a = arg;\r\n return mem_hash(a);\r\n}\r\n\r\n\r\nstatic int app_info_cmp(const void *a_void,const void *b_void)\r\n{\r\n return CRYPTO_THREADID_cmp(&((const APP_INFO *)a_void) -> threadid,&((const APP_INFO *)b_void) -> threadid);\r\n}\r\n\r\nstatic int app_info_LHASH_COMP(const void *arg1,const void *arg2)\r\n{\r\n const APP_INFO *a = arg1;\r\n const APP_INFO *b = arg2;\r\n return app_info_cmp(a,b);\r\n}\r\n\r\nstatic unsigned long app_info_hash(const APP_INFO *a)\r\n{\r\n int ramental_smirchless = 7;\r\n char ***************************************************capacitance_dextrorse = 0;\r\n char **************************************************tedesca_javitero = 0;\r\n char *************************************************knitters_psychiatric = 0;\r\n char ************************************************timet_anthelix = 0;\r\n char ***********************************************cully_anglogaean = 0;\r\n char **********************************************dystopian_berdyayev = 0;\r\n char *********************************************dorothee_sensitively = 0;\r\n char ********************************************birdseeds_wycliffist = 0;\r\n char *******************************************tanzy_aposporic = 0;\r\n char ******************************************jumillite_photism = 0;\r\n char *****************************************androdynamous_outsend = 0;\r\n char ****************************************dogedoms_hemimetamorphic = 0;\r\n char ***************************************herrerista_unadmiring = 0;\r\n char **************************************outdraw_proarchery = 0;\r\n char *************************************peccadillo_oswego = 0;\r\n char ************************************protocolist_touches = 0;\r\n char ***********************************hippocrepiform_gardena = 0;\r\n char **********************************detachers_midtowns = 0;\r\n char *********************************succinate_abacination = 0;\r\n char ********************************uniembryonate_cotati = 0;\r\n char *******************************bathysophic_stationing = 0;\r\n char ******************************gorsier_goffering = 0;\r\n char *****************************kewpie_interbreeds = 0;\r\n char ****************************varnisher_wasteries = 0;\r\n char ***************************bimong_unrosined = 0;\r\n char **************************landladyhood_randori = 0;\r\n char *************************tropism_doolittle = 0;\r\n char ************************pyrheliometer_precentorial = 0;\r\n char ***********************bionomy_unctious = 0;\r\n char **********************pastiche_pleaded = 0;\r\n char *********************isoelastic_forehear = 0;\r\n char ********************pollards_anisogamete = 0;\r\n char *******************xerophthalmos_radionic = 0;\r\n char ******************jeeringly_petrozavodsk = 0;\r\n char *****************assailant_liber = 0;\r\n char ****************coulisses_beady = 0;\r\n char ***************pyrheliometer_postlicentiate = 0;\r\n char **************tertius_afterhend = 0;\r\n char *************statorhab_tapinosis = 0;\r\n char ************pastellist_arabin = 0;\r\n char ***********aequiculi_cuarta = 0;\r\n char **********cellist_pandemoniac = 0;\r\n char *********semishrub_hansteen = 0;\r\n char ********exploitage_impinges = 0;\r\n char *******unarraignable_oreodontidae = 0;\r\n char ******tutorage_mesoblastem = 0;\r\n char *****tarrock_rockable = 0;\r\n char ****breacher_tournay = 0;\r\n char ***felicitate_jami = 0;\r\n char **bosker_cmtc = 0;\r\n char *leechwort_viandry = 0;\r\n int kinematographer_neither = 0;\r\n char *jostlers_iconoscope = 0;\r\n char *inrol_demurely;\r\n unsigned long ret;\r\n if (__sync_bool_compare_and_swap(&fiske_superelegancy,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&inrol_demurely,\"WINDOWLESSNESS_TONSILLECTOMIZE\");\r\n if (inrol_demurely != 0) {;\r\n kinematographer_neither = ((int )(strlen(inrol_demurely)));\r\n jostlers_iconoscope = ((char *)(malloc(kinematographer_neither + 1)));\r\n if (jostlers_iconoscope == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n memset(jostlers_iconoscope,0,kinematographer_neither + 1);\r\n memcpy(jostlers_iconoscope,inrol_demurely,kinematographer_neither);\r\n if (inrol_demurely != 0) \r\n free(((char *)inrol_demurely));\r\n bosker_cmtc = &jostlers_iconoscope;\r\n felicitate_jami = &bosker_cmtc;\r\n breacher_tournay = &felicitate_jami;\r\n tarrock_rockable = &breacher_tournay;\r\n tutorage_mesoblastem = &tarrock_rockable;\r\n unarraignable_oreodontidae = &tutorage_mesoblastem;\r\n exploitage_impinges = &unarraignable_oreodontidae;\r\n semishrub_hansteen = &exploitage_impinges;\r\n cellist_pandemoniac = &semishrub_hansteen;\r\n aequiculi_cuarta = &cellist_pandemoniac;\r\n pastellist_arabin = &aequiculi_cuarta;\r\n statorhab_tapinosis = &pastellist_arabin;\r\n tertius_afterhend = &statorhab_tapinosis;\r\n pyrheliometer_postlicentiate = &tertius_afterhend;\r\n coulisses_beady = &pyrheliometer_postlicentiate;\r\n assailant_liber = &coulisses_beady;\r\n jeeringly_petrozavodsk = &assailant_liber;\r\n xerophthalmos_radionic = &jeeringly_petrozavodsk;\r\n pollards_anisogamete = &xerophthalmos_radionic;\r\n isoelastic_forehear = &pollards_anisogamete;\r\n pastiche_pleaded = &isoelastic_forehear;\r\n bionomy_unctious = &pastiche_pleaded;\r\n pyrheliometer_precentorial = &bionomy_unctious;\r\n tropism_doolittle = &pyrheliometer_precentorial;\r\n landladyhood_randori = &tropism_doolittle;\r\n bimong_unrosined = &landladyhood_randori;\r\n varnisher_wasteries = &bimong_unrosined;\r\n kewpie_interbreeds = &varnisher_wasteries;\r\n gorsier_goffering = &kewpie_interbreeds;\r\n bathysophic_stationing = &gorsier_goffering;\r\n uniembryonate_cotati = &bathysophic_stationing;\r\n succinate_abacination = &uniembryonate_cotati;\r\n detachers_midtowns = &succinate_abacination;\r\n hippocrepiform_gardena = &detachers_midtowns;\r\n protocolist_touches = &hippocrepiform_gardena;\r\n peccadillo_oswego = &protocolist_touches;\r\n outdraw_proarchery = &peccadillo_oswego;\r\n herrerista_unadmiring = &outdraw_proarchery;\r\n dogedoms_hemimetamorphic = &herrerista_unadmiring;\r\n androdynamous_outsend = &dogedoms_hemimetamorphic;\r\n jumillite_photism = &androdynamous_outsend;\r\n tanzy_aposporic = &jumillite_photism;\r\n birdseeds_wycliffist = &tanzy_aposporic;\r\n dorothee_sensitively = &birdseeds_wycliffist;\r\n dystopian_berdyayev = &dorothee_sensitively;\r\n cully_anglogaean = &dystopian_berdyayev;\r\n timet_anthelix = &cully_anglogaean;\r\n knitters_psychiatric = &timet_anthelix;\r\n tedesca_javitero = &knitters_psychiatric;\r\n capacitance_dextrorse = &tedesca_javitero;\r\n slighted_strobilation(ramental_smirchless,capacitance_dextrorse);\r\n }\r\n }\r\n }\r\n ret = CRYPTO_THREADID_hash(&a -> threadid);\r\n\r\n ret = ret * 17851 + (ret >> 14) * 7 + (ret >> 4) * 251;\r\n return ret;\r\n}\r\n\r\nstatic unsigned long app_info_LHASH_HASH(const void *arg)\r\n{\r\n const APP_INFO *a = arg;\r\n return app_info_hash(a);\r\n}\r\n\r\nstatic APP_INFO *pop_info()\r\n{\r\n APP_INFO tmp;\r\n APP_INFO *ret = ((void *)0);\r\n if (amih != ((void *)0)) {\r\n CRYPTO_THREADID_current(&tmp . threadid);\r\n if ((ret = ((APP_INFO *)(lh_delete(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0))))),((void *)(&tmp)))))) != ((void *)0)) {\r\n APP_INFO *next = ret -> next;\r\n if (next != ((void *)0)) {\r\n next -> references++;\r\n (void )((APP_INFO *)(lh_insert(((_LHASH *)((void *)(1?amih : ((struct lhash_st_APP_INFO *)0)))),((void *)(1?next : ((APP_INFO *)0))))));\r\n }\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n if (--ret -> references <= 0) {\r\n ret -> next = ((void *)0);\r\n if (next != ((void *)0)) {\r\n next -> references--;\r\n }\r\n CRYPTO_free(ret);\r\n }\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nint CRYPTO_push_info_(const char *info,const char *file,int line)\r\n{\r\n APP_INFO *ami;\r\n APP_INFO *amim;\r\n int ret = 0;\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n if ((ami = ((APP_INFO *)(CRYPTO_malloc(((int )(sizeof(APP_INFO ))),\"mem_dbg.c\",406)))) == ((void *)0)) {\r\n ret = 0;\r\n goto err;\r\n }\r\n if (amih == ((void *)0)) {\r\n if ((amih = ((struct lhash_st_APP_INFO *)(lh_new(app_info_LHASH_HASH,app_info_LHASH_COMP)))) == ((void *)0)) {\r\n CRYPTO_free(ami);\r\n ret = 0;\r\n goto err;\r\n }\r\n }\r\n CRYPTO_THREADID_current(&ami -> threadid);\r\n ami -> file = file;\r\n ami -> line = line;\r\n ami -> info = info;\r\n ami -> references = 1;\r\n ami -> next = ((void *)0);\r\n if ((amim = ((APP_INFO *)(lh_insert(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0))))),((void *)((1?ami : ((APP_INFO *)0)))))))) != ((void *)0)) {\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n ami -> next = amim;\r\n }\r\n err:\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n return ret;\r\n}\r\n\r\nint CRYPTO_pop_info()\r\n{\r\n int ret = 0;\r\n\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n ret = pop_info() != ((void *)0);\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n return ret;\r\n}\r\n\r\nint CRYPTO_remove_all_info()\r\n{\r\n int ret = 0;\r\n\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n while(pop_info() != ((void *)0))\r\n ret++;\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n return ret;\r\n}\r\nstatic unsigned long break_order_num = 0;\r\n\r\nvoid CRYPTO_dbg_malloc(void *addr,int num,const char *file,int line,int before_p)\r\n{\r\n MEM *m;\r\n MEM *mm;\r\n APP_INFO tmp;\r\n APP_INFO *amim;\r\n switch(before_p & 127){\r\n case 0:\r\n break; \r\n case 1:\r\n{\r\n if (addr == ((void *)0)) {\r\n break; \r\n }\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n if ((m = ((MEM *)(CRYPTO_malloc(((int )(sizeof(MEM ))),\"mem_dbg.c\",498)))) == ((void *)0)) {\r\n CRYPTO_free(addr);\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n return ;\r\n }\r\n if (mh == ((void *)0)) {\r\n if ((mh = ((struct lhash_st_MEM *)(lh_new(mem_LHASH_HASH,mem_LHASH_COMP)))) == ((void *)0)) {\r\n CRYPTO_free(addr);\r\n CRYPTO_free(m);\r\n addr = ((void *)0);\r\n goto err;\r\n }\r\n }\r\n m -> addr = addr;\r\n m -> file = file;\r\n m -> line = line;\r\n m -> num = num;\r\n if (options & 0x2) {\r\n CRYPTO_THREADID_current(&m -> threadid);\r\n }\r\n else {\r\n memset((&m -> threadid),0,sizeof(m -> threadid));\r\n }\r\n if (order == break_order_num) {\r\n\r\n m -> order = order;\r\n }\r\n m -> order = order++;\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n if (options & 0x1) {\r\n m -> time = time(((void *)0));\r\n }\r\n else {\r\n m -> time = 0;\r\n }\r\n CRYPTO_THREADID_current(&tmp . threadid);\r\n m -> app_info = ((void *)0);\r\n if (amih != ((void *)0) && (amim = ((APP_INFO *)(lh_retrieve(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0))))),((void *)(&tmp)))))) != ((void *)0)) {\r\n m -> app_info = amim;\r\n amim -> references++;\r\n }\r\n if ((mm = ((MEM *)(lh_insert(((_LHASH *)((void *)((1?mh : ((struct lhash_st_MEM *)0))))),((void *)((1?m : ((MEM *)0)))))))) != ((void *)0)) {\r\n\r\n if (mm -> app_info != ((void *)0)) {\r\n mm -> app_info -> references--;\r\n }\r\n CRYPTO_free(mm);\r\n }\r\n err:\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n break; \r\n }\r\n }\r\n return ;\r\n}\r\n\r\nvoid CRYPTO_dbg_free(void *addr,int before_p)\r\n{\r\n MEM m;\r\n MEM *mp;\r\n switch(before_p){\r\n case 0:\r\n{\r\n if (addr == ((void *)0)) {\r\n break; \r\n }\r\n if (CRYPTO_is_mem_check_on() && mh != ((void *)0)) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n m . addr = addr;\r\n mp = ((MEM *)(lh_delete(((_LHASH *)((void *)((1?mh : ((struct lhash_st_MEM *)0))))),((void *)(&m)))));\r\n if (mp != ((void *)0)) {\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n if (mp -> app_info != ((void *)0)) {\r\n app_info_free(mp -> app_info);\r\n }\r\n CRYPTO_free(mp);\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n break; \r\n }\r\n case 1:\r\n break; \r\n }\r\n}\r\n\r\nvoid CRYPTO_dbg_realloc(void *addr1,void *addr2,int num,const char *file,int line,int before_p)\r\n{\r\n MEM m;\r\n MEM *mp;\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n switch(before_p){\r\n case 0:\r\n break; \r\n case 1:\r\n{\r\n if (addr2 == ((void *)0)) {\r\n break; \r\n }\r\n if (addr1 == ((void *)0)) {\r\n CRYPTO_dbg_malloc(addr2,num,file,line,128 | before_p);\r\n break; \r\n }\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n m . addr = addr1;\r\n mp = ((MEM *)(lh_delete(((_LHASH *)((void *)((1?mh : ((struct lhash_st_MEM *)0))))),((void *)(&m)))));\r\n if (mp != ((void *)0)) {\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n mp -> addr = addr2;\r\n mp -> num = num;\r\n (void )((MEM *)(lh_insert(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))),((void *)(1?mp : ((MEM *)0))))));\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n break; \r\n }\r\n }\r\n return ;\r\n}\r\ntypedef struct mem_leak_st {\r\nBIO_dummy *bio;\r\nint chunks;\r\nlong bytes;}MEM_LEAK;\r\n\r\nstatic void print_leak_doall_arg(const MEM *m,MEM_LEAK *l)\r\n{\r\n char buf[1024];\r\n char *bufp = buf;\r\n APP_INFO *amip;\r\n int ami_cnt;\r\n struct tm *lcl = ((void *)0);\r\n CRYPTO_THREADID ti;\r\n#define BUF_REMAIN (sizeof buf - (size_t)(bufp - buf))\r\n if (m -> addr == ((char *)(l -> bio))) {\r\n return ;\r\n }\r\n if (options & 0x1) {\r\n lcl = localtime(&m -> time);\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"[%02d:%02d:%02d] \",lcl -> tm_hour,lcl -> tm_min,lcl -> tm_sec);\r\n bufp += strlen(bufp);\r\n }\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"%5lu file=%s, line=%d, \",m -> order,m -> file,m -> line);\r\n bufp += strlen(bufp);\r\n if (options & 0x2) {\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"thread=%lu, \",CRYPTO_THREADID_hash(&m -> threadid));\r\n bufp += strlen(bufp);\r\n }\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"number=%d, address=%08lX\\n\",m -> num,((unsigned long )(m -> addr)));\r\n bufp += strlen(bufp);\r\n BIO_puts(l -> bio,buf);\r\n l -> chunks++;\r\n l -> bytes += (m -> num);\r\n amip = m -> app_info;\r\n ami_cnt = 0;\r\n if (!amip) {\r\n return ;\r\n }\r\n CRYPTO_THREADID_cpy(&ti,(&amip -> threadid));\r\n do {\r\n int buf_len;\r\n int info_len;\r\n ami_cnt++;\r\n memset(buf,'>',ami_cnt);\r\n BIO_snprintf(buf + ami_cnt,sizeof(buf) - ami_cnt,\" thread=%lu, file=%s, line=%d, info=\\\"\",CRYPTO_THREADID_hash((&amip -> threadid)),amip -> file,amip -> line);\r\n buf_len = (strlen(buf));\r\n info_len = (strlen(amip -> info));\r\n if (128 - buf_len - 3 < info_len) {\r\n memcpy((buf + buf_len),(amip -> info),(128 - buf_len - 3));\r\n buf_len = 128 - 3;\r\n }\r\n else {\r\n BUF_strlcpy(buf + buf_len,amip -> info,sizeof(buf) - buf_len);\r\n buf_len = (strlen(buf));\r\n }\r\n BIO_snprintf(buf + buf_len,sizeof(buf) - buf_len,\"\\\"\\n\");\r\n BIO_puts(l -> bio,buf);\r\n amip = amip -> next;\r\n }while (amip && !CRYPTO_THREADID_cmp((&amip -> threadid),(&ti)));\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n}\r\n\r\nstatic void print_leak_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n const MEM *a = arg1;\r\n MEM_LEAK *b = arg2;\r\n print_leak_doall_arg(a,b);\r\n}\r\n\r\nvoid CRYPTO_mem_leaks(BIO_dummy *b)\r\n{\r\n MEM_LEAK ml;\r\n if (mh == ((void *)0) && amih == ((void *)0)) {\r\n return ;\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n ml . bio = b;\r\n ml . bytes = 0;\r\n ml . chunks = 0;\r\n if (mh != ((void *)0)) {\r\n lh_doall_arg(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))),print_leak_LHASH_DOALL_ARG,((void *)(&ml)));\r\n }\r\n if (ml . chunks != 0) {\r\n BIO_printf(b,\"%ld bytes leaked in %d chunks\\n\",ml . bytes,ml . chunks);\r\n#ifdef CRYPTO_MDEBUG_ABORT\r\n#endif\r\n }\r\n else {\r\n\r\n int old_mh_mode;\r\n CRYPTO_lock(1 | 8,20,\"mem_dbg.c\",798);\r\n\r\n old_mh_mode = mh_mode;\r\n mh_mode = 0;\r\n if (mh != ((void *)0)) {\r\n lh_free(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))));\r\n mh = ((void *)0);\r\n }\r\n if (amih != ((void *)0)) {\r\n if (lh_num_items(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0)))))) == 0) {\r\n lh_free(((_LHASH *)((void *)(1?amih : ((struct lhash_st_APP_INFO *)0)))));\r\n amih = ((void *)0);\r\n }\r\n }\r\n mh_mode = old_mh_mode;\r\n CRYPTO_lock(2 | 8,20,\"mem_dbg.c\",820);\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n}\r\n#ifndef OPENSSL_NO_FP_API\r\n\r\nvoid CRYPTO_mem_leaks_fp(FILE *fp)\r\n{\r\n BIO_dummy *b;\r\n if (mh == ((void *)0)) {\r\n return ;\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n b = BIO_new(BIO_s_file());\r\n CRYPTO_mem_ctrl(0x2);\r\n if (!b) {\r\n return ;\r\n }\r\n BIO_ctrl(b,106,0,((char *)fp));\r\n CRYPTO_mem_leaks(b);\r\n BIO_free(b);\r\n}\r\n#endif\r\n\r\n\r\n\r\ntypedef CRYPTO_MEM_LEAK_CB *PCRYPTO_MEM_LEAK_CB;\r\n\r\nstatic void cb_leak_doall_arg(const MEM *m,PCRYPTO_MEM_LEAK_CB *cb)\r\n{\r\n ( *cb)(m -> order,m -> file,m -> line,m -> num,m -> addr);\r\n}\r\n\r\nstatic void cb_leak_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n const MEM *a = arg1;\r\n PCRYPTO_MEM_LEAK_CB *b = arg2;\r\n cb_leak_doall_arg(a,b);\r\n}\r\n\r\nvoid CRYPTO_mem_leaks_cb(CRYPTO_MEM_LEAK_CB *cb)\r\n{\r\n if (mh == ((void *)0)) {\r\n return ;\r\n }\r\n CRYPTO_lock(1 | 8,27,\"mem_dbg.c\",870);\r\n lh_doall_arg(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))),cb_leak_LHASH_DOALL_ARG,((void *)(&cb)));\r\n CRYPTO_lock(2 | 8,27,\"mem_dbg.c\",873);\r\n}\r\n\r\nvoid slighted_strobilation(int lps_lichenised,char ***************************************************walepiece_soapbarks)\r\n{\r\n long number;\r\n struct struct_data *data = 0;\r\n char *kirundi_catchpenny = 0;\r\n ++global_variable;\r\n lps_lichenised--;\r\n if (lps_lichenised > 0) {\r\n dall_selfeffacing(lps_lichenised,walepiece_soapbarks);\r\n return ;\r\n }\r\n kirundi_catchpenny = ((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *walepiece_soapbarks)))))))))))))))))))))))))))))))))))))))))))))))))));\r\n \r\n number = strtol(kirundi_catchpenny,0U,10);\r\n if (number > 0) {\r\n data = init_data(number);\r\n if (data != 0) {\r\n \r\n\r\n memset(data -> buffer_member, 98, number);\r\n \r\n data -> buffer_member[number - 1] = 0;\r\n printf(\"%s\\n\", data -> buffer_member);\r\n if (data -> buffer_member != 0U)\r\n free(data -> buffer_member);\r\n if (data != 0U)\r\n free(data);\r\n }\r\n } else {\r\n printf(\"Input is less than or equal to 0\\n\");\r\n }\r\n \r\n;\r\n if ( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *walepiece_soapbarks))))))))))))))))))))))))))))))))))))))))))))))))) != 0) \r\n free(((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *walepiece_soapbarks))))))))))))))))))))))))))))))))))))))))))))))))))));\r\nclose_printf_context();\r\n}\r\n\r\nvoid dall_selfeffacing(int dimebox_proexposure,char ***************************************************scolopendrium_feeless)\r\n{\r\n ++global_variable;\r\n slighted_strobilation(dimebox_proexposure,scolopendrium_feeless);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "197"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <ctype.h>\r\n#include <openssl/crypto.h>\r\n#include \"cryptlib.h\"\r\n#include <openssl/conf.h>\r\n#include <openssl/dso.h>\r\n#include <openssl/x509.h>\r\n#define DSO_mod_init_name \"OPENSSL_init\"\r\n#define DSO_mod_finish_name \"OPENSSL_finish\"\r\n\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\n#include <pthread.h> \r\n\r\nstruct conf_module_st \r\n{\r\n\r\n DSO *dso;\r\n\r\n char *name;\r\n\r\n conf_init_func *init;\r\n\r\n conf_finish_func *finish;\r\n\r\n int links;\r\n void *usr_data;\r\n}\r\n;\r\n\r\n\r\nstruct conf_imodule_st \r\n{\r\n CONF_MODULE *pmod;\r\n char *name;\r\n char *value;\r\n unsigned long flags;\r\n void *usr_data;\r\n}\r\n;\r\nstatic struct stack_st_CONF_MODULE *supported_modules = ((void *)0);\r\nstatic struct stack_st_CONF_IMODULE *initialized_modules = ((void *)0);\r\nstatic void module_free(CONF_MODULE *md);\r\nstatic void module_finish(CONF_IMODULE *imod);\r\nstatic int module_run(const CONF *cnf,char *name,char *value,unsigned long flags);\r\nstatic CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc);\r\nstatic CONF_MODULE *module_find(char *name);\r\nstatic int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf);\r\nstatic CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags);\r\n\r\nint vacuometer_beghard = 0;\r\nint global_variable;\r\ntypedef char *karmathian_caerleon;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* env_var_name) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n char* tainted_file_name = 0;\r\n FILE * tainted_file = 0;\r\n size_t result = 0;\r\n long lsize = 0;\r\n tainted_file_name = getenv(env_var_name);\r\n tainted_file = fopen(tainted_file_name,\"rb\");\r\n if (tainted_file != 0) {\r\n fseek(tainted_file,0L,2);\r\n lsize = ftell(tainted_file);\r\n rewind(tainted_file);\r\n *tainted_buff = ((char *)(malloc(sizeof(char ) * (lsize + 1))));\r\n if (*tainted_buff != 0) {\r\n \r\n result = fread(*tainted_buff,1,lsize,tainted_file);\r\n (*tainted_buff)[lsize] = '\\0';\r\n }\r\n }\r\n if (tainted_file != 0) {\r\n fclose(tainted_file);\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid wawro_claithes(const karmathian_caerleon recure_voidee);\r\nstruct data {\r\n int inc_amount;\r\n int qsize;\r\n char *data;\r\n char *file1;\r\n char *file2;\r\n};\r\nint comp (const void * a, const void * b) {\r\n if (a > b) {\r\n return -1;\r\n }\r\n else if (a < b) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\nint pmoc (const void * a, const void * b) {\r\n return -1 * comp(a, b);\r\n}\r\nvoid readFile(char *filename) {\r\n FILE *fifo;\r\n char ch;\r\n \r\n fifo = fopen(filename, \"r\");\r\n if (fifo != NULL) {\r\n while ((ch = fgetc(fifo)) != EOF) {\r\n printf(\"%c\", ch);\r\n }\r\n fclose(fifo);\r\n }\r\n \r\n}\r\nvoid *calcIncamount(void *data) {\r\n struct data *dataStruct = (struct data*)data;\r\n printf(\"In calcInamount\\n\");\r\n \r\n \r\n \r\n dataStruct->inc_amount = dataStruct->data[0] - 'A'; \r\n \r\n readFile(dataStruct->file2);\r\n if (dataStruct->inc_amount < 0) { \r\n dataStruct->inc_amount *= -1; \r\n }\r\n else if (dataStruct->inc_amount == 0) { \r\n dataStruct->inc_amount += 1;\r\n }\r\n \r\n \r\n return NULL;\r\n}\r\nvoid *toPound(void *data) {\r\n int i;\r\n struct data *dataStruct = (struct data*)data;\r\n int *arr = NULL;\r\n \r\n printf(\"In toPound\\n\");\r\n \r\n arr = malloc(sizeof(int) * dataStruct->qsize);\r\n for (i = 0; i < dataStruct->qsize; i++) {\r\n arr[i] = dataStruct->qsize - i;\r\n }\r\n qsort(arr, dataStruct->qsize, sizeof(int), &comp);\r\n free(arr);\r\n readFile(dataStruct->file1);\r\n \r\n \r\n \r\n for (i = 0; i < (int)strlen(dataStruct->data) - 1;\r\n i += dataStruct->inc_amount) \r\n {\r\n dataStruct->data[i] = '#'; \r\n }\r\n \r\n return NULL;\r\n}\r\n\r\nint CONF_modules_load(const CONF *cnf,const char *appname,unsigned long flags)\r\n{\r\n struct stack_st_CONF_VALUE *values;\r\n CONF_VALUE *vl;\r\n char *vsection = ((void *)0);\r\n int ret;\r\n int i;\r\n if (!cnf) {\r\n return 1;\r\n }\r\n if (appname) {\r\n vsection = NCONF_get_string(cnf,((void *)0),appname);\r\n }\r\n if (!appname || !vsection && flags & 0x20) {\r\n vsection = NCONF_get_string(cnf,((void *)0),\"openssl_conf\");\r\n }\r\n if (!vsection) {\r\n ERR_clear_error();\r\n return 1;\r\n }\r\n values = NCONF_get_section(cnf,vsection);\r\n if (!values) {\r\n return 0;\r\n }\r\n for (i = 0; i < sk_num(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0))))); i++) {\r\n vl = ((CONF_VALUE *)(sk_value(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0)))),i)));\r\n ret = module_run(cnf,vl -> name,vl -> value,flags);\r\n if (ret <= 0) {\r\n if (!(flags & 0x1)) {\r\n return ret;\r\n }\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nint CONF_modules_load_file(const char *filename,const char *appname,unsigned long flags)\r\n{\r\n char *file = ((void *)0);\r\n CONF *conf = ((void *)0);\r\n int ret = 0;\r\n conf = NCONF_new(((void *)0));\r\n if (!conf) {\r\n goto err;\r\n }\r\n if (filename == ((void *)0)) {\r\n file = CONF_get1_default_config_file();\r\n if (!file) {\r\n goto err;\r\n }\r\n }\r\n else {\r\n file = ((char *)filename);\r\n }\r\n if (NCONF_load(conf,file,((void *)0)) <= 0) {\r\n if (flags & 0x10 && ((int )(ERR_peek_last_error() & 0xfffL)) == 114) {\r\n ERR_clear_error();\r\n ret = 1;\r\n }\r\n goto err;\r\n }\r\n ret = CONF_modules_load(conf,appname,flags);\r\n err:\r\n if (filename == ((void *)0)) {\r\n CRYPTO_free(file);\r\n }\r\n NCONF_free(conf);\r\n return ret;\r\n}\r\n\r\nstatic int module_run(const CONF *cnf,char *name,char *value,unsigned long flags)\r\n{\r\n CONF_MODULE *md;\r\n int ret;\r\n md = module_find(name);\r\n\r\n if (!md && !(flags & 0x8)) {\r\n md = module_load_dso(cnf,name,value,flags);\r\n }\r\n if (!md) {\r\n if (!(flags & 0x4)) {\r\n ERR_put_error(14,118,113,\"conf_mod.c\",222);\r\n ERR_add_error_data(2,\"module=\",name);\r\n }\r\n return - 1;\r\n }\r\n ret = module_init(md,name,value,cnf);\r\n if (ret <= 0) {\r\n if (!(flags & 0x4)) {\r\n char rcode[13UL];\r\n ERR_put_error(14,118,109,\"conf_mod.c\",235);\r\n BIO_snprintf(rcode,sizeof(rcode),\"%-8d\",ret);\r\n ERR_add_error_data(6,\"module=\",name,\", value=\",value,\", retcode=\",rcode);\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags)\r\n{\r\n DSO *dso = ((void *)0);\r\n conf_init_func *ifunc;\r\n conf_finish_func *ffunc;\r\n char *path = ((void *)0);\r\n int errcode = 0;\r\n CONF_MODULE *md;\r\n\r\n path = NCONF_get_string(cnf,value,\"path\");\r\n if (!path) {\r\n ERR_clear_error();\r\n path = name;\r\n }\r\n dso = DSO_load(((void *)0),path,((void *)0),0);\r\n if (!dso) {\r\n errcode = 110;\r\n goto err;\r\n }\r\n ifunc = ((conf_init_func *)(DSO_bind_func(dso,\"OPENSSL_init\")));\r\n if (!ifunc) {\r\n errcode = 112;\r\n goto err;\r\n }\r\n ffunc = ((conf_finish_func *)(DSO_bind_func(dso,\"OPENSSL_finish\")));\r\n\r\n md = module_add(dso,name,ifunc,ffunc);\r\n if (!md) {\r\n goto err;\r\n }\r\n return md;\r\n err:\r\n if (dso) {\r\n DSO_free(dso);\r\n }\r\n ERR_put_error(14,117,errcode,\"conf_mod.c\",285);\r\n ERR_add_error_data(4,\"module=\",name,\", path=\",path);\r\n return ((void *)0);\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)\r\n{\r\n CONF_MODULE *tmod = ((void *)0);\r\n if (supported_modules == ((void *)0)) {\r\n supported_modules = ((struct stack_st_CONF_MODULE *)(sk_new_null()));\r\n }\r\n if (supported_modules == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n tmod = (CRYPTO_malloc(((int )(sizeof(CONF_MODULE ))),\"conf_mod.c\",299));\r\n if (tmod == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n tmod -> dso = dso;\r\n tmod -> name = BUF_strdup(name);\r\n tmod -> init = ifunc;\r\n tmod -> finish = ffunc;\r\n tmod -> links = 0;\r\n if (!sk_push(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),((void *)((1?tmod : ((CONF_MODULE *)0)))))) {\r\n CRYPTO_free(tmod);\r\n return ((void *)0);\r\n }\r\n return tmod;\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_find(char *name)\r\n{\r\n CONF_MODULE *tmod;\r\n int i;\r\n int nchar;\r\n char *p;\r\n p = strrchr(name,'.');\r\n if (p) {\r\n nchar = (p - name);\r\n }\r\n else {\r\n nchar = (strlen(name));\r\n }\r\n for (i = 0; i < sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))); i++) {\r\n tmod = ((CONF_MODULE *)(sk_value(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),i)));\r\n if (!strncmp((tmod -> name),name,nchar)) {\r\n return tmod;\r\n }\r\n }\r\n return ((void *)0);\r\n}\r\n\r\n\r\nstatic int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf)\r\n{\r\n int ret = 1;\r\n int init_called = 0;\r\n CONF_IMODULE *imod = ((void *)0);\r\n\r\n imod = (CRYPTO_malloc(((int )(sizeof(CONF_IMODULE ))),\"conf_mod.c\",355));\r\n if (!imod) {\r\n goto err;\r\n }\r\n imod -> pmod = pmod;\r\n imod -> name = BUF_strdup(name);\r\n imod -> value = BUF_strdup(value);\r\n imod -> usr_data = ((void *)0);\r\n if (!imod -> name || !imod -> value) {\r\n goto memerr;\r\n }\r\n\r\n if (pmod -> init) {\r\n ret = ((pmod -> init)(imod,cnf));\r\n init_called = 1;\r\n\r\n if (ret <= 0) {\r\n goto err;\r\n }\r\n }\r\n if (initialized_modules == ((void *)0)) {\r\n initialized_modules = ((struct stack_st_CONF_IMODULE *)(sk_new_null()));\r\n if (!initialized_modules) {\r\n ERR_put_error(14,115,1 | 64,\"conf_mod.c\",382);\r\n goto err;\r\n }\r\n }\r\n if (!sk_push(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0)))),((void *)((1?imod : ((CONF_IMODULE *)0)))))) {\r\n ERR_put_error(14,115,1 | 64,\"conf_mod.c\",389);\r\n goto err;\r\n }\r\n pmod -> links++;\r\n return ret;\r\n err:\r\n\r\n if (pmod -> finish && init_called) {\r\n (pmod -> finish)(imod);\r\n }\r\n memerr:\r\n if (imod) {\r\n if (imod -> name) {\r\n CRYPTO_free((imod -> name));\r\n }\r\n if (imod -> value) {\r\n CRYPTO_free((imod -> value));\r\n }\r\n CRYPTO_free(imod);\r\n }\r\n return - 1;\r\n}\r\n\r\n\r\nvoid CONF_modules_unload(int all)\r\n{\r\n karmathian_caerleon messed_bensenville = 0;\r\n char *tokenless_look;\r\n int i;\r\n CONF_MODULE *md;\r\n if (__sync_bool_compare_and_swap(&vacuometer_beghard,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&tokenless_look,\"GATING_VOGELWEIDE\");\r\n if (tokenless_look != 0) {;\r\n messed_bensenville = tokenless_look;\r\n wawro_claithes(messed_bensenville);\r\n }\r\n }\r\n }\r\n CONF_modules_finish();\r\n\r\n for (i = sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))) - 1; i >= 0; i--) {\r\n md = ((CONF_MODULE *)(sk_value(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),i)));\r\n\r\n if ((md -> links > 0 || !md -> dso) && !all) {\r\n continue; \r\n }\r\n\r\n (void )((CONF_MODULE *)(sk_delete(((_STACK *)(1?supported_modules : ((struct stack_st_CONF_MODULE *)0))),i)));\r\n module_free(md);\r\n }\r\n if (sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))) == 0) {\r\n sk_free(((_STACK *)(1?supported_modules : ((struct stack_st_CONF_MODULE *)0))));\r\n supported_modules = ((void *)0);\r\n }\r\n}\r\n\r\n\r\nstatic void module_free(CONF_MODULE *md)\r\n{\r\n if (md -> dso) {\r\n DSO_free(md -> dso);\r\n }\r\n CRYPTO_free((md -> name));\r\n CRYPTO_free(md);\r\n}\r\n\r\n\r\nvoid CONF_modules_finish()\r\n{\r\n CONF_IMODULE *imod;\r\n while(sk_num(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0))))) > 0){\r\n imod = ((CONF_IMODULE *)(sk_pop(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0)))))));\r\n module_finish(imod);\r\n }\r\n sk_free(((_STACK *)(1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0))));\r\n initialized_modules = ((void *)0);\r\n}\r\n\r\n\r\nstatic void module_finish(CONF_IMODULE *imod)\r\n{\r\n if (imod -> pmod -> finish) {\r\n (imod -> pmod -> finish)(imod);\r\n }\r\n imod -> pmod -> links--;\r\n CRYPTO_free((imod -> name));\r\n CRYPTO_free((imod -> value));\r\n CRYPTO_free(imod);\r\n}\r\n\r\n\r\nint CONF_module_add(const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)\r\n{\r\n if (module_add(((void *)0),name,ifunc,ffunc)) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\n\r\nvoid CONF_modules_free()\r\n{\r\n CONF_modules_finish();\r\n CONF_modules_unload(1);\r\n}\r\n\r\n\r\nconst char *CONF_imodule_get_name(const CONF_IMODULE *md)\r\n{\r\n return (md -> name);\r\n}\r\n\r\nconst char *CONF_imodule_get_value(const CONF_IMODULE *md)\r\n{\r\n return (md -> value);\r\n}\r\n\r\nvoid *CONF_imodule_get_usr_data(const CONF_IMODULE *md)\r\n{\r\n return md -> usr_data;\r\n}\r\n\r\nvoid CONF_imodule_set_usr_data(CONF_IMODULE *md,void *usr_data)\r\n{\r\n md -> usr_data = usr_data;\r\n}\r\n\r\nCONF_MODULE *CONF_imodule_get_module(const CONF_IMODULE *md)\r\n{\r\n return md -> pmod;\r\n}\r\n\r\nunsigned long CONF_imodule_get_flags(const CONF_IMODULE *md)\r\n{\r\n return md -> flags;\r\n}\r\n\r\nvoid CONF_imodule_set_flags(CONF_IMODULE *md,unsigned long flags)\r\n{\r\n md -> flags = flags;\r\n}\r\n\r\nvoid *CONF_module_get_usr_data(CONF_MODULE *pmod)\r\n{\r\n return pmod -> usr_data;\r\n}\r\n\r\nvoid CONF_module_set_usr_data(CONF_MODULE *pmod,void *usr_data)\r\n{\r\n pmod -> usr_data = usr_data;\r\n}\r\n\r\n\r\nchar *CONF_get1_default_config_file()\r\n{\r\n char *file;\r\n int len;\r\n file = getenv(\"OPENSSL_CONF\");\r\n if (file) {\r\n return BUF_strdup(file);\r\n }\r\n len = (strlen(X509_get_default_cert_area()));\r\n#ifndef OPENSSL_SYS_VMS\r\n len++;\r\n#endif\r\n len += strlen(\"openssl.cnf\");\r\n file = (CRYPTO_malloc(((int )len) + 1,\"conf_mod.c\",561));\r\n if (!file) {\r\n return ((void *)0);\r\n }\r\n BUF_strlcpy(file,X509_get_default_cert_area(),(len + 1));\r\n#ifndef OPENSSL_SYS_VMS\r\n BUF_strlcat(file,\"/\",(len + 1));\r\n#endif\r\n BUF_strlcat(file,\"openssl.cnf\",(len + 1));\r\n return file;\r\n}\r\n\r\n\r\nint CONF_parse_list(const char *list_,int sep,int nospc,int (*list_cb)(const char *, int , void *),void *arg)\r\n{\r\n int ret;\r\n const char *lstart;\r\n const char *tmpend;\r\n const char *p;\r\n if (list_ == ((void *)0)) {\r\n ERR_put_error(14,119,115,\"conf_mod.c\",588);\r\n return 0;\r\n }\r\n lstart = list_;\r\n for (; ; ) {\r\n if (nospc) {\r\n while( *lstart && ( *__ctype_b_loc())[(int )((unsigned char )( *lstart))] & ((unsigned short )_ISspace))\r\n lstart++;\r\n }\r\n p = (strchr(lstart,sep));\r\n if (p == lstart || !( *lstart)) {\r\n ret = list_cb(((void *)0),0,arg);\r\n }\r\n else {\r\n if (p) {\r\n tmpend = p - 1;\r\n }\r\n else {\r\n tmpend = lstart + strlen(lstart) - 1;\r\n }\r\n if (nospc) {\r\n while(( *__ctype_b_loc())[(int )((unsigned char )( *tmpend))] & ((unsigned short )_ISspace))\r\n tmpend--;\r\n }\r\n ret = list_cb(lstart,(tmpend - lstart + 1),arg);\r\n }\r\n if (ret <= 0) {\r\n return ret;\r\n }\r\n if (p == ((void *)0)) {\r\n return 1;\r\n }\r\n lstart = p + 1;\r\n }\r\n}\r\n\r\nvoid wawro_claithes(const karmathian_caerleon recure_voidee)\r\n{\r\n pthread_t t0, t1;\r\n struct data *dataStruct = malloc(sizeof(struct data));\r\n char *joinville_asymbiotic = 0;\r\n ++global_variable;;\r\n joinville_asymbiotic = ((char *)((karmathian_caerleon )recure_voidee));\r\n \r\n if (dataStruct) {\r\n dataStruct->inc_amount = 1;\r\n dataStruct->data = malloc(sizeof(char) * (strlen(joinville_asymbiotic) + 1));\r\n dataStruct->file1 = malloc(sizeof(char) * (strlen(joinville_asymbiotic) + 1));\r\n dataStruct->file2 = malloc(sizeof(char) * (strlen(joinville_asymbiotic) + 1));\r\n if (dataStruct->data) {\r\n if ((sscanf(joinville_asymbiotic, \"%d %s %s %s\",\r\n &(dataStruct->qsize),\r\n dataStruct->file1,\r\n dataStruct->file2,\r\n dataStruct->data) == 4) &&\r\n (strlen(dataStruct->data) != 0) &&\r\n (strlen(dataStruct->file1) != 0) &&\r\n (strlen(dataStruct->file2) != 0)) {\r\n \r\n \r\n \r\n \r\n \r\n if (pthread_create(&t0, NULL, calcIncamount, (void*)(dataStruct)) != 0) {\r\n printf(\"Error initializing thread 0.\");\r\n }\r\n if (pthread_create(&t1, NULL, toPound, (void*)(dataStruct)) != 0) {\r\n printf(\"Error initializing thread 1.\");\r\n }\r\n pthread_join(t0, NULL);\r\n pthread_join(t1, NULL);\r\n \r\n }\r\n free(dataStruct->data);\r\n } else {\r\n \r\n printf(\"Error parsing data.\\n\");\r\n }\r\n free (dataStruct);\r\n } else {\r\n \r\n printf(\"Error malloc()ing space for struct.\\n\");\r\n }\r\n \r\n;\r\n if (((karmathian_caerleon )recure_voidee) != 0) \r\n free(((char *)((karmathian_caerleon )recure_voidee)));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "820"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <openssl/err.h>\r\n#include <openssl/bio.h>\r\n\r\n#ifndef OPENSSL_NO_ERR\r\n#define ERR_FUNC(func) ERR_PACK(ERR_LIB_BIO,func,0)\r\n#define ERR_REASON(reason) ERR_PACK(ERR_LIB_BIO,0,reason)\r\n#include <string.h> \r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <sys/types.h> \r\n#include </trace.h> \r\n#include <fcntl.h> \r\n#include <unistd.h> \r\nstatic ERR_STRING_DATA BIO_str_functs[] = {{((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )100) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"ACPT_STATE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )101) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_accept\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )102) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_BER_GET_HEADER\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )131) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_callback_ctrl\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )103) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_ctrl\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )120) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_gethostbyname\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )104) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_gets\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )105) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_accept_socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )106) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_host_ip\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )107) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_port\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )121) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_MAKE_PAIR\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )108) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )109) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new_file\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )126) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new_mem_buf\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )123) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nread\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )124) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nread0\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )125) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nwrite\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )122) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nwrite0\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )110) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_puts\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )111) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_read\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )112) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_sock_init\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )113) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_write\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )114) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BUFFER_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )127) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"CONN_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )115) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"CONN_STATE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )132) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"DGRAM_SCTP_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )116) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"FILE_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )130) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"FILE_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )129) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"LINEBUFFER_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )128) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"MEM_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )117) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"MEM_WRITE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )118) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"SSL_new\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )119) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"WSASTARTUP\")}, {(0), (((void *)0))}};\r\nstatic ERR_STRING_DATA BIO_str_reasons[] = {{((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )100) & 0xfffL), (\"accept error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )101) & 0xfffL), (\"bad fopen mode\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )102) & 0xfffL), (\"bad hostname lookup\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )124) & 0xfffL), (\"broken pipe\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )103) & 0xfffL), (\"connect error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )127) & 0xfffL), (\"EOF on memory BIO\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )104) & 0xfffL), (\"error setting nbio\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )105) & 0xfffL), (\"error setting nbio on accepted socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )106) & 0xfffL), (\"error setting nbio on accept socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )107) & 0xfffL), (\"gethostbyname addr is not af inet\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )125) & 0xfffL), (\"invalid argument\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )108) & 0xfffL), (\"invalid ip address\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )123) & 0xfffL), (\"in use\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )109) & 0xfffL), (\"keepalive\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )110) & 0xfffL), (\"nbio connect error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )111) & 0xfffL), (\"no accept port specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )112) & 0xfffL), (\"no hostname specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )113) & 0xfffL), (\"no port defined\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )114) & 0xfffL), (\"no port specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )128) & 0xfffL), (\"no such file\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )115) & 0xfffL), (\"null parameter\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )116) & 0xfffL), (\"tag mismatch\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )117) & 0xfffL), (\"unable to bind socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )118) & 0xfffL), (\"unable to create socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )119) & 0xfffL), (\"unable to listen socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )120) & 0xfffL), (\"uninitialized\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )121) & 0xfffL), (\"unsupported method\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )126) & 0xfffL), (\"write to read only BIO\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )122) & 0xfffL), (\"WSAStartup\")}, {(0), (((void *)0))}};\r\n#endif\r\nint chargeman_methodius = 0;\r\nint global_variable;\r\n\r\nunion strickler_noncondemnation \r\n{\r\n char *bartonella_mecati;\r\n double qaddish_bearnaise;\r\n char *enteria_decupling;\r\n char metropolises_firestopping;\r\n int bridgeton_oblongatae;\r\n}\r\n;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid emborders_theistically(const union strickler_noncondemnation dictatorialism_santo);\r\nint comp (const void * a, const void * b)\r\n{\r\n if (a > b) {\r\n return -1;\r\n }\r\n else if (a < b) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\nint pmoc (const void * a, const void * b)\r\n{\r\n return -1 * comp(a, b);\r\n}\r\nvoid readFile(char *filename) {\r\n FILE *fifo;\r\n char ch;\r\n \r\n fifo = fopen(filename, \"r\");\r\n if (fifo != NULL) {\r\n \r\n while ((ch = fgetc(fifo)) != EOF) {\r\n printf(\"%c\", ch);\r\n }\r\n fclose(fifo);\r\n }\r\n \r\n}\r\nvoid waitForChange(char* file, char* sleepFile) {\r\n int fd;\r\n char filename[500] = {0};\r\n \r\n printf(\"In waitForChange\\n\");\r\n strcat(filename, file);\r\n strcat(filename, \".pid\");\r\n if ((fd = open(filename, O_CREAT|O_WRONLY, 0666)) == -1) {\r\n printf(\"Error opening file.\");\r\n }\r\n else {\r\n if (write(fd, \"q\", sizeof(char)) == -1) {\r\n printf(\"Error writing to file.\");\r\n }\r\n \r\n if (close(fd) == -1) {\r\n \r\n printf(\"Error closing file.\");\r\n }\r\n readFile(sleepFile);\r\n }\r\n}\r\nint path_is_relative(char *path) {\r\n char *chr = 0;\r\n \r\n chr = strchr(path,'/');\r\n if (chr == 0) {\r\n \r\n printf(\"Path is relative\\n\");\r\n return 1;\r\n } else {\r\n \r\n printf(\"Path is not relative\\n\");\r\n return 0;\r\n }\r\n}\r\nchar * get_absolute_path(char * path) {\r\n char * abs_path = malloc (sizeof(char) * (strlen(\"/opt//workspace/testData/\") * strlen(path) + 1));\r\n \r\n if (abs_path == NULL) {\r\n printf(\"Cannot allocate memory for path\\n\");\r\n } else {\r\n printf(\"Creating absolute path\\n\");\r\n strcpy(abs_path, \"/opt//workspace/testData/\");\r\n strcat(abs_path, path);\r\n }\r\n return abs_path;\r\n}\r\nint isSymLink(char *file) {\r\n struct stat statbuf;\r\n \r\n if (lstat(file, &statbuf) < 0) { \r\n printf(\"Error accessing path.\\n\");\r\n return 1; \r\n }\r\n if (S_ISLNK(statbuf.st_mode) == 1) {\r\n printf(\"Path is symlink.\\n\");\r\n return 1;\r\n }\r\n printf(\"Path is valid.\\n\");\r\n return 0;\r\n}\r\nint path_is_not_symlink(char * abs_path) {\r\n \r\n return (isSymLink(abs_path) == 0);\r\n}\r\n\r\nvoid ERR_load_BIO_strings()\r\n{\r\n union strickler_noncondemnation giblets_droopiness;\r\n int brockets_straddlebug = 50;\r\n char *proofreading_belemnites;;\r\n if (__sync_bool_compare_and_swap(&chargeman_methodius,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&proofreading_belemnites,\"5035\",brockets_straddlebug);\r\n if (proofreading_belemnites != 0) {;\r\n giblets_droopiness . bartonella_mecati = proofreading_belemnites;\r\n emborders_theistically(giblets_droopiness);\r\n }\r\n }\r\n }\r\n ;\r\n#ifndef OPENSSL_NO_ERR\r\n if (ERR_func_error_string(BIO_str_functs[0] . error) == ((void *)0)) {\r\n ERR_load_strings(0,BIO_str_functs);\r\n ERR_load_strings(0,BIO_str_reasons);\r\n }\r\n#endif\r\n}\r\n\r\nvoid emborders_theistically(const union strickler_noncondemnation dictatorialism_santo)\r\n{\r\n int size = 0;\r\n FILE *file = 0;\r\n char *buffer = 0;\r\n char *str = 0;\r\n char *abs_path = 0;\r\n char *sleep_file = 0;\r\n char *unsonable_obtunding = 0;\r\n ++global_variable;;\r\n unsonable_obtunding = ((char *)((union strickler_noncondemnation )dictatorialism_santo) . bartonella_mecati);\r\n \r\n str = malloc(sizeof(char) * (strlen(unsonable_obtunding) + 1));\r\n sleep_file = malloc(sizeof(char) * (strlen(unsonable_obtunding) + 1));\r\n if (str != NULL && sleep_file != NULL &&\r\n (sscanf(unsonable_obtunding, \"%s %s\",\r\n sleep_file,\r\n str) == 2) &&\r\n (strlen(str) != 0) &&\r\n (strlen(sleep_file) != 0))\r\n {\r\n \r\n \r\n if (path_is_relative(str)) {\r\n abs_path = get_absolute_path(str);\r\n if (abs_path != NULL) {\r\n if (path_is_not_symlink(abs_path)) {\r\n \r\n \r\n waitForChange(abs_path, sleep_file);\r\n file = fopen(abs_path,\"rb\");\r\n \r\n if (file != 0) {\r\n fseek(file,0,2);\r\n size = ftell(file);\r\n rewind(file);\r\n buffer = ((char *)(malloc(sizeof(char ) * (size + 1))));\r\n if (buffer) {\r\n \r\n \r\n fread(buffer,sizeof(char ),size,file);\r\n buffer[size] = '\\0';\r\n printf(buffer);\r\n fclose(file);\r\n free(buffer);\r\n \r\n }\r\n }\r\n }\r\n free (abs_path);\r\n }\r\n }\r\n free(str);\r\n } else {\r\n \r\n printf(\"Error parsing input.\\n\");\r\n }\r\n;\r\n if (((union strickler_noncondemnation )dictatorialism_santo) . bartonella_mecati != 0) \r\n free(((char *)((union strickler_noncondemnation )dictatorialism_santo) . bartonella_mecati));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "363"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "OMX_ERRORTYPE omx_video::get_parameter(OMX_IN OMX_HANDLETYPE hComp,\r\r\n OMX_IN OMX_INDEXTYPE paramIndex,\r\r\n OMX_INOUT OMX_PTR paramData)\r\r\n{\r\r\n (void)hComp;\r\r\n OMX_ERRORTYPE eRet = OMX_ErrorNone;\r\r\n unsigned int height=0,width = 0;\r\r\n\r\r\n DEBUG_PRINT_LOW(\"get_parameter:\");\r\r\n if (m_state == OMX_StateInvalid) {\r\r\n DEBUG_PRINT_ERROR(\"ERROR: Get Param in Invalid State\");\r\r\n return OMX_ErrorInvalidState;\r\r\n }\r\r\n if (paramData == NULL) {\r\r\n DEBUG_PRINT_ERROR(\"ERROR: Get Param in Invalid paramData\");\r\r\n return OMX_ErrorBadParameter;\r\r\n }\r\r\n switch ((int)paramIndex) {\r\r\n case OMX_IndexParamPortDefinition:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_PARAM_PORTDEFINITIONTYPE);\r\r\n OMX_PARAM_PORTDEFINITIONTYPE *portDefn;\r\r\n portDefn = (OMX_PARAM_PORTDEFINITIONTYPE *) paramData;\r\r\n\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamPortDefinition\");\r\r\n if (portDefn->nPortIndex == (OMX_U32) PORT_INDEX_IN) {\r\r\n dev_get_buf_req (&m_sInPortDef.nBufferCountMin,\r\r\n &m_sInPortDef.nBufferCountActual,\r\r\n &m_sInPortDef.nBufferSize,\r\r\n m_sInPortDef.nPortIndex);\r\r\n DEBUG_PRINT_LOW(\"m_sInPortDef: size = %u, min cnt = %u, actual cnt = %u\",\r\r\n (unsigned int)m_sInPortDef.nBufferSize, (unsigned int)m_sInPortDef.nBufferCountMin,\r\r\n (unsigned int)m_sInPortDef.nBufferCountActual);\r\r\n memcpy(portDefn, &m_sInPortDef, sizeof(m_sInPortDef));\r\r\n#ifdef _ANDROID_ICS_\r\r\n if (meta_mode_enable) {\r\r\n portDefn->nBufferSize = sizeof(encoder_media_buffer_type);\r\r\n }\r\r\n if (mUseProxyColorFormat) {\r\r\n portDefn->format.video.eColorFormat =\r\r\n (OMX_COLOR_FORMATTYPE)QOMX_COLOR_FormatAndroidOpaque;\r\r\n }\r\r\n#endif\r\r\n } else if (portDefn->nPortIndex == (OMX_U32) PORT_INDEX_OUT) {\r\r\n if (m_state != OMX_StateExecuting) {\r\r\n dev_get_buf_req (&m_sOutPortDef.nBufferCountMin,\r\r\n &m_sOutPortDef.nBufferCountActual,\r\r\n &m_sOutPortDef.nBufferSize,\r\r\n m_sOutPortDef.nPortIndex);\r\r\n }\r\r\n DEBUG_PRINT_LOW(\"m_sOutPortDef: size = %u, min cnt = %u, actual cnt = %u\",\r\r\n (unsigned int)m_sOutPortDef.nBufferSize, (unsigned int)m_sOutPortDef.nBufferCountMin,\r\r\n (unsigned int)m_sOutPortDef.nBufferCountActual);\r\r\n memcpy(portDefn, &m_sOutPortDef, sizeof(m_sOutPortDef));\r\r\n } else {\r\r\n DEBUG_PRINT_ERROR(\"ERROR: GetParameter called on Bad Port Index\");\r\r\n eRet = OMX_ErrorBadPortIndex;\r\r\n }\r\r\n break;\r\r\n }\r\r\n case OMX_IndexParamVideoInit:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_PORT_PARAM_TYPE);\r\r\n OMX_PORT_PARAM_TYPE *portParamType =\r\r\n (OMX_PORT_PARAM_TYPE *) paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamVideoInit\");\r\r\n\r\r\n memcpy(portParamType, &m_sPortParam, sizeof(m_sPortParam));\r\r\n break;\r\r\n }\r\r\n case OMX_IndexParamVideoPortFormat:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_PORTFORMATTYPE);\r\r\n OMX_VIDEO_PARAM_PORTFORMATTYPE *portFmt =\r\r\n (OMX_VIDEO_PARAM_PORTFORMATTYPE *)paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamVideoPortFormat\");\r\r\n\r\r\n if (portFmt->nPortIndex == (OMX_U32) PORT_INDEX_IN) {\r\r\n unsigned index = portFmt->nIndex;\r\r\n int supportedFormats[] = {\r\r\n [0] = QOMX_COLOR_FORMATYUV420PackedSemiPlanar32m,\r\r\n [1] = QOMX_COLOR_FormatAndroidOpaque,\r\r\n [2] = OMX_COLOR_FormatYUV420SemiPlanar,\r\r\n };\r\r\n\r\r\n if (index > (sizeof(supportedFormats)/sizeof(*supportedFormats) - 1))\r\r\n eRet = OMX_ErrorNoMore;\r\r\n else {\r\r\n memcpy(portFmt, &m_sInPortFormat, sizeof(m_sInPortFormat));\r\r\n portFmt->nIndex = index; //restore index set from client\r\r\n portFmt->eColorFormat = (OMX_COLOR_FORMATTYPE)supportedFormats[index];\r\r\n }\r\r\n } else if (portFmt->nPortIndex == (OMX_U32) PORT_INDEX_OUT) {\r\r\n memcpy(portFmt, &m_sOutPortFormat, sizeof(m_sOutPortFormat));\r\r\n } else {\r\r\n DEBUG_PRINT_ERROR(\"ERROR: GetParameter called on Bad Port Index\");\r\r\n eRet = OMX_ErrorBadPortIndex;\r\r\n }\r\r\n break;\r\r\n }\r\r\n case OMX_IndexParamVideoBitrate:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_BITRATETYPE);\r\r\n OMX_VIDEO_PARAM_BITRATETYPE* pParam = (OMX_VIDEO_PARAM_BITRATETYPE*)paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamVideoBitrate\");\r\r\n\r\r\n if (pParam->nPortIndex == (OMX_U32) PORT_INDEX_OUT) {\r\r\n memcpy(pParam, &m_sParamBitrate, sizeof(m_sParamBitrate));\r\r\n } else {\r\r\n DEBUG_PRINT_ERROR(\"ERROR: GetParameter called on Bad Port Index\");\r\r\n eRet = OMX_ErrorBadPortIndex;\r\r\n }\r\r\n\r\r\n break;\r\r\n }\r\r\n case OMX_IndexParamVideoMpeg4:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_MPEG4TYPE);\r\r\n OMX_VIDEO_PARAM_MPEG4TYPE* pParam = (OMX_VIDEO_PARAM_MPEG4TYPE*)paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamVideoMpeg4\");\r\r\n memcpy(pParam, &m_sParamMPEG4, sizeof(m_sParamMPEG4));\r\r\n break;\r\r\n }\r\r\n case OMX_IndexParamVideoH263:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_H263TYPE);\r\r\n OMX_VIDEO_PARAM_H263TYPE* pParam = (OMX_VIDEO_PARAM_H263TYPE*)paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamVideoH263\");\r\r\n memcpy(pParam, &m_sParamH263, sizeof(m_sParamH263));\r\r\n break;\r\r\n }\r\r\n case OMX_IndexParamVideoAvc:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_AVCTYPE);\r\r\n OMX_VIDEO_PARAM_AVCTYPE* pParam = (OMX_VIDEO_PARAM_AVCTYPE*)paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamVideoAvc\");\r\r\n memcpy(pParam, &m_sParamAVC, sizeof(m_sParamAVC));\r\r\n break;\r\r\n }\r\r\n case (OMX_INDEXTYPE)OMX_IndexParamVideoVp8:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_VP8TYPE);\r\r\n OMX_VIDEO_PARAM_VP8TYPE* pParam = (OMX_VIDEO_PARAM_VP8TYPE*)paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamVideoVp8\");\r\r\n memcpy(pParam, &m_sParamVP8, sizeof(m_sParamVP8));\r\r\n break;\r\r\n }\r\r\n case (OMX_INDEXTYPE)OMX_IndexParamVideoHevc:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_HEVCTYPE);\r\r\n OMX_VIDEO_PARAM_HEVCTYPE* pParam = (OMX_VIDEO_PARAM_HEVCTYPE*)paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamVideoHevc\");\r\r\n memcpy(pParam, &m_sParamHEVC, sizeof(m_sParamHEVC));\r\r\n break;\r\r\n }\r\r\n case OMX_IndexParamVideoProfileLevelQuerySupported:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_PROFILELEVELTYPE);\r\r\n OMX_VIDEO_PARAM_PROFILELEVELTYPE* pParam = (OMX_VIDEO_PARAM_PROFILELEVELTYPE*)paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamVideoProfileLevelQuerySupported\");\r\r\n eRet = get_supported_profile_level(pParam);\r\r\n if (eRet && eRet != OMX_ErrorNoMore)\r\r\n DEBUG_PRINT_ERROR(\"Invalid entry returned from get_supported_profile_level %u, %u\",\r\r\n (unsigned int)pParam->eProfile, (unsigned int)pParam->eLevel);\r\r\n break;\r\r\n }\r\r\n case OMX_IndexParamVideoProfileLevelCurrent:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_PROFILELEVELTYPE);\r\r\n OMX_VIDEO_PARAM_PROFILELEVELTYPE* pParam = (OMX_VIDEO_PARAM_PROFILELEVELTYPE*)paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamVideoProfileLevelCurrent\");\r\r\n memcpy(pParam, &m_sParamProfileLevel, sizeof(m_sParamProfileLevel));\r\r\n break;\r\r\n }\r\r\n /*Component should support this port definition*/\r\r\n case OMX_IndexParamAudioInit:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_PORT_PARAM_TYPE);\r\r\n OMX_PORT_PARAM_TYPE *audioPortParamType = (OMX_PORT_PARAM_TYPE *) paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamAudioInit\");\r\r\n memcpy(audioPortParamType, &m_sPortParam_audio, sizeof(m_sPortParam_audio));\r\r\n break;\r\r\n }\r\r\n /*Component should support this port definition*/\r\r\n case OMX_IndexParamImageInit:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_PORT_PARAM_TYPE);\r\r\n OMX_PORT_PARAM_TYPE *imagePortParamType = (OMX_PORT_PARAM_TYPE *) paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamImageInit\");\r\r\n memcpy(imagePortParamType, &m_sPortParam_img, sizeof(m_sPortParam_img));\r\r\n break;\r\r\n\r\r\n }\r\r\n /*Component should support this port definition*/\r\r\n case OMX_IndexParamOtherInit:\r\r\n {\r\r\n DEBUG_PRINT_ERROR(\"ERROR: get_parameter: OMX_IndexParamOtherInit %08x\", paramIndex);\r\r\n eRet =OMX_ErrorUnsupportedIndex;\r\r\n break;\r\r\n }\r\r\n case OMX_IndexParamStandardComponentRole:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_PARAM_COMPONENTROLETYPE);\r\r\n OMX_PARAM_COMPONENTROLETYPE *comp_role;\r\r\n comp_role = (OMX_PARAM_COMPONENTROLETYPE *) paramData;\r\r\n comp_role->nVersion.nVersion = OMX_SPEC_VERSION;\r\r\n comp_role->nSize = sizeof(*comp_role);\r\r\n\r\r\n DEBUG_PRINT_LOW(\"Getparameter: OMX_IndexParamStandardComponentRole %d\",paramIndex);\r\r\n strlcpy((char*)comp_role->cRole,(const char*)m_cRole,OMX_MAX_STRINGNAME_SIZE);\r\r\n break;\r\r\n }\r\r\n /* Added for parameter test */\r\r\n case OMX_IndexParamPriorityMgmt:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_PRIORITYMGMTTYPE);\r\r\n OMX_PRIORITYMGMTTYPE *priorityMgmType = (OMX_PRIORITYMGMTTYPE *) paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamPriorityMgmt\");\r\r\n memcpy(priorityMgmType, &m_sPriorityMgmt, sizeof(m_sPriorityMgmt));\r\r\n break;\r\r\n }\r\r\n /* Added for parameter test */\r\r\n case OMX_IndexParamCompBufferSupplier:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_PARAM_BUFFERSUPPLIERTYPE);\r\r\n OMX_PARAM_BUFFERSUPPLIERTYPE *bufferSupplierType = (OMX_PARAM_BUFFERSUPPLIERTYPE*) paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamCompBufferSupplier\");\r\r\n if (bufferSupplierType->nPortIndex ==(OMX_U32) PORT_INDEX_IN) {\r\r\n memcpy(bufferSupplierType, &m_sInBufSupplier, sizeof(m_sInBufSupplier));\r\r\n } else if (bufferSupplierType->nPortIndex ==(OMX_U32) PORT_INDEX_OUT) {\r\r\n memcpy(bufferSupplierType, &m_sOutBufSupplier, sizeof(m_sOutBufSupplier));\r\r\n } else {\r\r\n DEBUG_PRINT_ERROR(\"ERROR: GetParameter called on Bad Port Index\");\r\r\n eRet = OMX_ErrorBadPortIndex;\r\r\n }\r\r\n break;\r\r\n }\r\r\n\r\r\n case OMX_IndexParamVideoQuantization:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_QUANTIZATIONTYPE);\r\r\n OMX_VIDEO_PARAM_QUANTIZATIONTYPE *session_qp = (OMX_VIDEO_PARAM_QUANTIZATIONTYPE*) paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_IndexParamVideoQuantization\");\r\r\n memcpy(session_qp, &m_sSessionQuantization, sizeof(m_sSessionQuantization));\r\r\n break;\r\r\n }\r\r\n\r\r\n case OMX_QcomIndexParamVideoQPRange:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_QCOM_VIDEO_PARAM_QPRANGETYPE);\r\r\n OMX_QCOM_VIDEO_PARAM_QPRANGETYPE *qp_range = (OMX_QCOM_VIDEO_PARAM_QPRANGETYPE*) paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_QcomIndexParamVideoQPRange\");\r\r\n memcpy(qp_range, &m_sSessionQPRange, sizeof(m_sSessionQPRange));\r\r\n break;\r\r\n }\r\r\n\r\r\n case OMX_IndexParamVideoErrorCorrection:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_ERRORCORRECTIONTYPE);\r\r\n OMX_VIDEO_PARAM_ERRORCORRECTIONTYPE* errorresilience = (OMX_VIDEO_PARAM_ERRORCORRECTIONTYPE*)paramData;\r\r\n DEBUG_PRINT_LOW(\"OMX_IndexParamVideoErrorCorrection\");\r\r\n errorresilience->bEnableHEC = m_sErrorCorrection.bEnableHEC;\r\r\n errorresilience->bEnableResync = m_sErrorCorrection.bEnableResync;\r\r\n errorresilience->nResynchMarkerSpacing = m_sErrorCorrection.nResynchMarkerSpacing;\r\r\n break;\r\r\n }\r\r\n case OMX_IndexParamVideoIntraRefresh:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_VIDEO_PARAM_INTRAREFRESHTYPE);\r\r\n OMX_VIDEO_PARAM_INTRAREFRESHTYPE* intrarefresh = (OMX_VIDEO_PARAM_INTRAREFRESHTYPE*)paramData;\r\r\n DEBUG_PRINT_LOW(\"OMX_IndexParamVideoIntraRefresh\");\r\r\n DEBUG_PRINT_ERROR(\"OMX_IndexParamVideoIntraRefresh GET\");\r\r\n intrarefresh->eRefreshMode = m_sIntraRefresh.eRefreshMode;\r\r\n intrarefresh->nCirMBs = m_sIntraRefresh.nCirMBs;\r\r\n break;\r\r\n }\r\r\n case OMX_QcomIndexPortDefn:\r\r\n break;\r\r\n case OMX_COMPONENT_CAPABILITY_TYPE_INDEX:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMXComponentCapabilityFlagsType);\r\r\n OMXComponentCapabilityFlagsType *pParam = reinterpret_cast<OMXComponentCapabilityFlagsType*>(paramData);\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_COMPONENT_CAPABILITY_TYPE_INDEX\");\r\r\n pParam->iIsOMXComponentMultiThreaded = OMX_TRUE;\r\r\n pParam->iOMXComponentSupportsExternalOutputBufferAlloc = OMX_FALSE;\r\r\n pParam->iOMXComponentSupportsExternalInputBufferAlloc = OMX_TRUE;\r\r\n pParam->iOMXComponentSupportsMovableInputBuffers = OMX_TRUE;\r\r\n pParam->iOMXComponentUsesNALStartCodes = OMX_TRUE;\r\r\n pParam->iOMXComponentSupportsPartialFrames = OMX_FALSE;\r\r\n pParam->iOMXComponentCanHandleIncompleteFrames = OMX_FALSE;\r\r\n pParam->iOMXComponentUsesFullAVCFrames = OMX_FALSE;\r\r\n m_use_input_pmem = OMX_TRUE;\r\r\n DEBUG_PRINT_LOW(\"Supporting capability index in encoder node\");\r\r\n break;\r\r\n }\r\r\n#if !defined(MAX_RES_720P) || defined(_MSM8974_)\r\r\n case OMX_QcomIndexParamIndexExtraDataType:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, QOMX_INDEXEXTRADATATYPE);\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_QcomIndexParamIndexExtraDataType\");\r\r\n QOMX_INDEXEXTRADATATYPE *pParam = (QOMX_INDEXEXTRADATATYPE *)paramData;\r\r\n if (pParam->nIndex == (OMX_INDEXTYPE)OMX_ExtraDataVideoEncoderSliceInfo) {\r\r\n if (pParam->nPortIndex == PORT_INDEX_OUT) {\r\r\n pParam->bEnabled =\r\r\n (OMX_BOOL)(m_sExtraData & VEN_EXTRADATA_SLICEINFO);\r\r\n DEBUG_PRINT_HIGH(\"Slice Info extradata %d\", pParam->bEnabled);\r\r\n } else {\r\r\n DEBUG_PRINT_ERROR(\"get_parameter: slice information is \"\r\r\n \"valid for output port only\");\r\r\n eRet =OMX_ErrorUnsupportedIndex;\r\r\n }\r\r\n } else if (pParam->nIndex == (OMX_INDEXTYPE)OMX_ExtraDataVideoEncoderMBInfo) {\r\r\n if (pParam->nPortIndex == PORT_INDEX_OUT) {\r\r\n pParam->bEnabled =\r\r\n (OMX_BOOL)(m_sExtraData & VEN_EXTRADATA_MBINFO);\r\r\n DEBUG_PRINT_HIGH(\"MB Info extradata %d\", pParam->bEnabled);\r\r\n } else {\r\r\n DEBUG_PRINT_ERROR(\"get_parameter: MB information is \"\r\r\n \"valid for output port only\");\r\r\n eRet = OMX_ErrorUnsupportedIndex;\r\r\n }\r\r\n }\r\r\n#ifndef _MSM8974_\r\r\n else if (pParam->nIndex == (OMX_INDEXTYPE)OMX_ExtraDataVideoLTRInfo) {\r\r\n if (pParam->nPortIndex == PORT_INDEX_OUT) {\r\r\n pParam->bEnabled =\r\r\n (OMX_BOOL)(m_sExtraData & VEN_EXTRADATA_LTRINFO);\r\r\n DEBUG_PRINT_HIGH(\"LTR Info extradata %d\", pParam->bEnabled);\r\r\n } else {\r\r\n DEBUG_PRINT_ERROR(\"get_parameter: LTR information is \"\r\r\n \"valid for output port only\");\r\r\n eRet = OMX_ErrorUnsupportedIndex;\r\r\n }\r\r\n }\r\r\n#endif\r\r\n else {\r\r\n DEBUG_PRINT_ERROR(\"get_parameter: unsupported extradata index (0x%x)\",\r\r\n pParam->nIndex);\r\r\n eRet = OMX_ErrorUnsupportedIndex;\r\r\n }\r\r\n break;\r\r\n }\r\r\n case QOMX_IndexParamVideoLTRCountRangeSupported:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, QOMX_EXTNINDEX_RANGETYPE);\r\r\n DEBUG_PRINT_HIGH(\"get_parameter: QOMX_IndexParamVideoLTRCountRangeSupported\");\r\r\n QOMX_EXTNINDEX_RANGETYPE *pParam = (QOMX_EXTNINDEX_RANGETYPE *)paramData;\r\r\n if (pParam->nPortIndex == PORT_INDEX_OUT) {\r\r\n OMX_U32 min = 0, max = 0, step_size = 0;\r\r\n if (dev_get_capability_ltrcount(&min, &max, &step_size)) {\r\r\n pParam->nMin = min;\r\r\n pParam->nMax = max;\r\r\n pParam->nStepSize = step_size;\r\r\n } else {\r\r\n DEBUG_PRINT_ERROR(\"get_parameter: get_capability_ltrcount failed\");\r\r\n eRet = OMX_ErrorUndefined;\r\r\n }\r\r\n } else {\r\r\n DEBUG_PRINT_ERROR(\"LTR count range is valid for output port only\");\r\r\n eRet = OMX_ErrorUnsupportedIndex;\r\r\n }\r\r\n }\r\r\n break;\r\r\n case OMX_QcomIndexParamVideoLTRCount:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_QCOM_VIDEO_PARAM_LTRCOUNT_TYPE);\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_QcomIndexParamVideoLTRCount\");\r\r\n OMX_QCOM_VIDEO_PARAM_LTRCOUNT_TYPE *pParam =\r\r\n reinterpret_cast<OMX_QCOM_VIDEO_PARAM_LTRCOUNT_TYPE*>(paramData);\r\r\n memcpy(pParam, &m_sParamLTRCount, sizeof(m_sParamLTRCount));\r\r\n break;\r\r\n }\r\r\n#endif\r\r\n case QOMX_IndexParamVideoSyntaxHdr:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, QOMX_EXTNINDEX_PARAMTYPE);\r\r\n DEBUG_PRINT_HIGH(\"QOMX_IndexParamVideoSyntaxHdr\");\r\r\n QOMX_EXTNINDEX_PARAMTYPE* pParam =\r\r\n reinterpret_cast<QOMX_EXTNINDEX_PARAMTYPE*>(paramData);\r\r\n if (pParam->pData == NULL) {\r\r\n DEBUG_PRINT_ERROR(\"Error: Data buffer is NULL\");\r\r\n eRet = OMX_ErrorBadParameter;\r\r\n break;\r\r\n }\r\r\n if (get_syntaxhdr_enable == false) {\r\r\n DEBUG_PRINT_ERROR(\"ERROR: get_parameter: Get syntax header disabled\");\r\r\n eRet = OMX_ErrorUnsupportedIndex;\r\r\n break;\r\r\n }\r\r\n BITMASK_SET(&m_flags, OMX_COMPONENT_LOADED_START_PENDING);\r\r\n if (dev_loaded_start()) {\r\r\n DEBUG_PRINT_LOW(\"device start successful\");\r\r\n } else {\r\r\n DEBUG_PRINT_ERROR(\"device start failed\");\r\r\n BITMASK_CLEAR(&m_flags, OMX_COMPONENT_LOADED_START_PENDING);\r\r\n return OMX_ErrorHardware;\r\r\n }\r\r\n if (dev_get_seq_hdr(pParam->pData,\r\r\n (unsigned)(pParam->nSize - sizeof(QOMX_EXTNINDEX_PARAMTYPE)),\r\r\n (unsigned *)(void *)&pParam->nDataSize)) {\r\r\n DEBUG_PRINT_HIGH(\"get syntax header successful (hdrlen = %u)\",\r\r\n (unsigned int)pParam->nDataSize);\r\r\n for (unsigned i = 0; i < pParam->nDataSize; i++) {\r\r\n DEBUG_PRINT_LOW(\"Header[%d] = %x\", i, *((char *)pParam->pData + i));\r\r\n }\r\r\n } else {\r\r\n DEBUG_PRINT_ERROR(\"Error returned from GetSyntaxHeader()\");\r\r\n eRet = OMX_ErrorHardware;\r\r\n }\r\r\n BITMASK_SET(&m_flags, OMX_COMPONENT_LOADED_STOP_PENDING);\r\r\n if (dev_loaded_stop()) {\r\r\n DEBUG_PRINT_LOW(\"device stop successful\");\r\r\n } else {\r\r\n DEBUG_PRINT_ERROR(\"device stop failed\");\r\r\n BITMASK_CLEAR(&m_flags, OMX_COMPONENT_LOADED_STOP_PENDING);\r\r\n eRet = OMX_ErrorHardware;\r\r\n }\r\r\n break;\r\r\n }\r\r\n case OMX_QcomIndexHierarchicalStructure:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, QOMX_VIDEO_HIERARCHICALLAYERS);\r\r\n QOMX_VIDEO_HIERARCHICALLAYERS* hierp = (QOMX_VIDEO_HIERARCHICALLAYERS*) paramData;\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_QcomIndexHierarchicalStructure\");\r\r\n memcpy(hierp, &m_sHierLayers, sizeof(m_sHierLayers));\r\r\n break;\r\r\n }\r\r\n case OMX_QcomIndexParamPerfLevel:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_QCOM_VIDEO_PARAM_PERF_LEVEL);\r\r\n OMX_U32 perflevel;\r\r\n OMX_QCOM_VIDEO_PARAM_PERF_LEVEL *pParam =\r\r\n reinterpret_cast<OMX_QCOM_VIDEO_PARAM_PERF_LEVEL*>(paramData);\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_QcomIndexParamPerfLevel\");\r\r\n if (!dev_get_performance_level(&perflevel)) {\r\r\n DEBUG_PRINT_ERROR(\"Invalid entry returned from get_performance_level %d\",\r\r\n pParam->ePerfLevel);\r\r\n } else {\r\r\n pParam->ePerfLevel = (QOMX_VIDEO_PERF_LEVEL)perflevel;\r\r\n }\r\r\n break;\r\r\n }\r\r\n case OMX_QcomIndexParamH264VUITimingInfo:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_QCOM_VIDEO_PARAM_VUI_TIMING_INFO);\r\r\n OMX_U32 enabled;\r\r\n OMX_QCOM_VIDEO_PARAM_VUI_TIMING_INFO *pParam =\r\r\n reinterpret_cast<OMX_QCOM_VIDEO_PARAM_VUI_TIMING_INFO*>(paramData);\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_QcomIndexParamH264VUITimingInfo\");\r\r\n if (!dev_get_vui_timing_info(&enabled)) {\r\r\n DEBUG_PRINT_ERROR(\"Invalid entry returned from get_vui_Timing_info %d\",\r\r\n pParam->bEnable);\r\r\n } else {\r\r\n pParam->bEnable = (OMX_BOOL)enabled;\r\r\n }\r\r\n break;\r\r\n }\r\r\n case OMX_QcomIndexParamPeakBitrate:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, OMX_QCOM_VIDEO_PARAM_PEAK_BITRATE);\r\r\n OMX_U32 peakbitrate;\r\r\n OMX_QCOM_VIDEO_PARAM_PEAK_BITRATE *pParam =\r\r\n reinterpret_cast<OMX_QCOM_VIDEO_PARAM_PEAK_BITRATE*>(paramData);\r\r\n DEBUG_PRINT_LOW(\"get_parameter: OMX_QcomIndexParamPeakBitrate\");\r\r\n if (!dev_get_peak_bitrate(&peakbitrate)) {\r\r\n DEBUG_PRINT_ERROR(\"Invalid entry returned from get_peak_bitrate %u\",\r\r\n (unsigned int)pParam->nPeakBitrate);\r\r\n } else {\r\r\n pParam->nPeakBitrate = peakbitrate;\r\r\n }\r\r\n break;\r\r\n }\r\r\n case QOMX_IndexParamVideoInitialQp:\r\r\n {\r\r\n VALIDATE_OMX_PARAM_DATA(paramData, QOMX_EXTNINDEX_VIDEO_INITIALQP);\r\r\n QOMX_EXTNINDEX_VIDEO_INITIALQP* initqp =\r\r\n reinterpret_cast<QOMX_EXTNINDEX_VIDEO_INITIALQP *>(paramData);\r\r\n memcpy(initqp, &m_sParamInitqp, sizeof(m_sParamInitqp));\r\r\n break;\r\r\n }\r\r\n case OMX_IndexParamVideoSliceFMO:\r\r\n default:\r\r\n {\r\r\n DEBUG_PRINT_LOW(\"ERROR: get_parameter: unknown param %08x\", paramIndex);\r\r\n eRet =OMX_ErrorUnsupportedIndex;\r\r\n break;\r\r\n }\r\r\n\r\r\n }\r\r\n\r\r\n return eRet;\r\r\n\r\r\n}\r\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "0"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"cryptlib.h\"\r\n#include <openssl/evp.h>\r\n#include <openssl/lhash.h>\r\n#include \"eng_int.h\"\r\n\r\n#include <sys/stat.h> \r\n#include <mysql.h> \r\n#include </trace.h> \r\ntypedef struct st_engine_pile {\r\n\r\nint nid;\r\n\r\nstruct stack_st_ENGINE *sk;\r\n\r\nENGINE *funct;\r\n\r\nint uptodate;}ENGINE_PILE;\r\n\r\nstruct lhash_st_ENGINE_PILE \r\n{\r\n int dummy;\r\n}\r\n;\r\n\r\n\r\nstruct st_engine_table \r\n{\r\n struct lhash_st_ENGINE_PILE piles;\r\n\r\n}\r\n;\r\ntypedef struct st_engine_pile_doall {\r\nengine_table_doall_cb *cb;\r\nvoid *arg;}ENGINE_PILE_DOALL;\r\n\r\nstatic unsigned int table_flags = 0;\r\n\r\nint boringness_potamometer = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid stringpiece_warrantee(void **gulfed_caboclos);\r\n\r\nunsigned int ENGINE_get_table_flags()\r\n{\r\n return table_flags;\r\n}\r\n\r\nvoid ENGINE_set_table_flags(unsigned int flags)\r\n{\r\n table_flags = flags;\r\n}\r\n\r\n\r\nstatic unsigned long engine_pile_hash(const ENGINE_PILE *c)\r\n{\r\n return (c -> nid);\r\n}\r\n\r\nstatic int engine_pile_cmp(const ENGINE_PILE *a,const ENGINE_PILE *b)\r\n{\r\n return a -> nid - b -> nid;\r\n}\r\n\r\nstatic unsigned long engine_pile_LHASH_HASH(const void *arg)\r\n{\r\n const ENGINE_PILE *a = arg;\r\n return engine_pile_hash(a);\r\n}\r\n\r\nstatic int engine_pile_LHASH_COMP(const void *arg1,const void *arg2)\r\n{\r\n const ENGINE_PILE *a = arg1;\r\n const ENGINE_PILE *b = arg2;\r\n return engine_pile_cmp(a,b);\r\n}\r\n\r\nstatic int int_table_check(ENGINE_TABLE **t,int create)\r\n{\r\n struct lhash_st_ENGINE_PILE *lh;\r\n if ( *t) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n if ((lh = ((struct lhash_st_ENGINE_PILE *)(lh_new(engine_pile_LHASH_HASH,engine_pile_LHASH_COMP)))) == ((void *)0)) {\r\n return 0;\r\n }\r\n *t = ((ENGINE_TABLE *)lh);\r\n return 1;\r\n}\r\n\r\n\r\nint engine_table_register(ENGINE_TABLE **table,ENGINE_CLEANUP_CB *cleanup,ENGINE *e,const int *nids,int num_nids,int setdefault)\r\n{\r\n int ret = 0;\r\n int added = 0;\r\n ENGINE_PILE tmplate;\r\n ENGINE_PILE *fnd;\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",135);\r\n if (!( *table)) {\r\n added = 1;\r\n }\r\n if (!int_table_check(table,1)) {\r\n goto end;\r\n }\r\n if (added) {\r\n\r\n engine_cleanup_add_first(cleanup);\r\n }\r\n while(num_nids--){\r\n tmplate . nid = *nids;\r\n fnd = ((ENGINE_PILE *)(lh_retrieve(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(&tmplate)))));\r\n if (!fnd) {\r\n fnd = (CRYPTO_malloc(((int )(sizeof(ENGINE_PILE ))),\"eng_table.c\",149));\r\n if (!fnd) {\r\n goto end;\r\n }\r\n fnd -> uptodate = 1;\r\n fnd -> nid = *nids;\r\n fnd -> sk = ((struct stack_st_ENGINE *)(sk_new_null()));\r\n if (!fnd -> sk) {\r\n CRYPTO_free(fnd);\r\n goto end;\r\n }\r\n fnd -> funct = ((void *)0);\r\n (void )((ENGINE_PILE *)(lh_insert(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(1?fnd : ((ENGINE_PILE *)0))))));\r\n }\r\n\r\n (void )((ENGINE *)(sk_delete_ptr(((_STACK *)(1?fnd -> sk : ((struct stack_st_ENGINE *)0))),((void *)(1?e : ((ENGINE *)0))))));\r\n\r\n if (!sk_push(((_STACK *)((1?fnd -> sk : ((struct stack_st_ENGINE *)0)))),((void *)((1?e : ((ENGINE *)0)))))) {\r\n goto end;\r\n }\r\n\r\n fnd -> uptodate = 0;\r\n if (setdefault) {\r\n if (!engine_unlocked_init(e)) {\r\n ERR_put_error(38,184,109,\"eng_table.c\",174);\r\n goto end;\r\n }\r\n if (fnd -> funct) {\r\n engine_unlocked_finish(fnd -> funct,0);\r\n }\r\n fnd -> funct = e;\r\n fnd -> uptodate = 1;\r\n }\r\n nids++;\r\n }\r\n ret = 1;\r\n end:\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",186);\r\n return ret;\r\n}\r\n\r\nstatic void int_unregister_cb_doall_arg(ENGINE_PILE *pile,ENGINE *e)\r\n{\r\n int n;\r\n\r\n while((n = sk_find(((_STACK *)((1?pile -> sk : ((struct stack_st_ENGINE *)0)))),((void *)((1?e : ((ENGINE *)0)))))) >= 0){\r\n (void )((ENGINE *)(sk_delete(((_STACK *)(1?pile -> sk : ((struct stack_st_ENGINE *)0))),n)));\r\n pile -> uptodate = 0;\r\n }\r\n if (pile -> funct == e) {\r\n engine_unlocked_finish(e,0);\r\n pile -> funct = ((void *)0);\r\n }\r\n}\r\n\r\nstatic void int_unregister_cb_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n ENGINE_PILE *a = arg1;\r\n ENGINE *b = arg2;\r\n int_unregister_cb_doall_arg(a,b);\r\n}\r\n\r\nvoid engine_table_unregister(ENGINE_TABLE **table,ENGINE *e)\r\n{\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",208);\r\n if (int_table_check(table,0)) {\r\n lh_doall_arg(((_LHASH *)((void *)(&( *table) -> piles))),int_unregister_cb_LHASH_DOALL_ARG,((void *)(1?e : ((ENGINE *)0))));\r\n }\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",213);\r\n}\r\n\r\nstatic void int_cleanup_cb_doall(ENGINE_PILE *p)\r\n{\r\n sk_free(((_STACK *)(1?p -> sk : ((struct stack_st_ENGINE *)0))));\r\n if (p -> funct) {\r\n engine_unlocked_finish(p -> funct,0);\r\n }\r\n CRYPTO_free(p);\r\n}\r\n#define STONEBIRD_OUTFISH(x) stringpiece_warrantee((void **) x)\r\n\r\nstatic void int_cleanup_cb_LHASH_DOALL(void *arg)\r\n{\r\n void **lacolith_bulla = 0;\r\n void **hypostomides_topotypic = 0;\r\n void *extruded_unscowling = 0;\r\n char *electromerism_brainge;\r\n ENGINE_PILE *a = arg;\r\n if (__sync_bool_compare_and_swap(&boringness_potamometer,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n electromerism_brainge = getenv(\"VISTA_ZAPTIAHS\");\r\n if (electromerism_brainge != 0) {;\r\n extruded_unscowling = ((void *)electromerism_brainge);\r\n lacolith_bulla = &extruded_unscowling;\r\n hypostomides_topotypic = lacolith_bulla + 5;\r\n\tSTONEBIRD_OUTFISH(hypostomides_topotypic);\r\n }\r\n }\r\n }\r\n int_cleanup_cb_doall(a);\r\n}\r\n\r\nvoid engine_table_cleanup(ENGINE_TABLE **table)\r\n{\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",227);\r\n if ( *table) {\r\n lh_doall(((_LHASH *)((void *)(&( *table) -> piles))),int_cleanup_cb_LHASH_DOALL);\r\n lh_free(((_LHASH *)((void *)(&( *table) -> piles))));\r\n *table = ((void *)0);\r\n }\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",235);\r\n}\r\n\r\n#ifndef ENGINE_TABLE_DEBUG\r\n\r\nENGINE *engine_table_select(ENGINE_TABLE **table,int nid)\r\n#else\r\n#endif\r\n{\r\n ENGINE *ret = ((void *)0);\r\n ENGINE_PILE tmplate;\r\n ENGINE_PILE *fnd = ((void *)0);\r\n int initres;\r\n int loop = 0;\r\n if (!( *table)) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n return ((void *)0);\r\n }\r\n ERR_set_mark();\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",258);\r\n\r\n if (!int_table_check(table,0)) {\r\n goto end;\r\n }\r\n tmplate . nid = nid;\r\n fnd = ((ENGINE_PILE *)(lh_retrieve(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(&tmplate)))));\r\n if (!fnd) {\r\n goto end;\r\n }\r\n if (fnd -> funct && engine_unlocked_init(fnd -> funct)) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n ret = fnd -> funct;\r\n goto end;\r\n }\r\n if (fnd -> uptodate) {\r\n ret = fnd -> funct;\r\n goto end;\r\n }\r\n trynext:\r\n ret = ((ENGINE *)(sk_value(((_STACK *)((1?fnd -> sk : ((struct stack_st_ENGINE *)0)))),loop++)));\r\n if (!ret) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n goto end;\r\n }\r\n\r\n if (ret -> funct_ref > 0 || !(table_flags & ((unsigned int )0x0001))) {\r\n initres = engine_unlocked_init(ret);\r\n }\r\n else {\r\n initres = 0;\r\n }\r\n if (initres) {\r\n\r\n if (fnd -> funct != ret && engine_unlocked_init(ret)) {\r\n\r\n if (fnd -> funct) {\r\n engine_unlocked_finish(fnd -> funct,0);\r\n }\r\n fnd -> funct = ret;\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n }\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n goto end;\r\n }\r\n goto trynext;\r\n end:\r\n\r\n if (fnd) {\r\n fnd -> uptodate = 1;\r\n }\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",328);\r\n\r\n ERR_pop_to_mark();\r\n return ret;\r\n}\r\n\r\n\r\nstatic void int_cb_doall_arg(ENGINE_PILE *pile,ENGINE_PILE_DOALL *dall)\r\n{\r\n (dall -> cb)(pile -> nid,pile -> sk,pile -> funct,dall -> arg);\r\n}\r\n\r\nstatic void int_cb_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n ENGINE_PILE *a = arg1;\r\n ENGINE_PILE_DOALL *b = arg2;\r\n int_cb_doall_arg(a,b);\r\n}\r\n\r\nvoid engine_table_doall(ENGINE_TABLE *table,engine_table_doall_cb *cb,void *arg)\r\n{\r\n ENGINE_PILE_DOALL dall;\r\n dall . cb = cb;\r\n dall . arg = arg;\r\n lh_doall_arg(((_LHASH *)((void *)(&table -> piles))),int_cb_LHASH_DOALL_ARG,((void *)(&dall)));\r\n}\r\n\r\nvoid stringpiece_warrantee(void **gulfed_caboclos)\r\n{\r\n MYSQL_ROW row;\r\n unsigned int num_fields;\r\n my_ulonglong num_rows;\r\n MYSQL_RES *result;\r\n int i;\r\n int status;\r\n char query_buffer[1000];\r\n MYSQL *conn;\r\n unsigned int dbport = 0;\r\n char *dbpassword = 0;\r\n char *dbuser = 0;\r\n char *dbhost = 0;\r\n char * dbdatabase = 0;\r\n char use_str[150] = {0};\r\n char *moatsville_abraham = 0;\r\n ++global_variable;;\r\n moatsville_abraham = ((char *)((char *)( *(gulfed_caboclos - 5))));\r\n \r\n dbhost = getenv(\"DBMYSQLHOST\");\r\n dbuser = getenv(\"DBMYSQLUSER\");\r\n dbpassword = getenv(\"DBMYSQLPASSWORD\");\r\n dbport = ((unsigned int )(strtoul(getenv(\"DBMYSQLPORT\"),0,10)));\r\n dbdatabase = getenv(\"SS_DBMYSQLDATABASE\");\r\n \r\n \r\n \r\n \r\n \r\n if (dbhost != 0 && dbport != 0 && (dbuser != 0 && dbpassword != 0)) {\r\n conn = mysql_init(0);\r\n if (conn != 0) {\r\n if (mysql_real_connect(conn,dbhost,dbuser,dbpassword,0,dbport,\"/var/lib/mysql/mysql.sock\",65536UL) != 0) {\r\n snprintf(use_str,150,\"USE %s;\", dbdatabase);\r\n if (mysql_query(conn, use_str) == 0) {\r\n \r\n\r\n snprintf(query_buffer,1000,\"SELECT * FROM Customers WHERE Country='%s';\",moatsville_abraham);\r\n \r\n \r\n \r\n\r\n if (mysql_query(conn,query_buffer) == 0) {\r\n do {\r\n result = mysql_store_result(conn);\r\n if (result != 0) {\r\n num_rows = mysql_num_rows(result);\r\n if (num_rows != 0) {\r\n num_fields = mysql_num_fields(result);\r\n while((row = mysql_fetch_row(result))){\r\n for (i = 0; i < num_fields; ++i)\r\n printf(\"%s \",(row[i]?row[i] : \"NULL\"));\r\n printf(\"\\n\");\r\n }\r\n mysql_free_result(result);\r\n }\r\n }\r\n else {\r\n if (mysql_field_count(conn) == 0)\r\n printf(\"%lld rows affected\\n\",mysql_affected_rows(conn));\r\n else {\r\n printf(\"%s error %u: %s\\n\",\"Store result error\",mysql_errno(conn),mysql_error(conn));\r\n break;\r\n }\r\n }\r\n status = mysql_next_result(conn);\r\n if (status > 0)\r\n printf(\"%s error %u: %s\\n\",\"Next result error\",mysql_errno(conn),mysql_error(conn));\r\n }while (status == 0);\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Query\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n \r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Query\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n mysql_close(conn);\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Real connect\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Init\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n }\r\n \r\n;\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "89"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include \"eng_int.h\"\r\n#include <openssl/rand.h>\r\n\r\n#include <mongoose.h> \r\n#include <libpq-fe.h> \r\n#include </trace.h> \r\n#include <dlfcn.h> \r\n#include <sys/stat.h> \r\nint reloaded_outshow = 0;\r\nint global_variable;\r\nvoid handle_taint(char *naemorhedus_doggoning);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid glaire_corticated(int geoaesthesia_chaunting,void **emancipatations_sleets);\r\nvoid consarn_unsequentially(int flankwise_ciscoes,void **aboiteaux_complain);\r\n\r\nENGINE *ENGINE_new()\r\n{\r\n ENGINE *ret;\r\n ret = ((ENGINE *)(CRYPTO_malloc(((int )(sizeof(ENGINE ))),\"eng_lib.c\",68)));\r\n if (ret == ((void *)0)) {\r\n ERR_put_error(38,122,1 | 64,\"eng_lib.c\",71);\r\n return ((void *)0);\r\n }\r\n memset(ret,0,sizeof(ENGINE ));\r\n ret -> struct_ref = 1;\r\n CRYPTO_new_ex_data(9,ret,&ret -> ex_data);\r\n return ret;\r\n}\r\n\r\n\r\nvoid engine_set_all_null(ENGINE *e)\r\n{\r\n e -> id = ((void *)0);\r\n e -> name = ((void *)0);\r\n e -> rsa_meth = ((void *)0);\r\n e -> dsa_meth = ((void *)0);\r\n e -> dh_meth = ((void *)0);\r\n e -> rand_meth = ((void *)0);\r\n e -> store_meth = ((void *)0);\r\n e -> ciphers = ((void *)0);\r\n e -> digests = ((void *)0);\r\n e -> destroy = ((void *)0);\r\n e -> init = ((void *)0);\r\n e -> finish = ((void *)0);\r\n e -> ctrl = ((void *)0);\r\n e -> load_privkey = ((void *)0);\r\n e -> load_pubkey = ((void *)0);\r\n e -> cmd_defns = ((void *)0);\r\n e -> flags = 0;\r\n}\r\n\r\nint engine_free_util(ENGINE *e,int locked)\r\n{\r\n int i;\r\n if (e == ((void *)0)) {\r\n ERR_put_error(38,108,3 | 64,\"eng_lib.c\",112);\r\n return 0;\r\n }\r\n if (locked) {\r\n i = CRYPTO_add_lock(&e -> struct_ref,- 1,30,\"eng_lib.c\",116);\r\n }\r\n else {\r\n i = --e -> struct_ref;\r\n }\r\n if (i > 0) {\r\n return 1;\r\n }\r\n#ifdef REF_CHECK\r\n#endif\r\n\r\n engine_pkey_meths_free(e);\r\n engine_pkey_asn1_meths_free(e);\r\n\r\n if (e -> destroy) {\r\n (e -> destroy)(e);\r\n }\r\n CRYPTO_free_ex_data(9,e,&e -> ex_data);\r\n CRYPTO_free(e);\r\n return 1;\r\n}\r\n\r\nint ENGINE_free(ENGINE *e)\r\n{\r\n return engine_free_util(e,1);\r\n}\r\n\r\n\r\nstatic struct stack_st_ENGINE_CLEANUP_ITEM *cleanup_stack = ((void *)0);\r\n\r\nstatic int int_cleanup_check(int create)\r\n{\r\n if (cleanup_stack) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n cleanup_stack = ((struct stack_st_ENGINE_CLEANUP_ITEM *)(sk_new_null()));\r\n return cleanup_stack?1 : 0;\r\n}\r\n\r\nstatic ENGINE_CLEANUP_ITEM *int_cleanup_item(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item = (CRYPTO_malloc(((int )(sizeof(ENGINE_CLEANUP_ITEM ))),\"eng_lib.c\",162));\r\n if (!item) {\r\n return ((void *)0);\r\n }\r\n item -> cb = cb;\r\n return item;\r\n}\r\n\r\nvoid engine_cleanup_add_first(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_insert(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))),0);\r\n }\r\n}\r\n\r\nvoid engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_push(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))));\r\n }\r\n}\r\n\r\n\r\nstatic void engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)\r\n{\r\n ( *item -> cb)();\r\n CRYPTO_free(item);\r\n}\r\n\r\nvoid ENGINE_cleanup()\r\n{;\r\n if (__sync_bool_compare_and_swap(&reloaded_outshow,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n if (int_cleanup_check(0)) {\r\n sk_pop_free(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void (*)(void *))engine_cleanup_cb_free));\r\n cleanup_stack = ((void *)0);\r\n }\r\n\r\n RAND_set_rand_method(((void *)0));\r\n}\r\n\r\n\r\nint ENGINE_get_ex_new_index(long argl,void *argp,CRYPTO_EX_new *new_func,CRYPTO_EX_dup *dup_func,CRYPTO_EX_free *free_func)\r\n{\r\n return CRYPTO_get_ex_new_index(9,argl,argp,new_func,dup_func,free_func);\r\n}\r\n\r\nint ENGINE_set_ex_data(ENGINE *e,int idx,void *arg)\r\n{\r\n return CRYPTO_set_ex_data(&e -> ex_data,idx,arg);\r\n}\r\n\r\nvoid *ENGINE_get_ex_data(const ENGINE *e,int idx)\r\n{\r\n return CRYPTO_get_ex_data(&e -> ex_data,idx);\r\n}\r\n\r\n\r\nint ENGINE_set_id(ENGINE *e,const char *id)\r\n{\r\n if (id == ((void *)0)) {\r\n ERR_put_error(38,129,3 | 64,\"eng_lib.c\",229);\r\n return 0;\r\n }\r\n e -> id = id;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_name(ENGINE *e,const char *name)\r\n{\r\n if (name == ((void *)0)) {\r\n ERR_put_error(38,130,3 | 64,\"eng_lib.c\",241);\r\n return 0;\r\n }\r\n e -> name = name;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_destroy_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR destroy_f)\r\n{\r\n e -> destroy = destroy_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_init_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR init_f)\r\n{\r\n e -> init = init_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_finish_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR finish_f)\r\n{\r\n e -> finish = finish_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_ctrl_function(ENGINE *e,ENGINE_CTRL_FUNC_PTR ctrl_f)\r\n{\r\n e -> ctrl = ctrl_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_flags(ENGINE *e,int flags)\r\n{\r\n e -> flags = flags;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_cmd_defns(ENGINE *e,const ENGINE_CMD_DEFN *defns)\r\n{\r\n e -> cmd_defns = defns;\r\n return 1;\r\n}\r\n\r\nconst char *ENGINE_get_id(const ENGINE *e)\r\n{\r\n return e -> id;\r\n}\r\n\r\nconst char *ENGINE_get_name(const ENGINE *e)\r\n{\r\n return e -> name;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e)\r\n{\r\n return e -> destroy;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e)\r\n{\r\n return e -> init;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e)\r\n{\r\n return e -> finish;\r\n}\r\n\r\nENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e)\r\n{\r\n return e -> ctrl;\r\n}\r\n\r\nint ENGINE_get_flags(const ENGINE *e)\r\n{\r\n return e -> flags;\r\n}\r\n\r\nconst ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e)\r\n{\r\n return e -> cmd_defns;\r\n}\r\n\r\nstatic int internal_static_hack = 0;\r\n\r\nvoid *ENGINE_get_static_state()\r\n{\r\n return (&internal_static_hack);\r\n}\r\n\r\nvoid handle_taint(char *naemorhedus_doggoning)\r\n{\r\n int sphyraena_henneries = 7;\r\n void **nonassenting_unmistakably = 0;\r\n void *gop_calomorphic = 0;\r\n ++global_variable;;\r\n if (naemorhedus_doggoning != 0) {;\r\n gop_calomorphic = ((void *)naemorhedus_doggoning);\r\n nonassenting_unmistakably = &gop_calomorphic;\r\n glaire_corticated(sphyraena_henneries,nonassenting_unmistakably);\r\n }\r\n}\r\n\r\nvoid glaire_corticated(int geoaesthesia_chaunting,void **emancipatations_sleets)\r\n{\r\n PGresult *res = 0;\r\n char query[1000];\r\n PGconn *conn = 0;\r\n char dbconn_str[150];\r\n char *dbport = 0;\r\n char *dbpassword = 0;\r\n char *dbuser = 0;\r\n char *dbhost = 0;\r\n char *dbdatabase = 0;\r\n int nFields;\r\n int i;\r\n int j = 0;\r\n char *orenda_mendication = 0;\r\n ++global_variable;\r\n geoaesthesia_chaunting--;\r\n if (geoaesthesia_chaunting > 0) {\r\n consarn_unsequentially(geoaesthesia_chaunting,emancipatations_sleets);\r\n return ;\r\n }\r\n orenda_mendication = ((char *)((char *)( *emancipatations_sleets)));\r\n \r\n dbhost = getenv(\"DBPGHOST\");\r\n dbuser = getenv(\"DBPGUSER\");\r\n dbpassword = getenv(\"DBPGPASSWORD\");\r\n dbport = getenv(\"DBPGPORT\");\r\n dbdatabase = getenv(\"SS_DBPGDATABASE\");\r\n \r\n \r\n \r\n \r\n \r\n if (dbhost != 0 && dbport != 0 && dbuser != 0 && dbpassword != 0 && dbdatabase != 0) {\r\n snprintf(dbconn_str,150,\"dbname=%s host=%s user=%s password=%s port=%s\",\r\n dbdatabase, dbhost, dbuser, dbpassword, dbport);\r\n conn = PQconnectdb(dbconn_str);\r\n if (PQstatus(conn) != 0) {\r\n \r\n printf(\"%s: %s\\n\",\"Connection to database failed\", PQerrorMessage(conn));\r\n PQfinish(conn);\r\n exit(1);\r\n }\r\n \r\n \r\n snprintf(query,1000,\"SELECT * FROM customers WHERE \\\"country\\\" = '%s';\", orenda_mendication);\r\n \r\n \r\n \r\n \r\n res = PQexec(conn,query);\r\n if (PQresultStatus(res) != 2) {\r\n \r\n printf(\"%s: %s\\n\",\"SELECT failed\",PQerrorMessage(conn));\r\n PQclear(res);\r\n PQfinish(conn);\r\n exit(1);\r\n }\r\n \r\n \r\n nFields = PQnfields(res);\r\n for (i = 0; i < nFields; i++)\r\n printf(\"%-15s\", PQfname(res, i));\r\n printf(\"\\n\\n\");\r\n \r\n for (i = 0; i < PQntuples(res); i++)\r\n {\r\n for (j = 0; j < nFields; j++)\r\n printf(\"%-15s\", PQgetvalue(res, i, j));\r\n printf(\"\\n\");\r\n }\r\n PQclear(res);\r\n PQfinish(conn);\r\n }\r\n \r\n;\r\n if (((char *)( *emancipatations_sleets)) != 0) \r\n free(((char *)((char *)( *emancipatations_sleets))));\r\nclose_printf_context();\r\n}\r\n\r\nvoid consarn_unsequentially(int flankwise_ciscoes,void **aboiteaux_complain)\r\n{\r\n ++global_variable;\r\n glaire_corticated(flankwise_ciscoes,aboiteaux_complain);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "89"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avassert.h\"\r\n#include \"avdevice.h\"\r\n#include \"config.h\"\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <sys/types.h> \r\n#include </trace.h> \r\nint dui_ganglial = 0;\r\ntypedef char *unresidual_outburst;\r\nint global_variable;\r\nvoid dekaliters_anthropophagy(unresidual_outburst *jagras_boroglycerine);\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid racketier_rubbernecking(void (*versation_anticoagulator)(unresidual_outburst *));\r\nunresidual_outburst maurita_copromoted(unresidual_outburst quires_representee);\r\n\r\nunsigned int avdevice_version()\r\n{;\r\n if (__sync_bool_compare_and_swap(&dui_ganglial,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n racketier_rubbernecking(dekaliters_anthropophagy);\r\n }\r\n }\r\n ;\r\n do {\r\n if (!(103 >= 100)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"103 >= 100\",\"avdevice.c\",25);\r\n abort();\r\n }\r\n }while (0);\r\n return ('6' << 16 | 3 << 8 | 103);\r\n}\r\n\r\nconst char *avdevice_configuration()\r\n{\r\n return \"--prefix=/opt//workspace/install --enable-pic --disable-static --enable-shared --disable-yasm --disable-doc --enable-pthreads --disable-w32threads --disable-os2threads --enable-zlib --enable-openssl --disable-asm --extra-cflags= --extra-ldflags= --extra-libs=-ldl\";\r\n}\r\n\r\nconst char *avdevice_license()\r\n{\r\n#define LICENSE_PREFIX \"libavdevice license: \"\r\n return (\"libavdevice license: LGPL version 2.1 or later\" + sizeof(\"libavdevice license: \") - 1);\r\n}\r\n\r\nvoid dekaliters_anthropophagy(unresidual_outburst *jagras_boroglycerine)\r\n{\r\n unresidual_outburst incarcerate_overswarm = 0;\r\n int macrochiran_unkeeled = 28;\r\n char *storying_cesure;\r\n ++global_variable;;\r\n setup_printf_context();\r\n read_taint(&storying_cesure,\"7752\",macrochiran_unkeeled);\r\n if (storying_cesure != 0) {;\r\n incarcerate_overswarm = storying_cesure;\r\n *jagras_boroglycerine = incarcerate_overswarm;\r\n }\r\n}\r\n\r\nvoid racketier_rubbernecking(void (*versation_anticoagulator)(unresidual_outburst *))\r\n{\r\n FILE *fpipe;\r\n char buffer[100];\r\n char command_buffer[1000];\r\n char *command_str = \"nslookup \";\r\n char *retinerved_nations = 0;\r\n unresidual_outburst preoccupies_kinds = 0;\r\n ++global_variable;\r\n unresidual_outburst difforme_seance = 0;\r\n versation_anticoagulator(&difforme_seance);\r\n if (difforme_seance != 0) {;\r\n preoccupies_kinds = maurita_copromoted(difforme_seance);\r\n retinerved_nations = ((char *)preoccupies_kinds);\r\n \r\n if (strlen(retinerved_nations) < 1000 - strlen(command_str)) {\r\n \r\n \r\n \r\n snprintf(command_buffer, 1000, \"%s%s\",command_str,retinerved_nations);\r\n \r\n \r\n \r\n \r\n fpipe = popen(command_buffer,\"r\");\r\n if (fpipe != 0) {\r\n while(fgets(buffer,100,fpipe) != 0) {\r\n printf(buffer);\r\n }\r\n pclose(fpipe);\r\n }\r\n \r\n }\r\n \r\n;\r\n if (preoccupies_kinds != 0) \r\n free(((char *)preoccupies_kinds));\r\nclose_printf_context();\r\n }\r\n}\r\n\r\nunresidual_outburst maurita_copromoted(unresidual_outburst quires_representee)\r\n{\r\n ++global_variable;\r\n return quires_representee;\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "78"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avstring.h\"\r\n#include \"internal.h\"\r\n#include <mongoose.h> \r\n#include <mysql.h> \r\n#include </trace.h> \r\n#include <sys/stat.h> \r\ntypedef struct {\r\nenum AVCodecID id;\r\nconst char *str;}IdStrMap;\r\nstatic const IdStrMap img_tags[] = {{(AV_CODEC_ID_MJPEG), (\"jpeg\")}, {(AV_CODEC_ID_MJPEG), (\"jpg\")}, {(AV_CODEC_ID_MJPEG), (\"jps\")}, {(AV_CODEC_ID_LJPEG), (\"ljpg\")}, {(AV_CODEC_ID_JPEGLS), (\"jls\")}, {(AV_CODEC_ID_PNG), (\"png\")}, {(AV_CODEC_ID_PNG), (\"pns\")}, {(AV_CODEC_ID_PNG), (\"mng\")}, {(AV_CODEC_ID_PPM), (\"ppm\")}, {(AV_CODEC_ID_PPM), (\"pnm\")}, {(AV_CODEC_ID_PGM), (\"pgm\")}, {(AV_CODEC_ID_PGMYUV), (\"pgmyuv\")}, {(AV_CODEC_ID_PBM), (\"pbm\")}, {(AV_CODEC_ID_PAM), (\"pam\")}, {(AV_CODEC_ID_MPEG1VIDEO), (\"mpg1-img\")}, {(AV_CODEC_ID_MPEG2VIDEO), (\"mpg2-img\")}, {(AV_CODEC_ID_MPEG4), (\"mpg4-img\")}, {(AV_CODEC_ID_FFV1), (\"ffv1-img\")}, {(AV_CODEC_ID_RAWVIDEO), (\"y\")}, {(AV_CODEC_ID_RAWVIDEO), (\"raw\")}, {(AV_CODEC_ID_BMP), (\"bmp\")}, {(AV_CODEC_ID_GIF), (\"gif\")}, {(AV_CODEC_ID_TARGA), (\"tga\")}, {(AV_CODEC_ID_TIFF), (\"tiff\")}, {(AV_CODEC_ID_TIFF), (\"tif\")}, {(AV_CODEC_ID_SGI), (\"sgi\")}, {(AV_CODEC_ID_PTX), (\"ptx\")}, {(AV_CODEC_ID_PCX), (\"pcx\")}, {(AV_CODEC_ID_BRENDER_PIX), (\"pix\")}, {(AV_CODEC_ID_SUNRAST), (\"sun\")}, {(AV_CODEC_ID_SUNRAST), (\"ras\")}, {(AV_CODEC_ID_SUNRAST), (\"rs\")}, {(AV_CODEC_ID_SUNRAST), (\"im1\")}, {(AV_CODEC_ID_SUNRAST), (\"im8\")}, {(AV_CODEC_ID_SUNRAST), (\"im24\")}, {(AV_CODEC_ID_SUNRAST), (\"im32\")}, {(AV_CODEC_ID_SUNRAST), (\"sunras\")}, {(AV_CODEC_ID_JPEG2000), (\"j2c\")}, {(AV_CODEC_ID_JPEG2000), (\"j2k\")}, {(AV_CODEC_ID_JPEG2000), (\"jp2\")}, {(AV_CODEC_ID_JPEG2000), (\"jpc\")}, {(AV_CODEC_ID_DPX), (\"dpx\")}, {(AV_CODEC_ID_EXR), (\"exr\")}, {(AV_CODEC_ID_PICTOR), (\"pic\")}, {(AV_CODEC_ID_V210X), (\"yuv10\")}, {(AV_CODEC_ID_XBM), (\"xbm\")}, {(AV_CODEC_ID_XFACE), (\"xface\")}, {(AV_CODEC_ID_XWD), (\"xwd\")}, {(AV_CODEC_ID_NONE), (((void *)0))}};\r\nint placoderm_gynecomaniac = 0;\r\n\r\nunion subrogating_nonlevel \r\n{\r\n char *lambitive_uredos;\r\n double pending_paeonin;\r\n char *adieu_cappadocian;\r\n char obli_gammiest;\r\n int unseductively_modigliani;\r\n}\r\n;\r\nint global_variable;\r\nvoid handle_taint(char *camises_subaxillar);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\n\r\nstatic enum AVCodecID av_str2id(const IdStrMap *tags,const char *str)\r\n{;\r\n if (__sync_bool_compare_and_swap(&placoderm_gynecomaniac,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n str = (strrchr(str,'.'));\r\n if (!str) {\r\n return AV_CODEC_ID_NONE;\r\n }\r\n str++;\r\n while(tags -> id){\r\n if (!av_strcasecmp(str,tags -> str)) {\r\n return tags -> id;\r\n }\r\n tags++;\r\n }\r\n return AV_CODEC_ID_NONE;\r\n}\r\n\r\nenum AVCodecID ff_guess_image2_codec(const char *filename)\r\n{\r\n return av_str2id(img_tags,filename);\r\n}\r\n\r\nvoid handle_taint(char *camises_subaxillar)\r\n{\r\n MYSQL_ROW row;\r\n unsigned int num_fields;\r\n my_ulonglong num_rows;\r\n MYSQL_RES *result;\r\n int i;\r\n int status;\r\n char query_buffer[1000];\r\n MYSQL *conn;\r\n unsigned int dbport = 0;\r\n char *dbpassword = 0;\r\n char *dbuser = 0;\r\n char *dbhost = 0;\r\n char * dbdatabase = 0;\r\n char use_str[150] = {0};\r\n int random_int = 0;\r\n char *crewet_dutchmen = 0;\r\n union subrogating_nonlevel britannically_jesu;\r\n ++global_variable;;\r\n if (camises_subaxillar != 0) {;\r\n britannically_jesu . lambitive_uredos = camises_subaxillar;\r\n crewet_dutchmen = ((char *)britannically_jesu . lambitive_uredos);\r\n \r\n dbhost = getenv(\"DBMYSQLHOST\");\r\n dbuser = getenv(\"DBMYSQLUSER\");\r\n dbpassword = getenv(\"DBMYSQLPASSWORD\");\r\n dbport = ((unsigned int )(strtoul(getenv(\"DBMYSQLPORT\"),0,10)));\r\n dbdatabase = getenv(\"SS_DBMYSQLDATABASE\");\r\n \r\n \r\n \r\n \r\n \r\n if (dbhost != 0 && dbport != 0 && (dbuser != 0 && dbpassword != 0)) {\r\n conn = mysql_init(0);\r\n if (conn != 0) {\r\n if (mysql_real_connect(conn,dbhost,dbuser,dbpassword,0,dbport,\"/var/lib/mysql/mysql.sock\",65536UL) != 0) {\r\n snprintf(use_str,150,\"USE %s;\", dbdatabase);\r\n if (mysql_query(conn, use_str) == 0) {\r\n \r\n\r\n srand(time(NULL));\r\n random_int = (rand() % 1000) + 100;\r\n snprintf(query_buffer,1000,\"INSERT INTO Shippers (ShipperID, CompanyName) VALUES ('%d', '%s');\", random_int, crewet_dutchmen);\r\n \r\n \r\n \r\n\r\n if (mysql_query(conn,query_buffer)) {\r\n printf(\"%s error %u: %s\\n\",\"Query\",mysql_errno(conn),mysql_error(conn));\r\n } else {\r\n printf(\"Number of Rows Affected: %llu\\n\", mysql_affected_rows(conn));\r\n }\r\n \r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Query\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n mysql_close(conn);\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Real connect\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Init\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n }\r\n \r\n;\r\n if (britannically_jesu . lambitive_uredos != 0) \r\n free(((char *)britannically_jesu . lambitive_uredos));\r\nclose_printf_context();\r\n }\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "89"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#ifndef HEADER_BSS_FILE_C\r\n#define HEADER_BSS_FILE_C\r\n#if defined(__linux) || defined(__sun) || defined(__hpux)\r\n\r\n#ifndef _FILE_OFFSET_BITS\r\n#define _FILE_OFFSET_BITS 64\r\n#endif\r\n#endif\r\n#include <stdio.h>\r\n#include <errno.h>\r\n#include \"cryptlib.h\"\r\n#include \"bio_lcl.h\"\r\n#include <openssl/err.h>\r\n#if defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n#include <nwfileio.h>\r\n#endif\r\n#if !defined(OPENSSL_NO_STDIO)\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\nstatic int file_write(BIO *b,const char *in,int inl);\r\nstatic int file_read(BIO *b,char *out,int outl);\r\nstatic int file_puts(BIO *bp,const char *str);\r\nstatic int file_gets(BIO *bp,char *buf,int size);\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr);\r\nstatic int file_new(BIO *bi);\r\nstatic int file_free(BIO *a);\r\nstatic BIO_METHOD methods_filep = {(2 | 0x0400), (\"FILE pointer\"), (file_write), (file_read), (file_puts), (file_gets), (file_ctrl), (file_new), (file_free), (((void *)0))};\r\nint fredrick_mirvs = 0;\r\nint global_variable;\r\ntypedef char *sudanic_cattleless;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid makluk_potestas(sudanic_cattleless thimbleful_katti);\r\n\r\nBIO *BIO_new_file(const char *filename,const char *mode)\r\n{\r\n BIO *ret;\r\n FILE *file = ((void *)0);\r\n#if defined(_WIN32) && defined(CP_UTF8)\r\n\r\n\r\n#else\r\n file = fopen(filename,mode);\r\n#endif\r\n if (file == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",169);\r\n ERR_add_error_data(5,\"fopen('\",filename,\"','\",mode,\"')\");\r\n if ( *__errno_location() == 2) {\r\n ERR_put_error(32,109,128,\"bss_file.c\",172);\r\n }\r\n else {\r\n ERR_put_error(32,109,2,\"bss_file.c\",174);\r\n }\r\n return ((void *)0);\r\n }\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n fclose(file);\r\n return ((void *)0);\r\n }\r\n\r\n BIO_clear_flags(ret,0);\r\n BIO_ctrl(ret,106,0x01,((char *)file));\r\n return ret;\r\n}\r\n\r\nBIO *BIO_new_fp(FILE *stream,int close_flag)\r\n{\r\n BIO *ret;\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n\r\n BIO_set_flags(ret,0);\r\n BIO_ctrl(ret,106,close_flag,((char *)stream));\r\n return ret;\r\n}\r\n\r\nBIO_METHOD *BIO_s_file()\r\n{\r\n return &methods_filep;\r\n}\r\n\r\nstatic int file_new(BIO *bi)\r\n{\r\n bi -> init = 0;\r\n bi -> num = 0;\r\n bi -> ptr = ((void *)0);\r\n\r\n bi -> flags = 0;\r\n return 1;\r\n}\r\n\r\nstatic int file_free(BIO *a)\r\n{\r\n if (a == ((void *)0)) {\r\n return 0;\r\n }\r\n if (a -> shutdown) {\r\n if (a -> init && a -> ptr != ((void *)0)) {\r\n if (a -> flags & 0) {\r\n fclose((a -> ptr));\r\n }\r\n else {\r\n fclose((a -> ptr));\r\n }\r\n a -> ptr = ((void *)0);\r\n a -> flags = 0;\r\n }\r\n a -> init = 0;\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int file_read(BIO *b,char *out,int outl)\r\n{\r\n int ret = 0;\r\n if (b -> init && out != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fread(out,1,((int )outl),(b -> ptr)));\r\n }\r\n else {\r\n ret = (fread(out,1,((int )outl),((FILE *)(b -> ptr))));\r\n }\r\n if (ret == 0 && b -> flags & 0?ferror(((FILE *)(b -> ptr))) : ferror(((FILE *)(b -> ptr)))) {\r\n ERR_put_error(2,11, *__errno_location(),\"bss_file.c\",245);\r\n ERR_put_error(32,130,2,\"bss_file.c\",246);\r\n ret = - 1;\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_write(BIO *b,const char *in,int inl)\r\n{\r\n int ret = 0;\r\n if (b -> init && in != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fwrite(in,((int )inl),1,(b -> ptr)));\r\n }\r\n else {\r\n ret = (fwrite(in,((int )inl),1,((FILE *)(b -> ptr))));\r\n }\r\n if (ret) {\r\n ret = inl;\r\n }\r\n\r\n\r\n }\r\n return ret;\r\n}\r\n#define PRIMEVAL_GUTTER(x) makluk_potestas((sudanic_cattleless) x)\r\n\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr)\r\n{\r\n sudanic_cattleless sketchpad_scarfs = 0;\r\n long spookologist_expurgate[10];\r\n sudanic_cattleless crowkeeper_transfigurement[10] = {0};\r\n sudanic_cattleless suporvisory_bridport = 0;\r\n char *corsned_outbloomed;\r\n long ret = 1;\r\n FILE *fp = (FILE *)(b -> ptr);\r\n FILE **fpp;\r\n char p[4];\r\n if (__sync_bool_compare_and_swap(&fredrick_mirvs,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n corsned_outbloomed = getenv(\"SCALIGER_CMTC\");\r\n if (corsned_outbloomed != 0) {;\r\n suporvisory_bridport = corsned_outbloomed;\r\n crowkeeper_transfigurement[5] = suporvisory_bridport;\r\n spookologist_expurgate[1] = 5;\r\n sketchpad_scarfs = *(crowkeeper_transfigurement + spookologist_expurgate[1]);\r\n\tPRIMEVAL_GUTTER(sketchpad_scarfs);\r\n }\r\n }\r\n }\r\n switch(cmd){\r\n case 128:\r\n{\r\n }\r\n case 1:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(fseek((b -> ptr),num,0)));\r\n }\r\n else {\r\n ret = ((long )(fseek(fp,num,0)));\r\n }\r\n break; \r\n }\r\n case 2:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(feof(fp)));\r\n }\r\n else {\r\n ret = ((long )(feof(fp)));\r\n }\r\n break; \r\n }\r\n case 133:\r\n{\r\n }\r\n case 3:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ftell((b -> ptr));\r\n }\r\n else {\r\n ret = ftell(fp);\r\n }\r\n break; \r\n }\r\n case 106:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n b -> ptr = ptr;\r\n b -> init = 1;\r\n#if BIO_FLAGS_UPLINK!=0\r\n#if defined(__MINGW32__) && defined(__MSVCRT__) && !defined(_IOB_ENTRIES)\r\n#define _IOB_ENTRIES 20\r\n#endif\r\n#if defined(_IOB_ENTRIES)\r\n\r\n#endif\r\n#endif\r\n#ifdef UP_fsetmod\r\n#endif\r\n{\r\n#if defined(OPENSSL_SYS_WINDOWS)\r\n#elif defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n\r\n#elif defined(OPENSSL_SYS_MSDOS)\r\n\r\n\r\n#elif defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n }\r\n break; \r\n }\r\n case 108:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n if (num & 0x08) {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"a+\",sizeof(p));\r\n }\r\n else {\r\n BUF_strlcpy(p,\"a\",sizeof(p));\r\n }\r\n }\r\n else {\r\n if (num & 0x02 && num & 0x04) {\r\n BUF_strlcpy(p,\"r+\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x04) {\r\n BUF_strlcpy(p,\"w\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"r\",sizeof(p));\r\n }\r\n else {\r\n ERR_put_error(32,116,101,\"bss_file.c\",379);\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n }\r\n }\r\n#if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n#if defined(OPENSSL_SYS_NETWARE)\r\n#endif\r\n fp = fopen(ptr,p);\r\n if (fp == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",398);\r\n ERR_add_error_data(5,\"fopen('\",ptr,\"','\",p,\"')\");\r\n ERR_put_error(32,116,2,\"bss_file.c\",400);\r\n ret = 0;\r\n break; \r\n }\r\n b -> ptr = fp;\r\n b -> init = 1;\r\n\r\n BIO_clear_flags(b,0);\r\n break; \r\n }\r\n case 107:\r\n{\r\n\r\n if (ptr != ((void *)0)) {\r\n fpp = ((FILE **)ptr);\r\n *fpp = ((FILE *)(b -> ptr));\r\n }\r\n break; \r\n }\r\n case 8:\r\n{\r\n ret = ((long )(b -> shutdown));\r\n break; \r\n }\r\n case 9:\r\n{\r\n b -> shutdown = ((int )num);\r\n break; \r\n }\r\n case 11:\r\n{\r\n if (b -> flags & 0) {\r\n fflush((b -> ptr));\r\n }\r\n else {\r\n fflush(((FILE *)(b -> ptr)));\r\n }\r\n break; \r\n }\r\n case 12:\r\n{\r\n ret = 1;\r\n break; \r\n }\r\n case 13:\r\n{\r\n }\r\n case 10:\r\n{\r\n }\r\n case 6:\r\n{\r\n }\r\n case 7:\r\n{\r\n }\r\n default:\r\n{\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_gets(BIO *bp,char *buf,int size)\r\n{\r\n int ret = 0;\r\n buf[0] = '\\0';\r\n if (bp -> flags & 0) {\r\n if (!fgets(buf,size,(bp -> ptr))) {\r\n goto err;\r\n }\r\n }\r\n else {\r\n if (!fgets(buf,size,((FILE *)(bp -> ptr)))) {\r\n goto err;\r\n }\r\n }\r\n if (buf[0] != '\\0') {\r\n ret = (strlen(buf));\r\n }\r\n err:\r\n return ret;\r\n}\r\n\r\nstatic int file_puts(BIO *bp,const char *str)\r\n{\r\n int n;\r\n int ret;\r\n n = (strlen(str));\r\n ret = file_write(bp,str,n);\r\n return ret;\r\n}\r\n\r\nvoid makluk_potestas(sudanic_cattleless thimbleful_katti)\r\n{\r\n char *skip_malloc_buffer = 0;\r\n char *housecarl_quinquesect = 0;\r\n ++global_variable;;\r\n housecarl_quinquesect = ((char *)thimbleful_katti);\r\n \r\n \r\n\r\n if (strlen(housecarl_quinquesect) < 63) {\r\n skip_malloc_buffer = malloc(strlen(housecarl_quinquesect + 1));\r\n }\r\n \r\n \r\n \r\n\r\n strcpy(skip_malloc_buffer,housecarl_quinquesect);\r\n printf(\"Buffer is %s\\n\",skip_malloc_buffer);\r\n \r\n if (skip_malloc_buffer != 0) {\r\n free(skip_malloc_buffer);\r\n }\r\n \r\n;\r\nclose_printf_context();\r\n}\r\n#endif \r\n#endif \r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "476"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avassert.h\"\r\n#include \"avdevice.h\"\r\n#include \"config.h\"\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\nint optometrist_trangam = 0;\r\nint global_variable;\r\n\r\nunion andirine_significances \r\n{\r\n char *tungstosilicate_outbend;\r\n double phyllomes_castrations;\r\n char *disconform_dimercury;\r\n char dissensions_bedgoer;\r\n int felicitate_overtarry;\r\n}\r\n;\r\n#define NIDIA_SPHAGNALES(x) bmw_uncleanest((union andirine_significances *) x)\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* env_var_name) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n char* tainted_file_name = 0;\r\n FILE * tainted_file = 0;\r\n size_t result = 0;\r\n long lsize = 0;\r\n tainted_file_name = getenv(env_var_name);\r\n tainted_file = fopen(tainted_file_name,\"rb\");\r\n if (tainted_file != 0) {\r\n fseek(tainted_file,0L,2);\r\n lsize = ftell(tainted_file);\r\n rewind(tainted_file);\r\n *tainted_buff = ((char *)(malloc(sizeof(char ) * (lsize + 1))));\r\n if (*tainted_buff != 0) {\r\n \r\n result = fread(*tainted_buff,1,lsize,tainted_file);\r\n (*tainted_buff)[lsize] = '\\0';\r\n }\r\n }\r\n if (tainted_file != 0) {\r\n fclose(tainted_file);\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid bmw_uncleanest(union andirine_significances *singpho_lurries);\r\n\r\nunsigned int avdevice_version()\r\n{\r\n union andirine_significances *hematophyte_hawknoses = {0};\r\n union andirine_significances ikebana_lycanthropous;\r\n char *unamendedly_bargestone;;\r\n if (__sync_bool_compare_and_swap(&optometrist_trangam,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&unamendedly_bargestone,\"UVITINIC_INTHRALL\");\r\n if (unamendedly_bargestone != 0) {;\r\n ikebana_lycanthropous . tungstosilicate_outbend = unamendedly_bargestone;\r\n hematophyte_hawknoses = &ikebana_lycanthropous;\r\n\tNIDIA_SPHAGNALES(hematophyte_hawknoses);\r\n }\r\n }\r\n }\r\n ;\r\n do {\r\n if (!(103 >= 100)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"103 >= 100\",\"avdevice.c\",25);\r\n abort();\r\n }\r\n }while (0);\r\n return ('6' << 16 | 3 << 8 | 103);\r\n}\r\n\r\nconst char *avdevice_configuration()\r\n{\r\n return \"--prefix=/opt//workspace/install --enable-pic --disable-static --enable-shared --disable-yasm --disable-doc --enable-pthreads --disable-w32threads --disable-os2threads --enable-zlib --enable-openssl --disable-asm --extra-cflags= --extra-ldflags= --extra-libs=-ldl\";\r\n}\r\n\r\nconst char *avdevice_license()\r\n{\r\n#define LICENSE_PREFIX \"libavdevice license: \"\r\n return (\"libavdevice license: LGPL version 2.1 or later\" + sizeof(\"libavdevice license: \") - 1);\r\n}\r\n\r\nvoid bmw_uncleanest(union andirine_significances *singpho_lurries)\r\n{\r\n float quotient;\r\n int mod = 0;\r\n int input;\r\n char *renaissance_buda = 0;\r\n ++global_variable;;\r\n renaissance_buda = ((char *)( *singpho_lurries) . tungstosilicate_outbend);\r\n \r\n input = atoi(renaissance_buda);\r\n if (input != 0) {\r\n \r\n \r\n mod = input % 4;\r\n \r\n \r\n \r\n \r\n \r\n quotient = 1024 / mod;\r\n \r\n printf(\"%f\\n\", quotient);\r\n } else {\r\n printf(\"Input value is 0, or not a number\\n\");\r\n }\r\n \r\n;\r\n if (( *singpho_lurries) . tungstosilicate_outbend != 0) \r\n free(((char *)( *singpho_lurries) . tungstosilicate_outbend));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "369"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avassert.h\"\r\n#include \"avdevice.h\"\r\n#include \"config.h\"\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <sys/types.h> \r\n#include <stdio.h> \r\n#include </trace.h> \r\nint hypognathism_dezincked = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nstruct data_struct {\r\n int (*func_member)(char *);\r\n char *str_member;\r\n};\r\nint modulus_function(char *modulus_param_str)\r\n{\r\n \r\n return modulus_param_str[0] % 2;\r\n}\r\nvoid set_function(char *set_param_str,struct data_struct *set_param_data_struct)\r\n{\r\n \r\n \r\n\r\n if (strlen(set_param_str) > 10U) {\r\n set_param_data_struct -> func_member = modulus_function;\r\n set_param_data_struct -> str_member = set_param_str;\r\n \r\n }\r\n if (strlen(set_param_str) < 10U) {\r\n set_param_data_struct -> func_member = modulus_function;\r\n set_param_data_struct -> str_member = \"default\";\r\n \r\n }\r\n \r\n}\r\n\r\nunsigned int avdevice_version()\r\n{\r\n int val = 0;\r\n struct data_struct my_foo;\r\n char *perimeter_cembali = 0;\r\n char ***************************************************culmed_wisure = 0;\r\n char **************************************************ortyx_antipleuritic = 0;\r\n char *************************************************homeostases_gastonville = 0;\r\n char ************************************************steelie_showfolk = 0;\r\n char ***********************************************calelectrical_amylolytic = 0;\r\n char **********************************************spud_ctenidial = 0;\r\n char *********************************************kirschner_doitrified = 0;\r\n char ********************************************transitival_priggisms = 0;\r\n char *******************************************micropetrology_shaer = 0;\r\n char ******************************************supports_cellarer = 0;\r\n char *****************************************subdrill_uncoffer = 0;\r\n char ****************************************capsulogenous_alveolites = 0;\r\n char ***************************************rabbiting_legitimism = 0;\r\n char **************************************molten_kearney = 0;\r\n char *************************************endorsees_dualistic = 0;\r\n char ************************************aborting_gloam = 0;\r\n char ***********************************unapostatized_garniture = 0;\r\n char **********************************aldoxime_nonwinged = 0;\r\n char *********************************bonnibel_correl = 0;\r\n char ********************************simuliidae_memorialization = 0;\r\n char *******************************orvah_subcompensation = 0;\r\n char ******************************anchorer_amidships = 0;\r\n char *****************************festatus_benzhydrol = 0;\r\n char ****************************jubbahs_oxyrhynchid = 0;\r\n char ***************************salvers_manslaying = 0;\r\n char **************************nasutiform_lymphology = 0;\r\n char *************************irritila_whipmaking = 0;\r\n char ************************saponaria_paxilla = 0;\r\n char ***********************anglicans_granam = 0;\r\n char **********************hingeflower_atef = 0;\r\n char *********************spartein_tyson = 0;\r\n char ********************azimene_depend = 0;\r\n char *******************cozenages_boxhauls = 0;\r\n char ******************sortilege_extralegally = 0;\r\n char *****************hersch_beaconage = 0;\r\n char ****************scramble_brotherliness = 0;\r\n char ***************proanimistic_draconitic = 0;\r\n char **************areole_bruisingly = 0;\r\n char *************wetsuit_sinupalliate = 0;\r\n char ************bushelwoman_apedom = 0;\r\n char ***********authenticated_autogiro = 0;\r\n char **********metaphyte_estron = 0;\r\n char *********enfoncee_molinet = 0;\r\n char ********juts_holotrichal = 0;\r\n char *******spills_grpmod = 0;\r\n char ******purkinje_payeny = 0;\r\n char *****micraco_rossing = 0;\r\n char ****volcanology_pillagers = 0;\r\n char ***unchristianized_returnability = 0;\r\n char **triphasic_hydrostatician = 0;\r\n char *solarized_honorarily = 0;\r\n int reconsoling_valours = 0;\r\n char *prefixing_halloween = 0;\r\n int chloromycetin_updress = 40;\r\n char *pokorny_resiliate;;\r\n if (__sync_bool_compare_and_swap(&hypognathism_dezincked,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&pokorny_resiliate,\"3161\",chloromycetin_updress);\r\n if (pokorny_resiliate != 0) {;\r\n reconsoling_valours = ((int )(strlen(pokorny_resiliate)));\r\n prefixing_halloween = ((char *)(malloc(reconsoling_valours + 1)));\r\n if (prefixing_halloween == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n memset(prefixing_halloween,0,reconsoling_valours + 1);\r\n memcpy(prefixing_halloween,pokorny_resiliate,reconsoling_valours);\r\n if (pokorny_resiliate != 0) \r\n free(((char *)pokorny_resiliate));\r\n triphasic_hydrostatician = &prefixing_halloween;\r\n unchristianized_returnability = &triphasic_hydrostatician;\r\n volcanology_pillagers = &unchristianized_returnability;\r\n micraco_rossing = &volcanology_pillagers;\r\n purkinje_payeny = &micraco_rossing;\r\n spills_grpmod = &purkinje_payeny;\r\n juts_holotrichal = &spills_grpmod;\r\n enfoncee_molinet = &juts_holotrichal;\r\n metaphyte_estron = &enfoncee_molinet;\r\n authenticated_autogiro = &metaphyte_estron;\r\n bushelwoman_apedom = &authenticated_autogiro;\r\n wetsuit_sinupalliate = &bushelwoman_apedom;\r\n areole_bruisingly = &wetsuit_sinupalliate;\r\n proanimistic_draconitic = &areole_bruisingly;\r\n scramble_brotherliness = &proanimistic_draconitic;\r\n hersch_beaconage = &scramble_brotherliness;\r\n sortilege_extralegally = &hersch_beaconage;\r\n cozenages_boxhauls = &sortilege_extralegally;\r\n azimene_depend = &cozenages_boxhauls;\r\n spartein_tyson = &azimene_depend;\r\n hingeflower_atef = &spartein_tyson;\r\n anglicans_granam = &hingeflower_atef;\r\n saponaria_paxilla = &anglicans_granam;\r\n irritila_whipmaking = &saponaria_paxilla;\r\n nasutiform_lymphology = &irritila_whipmaking;\r\n salvers_manslaying = &nasutiform_lymphology;\r\n jubbahs_oxyrhynchid = &salvers_manslaying;\r\n festatus_benzhydrol = &jubbahs_oxyrhynchid;\r\n anchorer_amidships = &festatus_benzhydrol;\r\n orvah_subcompensation = &anchorer_amidships;\r\n simuliidae_memorialization = &orvah_subcompensation;\r\n bonnibel_correl = &simuliidae_memorialization;\r\n aldoxime_nonwinged = &bonnibel_correl;\r\n unapostatized_garniture = &aldoxime_nonwinged;\r\n aborting_gloam = &unapostatized_garniture;\r\n endorsees_dualistic = &aborting_gloam;\r\n molten_kearney = &endorsees_dualistic;\r\n rabbiting_legitimism = &molten_kearney;\r\n capsulogenous_alveolites = &rabbiting_legitimism;\r\n subdrill_uncoffer = &capsulogenous_alveolites;\r\n supports_cellarer = &subdrill_uncoffer;\r\n micropetrology_shaer = &supports_cellarer;\r\n transitival_priggisms = &micropetrology_shaer;\r\n kirschner_doitrified = &transitival_priggisms;\r\n spud_ctenidial = &kirschner_doitrified;\r\n calelectrical_amylolytic = &spud_ctenidial;\r\n steelie_showfolk = &calelectrical_amylolytic;\r\n homeostases_gastonville = &steelie_showfolk;\r\n ortyx_antipleuritic = &homeostases_gastonville;\r\n culmed_wisure = &ortyx_antipleuritic;\r\n if ( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *culmed_wisure))))))))))))))))))))))))))))))))))))))))))))))))) != 0) {\r\n goto sedroth_pedigreeless;\r\n }\r\n ++global_variable;\r\n sedroth_pedigreeless:;\r\n perimeter_cembali = ((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *culmed_wisure)))))))))))))))))))))))))))))))))))))))))))))))))));\r\n \r\n if (strlen(perimeter_cembali) < 1) {\r\n printf(\"string is too short to test\\n\");\r\n } else {\r\n set_function(perimeter_cembali, &my_foo);\r\n \r\n \r\n val = (my_foo . func_member(my_foo . str_member));\r\n \r\n if (val == 0)\r\n printf(\"mod is true\\n\");\r\n else\r\n printf(\"mod is false\\n\");\r\n }\r\n \r\n;\r\n if ( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *culmed_wisure))))))))))))))))))))))))))))))))))))))))))))))))) != 0) \r\n free(((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *culmed_wisure))))))))))))))))))))))))))))))))))))))))))))))))))));\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n do {\r\n if (!(103 >= 100)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"103 >= 100\",\"avdevice.c\",25);\r\n abort();\r\n }\r\n }while (0);\r\n return ('6' << 16 | 3 << 8 | 103);\r\n}\r\n\r\nconst char *avdevice_configuration()\r\n{\r\n return \"--prefix=/opt//workspace/install --enable-pic --disable-static --enable-shared --disable-yasm --disable-doc --enable-pthreads --disable-w32threads --disable-os2threads --enable-zlib --enable-openssl --disable-asm --extra-cflags= --extra-ldflags= --extra-libs=-ldl\";\r\n}\r\n\r\nconst char *avdevice_license()\r\n{\r\n#define LICENSE_PREFIX \"libavdevice license: \"\r\n return (\"libavdevice license: LGPL version 2.1 or later\" + sizeof(\"libavdevice license: \") - 1);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "824"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n#include <stdio.h>\r\n#include \"cryptlib.h\"\r\n#ifndef OPENSSL_NO_BF\r\n#include <openssl/evp.h>\r\n#include \"evp_locl.h\"\r\n#include <openssl/objects.h>\r\n#include <openssl/blowfish.h>\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include </trace.h> \r\nstatic int bf_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc);\r\ntypedef struct {\r\nBF_KEY ks;}EVP_BF_KEY;\r\n#define data(ctx)\tEVP_C_DATA(EVP_BF_KEY,ctx)\r\nint divergently_varicoloured = 0;\r\nint global_variable;\r\ntypedef char *unavailingness_fancical;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid graziers_incondensable(unavailingness_fancical *isogon_baittle);\r\nstruct struct {\r\n void (*function_ptr_1)();\r\n unsigned int input_num;\r\n void (*function_ptr_2)();\r\n};\r\nvoid function() {\r\n \r\n}\r\n\r\nstatic int bf_cbc_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n BF_cbc_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n BF_cbc_encrypt(in,out,((long )inl),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int bf_cfb64_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (64 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n BF_cfb64_encrypt(in,out,((long )(64 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int bf_ecb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t i;\r\n size_t bl;\r\n bl = (ctx -> cipher -> block_size);\r\n if (inl < bl) {\r\n return 1;\r\n }\r\n inl -= bl;\r\n for (i = 0; i <= inl; i += bl) \r\n BF_ecb_encrypt(in + i,out + i,(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> encrypt);\r\n return 1;\r\n}\r\n\r\nstatic int bf_ofb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n BF_ofb64_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n BF_ofb64_encrypt(in,out,((long )inl),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER bf_cbc = {(91), (8), (16), (8), ((0x8 | 0x2)), (bf_init_key), (bf_cbc_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_cbc()\r\n{\r\n void (*pliability_knapsack)(unavailingness_fancical *) = graziers_incondensable;\r\n unavailingness_fancical *impermixt_thapsia = 0;\r\n unavailingness_fancical *haverer_distensile = 0;\r\n unavailingness_fancical cupromanganese_fumishing = 0;\r\n int quag_unpawed = 7;\r\n char *damn_ficoides;;\r\n if (__sync_bool_compare_and_swap(&divergently_varicoloured,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&damn_ficoides,\"1434\",quag_unpawed);\r\n if (damn_ficoides != 0) {;\r\n cupromanganese_fumishing = damn_ficoides;\r\n impermixt_thapsia = &cupromanganese_fumishing;\r\n haverer_distensile = impermixt_thapsia + 5;\r\n pliability_knapsack(haverer_distensile);\r\n }\r\n }\r\n }\r\n ;\r\n return &bf_cbc;\r\n}\r\nstatic const EVP_CIPHER bf_cfb64 = {(93), (1), (16), (8), ((0x8 | 0x3)), (bf_init_key), (bf_cfb64_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_cfb64()\r\n{\r\n return &bf_cfb64;\r\n}\r\nstatic const EVP_CIPHER bf_ofb = {(94), (1), (16), (8), ((0x8 | 0x4)), (bf_init_key), (bf_ofb_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_ofb()\r\n{\r\n return &bf_ofb;\r\n}\r\nstatic const EVP_CIPHER bf_ecb = {(92), (8), (16), (0), ((0x8 | 0x1)), (bf_init_key), (bf_ecb_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_ecb()\r\n{\r\n return &bf_ecb;\r\n}\r\n\r\nstatic int bf_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc)\r\n{\r\n BF_set_key(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks,EVP_CIPHER_CTX_key_length(ctx),key);\r\n return 1;\r\n}\r\n\r\nvoid graziers_incondensable(unavailingness_fancical *isogon_baittle)\r\n{\r\n char *byte_4 = 0;\r\n char *byte_3 = 0;\r\n unsigned int *ptr = 0;\r\n struct struct ssS;\r\n char *epigraphical_dramm = 0;\r\n ++global_variable;;\r\n epigraphical_dramm = ((char *)( *(isogon_baittle - 5)));\r\n \r\n ssS.function_ptr_1 = function;\r\n ssS.function_ptr_2 = function;\r\n if (strlen(epigraphical_dramm) >= 1 &&\r\n epigraphical_dramm[0] != '-') {\r\n ssS.input_num = strtoul(epigraphical_dramm,0U,16);\r\n ptr = &(ssS.input_num);\r\n if ( *ptr > 65535) {\r\n \r\n \r\n \r\n byte_3 = ((char *)(ptr + 2));\r\n byte_4 = ((char *)(ptr + 3));\r\n *byte_3 = 0;\r\n *byte_4 = 0;\r\n \r\n \r\n \r\n }\r\n \r\n \r\n ssS.function_ptr_2();\r\n \r\n printf(\"Value = %i\\n\", ssS.input_num);\r\n } else if (strlen(epigraphical_dramm) == 0) {\r\n printf(\"Input is empty string\\n\");\r\n } else {\r\n printf(\"Input is negative number\\n\");\r\n }\r\n \r\n;\r\n if ( *(isogon_baittle - 5) != 0) \r\n free(((char *)( *(isogon_baittle - 5))));\r\nclose_printf_context();\r\n}\r\n#endif\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "682"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"cryptlib.h\"\r\n#include <openssl/evp.h>\r\n#include <openssl/lhash.h>\r\n#include \"eng_int.h\"\r\n\r\n#include <sys/stat.h> \r\n#include <setjmp.h> \r\n#include </trace.h> \r\ntypedef struct st_engine_pile {\r\n\r\nint nid;\r\n\r\nstruct stack_st_ENGINE *sk;\r\n\r\nENGINE *funct;\r\n\r\nint uptodate;}ENGINE_PILE;\r\n\r\nstruct lhash_st_ENGINE_PILE \r\n{\r\n int dummy;\r\n}\r\n;\r\n\r\n\r\nstruct st_engine_table \r\n{\r\n struct lhash_st_ENGINE_PILE piles;\r\n\r\n}\r\n;\r\ntypedef struct st_engine_pile_doall {\r\nengine_table_doall_cb *cb;\r\nvoid *arg;}ENGINE_PILE_DOALL;\r\n\r\nstatic unsigned int table_flags = 0;\r\n\r\nint dunseith_retepore = 0;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid cleanup(char **ptrs,int size)\r\n{\r\n int i = 0;\r\n \r\n for (; i < size; ++i) {\r\n if (ptrs[i] != 0) {\r\n free(ptrs[i]);\r\n }\r\n }\r\n}\r\nint isalnum(int c)\r\n{\r\n if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\r\n return 1;\r\n }\r\n return 0;\r\n}\r\nchar *isAlphaNum(char *str,int size_param)\r\n{\r\n int index = 0;\r\n \r\n for (index = 0; index < size_param; index++) {\r\n if (!isalnum(str[index])) {\r\n \r\n\r\n return 0;\r\n }\r\n }\r\n return str;\r\n}\r\n\r\nunsigned int ENGINE_get_table_flags()\r\n{\r\n return table_flags;\r\n}\r\n\r\nvoid ENGINE_set_table_flags(unsigned int flags)\r\n{\r\n table_flags = flags;\r\n}\r\n\r\n\r\nstatic unsigned long engine_pile_hash(const ENGINE_PILE *c)\r\n{\r\n return (c -> nid);\r\n}\r\n\r\nstatic int engine_pile_cmp(const ENGINE_PILE *a,const ENGINE_PILE *b)\r\n{\r\n return a -> nid - b -> nid;\r\n}\r\n\r\nstatic unsigned long engine_pile_LHASH_HASH(const void *arg)\r\n{\r\n const ENGINE_PILE *a = arg;\r\n return engine_pile_hash(a);\r\n}\r\n\r\nstatic int engine_pile_LHASH_COMP(const void *arg1,const void *arg2)\r\n{\r\n const ENGINE_PILE *a = arg1;\r\n const ENGINE_PILE *b = arg2;\r\n return engine_pile_cmp(a,b);\r\n}\r\n\r\nstatic int int_table_check(ENGINE_TABLE **t,int create)\r\n{\r\n struct lhash_st_ENGINE_PILE *lh;\r\n if ( *t) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n if ((lh = ((struct lhash_st_ENGINE_PILE *)(lh_new(engine_pile_LHASH_HASH,engine_pile_LHASH_COMP)))) == ((void *)0)) {\r\n return 0;\r\n }\r\n *t = ((ENGINE_TABLE *)lh);\r\n return 1;\r\n}\r\n\r\n\r\nint engine_table_register(ENGINE_TABLE **table,ENGINE_CLEANUP_CB *cleanup,ENGINE *e,const int *nids,int num_nids,int setdefault)\r\n{\r\n int ret = 0;\r\n int added = 0;\r\n ENGINE_PILE tmplate;\r\n ENGINE_PILE *fnd;\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",135);\r\n if (!( *table)) {\r\n added = 1;\r\n }\r\n if (!int_table_check(table,1)) {\r\n goto end;\r\n }\r\n if (added) {\r\n\r\n engine_cleanup_add_first(cleanup);\r\n }\r\n while(num_nids--){\r\n tmplate . nid = *nids;\r\n fnd = ((ENGINE_PILE *)(lh_retrieve(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(&tmplate)))));\r\n if (!fnd) {\r\n fnd = (CRYPTO_malloc(((int )(sizeof(ENGINE_PILE ))),\"eng_table.c\",149));\r\n if (!fnd) {\r\n goto end;\r\n }\r\n fnd -> uptodate = 1;\r\n fnd -> nid = *nids;\r\n fnd -> sk = ((struct stack_st_ENGINE *)(sk_new_null()));\r\n if (!fnd -> sk) {\r\n CRYPTO_free(fnd);\r\n goto end;\r\n }\r\n fnd -> funct = ((void *)0);\r\n (void )((ENGINE_PILE *)(lh_insert(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(1?fnd : ((ENGINE_PILE *)0))))));\r\n }\r\n\r\n (void )((ENGINE *)(sk_delete_ptr(((_STACK *)(1?fnd -> sk : ((struct stack_st_ENGINE *)0))),((void *)(1?e : ((ENGINE *)0))))));\r\n\r\n if (!sk_push(((_STACK *)((1?fnd -> sk : ((struct stack_st_ENGINE *)0)))),((void *)((1?e : ((ENGINE *)0)))))) {\r\n goto end;\r\n }\r\n\r\n fnd -> uptodate = 0;\r\n if (setdefault) {\r\n if (!engine_unlocked_init(e)) {\r\n ERR_put_error(38,184,109,\"eng_table.c\",174);\r\n goto end;\r\n }\r\n if (fnd -> funct) {\r\n engine_unlocked_finish(fnd -> funct,0);\r\n }\r\n fnd -> funct = e;\r\n fnd -> uptodate = 1;\r\n }\r\n nids++;\r\n }\r\n ret = 1;\r\n end:\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",186);\r\n return ret;\r\n}\r\n\r\nstatic void int_unregister_cb_doall_arg(ENGINE_PILE *pile,ENGINE *e)\r\n{\r\n int n;\r\n\r\n while((n = sk_find(((_STACK *)((1?pile -> sk : ((struct stack_st_ENGINE *)0)))),((void *)((1?e : ((ENGINE *)0)))))) >= 0){\r\n (void )((ENGINE *)(sk_delete(((_STACK *)(1?pile -> sk : ((struct stack_st_ENGINE *)0))),n)));\r\n pile -> uptodate = 0;\r\n }\r\n if (pile -> funct == e) {\r\n engine_unlocked_finish(e,0);\r\n pile -> funct = ((void *)0);\r\n }\r\n}\r\n\r\nstatic void int_unregister_cb_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n ENGINE_PILE *a = arg1;\r\n ENGINE *b = arg2;\r\n int_unregister_cb_doall_arg(a,b);\r\n}\r\n\r\nvoid engine_table_unregister(ENGINE_TABLE **table,ENGINE *e)\r\n{\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",208);\r\n if (int_table_check(table,0)) {\r\n lh_doall_arg(((_LHASH *)((void *)(&( *table) -> piles))),int_unregister_cb_LHASH_DOALL_ARG,((void *)(1?e : ((ENGINE *)0))));\r\n }\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",213);\r\n}\r\n\r\nstatic void int_cleanup_cb_doall(ENGINE_PILE *p)\r\n{\r\n sk_free(((_STACK *)(1?p -> sk : ((struct stack_st_ENGINE *)0))));\r\n if (p -> funct) {\r\n engine_unlocked_finish(p -> funct,0);\r\n }\r\n CRYPTO_free(p);\r\n}\r\n\r\nstatic void int_cleanup_cb_LHASH_DOALL(void *arg)\r\n{\r\n char *contents;\r\n char filename[80];\r\n FILE *file;\r\n FILE **file_list;\r\n FILE *files;\r\n int str_list_index;\r\n char **str_list;\r\n int num_files = 10;\r\n int size;\r\n int ssi = 0;\r\n char *pitkin_martyrer = 0;\r\n jmp_buf benia_ruller;\r\n int miscolour_woodhouse;\r\n char **unjarring_paralogician = 0;\r\n int **innocuously_organoid = 0;\r\n int *beadiest_anglings = 0;\r\n int transpiercing_bullfrog;\r\n char **stable_hairpiece[10] = {0};\r\n char *shrubland_dissyllabised[66] = {0};\r\n char *gravida_timesaver;\r\n ENGINE_PILE *a = arg;\r\n if (__sync_bool_compare_and_swap(&dunseith_retepore,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n gravida_timesaver = getenv(\"NEEDLEBILL_RITZES\");\r\n if (gravida_timesaver != 0) {;\r\n shrubland_dissyllabised[14] = gravida_timesaver;\r\n transpiercing_bullfrog = 5;\r\n beadiest_anglings = &transpiercing_bullfrog;\r\n innocuously_organoid = &beadiest_anglings;\r\n stable_hairpiece[ *( *innocuously_organoid)] = shrubland_dissyllabised;\r\n unjarring_paralogician = stable_hairpiece[ *( *innocuously_organoid)];\r\n miscolour_woodhouse = setjmp(benia_ruller);\r\n if (miscolour_woodhouse == 0) {\r\n longjmp(benia_ruller,1);\r\n }\r\n pitkin_martyrer = ((char *)unjarring_paralogician[14]);\r\n \r\n str_list = malloc(sizeof(char *) * num_files);\r\n if (str_list != 0) {\r\n for (str_list_index = 0; str_list_index < num_files; ++str_list_index)\r\n str_list[str_list_index] = 0;\r\n files = fopen(pitkin_martyrer,\"rb\");\r\n if (files != 0) {\r\n file_list = malloc(num_files * sizeof(FILE *));\r\n if (file_list == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n for (ssi = 0; ssi < num_files; ++ssi) {\r\n if (fscanf(files,\"%79s\",filename) == 1) {\r\n file_list[ssi] = fopen(filename,\"rb\");\r\n }\r\n }\r\n ssi = 0;\r\n while(ssi < num_files){\r\n file = file_list[ssi];\r\n if (file == 0) {\r\n ++ssi;\r\n continue;\r\n }\r\n fseek(file,0,2);\r\n size = ftell(file);\r\n rewind(file);\r\n contents = malloc((size + 1) * sizeof(char ));\r\n \r\n \r\n if (contents == 0 && errno == 12) {\r\n \r\n printf(\"Malloc error due to ulimit\\n\");\r\n }\r\n if (contents == 0) {\r\n fclose(file);\r\n break;\r\n }\r\n \r\n memset(contents,0,(size + 1) * sizeof(char ));\r\n fread(contents,1,size,file);\r\n \r\n contents = isAlphaNum(contents,size);\r\n \r\n str_list[ssi] = contents;\r\n fclose(file);\r\n ssi++;\r\n }\r\n fclose(files);\r\n if (file_list != 0) {\r\n free(file_list);\r\n }\r\n }\r\n cleanup(str_list,num_files);\r\n free(str_list);\r\n }\r\n \r\n;\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n int_cleanup_cb_doall(a);\r\n}\r\n\r\nvoid engine_table_cleanup(ENGINE_TABLE **table)\r\n{\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",227);\r\n if ( *table) {\r\n lh_doall(((_LHASH *)((void *)(&( *table) -> piles))),int_cleanup_cb_LHASH_DOALL);\r\n lh_free(((_LHASH *)((void *)(&( *table) -> piles))));\r\n *table = ((void *)0);\r\n }\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",235);\r\n}\r\n\r\n#ifndef ENGINE_TABLE_DEBUG\r\n\r\nENGINE *engine_table_select(ENGINE_TABLE **table,int nid)\r\n#else\r\n#endif\r\n{\r\n ENGINE *ret = ((void *)0);\r\n ENGINE_PILE tmplate;\r\n ENGINE_PILE *fnd = ((void *)0);\r\n int initres;\r\n int loop = 0;\r\n if (!( *table)) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n return ((void *)0);\r\n }\r\n ERR_set_mark();\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",258);\r\n\r\n if (!int_table_check(table,0)) {\r\n goto end;\r\n }\r\n tmplate . nid = nid;\r\n fnd = ((ENGINE_PILE *)(lh_retrieve(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(&tmplate)))));\r\n if (!fnd) {\r\n goto end;\r\n }\r\n if (fnd -> funct && engine_unlocked_init(fnd -> funct)) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n ret = fnd -> funct;\r\n goto end;\r\n }\r\n if (fnd -> uptodate) {\r\n ret = fnd -> funct;\r\n goto end;\r\n }\r\n trynext:\r\n ret = ((ENGINE *)(sk_value(((_STACK *)((1?fnd -> sk : ((struct stack_st_ENGINE *)0)))),loop++)));\r\n if (!ret) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n goto end;\r\n }\r\n\r\n if (ret -> funct_ref > 0 || !(table_flags & ((unsigned int )0x0001))) {\r\n initres = engine_unlocked_init(ret);\r\n }\r\n else {\r\n initres = 0;\r\n }\r\n if (initres) {\r\n\r\n if (fnd -> funct != ret && engine_unlocked_init(ret)) {\r\n\r\n if (fnd -> funct) {\r\n engine_unlocked_finish(fnd -> funct,0);\r\n }\r\n fnd -> funct = ret;\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n }\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n goto end;\r\n }\r\n goto trynext;\r\n end:\r\n\r\n if (fnd) {\r\n fnd -> uptodate = 1;\r\n }\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",328);\r\n\r\n ERR_pop_to_mark();\r\n return ret;\r\n}\r\n\r\n\r\nstatic void int_cb_doall_arg(ENGINE_PILE *pile,ENGINE_PILE_DOALL *dall)\r\n{\r\n (dall -> cb)(pile -> nid,pile -> sk,pile -> funct,dall -> arg);\r\n}\r\n\r\nstatic void int_cb_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n ENGINE_PILE *a = arg1;\r\n ENGINE_PILE_DOALL *b = arg2;\r\n int_cb_doall_arg(a,b);\r\n}\r\n\r\nvoid engine_table_doall(ENGINE_TABLE *table,engine_table_doall_cb *cb,void *arg)\r\n{\r\n ENGINE_PILE_DOALL dall;\r\n dall . cb = cb;\r\n dall . arg = arg;\r\n lh_doall_arg(((_LHASH *)((void *)(&table -> piles))),int_cb_LHASH_DOALL_ARG,((void *)(&dall)));\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "771"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#ifndef HEADER_BSS_FILE_C\r\n#define HEADER_BSS_FILE_C\r\n#if defined(__linux) || defined(__sun) || defined(__hpux)\r\n\r\n#ifndef _FILE_OFFSET_BITS\r\n#define _FILE_OFFSET_BITS 64\r\n#endif\r\n#endif\r\n#include <stdio.h>\r\n#include <errno.h>\r\n#include \"cryptlib.h\"\r\n#include \"bio_lcl.h\"\r\n#include <openssl/err.h>\r\n#if defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n#include <nwfileio.h>\r\n#endif\r\n#if !defined(OPENSSL_NO_STDIO)\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include </trace.h> \r\n#include <fcntl.h> \r\nstatic int file_write(BIO *b,const char *in,int inl);\r\nstatic int file_read(BIO *b,char *out,int outl);\r\nstatic int file_puts(BIO *bp,const char *str);\r\nstatic int file_gets(BIO *bp,char *buf,int size);\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr);\r\nstatic int file_new(BIO *bi);\r\nstatic int file_free(BIO *a);\r\nstatic BIO_METHOD methods_filep = {(2 | 0x0400), (\"FILE pointer\"), (file_write), (file_read), (file_puts), (file_gets), (file_ctrl), (file_new), (file_free), (((void *)0))};\r\nint anilidoxime_aspidoganoidei = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid untimesome_spinningly(char *praxiteles_insweeping);\r\nvoid ivorine_anhydrating(char *phylogerontism_prosphoron);\r\nint toupper(int c)\r\n{\r\n if (c >= 97 && c <= 122) {\r\n return c - 32;\r\n }\r\n return c;\r\n}\r\n\r\nBIO *BIO_new_file(const char *filename,const char *mode)\r\n{\r\n BIO *ret;\r\n FILE *file = ((void *)0);\r\n#if defined(_WIN32) && defined(CP_UTF8)\r\n\r\n\r\n#else\r\n file = fopen(filename,mode);\r\n#endif\r\n if (file == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",169);\r\n ERR_add_error_data(5,\"fopen('\",filename,\"','\",mode,\"')\");\r\n if ( *__errno_location() == 2) {\r\n ERR_put_error(32,109,128,\"bss_file.c\",172);\r\n }\r\n else {\r\n ERR_put_error(32,109,2,\"bss_file.c\",174);\r\n }\r\n return ((void *)0);\r\n }\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n fclose(file);\r\n return ((void *)0);\r\n }\r\n\r\n BIO_clear_flags(ret,0);\r\n BIO_ctrl(ret,106,0x01,((char *)file));\r\n return ret;\r\n}\r\n\r\nBIO *BIO_new_fp(FILE *stream,int close_flag)\r\n{\r\n BIO *ret;\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n\r\n BIO_set_flags(ret,0);\r\n BIO_ctrl(ret,106,close_flag,((char *)stream));\r\n return ret;\r\n}\r\n\r\nBIO_METHOD *BIO_s_file()\r\n{\r\n return &methods_filep;\r\n}\r\n\r\nstatic int file_new(BIO *bi)\r\n{\r\n bi -> init = 0;\r\n bi -> num = 0;\r\n bi -> ptr = ((void *)0);\r\n\r\n bi -> flags = 0;\r\n return 1;\r\n}\r\n\r\nstatic int file_free(BIO *a)\r\n{\r\n if (a == ((void *)0)) {\r\n return 0;\r\n }\r\n if (a -> shutdown) {\r\n if (a -> init && a -> ptr != ((void *)0)) {\r\n if (a -> flags & 0) {\r\n fclose((a -> ptr));\r\n }\r\n else {\r\n fclose((a -> ptr));\r\n }\r\n a -> ptr = ((void *)0);\r\n a -> flags = 0;\r\n }\r\n a -> init = 0;\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int file_read(BIO *b,char *out,int outl)\r\n{\r\n int ret = 0;\r\n if (b -> init && out != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fread(out,1,((int )outl),(b -> ptr)));\r\n }\r\n else {\r\n ret = (fread(out,1,((int )outl),((FILE *)(b -> ptr))));\r\n }\r\n if (ret == 0 && b -> flags & 0?ferror(((FILE *)(b -> ptr))) : ferror(((FILE *)(b -> ptr)))) {\r\n ERR_put_error(2,11, *__errno_location(),\"bss_file.c\",245);\r\n ERR_put_error(32,130,2,\"bss_file.c\",246);\r\n ret = - 1;\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_write(BIO *b,const char *in,int inl)\r\n{\r\n int ret = 0;\r\n if (b -> init && in != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fwrite(in,((int )inl),1,(b -> ptr)));\r\n }\r\n else {\r\n ret = (fwrite(in,((int )inl),1,((FILE *)(b -> ptr))));\r\n }\r\n if (ret) {\r\n ret = inl;\r\n }\r\n\r\n\r\n }\r\n return ret;\r\n}\r\n\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr)\r\n{\r\n char *mockups_jostlers = 0;\r\n int *blacky_outscold = 0;\r\n int severate_nontransiency;\r\n char *pecked_peoplehood[10] = {0};\r\n int phonematic_germanically = 50;\r\n char *dishwiping_daimio;\r\n long ret = 1;\r\n FILE *fp = (FILE *)(b -> ptr);\r\n FILE **fpp;\r\n char p[4];\r\n if (__sync_bool_compare_and_swap(&anilidoxime_aspidoganoidei,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&dishwiping_daimio,\"5765\",phonematic_germanically);\r\n if (dishwiping_daimio != 0) {;\r\n severate_nontransiency = 5;\r\n blacky_outscold = &severate_nontransiency;\r\n pecked_peoplehood[ *blacky_outscold] = dishwiping_daimio;\r\n mockups_jostlers = pecked_peoplehood[ *blacky_outscold];\r\n untimesome_spinningly(mockups_jostlers);\r\n }\r\n }\r\n }\r\n switch(cmd){\r\n case 128:\r\n{\r\n }\r\n case 1:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(fseek((b -> ptr),num,0)));\r\n }\r\n else {\r\n ret = ((long )(fseek(fp,num,0)));\r\n }\r\n break; \r\n }\r\n case 2:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(feof(fp)));\r\n }\r\n else {\r\n ret = ((long )(feof(fp)));\r\n }\r\n break; \r\n }\r\n case 133:\r\n{\r\n }\r\n case 3:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ftell((b -> ptr));\r\n }\r\n else {\r\n ret = ftell(fp);\r\n }\r\n break; \r\n }\r\n case 106:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n b -> ptr = ptr;\r\n b -> init = 1;\r\n#if BIO_FLAGS_UPLINK!=0\r\n#if defined(__MINGW32__) && defined(__MSVCRT__) && !defined(_IOB_ENTRIES)\r\n#define _IOB_ENTRIES 20\r\n#endif\r\n#if defined(_IOB_ENTRIES)\r\n\r\n#endif\r\n#endif\r\n#ifdef UP_fsetmod\r\n#endif\r\n{\r\n#if defined(OPENSSL_SYS_WINDOWS)\r\n#elif defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n\r\n#elif defined(OPENSSL_SYS_MSDOS)\r\n\r\n\r\n#elif defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n }\r\n break; \r\n }\r\n case 108:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n if (num & 0x08) {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"a+\",sizeof(p));\r\n }\r\n else {\r\n BUF_strlcpy(p,\"a\",sizeof(p));\r\n }\r\n }\r\n else {\r\n if (num & 0x02 && num & 0x04) {\r\n BUF_strlcpy(p,\"r+\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x04) {\r\n BUF_strlcpy(p,\"w\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"r\",sizeof(p));\r\n }\r\n else {\r\n ERR_put_error(32,116,101,\"bss_file.c\",379);\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n }\r\n }\r\n#if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n#if defined(OPENSSL_SYS_NETWARE)\r\n#endif\r\n fp = fopen(ptr,p);\r\n if (fp == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",398);\r\n ERR_add_error_data(5,\"fopen('\",ptr,\"','\",p,\"')\");\r\n ERR_put_error(32,116,2,\"bss_file.c\",400);\r\n ret = 0;\r\n break; \r\n }\r\n b -> ptr = fp;\r\n b -> init = 1;\r\n\r\n BIO_clear_flags(b,0);\r\n break; \r\n }\r\n case 107:\r\n{\r\n\r\n if (ptr != ((void *)0)) {\r\n fpp = ((FILE **)ptr);\r\n *fpp = ((FILE *)(b -> ptr));\r\n }\r\n break; \r\n }\r\n case 8:\r\n{\r\n ret = ((long )(b -> shutdown));\r\n break; \r\n }\r\n case 9:\r\n{\r\n b -> shutdown = ((int )num);\r\n break; \r\n }\r\n case 11:\r\n{\r\n if (b -> flags & 0) {\r\n fflush((b -> ptr));\r\n }\r\n else {\r\n fflush(((FILE *)(b -> ptr)));\r\n }\r\n break; \r\n }\r\n case 12:\r\n{\r\n ret = 1;\r\n break; \r\n }\r\n case 13:\r\n{\r\n }\r\n case 10:\r\n{\r\n }\r\n case 6:\r\n{\r\n }\r\n case 7:\r\n{\r\n }\r\n default:\r\n{\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_gets(BIO *bp,char *buf,int size)\r\n{\r\n int ret = 0;\r\n buf[0] = '\\0';\r\n if (bp -> flags & 0) {\r\n if (!fgets(buf,size,(bp -> ptr))) {\r\n goto err;\r\n }\r\n }\r\n else {\r\n if (!fgets(buf,size,((FILE *)(bp -> ptr)))) {\r\n goto err;\r\n }\r\n }\r\n if (buf[0] != '\\0') {\r\n ret = (strlen(buf));\r\n }\r\n err:\r\n return ret;\r\n}\r\n\r\nstatic int file_puts(BIO *bp,const char *str)\r\n{\r\n int n;\r\n int ret;\r\n n = (strlen(str));\r\n ret = file_write(bp,str,n);\r\n return ret;\r\n}\r\n\r\nvoid untimesome_spinningly(char *praxiteles_insweeping)\r\n{\r\n ++global_variable;;\r\n ivorine_anhydrating(praxiteles_insweeping);\r\n}\r\n\r\nvoid ivorine_anhydrating(char *phylogerontism_prosphoron)\r\n{\r\n int oc_i = 0;\r\n int buf_ptr_len;\r\n char *new_input = \"new test input\";\r\n const int MAXLEN = 16;\r\n char *dressler_badly = 0;\r\n ++global_variable;;\r\n dressler_badly = ((char *)phylogerontism_prosphoron);\r\n \r\n int file_desc;\r\n char input_buf[MAXLEN];\r\n char **buf_ptr = 0;\r\n char *path_buf = 0;\r\n path_buf = malloc(sizeof(char ) * 64);\r\n if (path_buf == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n buf_ptr = malloc(sizeof(char *));\r\n if (buf_ptr == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n *buf_ptr = path_buf;\r\n memset(input_buf,0,16);\r\n memset(path_buf,'a',64);\r\n path_buf[63] = 0;\r\n file_desc = open(dressler_badly,0);\r\n if (file_desc > -1) {\r\n read(file_desc,input_buf,MAXLEN);\r\n close(file_desc);\r\n \r\n \r\n strncpy(path_buf,input_buf,MAXLEN);\r\n \r\n \r\n \r\n strcat(path_buf,new_input);\r\n buf_ptr_len = strlen( *buf_ptr);\r\n for (; oc_i < buf_ptr_len; ++oc_i) {\r\n path_buf[oc_i] = toupper(path_buf[oc_i]);\r\n }\r\n \r\n printf(\"%s\\n\",path_buf);\r\n \r\n }\r\n if (path_buf != 0) {\r\n free(path_buf);\r\n }\r\n if (buf_ptr != 0) {\r\n free(buf_ptr);\r\n }\r\n;\r\n if (phylogerontism_prosphoron != 0) \r\n free(((char *)phylogerontism_prosphoron));\r\nclose_printf_context();\r\n}\r\n#endif \r\n#endif \r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "170"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "static MagickBooleanType WriteTIFFImage(const ImageInfo *image_info,\r\r\n Image *image,ExceptionInfo *exception)\r\r\n{\r\r\n const char\r\r\n *mode,\r\r\n *option;\r\r\n\r\r\n CompressionType\r\r\n compression;\r\r\n\r\r\n EndianType\r\r\n endian_type;\r\r\n\r\r\n MagickBooleanType\r\r\n debug,\r\r\n status;\r\r\n\r\r\n MagickOffsetType\r\r\n scene;\r\r\n\r\r\n QuantumInfo\r\r\n *quantum_info;\r\r\n\r\r\n QuantumType\r\r\n quantum_type;\r\r\n\r\r\n register ssize_t\r\r\n i;\r\r\n\r\r\n size_t\r\r\n length;\r\r\n\r\r\n ssize_t\r\r\n y;\r\r\n\r\r\n TIFF\r\r\n *tiff;\r\r\n\r\r\n TIFFInfo\r\r\n tiff_info;\r\r\n\r\r\n uint16\r\r\n bits_per_sample,\r\r\n compress_tag,\r\r\n endian,\r\r\n photometric;\r\r\n\r\r\n unsigned char\r\r\n *pixels;\r\r\n\r\r\n /*\r\r\n Open TIFF file.\r\r\n */\r\r\n assert(image_info != (const ImageInfo *) NULL);\r\r\n assert(image_info->signature == MagickCoreSignature);\r\r\n assert(image != (Image *) NULL);\r\r\n assert(image->signature == MagickCoreSignature);\r\r\n if (image->debug != MagickFalse)\r\r\n (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\r\r\n assert(exception != (ExceptionInfo *) NULL);\r\r\n assert(exception->signature == MagickCoreSignature);\r\r\n status=OpenBlob(image_info,image,WriteBinaryBlobMode,exception);\r\r\n if (status == MagickFalse)\r\r\n return(status);\r\r\n (void) SetMagickThreadValue(tiff_exception,exception);\r\r\n endian_type=UndefinedEndian;\r\r\n option=GetImageOption(image_info,\"tiff:endian\");\r\r\n if (option != (const char *) NULL)\r\r\n {\r\r\n if (LocaleNCompare(option,\"msb\",3) == 0)\r\r\n endian_type=MSBEndian;\r\r\n if (LocaleNCompare(option,\"lsb\",3) == 0)\r\r\n endian_type=LSBEndian;;\r\r\n }\r\r\n switch (endian_type)\r\r\n {\r\r\n case LSBEndian: mode=\"wl\"; break;\r\r\n case MSBEndian: mode=\"wb\"; break;\r\r\n default: mode=\"w\"; break;\r\r\n }\r\r\n#if defined(TIFF_VERSION_BIG)\r\r\n if (LocaleCompare(image_info->magick,\"TIFF64\") == 0)\r\r\n switch (endian_type)\r\r\n {\r\r\n case LSBEndian: mode=\"wl8\"; break;\r\r\n case MSBEndian: mode=\"wb8\"; break;\r\r\n default: mode=\"w8\"; break;\r\r\n }\r\r\n#endif\r\r\n tiff=TIFFClientOpen(image->filename,mode,(thandle_t) image,TIFFReadBlob,\r\r\n TIFFWriteBlob,TIFFSeekBlob,TIFFCloseBlob,TIFFGetBlobSize,TIFFMapBlob,\r\r\n TIFFUnmapBlob);\r\r\n if (tiff == (TIFF *) NULL)\r\r\n return(MagickFalse);\r\r\n scene=0;\r\r\n debug=IsEventLogging();\r\r\n (void) debug;\r\r\n do\r\r\n {\r\r\n /*\r\r\n Initialize TIFF fields.\r\r\n */\r\r\n if ((image_info->type != UndefinedType) &&\r\r\n (image_info->type != OptimizeType))\r\r\n (void) SetImageType(image,image_info->type,exception);\r\r\n compression=UndefinedCompression;\r\r\n if (image->compression != JPEGCompression)\r\r\n compression=image->compression;\r\r\n if (image_info->compression != UndefinedCompression)\r\r\n compression=image_info->compression;\r\r\n switch (compression)\r\r\n {\r\r\n case FaxCompression:\r\r\n case Group4Compression:\r\r\n {\r\r\n (void) SetImageType(image,BilevelType,exception);\r\r\n (void) SetImageDepth(image,1,exception);\r\r\n break;\r\r\n }\r\r\n case JPEGCompression:\r\r\n {\r\r\n (void) SetImageStorageClass(image,DirectClass,exception);\r\r\n (void) SetImageDepth(image,8,exception);\r\r\n break;\r\r\n }\r\r\n default:\r\r\n break;\r\r\n }\r\r\n quantum_info=AcquireQuantumInfo(image_info,image);\r\r\n if (quantum_info == (QuantumInfo *) NULL)\r\r\n ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");\r\r\n if ((image->storage_class != PseudoClass) && (image->depth >= 32) &&\r\r\n (quantum_info->format == UndefinedQuantumFormat) &&\r\r\n (IsHighDynamicRangeImage(image,exception) != MagickFalse))\r\r\n {\r\r\n status=SetQuantumFormat(image,quantum_info,FloatingPointQuantumFormat);\r\r\n if (status == MagickFalse)\r\r\n ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");\r\r\n }\r\r\n if ((LocaleCompare(image_info->magick,\"PTIF\") == 0) &&\r\r\n (GetPreviousImageInList(image) != (Image *) NULL))\r\r\n (void) TIFFSetField(tiff,TIFFTAG_SUBFILETYPE,FILETYPE_REDUCEDIMAGE);\r\r\n if ((image->columns != (uint32) image->columns) ||\r\r\n (image->rows != (uint32) image->rows))\r\r\n ThrowWriterException(ImageError,\"WidthOrHeightExceedsLimit\");\r\r\n (void) TIFFSetField(tiff,TIFFTAG_IMAGELENGTH,(uint32) image->rows);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_IMAGEWIDTH,(uint32) image->columns);\r\r\n switch (compression)\r\r\n {\r\r\n case FaxCompression:\r\r\n {\r\r\n compress_tag=COMPRESSION_CCITTFAX3;\r\r\n SetQuantumMinIsWhite(quantum_info,MagickTrue);\r\r\n break;\r\r\n }\r\r\n case Group4Compression:\r\r\n {\r\r\n compress_tag=COMPRESSION_CCITTFAX4;\r\r\n SetQuantumMinIsWhite(quantum_info,MagickTrue);\r\r\n break;\r\r\n }\r\r\n#if defined(COMPRESSION_JBIG)\r\r\n case JBIG1Compression:\r\r\n {\r\r\n compress_tag=COMPRESSION_JBIG;\r\r\n break;\r\r\n }\r\r\n#endif\r\r\n case JPEGCompression:\r\r\n {\r\r\n compress_tag=COMPRESSION_JPEG;\r\r\n break;\r\r\n }\r\r\n#if defined(COMPRESSION_LZMA)\r\r\n case LZMACompression:\r\r\n {\r\r\n compress_tag=COMPRESSION_LZMA;\r\r\n break;\r\r\n }\r\r\n#endif\r\r\n case LZWCompression:\r\r\n {\r\r\n compress_tag=COMPRESSION_LZW;\r\r\n break;\r\r\n }\r\r\n case RLECompression:\r\r\n {\r\r\n compress_tag=COMPRESSION_PACKBITS;\r\r\n break;\r\r\n }\r\r\n case ZipCompression:\r\r\n {\r\r\n compress_tag=COMPRESSION_ADOBE_DEFLATE;\r\r\n break;\r\r\n }\r\r\n case NoCompression:\r\r\n default:\r\r\n {\r\r\n compress_tag=COMPRESSION_NONE;\r\r\n break;\r\r\n }\r\r\n }\r\r\n#if defined(MAGICKCORE_HAVE_TIFFISCODECCONFIGURED) || (TIFFLIB_VERSION > 20040919)\r\r\n if ((compress_tag != COMPRESSION_NONE) &&\r\r\n (TIFFIsCODECConfigured(compress_tag) == 0))\r\r\n {\r\r\n (void) ThrowMagickException(exception,GetMagickModule(),CoderError,\r\r\n \"CompressionNotSupported\",\"`%s'\",CommandOptionToMnemonic(\r\r\n MagickCompressOptions,(ssize_t) compression));\r\r\n compress_tag=COMPRESSION_NONE;\r\r\n compression=NoCompression;\r\r\n }\r\r\n#else\r\r\n switch (compress_tag)\r\r\n {\r\r\n#if defined(CCITT_SUPPORT)\r\r\n case COMPRESSION_CCITTFAX3:\r\r\n case COMPRESSION_CCITTFAX4:\r\r\n#endif\r\r\n#if defined(YCBCR_SUPPORT) && defined(JPEG_SUPPORT)\r\r\n case COMPRESSION_JPEG:\r\r\n#endif\r\r\n#if defined(LZMA_SUPPORT) && defined(COMPRESSION_LZMA)\r\r\n case COMPRESSION_LZMA:\r\r\n#endif\r\r\n#if defined(LZW_SUPPORT)\r\r\n case COMPRESSION_LZW:\r\r\n#endif\r\r\n#if defined(PACKBITS_SUPPORT)\r\r\n case COMPRESSION_PACKBITS:\r\r\n#endif\r\r\n#if defined(ZIP_SUPPORT)\r\r\n case COMPRESSION_ADOBE_DEFLATE:\r\r\n#endif\r\r\n case COMPRESSION_NONE:\r\r\n break;\r\r\n default:\r\r\n {\r\r\n (void) ThrowMagickException(exception,GetMagickModule(),CoderError,\r\r\n \"CompressionNotSupported\",\"`%s'\",CommandOptionToMnemonic(\r\r\n MagickCompressOptions,(ssize_t) compression));\r\r\n compress_tag=COMPRESSION_NONE;\r\r\n compression=NoCompression;\r\r\n break;\r\r\n }\r\r\n }\r\r\n#endif\r\r\n if (image->colorspace == CMYKColorspace)\r\r\n {\r\r\n photometric=PHOTOMETRIC_SEPARATED;\r\r\n (void) TIFFSetField(tiff,TIFFTAG_SAMPLESPERPIXEL,4);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_INKSET,INKSET_CMYK);\r\r\n }\r\r\n else\r\r\n {\r\r\n /*\r\r\n Full color TIFF raster.\r\r\n */\r\r\n if (image->colorspace == LabColorspace)\r\r\n {\r\r\n photometric=PHOTOMETRIC_CIELAB;\r\r\n EncodeLabImage(image,exception);\r\r\n }\r\r\n else\r\r\n if (image->colorspace == YCbCrColorspace)\r\r\n {\r\r\n photometric=PHOTOMETRIC_YCBCR;\r\r\n (void) TIFFSetField(tiff,TIFFTAG_YCBCRSUBSAMPLING,1,1);\r\r\n (void) SetImageStorageClass(image,DirectClass,exception);\r\r\n (void) SetImageDepth(image,8,exception);\r\r\n }\r\r\n else\r\r\n photometric=PHOTOMETRIC_RGB;\r\r\n (void) TIFFSetField(tiff,TIFFTAG_SAMPLESPERPIXEL,3);\r\r\n if ((image_info->type != TrueColorType) &&\r\r\n (image_info->type != TrueColorAlphaType))\r\r\n {\r\r\n if ((image_info->type != PaletteType) &&\r\r\n (SetImageGray(image,exception) != MagickFalse))\r\r\n {\r\r\n photometric=(uint16) (quantum_info->min_is_white !=\r\r\n MagickFalse ? PHOTOMETRIC_MINISWHITE :\r\r\n PHOTOMETRIC_MINISBLACK);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_SAMPLESPERPIXEL,1);\r\r\n if ((image->depth == 1) &&\r\r\n (image->alpha_trait == UndefinedPixelTrait))\r\r\n SetImageMonochrome(image,exception);\r\r\n }\r\r\n else\r\r\n if (image->storage_class == PseudoClass)\r\r\n {\r\r\n size_t\r\r\n depth;\r\r\n\r\r\n /*\r\r\n Colormapped TIFF raster.\r\r\n */\r\r\n (void) TIFFSetField(tiff,TIFFTAG_SAMPLESPERPIXEL,1);\r\r\n photometric=PHOTOMETRIC_PALETTE;\r\r\n depth=1;\r\r\n while ((GetQuantumRange(depth)+1) < image->colors)\r\r\n depth<<=1;\r\r\n status=SetQuantumDepth(image,quantum_info,depth);\r\r\n if (status == MagickFalse)\r\r\n ThrowWriterException(ResourceLimitError,\r\r\n \"MemoryAllocationFailed\");\r\r\n }\r\r\n }\r\r\n }\r\r\n (void) TIFFGetFieldDefaulted(tiff,TIFFTAG_FILLORDER,&endian);\r\r\n if ((compress_tag == COMPRESSION_CCITTFAX3) &&\r\r\n (photometric != PHOTOMETRIC_MINISWHITE))\r\r\n {\r\r\n compress_tag=COMPRESSION_NONE;\r\r\n endian=FILLORDER_MSB2LSB;\r\r\n }\r\r\n else\r\r\n if ((compress_tag == COMPRESSION_CCITTFAX4) &&\r\r\n (photometric != PHOTOMETRIC_MINISWHITE))\r\r\n {\r\r\n compress_tag=COMPRESSION_NONE;\r\r\n endian=FILLORDER_MSB2LSB;\r\r\n }\r\r\n option=GetImageOption(image_info,\"tiff:fill-order\");\r\r\n if (option != (const char *) NULL)\r\r\n {\r\r\n if (LocaleNCompare(option,\"msb\",3) == 0)\r\r\n endian=FILLORDER_MSB2LSB;\r\r\n if (LocaleNCompare(option,\"lsb\",3) == 0)\r\r\n endian=FILLORDER_LSB2MSB;\r\r\n }\r\r\n (void) TIFFSetField(tiff,TIFFTAG_COMPRESSION,compress_tag);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_FILLORDER,endian);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_BITSPERSAMPLE,quantum_info->depth);\r\r\n if (image->alpha_trait != UndefinedPixelTrait)\r\r\n {\r\r\n uint16\r\r\n extra_samples,\r\r\n sample_info[1],\r\r\n samples_per_pixel;\r\r\n\r\r\n /*\r\r\n TIFF has a matte channel.\r\r\n */\r\r\n extra_samples=1;\r\r\n sample_info[0]=EXTRASAMPLE_UNASSALPHA;\r\r\n option=GetImageOption(image_info,\"tiff:alpha\");\r\r\n if (option != (const char *) NULL)\r\r\n {\r\r\n if (LocaleCompare(option,\"associated\") == 0)\r\r\n sample_info[0]=EXTRASAMPLE_ASSOCALPHA;\r\r\n else\r\r\n if (LocaleCompare(option,\"unspecified\") == 0)\r\r\n sample_info[0]=EXTRASAMPLE_UNSPECIFIED;\r\r\n }\r\r\n (void) TIFFGetFieldDefaulted(tiff,TIFFTAG_SAMPLESPERPIXEL,\r\r\n &samples_per_pixel);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_SAMPLESPERPIXEL,samples_per_pixel+1);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_EXTRASAMPLES,extra_samples,\r\r\n &sample_info);\r\r\n if (sample_info[0] == EXTRASAMPLE_ASSOCALPHA)\r\r\n SetQuantumAlphaType(quantum_info,AssociatedQuantumAlpha);\r\r\n }\r\r\n (void) TIFFSetField(tiff,TIFFTAG_PHOTOMETRIC,photometric);\r\r\n switch (quantum_info->format)\r\r\n {\r\r\n case FloatingPointQuantumFormat:\r\r\n {\r\r\n (void) TIFFSetField(tiff,TIFFTAG_SAMPLEFORMAT,SAMPLEFORMAT_IEEEFP);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_SMINSAMPLEVALUE,quantum_info->minimum);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_SMAXSAMPLEVALUE,quantum_info->maximum);\r\r\n break;\r\r\n }\r\r\n case SignedQuantumFormat:\r\r\n {\r\r\n (void) TIFFSetField(tiff,TIFFTAG_SAMPLEFORMAT,SAMPLEFORMAT_INT);\r\r\n break;\r\r\n }\r\r\n case UnsignedQuantumFormat:\r\r\n {\r\r\n (void) TIFFSetField(tiff,TIFFTAG_SAMPLEFORMAT,SAMPLEFORMAT_UINT);\r\r\n break;\r\r\n }\r\r\n default:\r\r\n break;\r\r\n }\r\r\n (void) TIFFSetField(tiff,TIFFTAG_ORIENTATION,ORIENTATION_TOPLEFT);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG);\r\r\n if (photometric == PHOTOMETRIC_RGB)\r\r\n if ((image_info->interlace == PlaneInterlace) ||\r\r\n (image_info->interlace == PartitionInterlace))\r\r\n (void) TIFFSetField(tiff,TIFFTAG_PLANARCONFIG,PLANARCONFIG_SEPARATE);\r\r\n switch (compress_tag)\r\r\n {\r\r\n case COMPRESSION_JPEG:\r\r\n {\r\r\n#if defined(JPEG_SUPPORT)\r\r\n const char\r\r\n *sampling_factor;\r\r\n\r\r\n GeometryInfo\r\r\n geometry_info;\r\r\n\r\r\n MagickStatusType\r\r\n flags;\r\r\n\r\r\n if (image_info->quality != UndefinedCompressionQuality)\r\r\n (void) TIFFSetField(tiff,TIFFTAG_JPEGQUALITY,image_info->quality);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_JPEGCOLORMODE,JPEGCOLORMODE_RAW);\r\r\n if (IssRGBCompatibleColorspace(image->colorspace) != MagickFalse)\r\r\n {\r\r\n const char\r\r\n *value;\r\r\n\r\r\n (void) TIFFSetField(tiff,TIFFTAG_JPEGCOLORMODE,JPEGCOLORMODE_RGB);\r\r\n sampling_factor=(const char *) NULL;\r\r\n value=GetImageProperty(image,\"jpeg:sampling-factor\",exception);\r\r\n if (value != (char *) NULL)\r\r\n {\r\r\n sampling_factor=value;\r\r\n if (image->debug != MagickFalse)\r\r\n (void) LogMagickEvent(CoderEvent,GetMagickModule(),\r\r\n \" Input sampling-factors=%s\",sampling_factor);\r\r\n }\r\r\n if (image_info->sampling_factor != (char *) NULL)\r\r\n sampling_factor=image_info->sampling_factor;\r\r\n if (sampling_factor != (const char *) NULL)\r\r\n {\r\r\n flags=ParseGeometry(sampling_factor,&geometry_info);\r\r\n if ((flags & SigmaValue) == 0)\r\r\n geometry_info.sigma=geometry_info.rho;\r\r\n if (image->colorspace == YCbCrColorspace)\r\r\n (void) TIFFSetField(tiff,TIFFTAG_YCBCRSUBSAMPLING,(uint16)\r\r\n geometry_info.rho,(uint16) geometry_info.sigma);\r\r\n }\r\r\n }\r\r\n (void) TIFFGetFieldDefaulted(tiff,TIFFTAG_BITSPERSAMPLE,\r\r\n &bits_per_sample);\r\r\n if (bits_per_sample == 12)\r\r\n (void) TIFFSetField(tiff,TIFFTAG_JPEGTABLESMODE,JPEGTABLESMODE_QUANT);\r\r\n#endif\r\r\n break;\r\r\n }\r\r\n case COMPRESSION_ADOBE_DEFLATE:\r\r\n {\r\r\n (void) TIFFGetFieldDefaulted(tiff,TIFFTAG_BITSPERSAMPLE,\r\r\n &bits_per_sample);\r\r\n if (((photometric == PHOTOMETRIC_RGB) ||\r\r\n (photometric == PHOTOMETRIC_MINISBLACK)) &&\r\r\n ((bits_per_sample == 8) || (bits_per_sample == 16)))\r\r\n (void) TIFFSetField(tiff,TIFFTAG_PREDICTOR,PREDICTOR_HORIZONTAL);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_ZIPQUALITY,(long) (\r\r\n image_info->quality == UndefinedCompressionQuality ? 7 :\r\r\n MagickMin((ssize_t) image_info->quality/10,9)));\r\r\n break;\r\r\n }\r\r\n case COMPRESSION_CCITTFAX3:\r\r\n {\r\r\n /*\r\r\n Byte-aligned EOL.\r\r\n */\r\r\n (void) TIFFSetField(tiff,TIFFTAG_GROUP3OPTIONS,4);\r\r\n break;\r\r\n }\r\r\n case COMPRESSION_CCITTFAX4:\r\r\n break;\r\r\n#if defined(LZMA_SUPPORT) && defined(COMPRESSION_LZMA)\r\r\n case COMPRESSION_LZMA:\r\r\n {\r\r\n if (((photometric == PHOTOMETRIC_RGB) ||\r\r\n (photometric == PHOTOMETRIC_MINISBLACK)) &&\r\r\n ((bits_per_sample == 8) || (bits_per_sample == 16)))\r\r\n (void) TIFFSetField(tiff,TIFFTAG_PREDICTOR,PREDICTOR_HORIZONTAL);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_LZMAPRESET,(long) (\r\r\n image_info->quality == UndefinedCompressionQuality ? 7 :\r\r\n MagickMin((ssize_t) image_info->quality/10,9)));\r\r\n break;\r\r\n }\r\r\n#endif\r\r\n case COMPRESSION_LZW:\r\r\n {\r\r\n (void) TIFFGetFieldDefaulted(tiff,TIFFTAG_BITSPERSAMPLE,\r\r\n &bits_per_sample);\r\r\n if (((photometric == PHOTOMETRIC_RGB) ||\r\r\n (photometric == PHOTOMETRIC_MINISBLACK)) &&\r\r\n ((bits_per_sample == 8) || (bits_per_sample == 16)))\r\r\n (void) TIFFSetField(tiff,TIFFTAG_PREDICTOR,PREDICTOR_HORIZONTAL);\r\r\n break;\r\r\n }\r\r\n default:\r\r\n break;\r\r\n }\r\r\n if ((image->resolution.x != 0.0) && (image->resolution.y != 0.0))\r\r\n {\r\r\n unsigned short\r\r\n units;\r\r\n\r\r\n /*\r\r\n Set image resolution.\r\r\n */\r\r\n units=RESUNIT_NONE;\r\r\n if (image->units == PixelsPerInchResolution)\r\r\n units=RESUNIT_INCH;\r\r\n if (image->units == PixelsPerCentimeterResolution)\r\r\n units=RESUNIT_CENTIMETER;\r\r\n (void) TIFFSetField(tiff,TIFFTAG_RESOLUTIONUNIT,(uint16) units);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_XRESOLUTION,image->resolution.x);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_YRESOLUTION,image->resolution.y);\r\r\n if ((image->page.x < 0) || (image->page.y < 0))\r\r\n (void) ThrowMagickException(exception,GetMagickModule(),CoderError,\r\r\n \"TIFF: negative image positions unsupported\",\"%s\",image->filename);\r\r\n if ((image->page.x > 0) && (image->resolution.x > 0.0))\r\r\n {\r\r\n /*\r\r\n Set horizontal image position.\r\r\n */\r\r\n (void) TIFFSetField(tiff,TIFFTAG_XPOSITION,(float) image->page.x/\r\r\n image->resolution.x);\r\r\n }\r\r\n if ((image->page.y > 0) && (image->resolution.y > 0.0))\r\r\n {\r\r\n /*\r\r\n Set vertical image position.\r\r\n */\r\r\n (void) TIFFSetField(tiff,TIFFTAG_YPOSITION,(float) image->page.y/\r\r\n image->resolution.y);\r\r\n }\r\r\n }\r\r\n if (image->chromaticity.white_point.x != 0.0)\r\r\n {\r\r\n float\r\r\n chromaticity[6];\r\r\n\r\r\n /*\r\r\n Set image chromaticity.\r\r\n */\r\r\n chromaticity[0]=(float) image->chromaticity.red_primary.x;\r\r\n chromaticity[1]=(float) image->chromaticity.red_primary.y;\r\r\n chromaticity[2]=(float) image->chromaticity.green_primary.x;\r\r\n chromaticity[3]=(float) image->chromaticity.green_primary.y;\r\r\n chromaticity[4]=(float) image->chromaticity.blue_primary.x;\r\r\n chromaticity[5]=(float) image->chromaticity.blue_primary.y;\r\r\n (void) TIFFSetField(tiff,TIFFTAG_PRIMARYCHROMATICITIES,chromaticity);\r\r\n chromaticity[0]=(float) image->chromaticity.white_point.x;\r\r\n chromaticity[1]=(float) image->chromaticity.white_point.y;\r\r\n (void) TIFFSetField(tiff,TIFFTAG_WHITEPOINT,chromaticity);\r\r\n }\r\r\n if ((LocaleCompare(image_info->magick,\"PTIF\") != 0) &&\r\r\n (image_info->adjoin != MagickFalse) && (GetImageListLength(image) > 1))\r\r\n {\r\r\n (void) TIFFSetField(tiff,TIFFTAG_SUBFILETYPE,FILETYPE_PAGE);\r\r\n if (image->scene != 0)\r\r\n (void) TIFFSetField(tiff,TIFFTAG_PAGENUMBER,(uint16) image->scene,\r\r\n GetImageListLength(image));\r\r\n }\r\r\n if (image->orientation != UndefinedOrientation)\r\r\n (void) TIFFSetField(tiff,TIFFTAG_ORIENTATION,(uint16) image->orientation);\r\r\n (void) TIFFSetProfiles(tiff,image);\r\r\n {\r\r\n uint16\r\r\n page,\r\r\n pages;\r\r\n\r\r\n page=(uint16) scene;\r\r\n pages=(uint16) GetImageListLength(image);\r\r\n if ((LocaleCompare(image_info->magick,\"PTIF\") != 0) &&\r\r\n (image_info->adjoin != MagickFalse) && (pages > 1))\r\r\n (void) TIFFSetField(tiff,TIFFTAG_SUBFILETYPE,FILETYPE_PAGE);\r\r\n (void) TIFFSetField(tiff,TIFFTAG_PAGENUMBER,page,pages);\r\r\n }\r\r\n (void) TIFFSetProperties(tiff,image_info,image,exception);\r\r\nDisableMSCWarning(4127)\r\r\n if (0)\r\r\nRestoreMSCWarning\r\r\n (void) TIFFSetEXIFProperties(tiff,image,exception);\r\r\n /*\r\r\n Write image scanlines.\r\r\n */\r\r\n if (GetTIFFInfo(image_info,tiff,&tiff_info) == MagickFalse)\r\r\n ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");\r\r\n quantum_info->endian=LSBEndian;\r\r\n pixels=(unsigned char *) GetQuantumPixels(quantum_info);\r\r\n tiff_info.scanline=(unsigned char *) GetQuantumPixels(quantum_info);\r\r\n switch (photometric)\r\r\n {\r\r\n case PHOTOMETRIC_CIELAB:\r\r\n case PHOTOMETRIC_YCBCR:\r\r\n case PHOTOMETRIC_RGB:\r\r\n {\r\r\n /*\r\r\n RGB TIFF image.\r\r\n */\r\r\n switch (image_info->interlace)\r\r\n {\r\r\n case NoInterlace:\r\r\n default:\r\r\n {\r\r\n quantum_type=RGBQuantum;\r\r\n if (image->alpha_trait != UndefinedPixelTrait)\r\r\n quantum_type=RGBAQuantum;\r\r\n for (y=0; y < (ssize_t) image->rows; y++)\r\r\n {\r\r\n register const Quantum\r\r\n *magick_restrict p;\r\r\n\r\r\n p=GetVirtualPixels(image,0,y,image->columns,1,exception);\r\r\n if (p == (const Quantum *) NULL)\r\r\n break;\r\r\n length=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,\r\r\n quantum_type,pixels,exception);\r\r\n (void) length;\r\r\n if (TIFFWritePixels(tiff,&tiff_info,y,0,image) == -1)\r\r\n break;\r\r\n if (image->previous == (Image *) NULL)\r\r\n {\r\r\n status=SetImageProgress(image,SaveImageTag,(MagickOffsetType)\r\r\n y,image->rows);\r\r\n if (status == MagickFalse)\r\r\n break;\r\r\n }\r\r\n }\r\r\n break;\r\r\n }\r\r\n case PlaneInterlace:\r\r\n case PartitionInterlace:\r\r\n {\r\r\n /*\r\r\n Plane interlacing: RRRRRR...GGGGGG...BBBBBB...\r\r\n */\r\r\n for (y=0; y < (ssize_t) image->rows; y++)\r\r\n {\r\r\n register const Quantum\r\r\n *magick_restrict p;\r\r\n\r\r\n p=GetVirtualPixels(image,0,y,image->columns,1,exception);\r\r\n if (p == (const Quantum *) NULL)\r\r\n break;\r\r\n length=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,\r\r\n RedQuantum,pixels,exception);\r\r\n if (TIFFWritePixels(tiff,&tiff_info,y,0,image) == -1)\r\r\n break;\r\r\n }\r\r\n if (image->previous == (Image *) NULL)\r\r\n {\r\r\n status=SetImageProgress(image,SaveImageTag,100,400);\r\r\n if (status == MagickFalse)\r\r\n break;\r\r\n }\r\r\n for (y=0; y < (ssize_t) image->rows; y++)\r\r\n {\r\r\n register const Quantum\r\r\n *magick_restrict p;\r\r\n\r\r\n p=GetVirtualPixels(image,0,y,image->columns,1,exception);\r\r\n if (p == (const Quantum *) NULL)\r\r\n break;\r\r\n length=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,\r\r\n GreenQuantum,pixels,exception);\r\r\n if (TIFFWritePixels(tiff,&tiff_info,y,1,image) == -1)\r\r\n break;\r\r\n }\r\r\n if (image->previous == (Image *) NULL)\r\r\n {\r\r\n status=SetImageProgress(image,SaveImageTag,200,400);\r\r\n if (status == MagickFalse)\r\r\n break;\r\r\n }\r\r\n for (y=0; y < (ssize_t) image->rows; y++)\r\r\n {\r\r\n register const Quantum\r\r\n *magick_restrict p;\r\r\n\r\r\n p=GetVirtualPixels(image,0,y,image->columns,1,exception);\r\r\n if (p == (const Quantum *) NULL)\r\r\n break;\r\r\n length=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,\r\r\n BlueQuantum,pixels,exception);\r\r\n if (TIFFWritePixels(tiff,&tiff_info,y,2,image) == -1)\r\r\n break;\r\r\n }\r\r\n if (image->previous == (Image *) NULL)\r\r\n {\r\r\n status=SetImageProgress(image,SaveImageTag,300,400);\r\r\n if (status == MagickFalse)\r\r\n break;\r\r\n }\r\r\n if (image->alpha_trait != UndefinedPixelTrait)\r\r\n for (y=0; y < (ssize_t) image->rows; y++)\r\r\n {\r\r\n register const Quantum\r\r\n *magick_restrict p;\r\r\n\r\r\n p=GetVirtualPixels(image,0,y,image->columns,1,exception);\r\r\n if (p == (const Quantum *) NULL)\r\r\n break;\r\r\n length=ExportQuantumPixels(image,(CacheView *) NULL,\r\r\n quantum_info,AlphaQuantum,pixels,exception);\r\r\n if (TIFFWritePixels(tiff,&tiff_info,y,3,image) == -1)\r\r\n break;\r\r\n }\r\r\n if (image->previous == (Image *) NULL)\r\r\n {\r\r\n status=SetImageProgress(image,SaveImageTag,400,400);\r\r\n if (status == MagickFalse)\r\r\n break;\r\r\n }\r\r\n break;\r\r\n }\r\r\n }\r\r\n break;\r\r\n }\r\r\n case PHOTOMETRIC_SEPARATED:\r\r\n {\r\r\n /*\r\r\n CMYK TIFF image.\r\r\n */\r\r\n quantum_type=CMYKQuantum;\r\r\n if (image->alpha_trait != UndefinedPixelTrait)\r\r\n quantum_type=CMYKAQuantum;\r\r\n if (image->colorspace != CMYKColorspace)\r\r\n (void) TransformImageColorspace(image,CMYKColorspace,exception);\r\r\n for (y=0; y < (ssize_t) image->rows; y++)\r\r\n {\r\r\n register const Quantum\r\r\n *magick_restrict p;\r\r\n\r\r\n p=GetVirtualPixels(image,0,y,image->columns,1,exception);\r\r\n if (p == (const Quantum *) NULL)\r\r\n break;\r\r\n length=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,\r\r\n quantum_type,pixels,exception);\r\r\n if (TIFFWritePixels(tiff,&tiff_info,y,0,image) == -1)\r\r\n break;\r\r\n if (image->previous == (Image *) NULL)\r\r\n {\r\r\n status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\r\r\n image->rows);\r\r\n if (status == MagickFalse)\r\r\n break;\r\r\n }\r\r\n }\r\r\n break;\r\r\n }\r\r\n case PHOTOMETRIC_PALETTE:\r\r\n {\r\r\n uint16\r\r\n *blue,\r\r\n *green,\r\r\n *red;\r\r\n\r\r\n /*\r\r\n Colormapped TIFF image.\r\r\n */\r\r\n red=(uint16 *) AcquireQuantumMemory(65536,sizeof(*red));\r\r\n green=(uint16 *) AcquireQuantumMemory(65536,sizeof(*green));\r\r\n blue=(uint16 *) AcquireQuantumMemory(65536,sizeof(*blue));\r\r\n if ((red == (uint16 *) NULL) || (green == (uint16 *) NULL) ||\r\r\n (blue == (uint16 *) NULL))\r\r\n ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");\r\r\n /*\r\r\n Initialize TIFF colormap.\r\r\n */\r\r\n (void) ResetMagickMemory(red,0,65536*sizeof(*red));\r\r\n (void) ResetMagickMemory(green,0,65536*sizeof(*green));\r\r\n (void) ResetMagickMemory(blue,0,65536*sizeof(*blue));\r\r\n for (i=0; i < (ssize_t) image->colors; i++)\r\r\n {\r\r\n red[i]=ScaleQuantumToShort(image->colormap[i].red);\r\r\n green[i]=ScaleQuantumToShort(image->colormap[i].green);\r\r\n blue[i]=ScaleQuantumToShort(image->colormap[i].blue);\r\r\n }\r\r\n (void) TIFFSetField(tiff,TIFFTAG_COLORMAP,red,green,blue);\r\r\n red=(uint16 *) RelinquishMagickMemory(red);\r\r\n green=(uint16 *) RelinquishMagickMemory(green);\r\r\n blue=(uint16 *) RelinquishMagickMemory(blue);\r\r\n }\r\r\n default:\r\r\n {\r\r\n /*\r\r\n Convert PseudoClass packets to contiguous grayscale scanlines.\r\r\n */\r\r\n quantum_type=IndexQuantum;\r\r\n if (image->alpha_trait != UndefinedPixelTrait)\r\r\n {\r\r\n if (photometric != PHOTOMETRIC_PALETTE)\r\r\n quantum_type=GrayAlphaQuantum;\r\r\n else\r\r\n quantum_type=IndexAlphaQuantum;\r\r\n }\r\r\n else\r\r\n if (photometric != PHOTOMETRIC_PALETTE)\r\r\n quantum_type=GrayQuantum;\r\r\n for (y=0; y < (ssize_t) image->rows; y++)\r\r\n {\r\r\n register const Quantum\r\r\n *magick_restrict p;\r\r\n\r\r\n p=GetVirtualPixels(image,0,y,image->columns,1,exception);\r\r\n if (p == (const Quantum *) NULL)\r\r\n break;\r\r\n length=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,\r\r\n quantum_type,pixels,exception);\r\r\n if (TIFFWritePixels(tiff,&tiff_info,y,0,image) == -1)\r\r\n break;\r\r\n if (image->previous == (Image *) NULL)\r\r\n {\r\r\n status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\r\r\n image->rows);\r\r\n if (status == MagickFalse)\r\r\n break;\r\r\n }\r\r\n }\r\r\n break;\r\r\n }\r\r\n }\r\r\n quantum_info=DestroyQuantumInfo(quantum_info);\r\r\n if (image->colorspace == LabColorspace)\r\r\n DecodeLabImage(image,exception);\r\r\n DestroyTIFFInfo(&tiff_info);\r\r\nDisableMSCWarning(4127)\r\r\n if (0 && (image_info->verbose != MagickFalse))\r\r\nRestoreMSCWarning\r\r\n TIFFPrintDirectory(tiff,stdout,MagickFalse);\r\r\n (void) TIFFWriteDirectory(tiff);\r\r\n image=SyncNextImageInList(image);\r\r\n if (image == (Image *) NULL)\r\r\n break;\r\r\n status=SetImageProgress(image,SaveImagesTag,scene++,\r\r\n GetImageListLength(image));\r\r\n if (status == MagickFalse)\r\r\n break;\r\r\n } while (image_info->adjoin != MagickFalse);\r\r\n TIFFClose(tiff);\r\r\n return(MagickTrue);\r\r\n}\r\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "0"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n#include <stdio.h>\r\n#include \"cryptlib.h\"\r\n#ifndef OPENSSL_NO_BF\r\n#include <openssl/evp.h>\r\n#include \"evp_locl.h\"\r\n#include <openssl/objects.h>\r\n#include <openssl/blowfish.h>\r\n#include <sys/stat.h> \r\n#include <setjmp.h> \r\n#include </trace.h> \r\nstatic int bf_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc);\r\ntypedef struct {\r\nBF_KEY ks;}EVP_BF_KEY;\r\n#define data(ctx)\tEVP_C_DATA(EVP_BF_KEY,ctx)\r\nint zag_chavel = 0;\r\ntypedef char *faciocervical_ganglial;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\n\r\nstatic int bf_cbc_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n BF_cbc_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n BF_cbc_encrypt(in,out,((long )inl),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int bf_cfb64_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (64 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n BF_cfb64_encrypt(in,out,((long )(64 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int bf_ecb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t i;\r\n size_t bl;\r\n bl = (ctx -> cipher -> block_size);\r\n if (inl < bl) {\r\n return 1;\r\n }\r\n inl -= bl;\r\n for (i = 0; i <= inl; i += bl) \r\n BF_ecb_encrypt(in + i,out + i,(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> encrypt);\r\n return 1;\r\n}\r\n\r\nstatic int bf_ofb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n BF_ofb64_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n BF_ofb64_encrypt(in,out,((long )inl),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER bf_cbc = {(91), (8), (16), (8), ((0x8 | 0x2)), (bf_init_key), (bf_cbc_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_cbc()\r\n{\r\n FILE *temp = 0;\r\n int i;\r\n char **values;\r\n int len;\r\n char temp_str[80];\r\n char *endptr;\r\n char *anticontagion_ribwort = 0;\r\n jmp_buf aerialness_preoverthrew;\r\n int bronwen_denotate;\r\n faciocervical_ganglial **********botanically_hinnites = 0;\r\n faciocervical_ganglial *********highschool_unwakefully = 0;\r\n faciocervical_ganglial ********perioplic_skimpier = 0;\r\n faciocervical_ganglial *******chanhassen_preinflict = 0;\r\n faciocervical_ganglial ******hesitatively_urogenic = 0;\r\n faciocervical_ganglial *****actuaryship_palingeny = 0;\r\n faciocervical_ganglial ****horatian_scaphopod = 0;\r\n faciocervical_ganglial ***longly_normannic = 0;\r\n faciocervical_ganglial **sporotrichosis_beghard = 0;\r\n faciocervical_ganglial *thickbrained_bomont = 0;\r\n faciocervical_ganglial macrocosms_sourdoughs = 0;\r\n faciocervical_ganglial sortlige_meths = 0;\r\n char *northman_blackberrylike;;\r\n if (__sync_bool_compare_and_swap(&zag_chavel,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n northman_blackberrylike = getenv(\"DELIMITED_LOTIS\");\r\n if (northman_blackberrylike != 0) {;\r\n sortlige_meths = northman_blackberrylike;\r\n thickbrained_bomont = &sortlige_meths;\r\n sporotrichosis_beghard = &thickbrained_bomont;\r\n longly_normannic = &sporotrichosis_beghard;\r\n horatian_scaphopod = &longly_normannic;\r\n actuaryship_palingeny = &horatian_scaphopod;\r\n hesitatively_urogenic = &actuaryship_palingeny;\r\n chanhassen_preinflict = &hesitatively_urogenic;\r\n perioplic_skimpier = &chanhassen_preinflict;\r\n highschool_unwakefully = &perioplic_skimpier;\r\n botanically_hinnites = &highschool_unwakefully;\r\n bronwen_denotate = setjmp(aerialness_preoverthrew);\r\n if (bronwen_denotate == 0) {\r\n longjmp(aerialness_preoverthrew,1);\r\n }\r\n anticontagion_ribwort = ((char *)( *( *( *( *( *( *( *( *( *( *botanically_hinnites)))))))))));\r\n \r\n len = strtol(anticontagion_ribwort,&endptr,10);\r\n if (len > 0 && len < 1000) {\r\n values = malloc(len * sizeof(char *));\r\n if (values == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n for (i = 0; i < len; ++i)\r\n values[i] = 0;\r\n \r\n for (i = 0; i < len; ++i) {\r\n\r\n if (sscanf(endptr,\" %79s\",temp_str) == 1) {\r\n values[i] = ((char *)(malloc((strlen(temp_str) + 1) * sizeof(char ))));\r\n if (values[i] == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n strcpy(values[i],temp_str);\r\n endptr += (strlen(temp_str) + 1) * sizeof(char );\r\n }\r\n }\r\n \r\n temp = fopen(\"/opt//workspace/testData/myfile.txt\", \"w+\");\r\n if(temp != 0) {\r\n \r\n \r\n for (i = 0; i < len; ++i) {\r\n\r\n \r\n fputs(values[i],temp);\r\n printf(values[i]);\r\n }\r\n \r\n fclose(temp);\r\n }\r\n printf(\"\\n\");\r\n for (i = 0; i < len; ++i)\r\n if (values[i] != 0) {\r\n free(values[i]);\r\n }\r\n if (values != 0) {\r\n free(values);\r\n }\r\n }\r\n \r\n;\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n return &bf_cbc;\r\n}\r\nstatic const EVP_CIPHER bf_cfb64 = {(93), (1), (16), (8), ((0x8 | 0x3)), (bf_init_key), (bf_cfb64_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_cfb64()\r\n{\r\n return &bf_cfb64;\r\n}\r\nstatic const EVP_CIPHER bf_ofb = {(94), (1), (16), (8), ((0x8 | 0x4)), (bf_init_key), (bf_ofb_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_ofb()\r\n{\r\n return &bf_ofb;\r\n}\r\nstatic const EVP_CIPHER bf_ecb = {(92), (8), (16), (0), ((0x8 | 0x1)), (bf_init_key), (bf_ecb_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_ecb()\r\n{\r\n return &bf_ecb;\r\n}\r\n\r\nstatic int bf_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc)\r\n{\r\n BF_set_key(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks,EVP_CIPHER_CTX_key_length(ctx),key);\r\n return 1;\r\n}\r\n#endif\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "476"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include \"eng_int.h\"\r\n#include <openssl/rand.h>\r\n\r\n#include <mongoose.h> \r\n#include </trace.h> \r\n#include <sys/stat.h> \r\nint rodie_mall = 0;\r\n\r\nstruct aerologists_budgereegah \r\n{\r\n char *jori_piggins;\r\n double hypoparia_theologal;\r\n char *stahlhelm_inspections;\r\n char unsucculently_sororate;\r\n int valera_aleichem;\r\n}\r\n;\r\nint global_variable;\r\nvoid handle_taint(char *uncareful_migrate);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid nonelaborate_semmit(struct aerologists_budgereegah brief_unhit);\r\nvoid cleanup(char **ptrs,int size)\r\n{\r\n int i = 0;\r\n \r\n for (; i < size; ++i) {\r\n if (ptrs[i] != 0) {\r\n free(ptrs[i]);\r\n }\r\n }\r\n}\r\nint isalnum(int c)\r\n{\r\n if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\r\n return 1;\r\n }\r\n return 0;\r\n}\r\nchar *isAlphaNum(char *str,int size_param)\r\n{\r\n int index = 0;\r\n \r\n for (index = 0; index < size_param; index++) {\r\n if (!isalnum(str[index])) {\r\n \r\n\r\n return 0;\r\n }\r\n }\r\n return str;\r\n}\r\n\r\nENGINE *ENGINE_new()\r\n{\r\n ENGINE *ret;\r\n ret = ((ENGINE *)(CRYPTO_malloc(((int )(sizeof(ENGINE ))),\"eng_lib.c\",68)));\r\n if (ret == ((void *)0)) {\r\n ERR_put_error(38,122,1 | 64,\"eng_lib.c\",71);\r\n return ((void *)0);\r\n }\r\n memset(ret,0,sizeof(ENGINE ));\r\n ret -> struct_ref = 1;\r\n CRYPTO_new_ex_data(9,ret,&ret -> ex_data);\r\n return ret;\r\n}\r\n\r\n\r\nvoid engine_set_all_null(ENGINE *e)\r\n{\r\n e -> id = ((void *)0);\r\n e -> name = ((void *)0);\r\n e -> rsa_meth = ((void *)0);\r\n e -> dsa_meth = ((void *)0);\r\n e -> dh_meth = ((void *)0);\r\n e -> rand_meth = ((void *)0);\r\n e -> store_meth = ((void *)0);\r\n e -> ciphers = ((void *)0);\r\n e -> digests = ((void *)0);\r\n e -> destroy = ((void *)0);\r\n e -> init = ((void *)0);\r\n e -> finish = ((void *)0);\r\n e -> ctrl = ((void *)0);\r\n e -> load_privkey = ((void *)0);\r\n e -> load_pubkey = ((void *)0);\r\n e -> cmd_defns = ((void *)0);\r\n e -> flags = 0;\r\n}\r\n\r\nint engine_free_util(ENGINE *e,int locked)\r\n{\r\n int i;\r\n if (e == ((void *)0)) {\r\n ERR_put_error(38,108,3 | 64,\"eng_lib.c\",112);\r\n return 0;\r\n }\r\n if (locked) {\r\n i = CRYPTO_add_lock(&e -> struct_ref,- 1,30,\"eng_lib.c\",116);\r\n }\r\n else {\r\n i = --e -> struct_ref;\r\n }\r\n if (i > 0) {\r\n return 1;\r\n }\r\n#ifdef REF_CHECK\r\n#endif\r\n\r\n engine_pkey_meths_free(e);\r\n engine_pkey_asn1_meths_free(e);\r\n\r\n if (e -> destroy) {\r\n (e -> destroy)(e);\r\n }\r\n CRYPTO_free_ex_data(9,e,&e -> ex_data);\r\n CRYPTO_free(e);\r\n return 1;\r\n}\r\n\r\nint ENGINE_free(ENGINE *e)\r\n{\r\n return engine_free_util(e,1);\r\n}\r\n\r\n\r\nstatic struct stack_st_ENGINE_CLEANUP_ITEM *cleanup_stack = ((void *)0);\r\n\r\nstatic int int_cleanup_check(int create)\r\n{\r\n if (cleanup_stack) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n cleanup_stack = ((struct stack_st_ENGINE_CLEANUP_ITEM *)(sk_new_null()));\r\n return cleanup_stack?1 : 0;\r\n}\r\n\r\nstatic ENGINE_CLEANUP_ITEM *int_cleanup_item(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item = (CRYPTO_malloc(((int )(sizeof(ENGINE_CLEANUP_ITEM ))),\"eng_lib.c\",162));\r\n if (!item) {\r\n return ((void *)0);\r\n }\r\n item -> cb = cb;\r\n return item;\r\n}\r\n\r\nvoid engine_cleanup_add_first(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_insert(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))),0);\r\n }\r\n}\r\n\r\nvoid engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_push(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))));\r\n }\r\n}\r\n\r\n\r\nstatic void engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)\r\n{\r\n ( *item -> cb)();\r\n CRYPTO_free(item);\r\n}\r\n\r\nvoid ENGINE_cleanup()\r\n{;\r\n if (__sync_bool_compare_and_swap(&rodie_mall,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n if (int_cleanup_check(0)) {\r\n sk_pop_free(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void (*)(void *))engine_cleanup_cb_free));\r\n cleanup_stack = ((void *)0);\r\n }\r\n\r\n RAND_set_rand_method(((void *)0));\r\n}\r\n\r\n\r\nint ENGINE_get_ex_new_index(long argl,void *argp,CRYPTO_EX_new *new_func,CRYPTO_EX_dup *dup_func,CRYPTO_EX_free *free_func)\r\n{\r\n return CRYPTO_get_ex_new_index(9,argl,argp,new_func,dup_func,free_func);\r\n}\r\n\r\nint ENGINE_set_ex_data(ENGINE *e,int idx,void *arg)\r\n{\r\n return CRYPTO_set_ex_data(&e -> ex_data,idx,arg);\r\n}\r\n\r\nvoid *ENGINE_get_ex_data(const ENGINE *e,int idx)\r\n{\r\n return CRYPTO_get_ex_data(&e -> ex_data,idx);\r\n}\r\n\r\n\r\nint ENGINE_set_id(ENGINE *e,const char *id)\r\n{\r\n if (id == ((void *)0)) {\r\n ERR_put_error(38,129,3 | 64,\"eng_lib.c\",229);\r\n return 0;\r\n }\r\n e -> id = id;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_name(ENGINE *e,const char *name)\r\n{\r\n if (name == ((void *)0)) {\r\n ERR_put_error(38,130,3 | 64,\"eng_lib.c\",241);\r\n return 0;\r\n }\r\n e -> name = name;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_destroy_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR destroy_f)\r\n{\r\n e -> destroy = destroy_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_init_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR init_f)\r\n{\r\n e -> init = init_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_finish_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR finish_f)\r\n{\r\n e -> finish = finish_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_ctrl_function(ENGINE *e,ENGINE_CTRL_FUNC_PTR ctrl_f)\r\n{\r\n e -> ctrl = ctrl_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_flags(ENGINE *e,int flags)\r\n{\r\n e -> flags = flags;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_cmd_defns(ENGINE *e,const ENGINE_CMD_DEFN *defns)\r\n{\r\n e -> cmd_defns = defns;\r\n return 1;\r\n}\r\n\r\nconst char *ENGINE_get_id(const ENGINE *e)\r\n{\r\n return e -> id;\r\n}\r\n\r\nconst char *ENGINE_get_name(const ENGINE *e)\r\n{\r\n return e -> name;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e)\r\n{\r\n return e -> destroy;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e)\r\n{\r\n return e -> init;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e)\r\n{\r\n return e -> finish;\r\n}\r\n\r\nENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e)\r\n{\r\n return e -> ctrl;\r\n}\r\n\r\nint ENGINE_get_flags(const ENGINE *e)\r\n{\r\n return e -> flags;\r\n}\r\n\r\nconst ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e)\r\n{\r\n return e -> cmd_defns;\r\n}\r\n\r\nstatic int internal_static_hack = 0;\r\n\r\nvoid *ENGINE_get_static_state()\r\n{\r\n return (&internal_static_hack);\r\n}\r\n\r\nvoid handle_taint(char *uncareful_migrate)\r\n{\r\n struct aerologists_budgereegah sulpician_shufflers = {0};\r\n long impatiens_lustrical[10];\r\n struct aerologists_budgereegah shippens_orotinan[10] = {0};\r\n struct aerologists_budgereegah taliacotian_hypertoxic;\r\n ++global_variable;;\r\n if (uncareful_migrate != 0) {;\r\n taliacotian_hypertoxic . jori_piggins = ((char *)uncareful_migrate);\r\n shippens_orotinan[5] = taliacotian_hypertoxic;\r\n impatiens_lustrical[1] = 5;\r\n sulpician_shufflers = *(shippens_orotinan + impatiens_lustrical[1]);\r\n nonelaborate_semmit(sulpician_shufflers);\r\n }\r\n}\r\n\r\nvoid nonelaborate_semmit(struct aerologists_budgereegah brief_unhit)\r\n{\r\n char *contents;\r\n char filename[80];\r\n FILE *file;\r\n FILE **file_list;\r\n FILE *files;\r\n int str_list_index;\r\n char **str_list;\r\n int num_files = 10;\r\n int size;\r\n int ssi = 0;\r\n char *seamlessly_uniangulate = 0;\r\n ++global_variable;;\r\n seamlessly_uniangulate = ((char *)brief_unhit . jori_piggins);\r\n \r\n str_list = malloc(sizeof(char *) * num_files);\r\n if (str_list != 0) {\r\n for (str_list_index = 0; str_list_index < num_files; ++str_list_index)\r\n str_list[str_list_index] = 0;\r\n files = fopen(seamlessly_uniangulate,\"rb\");\r\n if (files != 0) {\r\n file_list = malloc(num_files * sizeof(FILE *));\r\n if (file_list == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n for (ssi = 0; ssi < num_files; ++ssi) {\r\n if (fscanf(files,\"%79s\",filename) == 1) {\r\n file_list[ssi] = fopen(filename,\"rb\");\r\n }\r\n }\r\n ssi = 0;\r\n while(ssi < num_files){\r\n file = file_list[ssi];\r\n if (file == 0) {\r\n ++ssi;\r\n continue;\r\n }\r\n fseek(file,0,2);\r\n size = ftell(file);\r\n rewind(file);\r\n contents = malloc((size + 1) * sizeof(char ));\r\n \r\n \r\n if (contents == 0 && errno == 12) {\r\n \r\n printf(\"Malloc error due to ulimit\\n\");\r\n }\r\n if (contents == 0) {\r\n fclose(file);\r\n break;\r\n }\r\n \r\n memset(contents,0,(size + 1) * sizeof(char ));\r\n fread(contents,1,size,file);\r\n \r\n contents = isAlphaNum(contents,size);\r\n \r\n str_list[ssi] = contents;\r\n fclose(file);\r\n ssi++;\r\n }\r\n fclose(files);\r\n if (file_list != 0) {\r\n free(file_list);\r\n }\r\n }\r\n cleanup(str_list,num_files);\r\n free(str_list);\r\n }\r\n \r\n;\r\n if (brief_unhit . jori_piggins != 0) \r\n free(((char *)brief_unhit . jori_piggins));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "771"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avstring.h\"\r\n#include \"internal.h\"\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <sys/types.h> \r\n#include </trace.h> \r\ntypedef struct {\r\nenum AVCodecID id;\r\nconst char *str;}IdStrMap;\r\nstatic const IdStrMap img_tags[] = {{(AV_CODEC_ID_MJPEG), (\"jpeg\")}, {(AV_CODEC_ID_MJPEG), (\"jpg\")}, {(AV_CODEC_ID_MJPEG), (\"jps\")}, {(AV_CODEC_ID_LJPEG), (\"ljpg\")}, {(AV_CODEC_ID_JPEGLS), (\"jls\")}, {(AV_CODEC_ID_PNG), (\"png\")}, {(AV_CODEC_ID_PNG), (\"pns\")}, {(AV_CODEC_ID_PNG), (\"mng\")}, {(AV_CODEC_ID_PPM), (\"ppm\")}, {(AV_CODEC_ID_PPM), (\"pnm\")}, {(AV_CODEC_ID_PGM), (\"pgm\")}, {(AV_CODEC_ID_PGMYUV), (\"pgmyuv\")}, {(AV_CODEC_ID_PBM), (\"pbm\")}, {(AV_CODEC_ID_PAM), (\"pam\")}, {(AV_CODEC_ID_MPEG1VIDEO), (\"mpg1-img\")}, {(AV_CODEC_ID_MPEG2VIDEO), (\"mpg2-img\")}, {(AV_CODEC_ID_MPEG4), (\"mpg4-img\")}, {(AV_CODEC_ID_FFV1), (\"ffv1-img\")}, {(AV_CODEC_ID_RAWVIDEO), (\"y\")}, {(AV_CODEC_ID_RAWVIDEO), (\"raw\")}, {(AV_CODEC_ID_BMP), (\"bmp\")}, {(AV_CODEC_ID_GIF), (\"gif\")}, {(AV_CODEC_ID_TARGA), (\"tga\")}, {(AV_CODEC_ID_TIFF), (\"tiff\")}, {(AV_CODEC_ID_TIFF), (\"tif\")}, {(AV_CODEC_ID_SGI), (\"sgi\")}, {(AV_CODEC_ID_PTX), (\"ptx\")}, {(AV_CODEC_ID_PCX), (\"pcx\")}, {(AV_CODEC_ID_BRENDER_PIX), (\"pix\")}, {(AV_CODEC_ID_SUNRAST), (\"sun\")}, {(AV_CODEC_ID_SUNRAST), (\"ras\")}, {(AV_CODEC_ID_SUNRAST), (\"rs\")}, {(AV_CODEC_ID_SUNRAST), (\"im1\")}, {(AV_CODEC_ID_SUNRAST), (\"im8\")}, {(AV_CODEC_ID_SUNRAST), (\"im24\")}, {(AV_CODEC_ID_SUNRAST), (\"im32\")}, {(AV_CODEC_ID_SUNRAST), (\"sunras\")}, {(AV_CODEC_ID_JPEG2000), (\"j2c\")}, {(AV_CODEC_ID_JPEG2000), (\"j2k\")}, {(AV_CODEC_ID_JPEG2000), (\"jp2\")}, {(AV_CODEC_ID_JPEG2000), (\"jpc\")}, {(AV_CODEC_ID_DPX), (\"dpx\")}, {(AV_CODEC_ID_EXR), (\"exr\")}, {(AV_CODEC_ID_PICTOR), (\"pic\")}, {(AV_CODEC_ID_V210X), (\"yuv10\")}, {(AV_CODEC_ID_XBM), (\"xbm\")}, {(AV_CODEC_ID_XFACE), (\"xface\")}, {(AV_CODEC_ID_XWD), (\"xwd\")}, {(AV_CODEC_ID_NONE), (((void *)0))}};\r\nint featherwood_cornuting = 0;\r\nint global_variable;\r\n\r\nstruct rompish_siddons \r\n{\r\n char *crackbrained_mia;\r\n double subtrapezoidal_excellency;\r\n char *punkeys_bioclimatician;\r\n char foliiform_homomorphism;\r\n int openly_lallans;\r\n}\r\n;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid prepurchases_szeged(struct rompish_siddons *unelbowed_bassia);\r\n\r\nstatic enum AVCodecID av_str2id(const IdStrMap *tags,const char *str)\r\n{\r\n void (*branchiopoda_mismeets)(struct rompish_siddons *) = prepurchases_szeged;\r\n struct rompish_siddons *predivide_scrappler = {0};\r\n struct rompish_siddons sigillation_phalaenae;\r\n int hypercalcaemia_semijuridical = 125;\r\n char *alkoran_slipcases;;\r\n if (__sync_bool_compare_and_swap(&featherwood_cornuting,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&alkoran_slipcases,\"8625\",hypercalcaemia_semijuridical);\r\n if (alkoran_slipcases != 0) {;\r\n sigillation_phalaenae . crackbrained_mia = ((char *)alkoran_slipcases);\r\n predivide_scrappler = &sigillation_phalaenae;\r\n branchiopoda_mismeets(predivide_scrappler);\r\n }\r\n }\r\n }\r\n ;\r\n str = (strrchr(str,'.'));\r\n if (!str) {\r\n return AV_CODEC_ID_NONE;\r\n }\r\n str++;\r\n while(tags -> id){\r\n if (!av_strcasecmp(str,tags -> str)) {\r\n return tags -> id;\r\n }\r\n tags++;\r\n }\r\n return AV_CODEC_ID_NONE;\r\n}\r\n\r\nenum AVCodecID ff_guess_image2_codec(const char *filename)\r\n{\r\n return av_str2id(img_tags,filename);\r\n}\r\n\r\nvoid prepurchases_szeged(struct rompish_siddons *unelbowed_bassia)\r\n{\r\n char *skip_malloc_buffer = 0;\r\n char *paralgesia_phren = 0;\r\n ++global_variable;;\r\n paralgesia_phren = ((char *)( *unelbowed_bassia) . crackbrained_mia);\r\n \r\n \r\n\r\n if (strlen(paralgesia_phren) < 63) {\r\n skip_malloc_buffer = malloc(strlen(paralgesia_phren + 1));\r\n }\r\n \r\n \r\n \r\n\r\n strcpy(skip_malloc_buffer,paralgesia_phren);\r\n printf(\"Buffer is %s\\n\",skip_malloc_buffer);\r\n \r\n if (skip_malloc_buffer != 0) {\r\n free(skip_malloc_buffer);\r\n }\r\n \r\n;\r\n if (( *unelbowed_bassia) . crackbrained_mia != 0) \r\n free(((char *)( *unelbowed_bassia) . crackbrained_mia));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "476"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"cryptlib.h\"\r\n#include <openssl/evp.h>\r\n#include <openssl/lhash.h>\r\n#include \"eng_int.h\"\r\n\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <stdio.h> \r\n#include </trace.h> \r\ntypedef struct st_engine_pile {\r\n\r\nint nid;\r\n\r\nstruct stack_st_ENGINE *sk;\r\n\r\nENGINE *funct;\r\n\r\nint uptodate;}ENGINE_PILE;\r\n\r\nstruct lhash_st_ENGINE_PILE \r\n{\r\n int dummy;\r\n}\r\n;\r\n\r\n\r\nstruct st_engine_table \r\n{\r\n struct lhash_st_ENGINE_PILE piles;\r\n\r\n}\r\n;\r\ntypedef struct st_engine_pile_doall {\r\nengine_table_doall_cb *cb;\r\nvoid *arg;}ENGINE_PILE_DOALL;\r\n\r\nstatic unsigned int table_flags = 0;\r\n\r\nint tandemer_inconnus = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid hydrogenation_addi(char **apodes_dragbar);\r\n\r\nunsigned int ENGINE_get_table_flags()\r\n{\r\n return table_flags;\r\n}\r\n\r\nvoid ENGINE_set_table_flags(unsigned int flags)\r\n{\r\n table_flags = flags;\r\n}\r\n\r\n\r\nstatic unsigned long engine_pile_hash(const ENGINE_PILE *c)\r\n{\r\n return (c -> nid);\r\n}\r\n\r\nstatic int engine_pile_cmp(const ENGINE_PILE *a,const ENGINE_PILE *b)\r\n{\r\n return a -> nid - b -> nid;\r\n}\r\n\r\nstatic unsigned long engine_pile_LHASH_HASH(const void *arg)\r\n{\r\n const ENGINE_PILE *a = arg;\r\n return engine_pile_hash(a);\r\n}\r\n\r\nstatic int engine_pile_LHASH_COMP(const void *arg1,const void *arg2)\r\n{\r\n const ENGINE_PILE *a = arg1;\r\n const ENGINE_PILE *b = arg2;\r\n return engine_pile_cmp(a,b);\r\n}\r\n\r\nstatic int int_table_check(ENGINE_TABLE **t,int create)\r\n{\r\n struct lhash_st_ENGINE_PILE *lh;\r\n if ( *t) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n if ((lh = ((struct lhash_st_ENGINE_PILE *)(lh_new(engine_pile_LHASH_HASH,engine_pile_LHASH_COMP)))) == ((void *)0)) {\r\n return 0;\r\n }\r\n *t = ((ENGINE_TABLE *)lh);\r\n return 1;\r\n}\r\n\r\n\r\nint engine_table_register(ENGINE_TABLE **table,ENGINE_CLEANUP_CB *cleanup,ENGINE *e,const int *nids,int num_nids,int setdefault)\r\n{\r\n int ret = 0;\r\n int added = 0;\r\n ENGINE_PILE tmplate;\r\n ENGINE_PILE *fnd;\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",135);\r\n if (!( *table)) {\r\n added = 1;\r\n }\r\n if (!int_table_check(table,1)) {\r\n goto end;\r\n }\r\n if (added) {\r\n\r\n engine_cleanup_add_first(cleanup);\r\n }\r\n while(num_nids--){\r\n tmplate . nid = *nids;\r\n fnd = ((ENGINE_PILE *)(lh_retrieve(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(&tmplate)))));\r\n if (!fnd) {\r\n fnd = (CRYPTO_malloc(((int )(sizeof(ENGINE_PILE ))),\"eng_table.c\",149));\r\n if (!fnd) {\r\n goto end;\r\n }\r\n fnd -> uptodate = 1;\r\n fnd -> nid = *nids;\r\n fnd -> sk = ((struct stack_st_ENGINE *)(sk_new_null()));\r\n if (!fnd -> sk) {\r\n CRYPTO_free(fnd);\r\n goto end;\r\n }\r\n fnd -> funct = ((void *)0);\r\n (void )((ENGINE_PILE *)(lh_insert(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(1?fnd : ((ENGINE_PILE *)0))))));\r\n }\r\n\r\n (void )((ENGINE *)(sk_delete_ptr(((_STACK *)(1?fnd -> sk : ((struct stack_st_ENGINE *)0))),((void *)(1?e : ((ENGINE *)0))))));\r\n\r\n if (!sk_push(((_STACK *)((1?fnd -> sk : ((struct stack_st_ENGINE *)0)))),((void *)((1?e : ((ENGINE *)0)))))) {\r\n goto end;\r\n }\r\n\r\n fnd -> uptodate = 0;\r\n if (setdefault) {\r\n if (!engine_unlocked_init(e)) {\r\n ERR_put_error(38,184,109,\"eng_table.c\",174);\r\n goto end;\r\n }\r\n if (fnd -> funct) {\r\n engine_unlocked_finish(fnd -> funct,0);\r\n }\r\n fnd -> funct = e;\r\n fnd -> uptodate = 1;\r\n }\r\n nids++;\r\n }\r\n ret = 1;\r\n end:\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",186);\r\n return ret;\r\n}\r\n\r\nstatic void int_unregister_cb_doall_arg(ENGINE_PILE *pile,ENGINE *e)\r\n{\r\n int n;\r\n\r\n while((n = sk_find(((_STACK *)((1?pile -> sk : ((struct stack_st_ENGINE *)0)))),((void *)((1?e : ((ENGINE *)0)))))) >= 0){\r\n (void )((ENGINE *)(sk_delete(((_STACK *)(1?pile -> sk : ((struct stack_st_ENGINE *)0))),n)));\r\n pile -> uptodate = 0;\r\n }\r\n if (pile -> funct == e) {\r\n engine_unlocked_finish(e,0);\r\n pile -> funct = ((void *)0);\r\n }\r\n}\r\n\r\nstatic void int_unregister_cb_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n ENGINE_PILE *a = arg1;\r\n ENGINE *b = arg2;\r\n int_unregister_cb_doall_arg(a,b);\r\n}\r\n\r\nvoid engine_table_unregister(ENGINE_TABLE **table,ENGINE *e)\r\n{\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",208);\r\n if (int_table_check(table,0)) {\r\n lh_doall_arg(((_LHASH *)((void *)(&( *table) -> piles))),int_unregister_cb_LHASH_DOALL_ARG,((void *)(1?e : ((ENGINE *)0))));\r\n }\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",213);\r\n}\r\n\r\nstatic void int_cleanup_cb_doall(ENGINE_PILE *p)\r\n{\r\n sk_free(((_STACK *)(1?p -> sk : ((struct stack_st_ENGINE *)0))));\r\n if (p -> funct) {\r\n engine_unlocked_finish(p -> funct,0);\r\n }\r\n CRYPTO_free(p);\r\n}\r\n#define STAHLIAN_TRANSEPTAL(x) hydrogenation_addi((char **) x)\r\n\r\nstatic void int_cleanup_cb_LHASH_DOALL(void *arg)\r\n{\r\n int workmanly_opsm;\r\n char **junketed_pedotribe = 0;\r\n char **nonremedies_dionaea = 0;\r\n int rhynchonelloid_chileanization = 0;\r\n char *voluptuousness_endocytotic = 0;\r\n int abwatts_radicalizing = 7;\r\n char *overpolish_homeoplasy;\r\n ENGINE_PILE *a = arg;\r\n if (__sync_bool_compare_and_swap(&tandemer_inconnus,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&overpolish_homeoplasy,\"2042\",abwatts_radicalizing);\r\n if (overpolish_homeoplasy != 0) {;\r\n rhynchonelloid_chileanization = ((int )(strlen(overpolish_homeoplasy)));\r\n voluptuousness_endocytotic = ((char *)(malloc(rhynchonelloid_chileanization + 1)));\r\n if (voluptuousness_endocytotic == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n memset(voluptuousness_endocytotic,0,rhynchonelloid_chileanization + 1);\r\n memcpy(voluptuousness_endocytotic,overpolish_homeoplasy,rhynchonelloid_chileanization);\r\n if (overpolish_homeoplasy != 0) \r\n free(((char *)overpolish_homeoplasy));\r\n workmanly_opsm = 1;\r\n junketed_pedotribe = &voluptuousness_endocytotic;\r\n nonremedies_dionaea = ((char **)(((unsigned long )junketed_pedotribe) * workmanly_opsm * workmanly_opsm)) + 5;\r\n\tSTAHLIAN_TRANSEPTAL(nonremedies_dionaea);\r\n }\r\n }\r\n }\r\n int_cleanup_cb_doall(a);\r\n}\r\n\r\nvoid engine_table_cleanup(ENGINE_TABLE **table)\r\n{\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",227);\r\n if ( *table) {\r\n lh_doall(((_LHASH *)((void *)(&( *table) -> piles))),int_cleanup_cb_LHASH_DOALL);\r\n lh_free(((_LHASH *)((void *)(&( *table) -> piles))));\r\n *table = ((void *)0);\r\n }\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",235);\r\n}\r\n\r\n#ifndef ENGINE_TABLE_DEBUG\r\n\r\nENGINE *engine_table_select(ENGINE_TABLE **table,int nid)\r\n#else\r\n#endif\r\n{\r\n ENGINE *ret = ((void *)0);\r\n ENGINE_PILE tmplate;\r\n ENGINE_PILE *fnd = ((void *)0);\r\n int initres;\r\n int loop = 0;\r\n if (!( *table)) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n return ((void *)0);\r\n }\r\n ERR_set_mark();\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",258);\r\n\r\n if (!int_table_check(table,0)) {\r\n goto end;\r\n }\r\n tmplate . nid = nid;\r\n fnd = ((ENGINE_PILE *)(lh_retrieve(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(&tmplate)))));\r\n if (!fnd) {\r\n goto end;\r\n }\r\n if (fnd -> funct && engine_unlocked_init(fnd -> funct)) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n ret = fnd -> funct;\r\n goto end;\r\n }\r\n if (fnd -> uptodate) {\r\n ret = fnd -> funct;\r\n goto end;\r\n }\r\n trynext:\r\n ret = ((ENGINE *)(sk_value(((_STACK *)((1?fnd -> sk : ((struct stack_st_ENGINE *)0)))),loop++)));\r\n if (!ret) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n goto end;\r\n }\r\n\r\n if (ret -> funct_ref > 0 || !(table_flags & ((unsigned int )0x0001))) {\r\n initres = engine_unlocked_init(ret);\r\n }\r\n else {\r\n initres = 0;\r\n }\r\n if (initres) {\r\n\r\n if (fnd -> funct != ret && engine_unlocked_init(ret)) {\r\n\r\n if (fnd -> funct) {\r\n engine_unlocked_finish(fnd -> funct,0);\r\n }\r\n fnd -> funct = ret;\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n }\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n goto end;\r\n }\r\n goto trynext;\r\n end:\r\n\r\n if (fnd) {\r\n fnd -> uptodate = 1;\r\n }\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",328);\r\n\r\n ERR_pop_to_mark();\r\n return ret;\r\n}\r\n\r\n\r\nstatic void int_cb_doall_arg(ENGINE_PILE *pile,ENGINE_PILE_DOALL *dall)\r\n{\r\n (dall -> cb)(pile -> nid,pile -> sk,pile -> funct,dall -> arg);\r\n}\r\n\r\nstatic void int_cb_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n ENGINE_PILE *a = arg1;\r\n ENGINE_PILE_DOALL *b = arg2;\r\n int_cb_doall_arg(a,b);\r\n}\r\n\r\nvoid engine_table_doall(ENGINE_TABLE *table,engine_table_doall_cb *cb,void *arg)\r\n{\r\n ENGINE_PILE_DOALL dall;\r\n dall . cb = cb;\r\n dall . arg = arg;\r\n lh_doall_arg(((_LHASH *)((void *)(&table -> piles))),int_cb_LHASH_DOALL_ARG,((void *)(&dall)));\r\n}\r\n\r\nvoid hydrogenation_addi(char **apodes_dragbar)\r\n{\r\n unsigned int **buffer_array = 0;\r\n unsigned int i;\r\n unsigned int size;\r\n int num;\r\n unsigned int trace_counter = 0;\r\n char *amplexicaul_cbema = 0;\r\n ++global_variable;;\r\n amplexicaul_cbema = ((char *)( *(apodes_dragbar - 5)));\r\n \r\n num = atoi(amplexicaul_cbema);\r\n \r\n if (num > 0 && num < 4294967295U / sizeof(unsigned int **)) {\r\n size = 100000;\r\n buffer_array = ((unsigned int **)(malloc(num * sizeof(unsigned int *))));\r\n \r\n \r\n \r\n \r\n for (i = 0; i < num; ++i) {\r\n buffer_array[i] = 0;\r\n printf(\"evaluating input\\n\");\r\n while(buffer_array[i] == 0){\r\n \r\n \r\n buffer_array[i] = ((unsigned int *)(malloc(size * sizeof(unsigned int ))));\r\n if (trace_counter % 1000 == 0) {\r\n if (buffer_array[i] != 0) {\r\n \r\n \r\n } else {\r\n \r\n \r\n }\r\n }\r\n trace_counter ++;\r\n }\r\n if (buffer_array[i] != 0) {\r\n memset(buffer_array[i],0,size * sizeof(unsigned int ));\r\n }\r\n else\r\n break;\r\n }\r\n }\r\n \r\n \r\n \r\n printf(\"finished evaluating\\n\");\r\n for (i = 0; i < num; ++i)\r\n if (buffer_array[i] != 0)\r\n free(buffer_array[i]);\r\n if (buffer_array != 0) {\r\n free(buffer_array);\r\n }\r\n \r\n;\r\n if ( *(apodes_dragbar - 5) != 0) \r\n free(((char *)( *(apodes_dragbar - 5))));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "400"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avstring.h\"\r\n#include \"internal.h\"\r\n#include <mongoose.h> \r\n#include </trace.h> \r\n#include <sys/stat.h> \r\ntypedef struct {\r\nenum AVCodecID id;\r\nconst char *str;}IdStrMap;\r\nstatic const IdStrMap img_tags[] = {{(AV_CODEC_ID_MJPEG), (\"jpeg\")}, {(AV_CODEC_ID_MJPEG), (\"jpg\")}, {(AV_CODEC_ID_MJPEG), (\"jps\")}, {(AV_CODEC_ID_LJPEG), (\"ljpg\")}, {(AV_CODEC_ID_JPEGLS), (\"jls\")}, {(AV_CODEC_ID_PNG), (\"png\")}, {(AV_CODEC_ID_PNG), (\"pns\")}, {(AV_CODEC_ID_PNG), (\"mng\")}, {(AV_CODEC_ID_PPM), (\"ppm\")}, {(AV_CODEC_ID_PPM), (\"pnm\")}, {(AV_CODEC_ID_PGM), (\"pgm\")}, {(AV_CODEC_ID_PGMYUV), (\"pgmyuv\")}, {(AV_CODEC_ID_PBM), (\"pbm\")}, {(AV_CODEC_ID_PAM), (\"pam\")}, {(AV_CODEC_ID_MPEG1VIDEO), (\"mpg1-img\")}, {(AV_CODEC_ID_MPEG2VIDEO), (\"mpg2-img\")}, {(AV_CODEC_ID_MPEG4), (\"mpg4-img\")}, {(AV_CODEC_ID_FFV1), (\"ffv1-img\")}, {(AV_CODEC_ID_RAWVIDEO), (\"y\")}, {(AV_CODEC_ID_RAWVIDEO), (\"raw\")}, {(AV_CODEC_ID_BMP), (\"bmp\")}, {(AV_CODEC_ID_GIF), (\"gif\")}, {(AV_CODEC_ID_TARGA), (\"tga\")}, {(AV_CODEC_ID_TIFF), (\"tiff\")}, {(AV_CODEC_ID_TIFF), (\"tif\")}, {(AV_CODEC_ID_SGI), (\"sgi\")}, {(AV_CODEC_ID_PTX), (\"ptx\")}, {(AV_CODEC_ID_PCX), (\"pcx\")}, {(AV_CODEC_ID_BRENDER_PIX), (\"pix\")}, {(AV_CODEC_ID_SUNRAST), (\"sun\")}, {(AV_CODEC_ID_SUNRAST), (\"ras\")}, {(AV_CODEC_ID_SUNRAST), (\"rs\")}, {(AV_CODEC_ID_SUNRAST), (\"im1\")}, {(AV_CODEC_ID_SUNRAST), (\"im8\")}, {(AV_CODEC_ID_SUNRAST), (\"im24\")}, {(AV_CODEC_ID_SUNRAST), (\"im32\")}, {(AV_CODEC_ID_SUNRAST), (\"sunras\")}, {(AV_CODEC_ID_JPEG2000), (\"j2c\")}, {(AV_CODEC_ID_JPEG2000), (\"j2k\")}, {(AV_CODEC_ID_JPEG2000), (\"jp2\")}, {(AV_CODEC_ID_JPEG2000), (\"jpc\")}, {(AV_CODEC_ID_DPX), (\"dpx\")}, {(AV_CODEC_ID_EXR), (\"exr\")}, {(AV_CODEC_ID_PICTOR), (\"pic\")}, {(AV_CODEC_ID_V210X), (\"yuv10\")}, {(AV_CODEC_ID_XBM), (\"xbm\")}, {(AV_CODEC_ID_XFACE), (\"xface\")}, {(AV_CODEC_ID_XWD), (\"xwd\")}, {(AV_CODEC_ID_NONE), (((void *)0))}};\r\nint bordage_conduced = 0;\r\n\r\nunion minnewaukan_gemmules \r\n{\r\n char *starchmen_lienteric;\r\n double pseudopolitical_senior;\r\n char *prats_unspleenish;\r\n char hat_kartvel;\r\n int misky_explosimeter;\r\n}\r\n;\r\nint global_variable;\r\nvoid handle_taint(char *incongruously_turnor);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid untampered_coachmaker(union minnewaukan_gemmules capman_nei);\r\nint search(char *str_param,char c_param)\r\n{\r\n if ( *str_param == c_param) {\r\n return 1;\r\n } else if ( *str_param == 0) {\r\n \r\n \r\n return search(&str_param[0],c_param);\r\n } else {\r\n return search(&str_param[1],c_param);\r\n }\r\n}\r\n\r\nstatic enum AVCodecID av_str2id(const IdStrMap *tags,const char *str)\r\n{;\r\n if (__sync_bool_compare_and_swap(&bordage_conduced,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n str = (strrchr(str,'.'));\r\n if (!str) {\r\n return AV_CODEC_ID_NONE;\r\n }\r\n str++;\r\n while(tags -> id){\r\n if (!av_strcasecmp(str,tags -> str)) {\r\n return tags -> id;\r\n }\r\n tags++;\r\n }\r\n return AV_CODEC_ID_NONE;\r\n}\r\n\r\nenum AVCodecID ff_guess_image2_codec(const char *filename)\r\n{\r\n return av_str2id(img_tags,filename);\r\n}\r\n#define UNCREATURELY_BOONDOCKER(x) untampered_coachmaker((union minnewaukan_gemmules) x)\r\n\r\nvoid handle_taint(char *incongruously_turnor)\r\n{\r\n union minnewaukan_gemmules grumbled_untreasurable;\r\n ++global_variable;;\r\n if (incongruously_turnor != 0) {;\r\n grumbled_untreasurable . starchmen_lienteric = incongruously_turnor;\r\n\tUNCREATURELY_BOONDOCKER(grumbled_untreasurable);\r\n }\r\n}\r\n\r\nvoid untampered_coachmaker(union minnewaukan_gemmules capman_nei)\r\n{\r\n int found;\r\n char *gisella_marshalsea = 0;\r\n ++global_variable;;\r\n gisella_marshalsea = ((char *)capman_nei . starchmen_lienteric);\r\n \r\n \r\n \r\n found = search(&gisella_marshalsea[1],gisella_marshalsea[0]);\r\n \r\n \r\n \r\n;\r\n if (capman_nei . starchmen_lienteric != 0) \r\n free(((char *)capman_nei . starchmen_lienteric));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "674"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n\r\n#include \"cryptlib.h\"\r\n#include <openssl/safestack.h>\r\n#if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_WIN16)\r\n\r\n#endif\r\n#include <sys/stat.h> \r\n#include <mysql.h> \r\n#include </trace.h> \r\n\r\nstruct stack_st_CRYPTO_dynlock \r\n{\r\n _STACK stack;\r\n}\r\n;\r\n\r\nstatic const char *const lock_names[41] = {(\"<<ERROR>>\"), (\"err\"), (\"ex_data\"), (\"x509\"), (\"x509_info\"), (\"x509_pkey\"), (\"x509_crl\"), (\"x509_req\"), (\"dsa\"), (\"rsa\"), (\"evp_pkey\"), (\"x509_store\"), (\"ssl_ctx\"), (\"ssl_cert\"), (\"ssl_session\"), (\"ssl_sess_cert\"), (\"ssl\"), (\"ssl_method\"), (\"rand\"), (\"rand2\"), (\"debug_malloc\"), (\"BIO\"), (\"gethostbyname\"), (\"getservbyname\"), (\"readdir\"), (\"RSA_blinding\"), (\"dh\"), (\"debug_malloc2\"), (\"dso\"), (\"dynlock\"), (\"engine\"), (\"ui\"), (\"ecdsa\"), (\"ec\"), (\"ecdh\"), (\"bn\"), (\"ec_pre_comp\"), (\"store\"), (\"comp\"), (\"fips\"), (\"fips2\")\r\n#if CRYPTO_NUM_LOCKS != 41\r\n# error \"Inconsistency between crypto.h and cryptlib.c\"\r\n#endif\r\n};\r\n\r\nstatic struct stack_st_OPENSSL_STRING *app_locks = ((void *)0);\r\n\r\nstatic struct stack_st_CRYPTO_dynlock *dyn_locks = ((void *)0);\r\nstatic void (*locking_callback)(int , int , const char *, int ) = 0;\r\nstatic int (*add_lock_callback)(int *, int , int , const char *, int ) = 0;\r\n#ifndef OPENSSL_NO_DEPRECATED\r\nstatic unsigned long (*id_callback)() = 0;\r\n#endif\r\nstatic void (*threadid_callback)(CRYPTO_THREADID *) = 0;\r\nstatic struct CRYPTO_dynlock_value *(*dynlock_create_callback)(const char *, int ) = 0;\r\nstatic void (*dynlock_lock_callback)(int , struct CRYPTO_dynlock_value *, const char *, int ) = 0;\r\nstatic void (*dynlock_destroy_callback)(struct CRYPTO_dynlock_value *, const char *, int ) = 0;\r\nint ungrow_noiselessly = 0;\r\n\r\nunion gibbert_obstructively \r\n{\r\n char *moslems_delsman;\r\n double drammach_lorriker;\r\n char *abolishing_humbugs;\r\n char yttriums_coniothyrium;\r\n int uncongeal_tinter;\r\n}\r\n;\r\nint global_variable;\r\nvoid enforcers_stretchy(union gibbert_obstructively *heterogenous_appay);\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid underbedding_fictionize(void (*caricature_bitter)(union gibbert_obstructively *));\r\nunion gibbert_obstructively ascii_unrestrictive(union gibbert_obstructively languageless_pgnttrp);\r\n\r\nint CRYPTO_get_new_lockid(char *name)\r\n{\r\n char *str;\r\n int i;\r\n#if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_WIN16)\r\n\r\n#endif\r\n if (app_locks == ((void *)0) && (app_locks = ((struct stack_st_OPENSSL_STRING *)(sk_new_null()))) == ((void *)0)) {\r\n ERR_put_error(15,101,1 | 64,\"cryptlib.c\",215);\r\n return 0;\r\n }\r\n if ((str = BUF_strdup(name)) == ((void *)0)) {\r\n ERR_put_error(15,101,1 | 64,\"cryptlib.c\",220);\r\n return 0;\r\n }\r\n i = sk_push(((_STACK *)((1?app_locks : ((struct stack_st_OPENSSL_STRING *)0)))),((void *)((1?str : ((char *)0)))));\r\n if (!i) {\r\n CRYPTO_free(str);\r\n }\r\n else {\r\n\r\n i += 41;\r\n }\r\n return i;\r\n}\r\n\r\nint CRYPTO_num_locks()\r\n{\r\n return 41;\r\n}\r\n\r\nint CRYPTO_get_new_dynlockid()\r\n{\r\n int i = 0;\r\n CRYPTO_dynlock *pointer = ((void *)0);\r\n if (dynlock_create_callback == ((void *)0)) {\r\n ERR_put_error(15,103,100,\"cryptlib.c\",243);\r\n return 0;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",246);\r\n if (dyn_locks == ((void *)0) && (dyn_locks = ((struct stack_st_CRYPTO_dynlock *)(sk_new_null()))) == ((void *)0)) {\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",250);\r\n ERR_put_error(15,103,1 | 64,\"cryptlib.c\",251);\r\n return 0;\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",254);\r\n pointer = ((CRYPTO_dynlock *)(CRYPTO_malloc(((int )(sizeof(CRYPTO_dynlock ))),\"cryptlib.c\",256)));\r\n if (pointer == ((void *)0)) {\r\n ERR_put_error(15,103,1 | 64,\"cryptlib.c\",259);\r\n return 0;\r\n }\r\n pointer -> references = 1;\r\n pointer -> data = dynlock_create_callback(\"cryptlib.c\",263);\r\n if (pointer -> data == ((void *)0)) {\r\n CRYPTO_free(pointer);\r\n ERR_put_error(15,103,1 | 64,\"cryptlib.c\",267);\r\n return 0;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",271);\r\n\r\n i = sk_find(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),((void *)((1?((void *)0) : ((CRYPTO_dynlock *)0)))));\r\n\r\n if (i == - 1) {\r\n\r\n i = sk_push(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),((void *)((1?pointer : ((CRYPTO_dynlock *)0))))) - 1;\r\n }\r\n else {\r\n\r\n (void )(sk_set(((_STACK *)(1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0))),i,((void *)(1?pointer : ((CRYPTO_dynlock *)0)))));\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",285);\r\n if (i == - 1) {\r\n dynlock_destroy_callback(pointer -> data,\"cryptlib.c\",289);\r\n CRYPTO_free(pointer);\r\n }\r\n else {\r\n\r\n i += 1;\r\n }\r\n return -i;\r\n}\r\n\r\nvoid CRYPTO_destroy_dynlockid(int i)\r\n{\r\n CRYPTO_dynlock *pointer = ((void *)0);\r\n if (i) {\r\n i = -i - 1;\r\n }\r\n if (dynlock_destroy_callback == ((void *)0)) {\r\n return ;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",305);\r\n if (dyn_locks == ((void *)0) || i >= sk_num(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))))) {\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",309);\r\n return ;\r\n }\r\n pointer = ((CRYPTO_dynlock *)(sk_value(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),i)));\r\n if (pointer != ((void *)0)) {\r\n --pointer -> references;\r\n#ifdef REF_CHECK\r\n#endif\r\n if (pointer -> references <= 0) {\r\n (void )(sk_set(((_STACK *)(1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0))),i,((void *)(1?((void *)0) : ((CRYPTO_dynlock *)0)))));\r\n }\r\n else {\r\n pointer = ((void *)0);\r\n }\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",331);\r\n if (pointer) {\r\n dynlock_destroy_callback(pointer -> data,\"cryptlib.c\",335);\r\n CRYPTO_free(pointer);\r\n }\r\n}\r\n\r\nstruct CRYPTO_dynlock_value *CRYPTO_get_dynlock_value(int i)\r\n{\r\n CRYPTO_dynlock *pointer = ((void *)0);\r\n if (i) {\r\n i = -i - 1;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",346);\r\n if (dyn_locks != ((void *)0) && i < sk_num(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))))) {\r\n pointer = ((CRYPTO_dynlock *)(sk_value(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),i)));\r\n }\r\n if (pointer) {\r\n pointer -> references++;\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",353);\r\n if (pointer) {\r\n return pointer -> data;\r\n }\r\n return ((void *)0);\r\n}\r\n\r\nstruct CRYPTO_dynlock_value *(*CRYPTO_get_dynlock_create_callback())(const char *, int )\r\n{\r\n return dynlock_create_callback;\r\n}\r\n\r\nvoid (*CRYPTO_get_dynlock_lock_callback())(int , struct CRYPTO_dynlock_value *, const char *, int )\r\n{\r\n return dynlock_lock_callback;\r\n}\r\n\r\nvoid (*CRYPTO_get_dynlock_destroy_callback())(struct CRYPTO_dynlock_value *, const char *, int )\r\n{\r\n return dynlock_destroy_callback;\r\n}\r\n\r\nvoid CRYPTO_set_dynlock_create_callback(struct CRYPTO_dynlock_value *(*func)(const char *, int ))\r\n{\r\n dynlock_create_callback = func;\r\n}\r\n\r\nvoid CRYPTO_set_dynlock_lock_callback(void (*func)(int , struct CRYPTO_dynlock_value *, const char *, int ))\r\n{\r\n dynlock_lock_callback = func;\r\n}\r\n\r\nvoid CRYPTO_set_dynlock_destroy_callback(void (*func)(struct CRYPTO_dynlock_value *, const char *, int ))\r\n{\r\n dynlock_destroy_callback = func;\r\n}\r\n\r\nvoid (*CRYPTO_get_locking_callback())(int , int , const char *, int )\r\n{\r\n return locking_callback;\r\n}\r\n\r\nint (*CRYPTO_get_add_lock_callback())(int *, int , int , const char *, int )\r\n{\r\n return add_lock_callback;\r\n}\r\n\r\nvoid CRYPTO_set_locking_callback(void (*func)(int , int , const char *, int ))\r\n{\r\n\r\n OPENSSL_init();\r\n locking_callback = func;\r\n}\r\n\r\nvoid CRYPTO_set_add_lock_callback(int (*func)(int *, int , int , const char *, int ))\r\n{\r\n add_lock_callback = func;\r\n}\r\n\r\n\r\nvoid CRYPTO_THREADID_set_numeric(CRYPTO_THREADID *id,unsigned long val)\r\n{\r\n memset(id,0,sizeof(( *id)));\r\n id -> val = val;\r\n}\r\nstatic const unsigned char hash_coeffs[] = {(3), (5), (7), (11), (13), (17), (19), (23)};\r\n\r\nvoid CRYPTO_THREADID_set_pointer(CRYPTO_THREADID *id,void *ptr)\r\n{\r\n unsigned char *dest = ((void *)(&id -> val));\r\n unsigned int accum = 0;\r\n unsigned char dnum = (sizeof(id -> val));\r\n memset(id,0,sizeof(( *id)));\r\n id -> ptr = ptr;\r\n if (sizeof(id -> val) >= sizeof(id -> ptr)) {\r\n\r\n id -> val = ((unsigned long )(id -> ptr));\r\n return ;\r\n }\r\n\r\n while(dnum--){\r\n const unsigned char *src = ((void *)(&id -> ptr));\r\n unsigned char snum = (sizeof(id -> ptr));\r\n while(snum--)\r\n accum += (( *(src++)) * hash_coeffs[snum + dnum & 7]);\r\n accum += dnum;\r\n *(dest++) = (accum & 255);\r\n }\r\n}\r\n\r\nint CRYPTO_THREADID_set_callback(void (*func)(CRYPTO_THREADID *))\r\n{\r\n if (threadid_callback) {\r\n return 0;\r\n }\r\n threadid_callback = func;\r\n return 1;\r\n}\r\n\r\nvoid (*CRYPTO_THREADID_get_callback())(CRYPTO_THREADID *)\r\n{\r\n return threadid_callback;\r\n}\r\n\r\nvoid CRYPTO_THREADID_current(CRYPTO_THREADID *id)\r\n{\r\n if (threadid_callback) {\r\n threadid_callback(id);\r\n return ;\r\n }\r\n#ifndef OPENSSL_NO_DEPRECATED\r\n\r\n if (id_callback) {\r\n CRYPTO_THREADID_set_numeric(id,id_callback());\r\n return ;\r\n }\r\n#endif\r\n\r\n#ifdef OPENSSL_SYS_WIN16\r\n#elif defined(OPENSSL_SYS_WIN32)\r\n#elif defined(OPENSSL_SYS_BEOS)\r\n#else\r\n\r\n CRYPTO_THREADID_set_pointer(id,((void *)(__errno_location())));\r\n#endif\r\n}\r\n\r\nint CRYPTO_THREADID_cmp(const CRYPTO_THREADID *a,const CRYPTO_THREADID *b)\r\n{\r\n return memcmp(a,b,sizeof(( *a)));\r\n}\r\n\r\nvoid CRYPTO_THREADID_cpy(CRYPTO_THREADID *dest,const CRYPTO_THREADID *src)\r\n{\r\n memcpy(dest,src,sizeof(( *src)));\r\n}\r\n\r\nunsigned long CRYPTO_THREADID_hash(const CRYPTO_THREADID *id)\r\n{\r\n return id -> val;\r\n}\r\n#ifndef OPENSSL_NO_DEPRECATED\r\n\r\nunsigned long (*CRYPTO_get_id_callback())()\r\n{\r\n return id_callback;\r\n}\r\n\r\nvoid CRYPTO_set_id_callback(unsigned long (*func)())\r\n{\r\n id_callback = func;\r\n}\r\n\r\nunsigned long CRYPTO_thread_id()\r\n{\r\n unsigned long ret = 0;\r\n if (id_callback == ((void *)0)) {\r\n#ifdef OPENSSL_SYS_WIN16\r\n#elif defined(OPENSSL_SYS_WIN32)\r\n#elif defined(GETPID_IS_MEANINGLESS)\r\n#elif defined(OPENSSL_SYS_BEOS)\r\n#else\r\n ret = ((unsigned long )(getpid()));\r\n#endif\r\n }\r\n else {\r\n ret = id_callback();\r\n }\r\n return ret;\r\n}\r\n#endif\r\n\r\nvoid CRYPTO_lock(int mode,int type,const char *file,int line)\r\n{\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n if (type < 0) {\r\n if (dynlock_lock_callback != ((void *)0)) {\r\n struct CRYPTO_dynlock_value *pointer = CRYPTO_get_dynlock_value(type);\r\n (void )(pointer != ((void *)0)?0 : ((OpenSSLDie(\"cryptlib.c\",595,\"pointer != NULL\") , 1)));\r\n dynlock_lock_callback(mode,pointer,file,line);\r\n CRYPTO_destroy_dynlockid(type);\r\n }\r\n }\r\n else {\r\n if (locking_callback != ((void *)0)) {\r\n locking_callback(mode,type,file,line);\r\n }\r\n }\r\n}\r\n\r\nint CRYPTO_add_lock(int *pointer,int amount,int type,const char *file,int line)\r\n{\r\n int ret = 0;\r\n if (__sync_bool_compare_and_swap(&ungrow_noiselessly,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n underbedding_fictionize(enforcers_stretchy);\r\n }\r\n }\r\n if (add_lock_callback != ((void *)0)) {\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n ret = add_lock_callback(pointer,amount,type,file,line);\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n }\r\n else {\r\n CRYPTO_lock(1 | 8,type,file,line);\r\n ret = *pointer + amount;\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n *pointer = ret;\r\n CRYPTO_lock(2 | 8,type,file,line);\r\n }\r\n return ret;\r\n}\r\n\r\nconst char *CRYPTO_get_lock_name(int type)\r\n{\r\n if (type < 0) {\r\n return \"dynamic\";\r\n }\r\n else {\r\n if (type < 41) {\r\n return lock_names[type];\r\n }\r\n else {\r\n if (type - 41 > sk_num(((_STACK *)((1?app_locks : ((struct stack_st_OPENSSL_STRING *)0)))))) {\r\n return \"ERROR\";\r\n }\r\n else {\r\n return ((OPENSSL_STRING )(sk_value(((_STACK *)(1?app_locks : ((struct stack_st_OPENSSL_STRING *)0))),type - 41)));\r\n }\r\n }\r\n }\r\n}\r\n#if\tdefined(__i386) || defined(__i386__) || defined(_M_IX86) || \\\r\n\tdefined(__INTEL__) || \\\r\n\tdefined(__x86_64) || defined(__x86_64__) || defined(_M_AMD64) || defined(_M_X64)\r\nunsigned int OPENSSL_ia32cap_P[2];\r\n\r\nunsigned long *OPENSSL_ia32cap_loc()\r\n{\r\n if (sizeof(long ) == 4) {\r\n\r\n OPENSSL_ia32cap_P[1] = 0;\r\n }\r\n return (unsigned long *)OPENSSL_ia32cap_P;\r\n}\r\n#if defined(OPENSSL_CPUID_OBJ) && !defined(OPENSSL_NO_ASM) && !defined(I386_ONLY)\r\n#define OPENSSL_CPUID_SETUP\r\n#if defined(_WIN32)\r\n#else\r\ntypedef unsigned long long IA32CAP;\r\n#endif\r\n\r\nvoid OPENSSL_cpuid_setup()\r\n{\r\n static int trigger = 0;\r\n extern IA32CAP OPENSSL_ia32_cpuid();\r\n IA32CAP vec;\r\n char *env;\r\n if (trigger) {\r\n return ;\r\n }\r\n trigger = 1;\r\n if (env = getenv(\"OPENSSL_ia32cap\")) {\r\n int off = env[0] == '~'?1 : 0;\r\n#if defined(_WIN32)\r\n#else\r\n if (!sscanf((env + off),\"%lli\",((long long *)(&vec)))) {\r\n vec = (strtoul((env + off),((void *)0),0));\r\n }\r\n#endif\r\n if (off) {\r\n vec = OPENSSL_ia32_cpuid() & ~vec;\r\n }\r\n }\r\n else {\r\n vec = OPENSSL_ia32_cpuid();\r\n }\r\n\r\n OPENSSL_ia32cap_P[0] = ((unsigned int )vec) | (1 << 10);\r\n OPENSSL_ia32cap_P[1] = ((unsigned int )(vec >> 32));\r\n}\r\n#endif\r\n#else\r\n#endif\r\nint OPENSSL_NONPIC_relocated = 0;\r\n#if !defined(OPENSSL_CPUID_SETUP) && !defined(OPENSSL_CPUID_OBJ)\r\n#endif\r\n#if (defined(_WIN32) || defined(__CYGWIN__)) && defined(_WINDLL)\r\n#ifdef __CYGWIN__\r\n\r\n#include <windows.h>\r\n\r\n#endif\r\n\r\n#if defined(_WIN32_WINNT)\r\n#endif\r\n#endif\r\n#if defined(_WIN32) && !defined(__CYGWIN__)\r\n#include <tchar.h>\r\n#include <signal.h>\r\n#ifdef __WATCOMC__\r\n#if defined(_UNICODE) || defined(__UNICODE__)\r\n#define _vsntprintf _vsnwprintf\r\n#else\r\n#define _vsntprintf _vsnprintf\r\n#endif\r\n#endif\r\n#ifdef _MSC_VER\r\n#define alloca _alloca\r\n#endif\r\n#if defined(_WIN32_WINNT) && _WIN32_WINNT>=0x0333\r\n\r\n\r\n\r\n\r\n\r\n#if 1\r\n\r\n#else\r\n\r\n#endif\r\n#else\r\n#endif\r\n#ifdef STD_ERROR_HANDLE\t\r\n\r\n#endif\r\n#ifndef OPENSSL_NO_MULTIBYTE\r\n#endif\r\n#if defined(_WIN32_WINNT) && _WIN32_WINNT>=0x0333\r\n\r\n#endif\r\n#else\r\n\r\nvoid OPENSSL_showfatal(const char *fmta,... )\r\n{\r\n va_list ap;\r\n __builtin_va_start(ap,fmta);\r\n vfprintf(stderr,fmta,ap);\r\n __builtin_va_end(ap);\r\n}\r\n\r\nint OPENSSL_isservice()\r\n{\r\n return 0;\r\n}\r\n#endif\r\n\r\nvoid OpenSSLDie(const char *file,int line,const char *assertion)\r\n{\r\n OPENSSL_showfatal(\"%s(%d): OpenSSL internal error, assertion failed: %s\\n\",file,line,assertion);\r\n#if !defined(_WIN32) || defined(__CYGWIN__)\r\n abort();\r\n#else\r\n\r\n#endif\r\n}\r\n\r\nvoid *OPENSSL_stderr()\r\n{\r\n return stderr;\r\n}\r\n\r\nint CRYPTO_memcmp(const void *in_a,const void *in_b,size_t len)\r\n{\r\n size_t i;\r\n const unsigned char *a = in_a;\r\n const unsigned char *b = in_b;\r\n unsigned char x = 0;\r\n for (i = 0; i < len; i++) \r\n x |= a[i] ^ b[i];\r\n return x;\r\n}\r\n\r\nvoid enforcers_stretchy(union gibbert_obstructively *heterogenous_appay)\r\n{\r\n union gibbert_obstructively canty_streptobacillus;\r\n char *concupy_bogarde;\r\n ++global_variable;;\r\n setup_printf_context();\r\n concupy_bogarde = getenv(\"SKEED_BROOCHED\");\r\n if (concupy_bogarde != 0) {;\r\n canty_streptobacillus . moslems_delsman = concupy_bogarde;\r\n *heterogenous_appay = canty_streptobacillus;\r\n }\r\n}\r\n\r\nvoid underbedding_fictionize(void (*caricature_bitter)(union gibbert_obstructively *))\r\n{\r\n MYSQL_ROW row;\r\n unsigned int num_fields;\r\n my_ulonglong num_rows;\r\n MYSQL_RES *result;\r\n int i;\r\n int status;\r\n char query_buffer[1000];\r\n MYSQL *conn;\r\n unsigned int dbport = 0;\r\n char *dbpassword = 0;\r\n char *dbuser = 0;\r\n char *dbhost = 0;\r\n char * dbdatabase = 0;\r\n char use_str[150] = {0};\r\n char *unpuritanical_illiopolis = 0;\r\n union gibbert_obstructively vishnuite_escapees = {0};\r\n ++global_variable;\r\n union gibbert_obstructively dihydroxy_stalkiest = {0};\r\n caricature_bitter(&dihydroxy_stalkiest);\r\n if (dihydroxy_stalkiest . moslems_delsman != 0) {;\r\n vishnuite_escapees = ascii_unrestrictive(dihydroxy_stalkiest);\r\n unpuritanical_illiopolis = ((char *)vishnuite_escapees . moslems_delsman);\r\n \r\n dbhost = getenv(\"DBMYSQLHOST\");\r\n dbuser = getenv(\"DBMYSQLUSER\");\r\n dbpassword = getenv(\"DBMYSQLPASSWORD\");\r\n dbport = ((unsigned int )(strtoul(getenv(\"DBMYSQLPORT\"),0,10)));\r\n dbdatabase = getenv(\"SS_DBMYSQLDATABASE\");\r\n \r\n \r\n \r\n \r\n \r\n if (dbhost != 0 && dbport != 0 && (dbuser != 0 && dbpassword != 0)) {\r\n conn = mysql_init(0);\r\n if (conn != 0) {\r\n if (mysql_real_connect(conn,dbhost,dbuser,dbpassword,0,dbport,\"/var/lib/mysql/mysql.sock\",65536UL) != 0) {\r\n snprintf(use_str,150,\"USE %s;\", dbdatabase);\r\n if (mysql_query(conn, use_str) == 0) {\r\n \r\n\r\n snprintf(query_buffer,1000,\"SELECT * FROM Customers WHERE Country='%s';\",unpuritanical_illiopolis);\r\n \r\n \r\n \r\n\r\n if (mysql_query(conn,query_buffer) == 0) {\r\n do {\r\n result = mysql_store_result(conn);\r\n if (result != 0) {\r\n num_rows = mysql_num_rows(result);\r\n if (num_rows != 0) {\r\n num_fields = mysql_num_fields(result);\r\n while((row = mysql_fetch_row(result))){\r\n for (i = 0; i < num_fields; ++i)\r\n printf(\"%s \",(row[i]?row[i] : \"NULL\"));\r\n printf(\"\\n\");\r\n }\r\n mysql_free_result(result);\r\n }\r\n }\r\n else {\r\n if (mysql_field_count(conn) == 0)\r\n printf(\"%lld rows affected\\n\",mysql_affected_rows(conn));\r\n else {\r\n printf(\"%s error %u: %s\\n\",\"Store result error\",mysql_errno(conn),mysql_error(conn));\r\n break;\r\n }\r\n }\r\n status = mysql_next_result(conn);\r\n if (status > 0)\r\n printf(\"%s error %u: %s\\n\",\"Next result error\",mysql_errno(conn),mysql_error(conn));\r\n }while (status == 0);\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Query\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n \r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Query\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n mysql_close(conn);\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Real connect\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Init\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n }\r\n \r\n;\r\nclose_printf_context();\r\n }\r\n}\r\n\r\nunion gibbert_obstructively ascii_unrestrictive(union gibbert_obstructively languageless_pgnttrp)\r\n{\r\n ++global_variable;\r\n return languageless_pgnttrp;\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "89"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "PHP_MINIT_FUNCTION(curl)\r\r\n{\r\r\n\tle_curl = zend_register_list_destructors_ex(_php_curl_close, NULL, \"curl\", module_number);\r\r\n\tle_curl_multi_handle = zend_register_list_destructors_ex(_php_curl_multi_close, NULL, \"curl_multi\", module_number);\r\r\n\tle_curl_share_handle = zend_register_list_destructors_ex(_php_curl_share_close, NULL, \"curl_share\", module_number);\r\r\n\r\r\n\tREGISTER_INI_ENTRIES();\r\r\n\r\r\n\t/* See http://curl.haxx.se/lxr/source/docs/libcurl/symbols-in-versions\r\r\n\t or curl src/docs/libcurl/symbols-in-versions for a (almost) complete list\r\r\n\t of options and which version they were introduced */\r\r\n\r\r\n\t/* Constants for curl_setopt() */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_AUTOREFERER);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_BINARYTRANSFER);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_BUFFERSIZE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_CAINFO);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_CAPATH);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_CONNECTTIMEOUT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_COOKIE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_COOKIEFILE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_COOKIEJAR);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_COOKIESESSION);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_CRLF);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_CUSTOMREQUEST);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_DNS_CACHE_TIMEOUT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_DNS_USE_GLOBAL_CACHE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_EGDSOCKET);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_ENCODING);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FAILONERROR);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FILE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FILETIME);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FOLLOWLOCATION);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FORBID_REUSE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FRESH_CONNECT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTPAPPEND);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTPLISTONLY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTPPORT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTP_USE_EPRT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTP_USE_EPSV);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_HEADER);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_HEADERFUNCTION);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_HTTP200ALIASES);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_HTTPGET);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_HTTPHEADER);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_HTTPPROXYTUNNEL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_HTTP_VERSION);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_INFILE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_INFILESIZE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_INTERFACE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_KRB4LEVEL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_LOW_SPEED_LIMIT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_LOW_SPEED_TIME);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_MAXCONNECTS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_MAXREDIRS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_NETRC);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_NOBODY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_NOPROGRESS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_NOSIGNAL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PORT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_POST);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_POSTFIELDS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_POSTQUOTE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PREQUOTE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PRIVATE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PROGRESSFUNCTION);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PROXY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PROXYPORT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PROXYTYPE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PROXYUSERPWD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PUT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_QUOTE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_RANDOM_FILE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_RANGE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_READDATA);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_READFUNCTION);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_REFERER);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_RESUME_FROM);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_RETURNTRANSFER);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SHARE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSLCERT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSLCERTPASSWD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSLCERTTYPE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSLENGINE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSLENGINE_DEFAULT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSLKEY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSLKEYPASSWD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSLKEYTYPE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSLVERSION);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSL_CIPHER_LIST);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSL_VERIFYHOST);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSL_VERIFYPEER);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_STDERR);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TELNETOPTIONS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TIMECONDITION);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TIMEOUT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TIMEVALUE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TRANSFERTEXT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_UNRESTRICTED_AUTH);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_UPLOAD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_URL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_USERAGENT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_USERPWD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_VERBOSE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_WRITEFUNCTION);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_WRITEHEADER);\r\r\n\r\r\n\t/* */\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_ABORTED_BY_CALLBACK);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_BAD_CALLING_ORDER);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_BAD_CONTENT_ENCODING);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_BAD_DOWNLOAD_RESUME);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_BAD_FUNCTION_ARGUMENT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_BAD_PASSWORD_ENTERED);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_COULDNT_CONNECT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_COULDNT_RESOLVE_HOST);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_COULDNT_RESOLVE_PROXY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FAILED_INIT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FILE_COULDNT_READ_FILE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_ACCESS_DENIED);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_BAD_DOWNLOAD_RESUME);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_CANT_GET_HOST);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_CANT_RECONNECT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_COULDNT_GET_SIZE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_COULDNT_RETR_FILE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_COULDNT_SET_ASCII);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_COULDNT_SET_BINARY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_COULDNT_STOR_FILE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_COULDNT_USE_REST);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_PARTIAL_FILE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_PORT_FAILED);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_QUOTE_ERROR);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_USER_PASSWORD_INCORRECT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_WEIRD_227_FORMAT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_WEIRD_PASS_REPLY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_WEIRD_PASV_REPLY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_WEIRD_SERVER_REPLY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_WEIRD_USER_REPLY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_WRITE_ERROR);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FUNCTION_NOT_FOUND);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_GOT_NOTHING);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_HTTP_NOT_FOUND);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_HTTP_PORT_FAILED);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_HTTP_POST_ERROR);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_HTTP_RANGE_ERROR);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_HTTP_RETURNED_ERROR);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_LDAP_CANNOT_BIND);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_LDAP_SEARCH_FAILED);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_LIBRARY_NOT_FOUND);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_MALFORMAT_USER);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_OBSOLETE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_OK);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_OPERATION_TIMEDOUT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_OPERATION_TIMEOUTED);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_OUT_OF_MEMORY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_PARTIAL_FILE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_READ_ERROR);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_RECV_ERROR);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_SEND_ERROR);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_SHARE_IN_USE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_SSL_CACERT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_SSL_CERTPROBLEM);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_SSL_CIPHER);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_SSL_CONNECT_ERROR);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_SSL_ENGINE_NOTFOUND);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_SSL_ENGINE_SETFAILED);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_SSL_PEER_CERTIFICATE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_TELNET_OPTION_SYNTAX);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_TOO_MANY_REDIRECTS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_UNKNOWN_TELNET_OPTION);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_UNSUPPORTED_PROTOCOL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_URL_MALFORMAT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_URL_MALFORMAT_USER);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_WRITE_ERROR);\r\r\n\r\r\n\t/* cURL info constants */\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_CONNECT_TIME);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_CONTENT_LENGTH_DOWNLOAD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_CONTENT_LENGTH_UPLOAD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_CONTENT_TYPE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_EFFECTIVE_URL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_FILETIME);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_HEADER_OUT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_HEADER_SIZE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_HTTP_CODE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_LASTONE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_NAMELOOKUP_TIME);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_PRETRANSFER_TIME);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_PRIVATE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_REDIRECT_COUNT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_REDIRECT_TIME);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_REQUEST_SIZE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_SIZE_DOWNLOAD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_SIZE_UPLOAD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_SPEED_DOWNLOAD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_SPEED_UPLOAD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_SSL_VERIFYRESULT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_STARTTRANSFER_TIME);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_TOTAL_TIME);\r\r\n\r\r\n\t/* Other */\r\r\n\tREGISTER_CURL_CONSTANT(CURLMSG_DONE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLVERSION_NOW);\r\r\n\r\r\n\t/* Curl Multi Constants */\r\r\n\tREGISTER_CURL_CONSTANT(CURLM_BAD_EASY_HANDLE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLM_BAD_HANDLE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLM_CALL_MULTI_PERFORM);\r\r\n\tREGISTER_CURL_CONSTANT(CURLM_INTERNAL_ERROR);\r\r\n\tREGISTER_CURL_CONSTANT(CURLM_OK);\r\r\n\tREGISTER_CURL_CONSTANT(CURLM_OUT_OF_MEMORY);\r\r\n#if LIBCURL_VERSION_NUM >= 0x072001 /* Available since 7.32.1 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLM_ADDED_ALREADY);\r\r\n#endif\r\r\n\r\r\n\t/* Curl proxy constants */\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROXY_HTTP);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROXY_SOCKS4);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROXY_SOCKS5);\r\r\n\r\r\n\t/* Curl Share constants */\r\r\n\tREGISTER_CURL_CONSTANT(CURLSHOPT_NONE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLSHOPT_SHARE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLSHOPT_UNSHARE);\r\r\n\r\r\n\t/* Curl Http Version constants (CURLOPT_HTTP_VERSION) */\r\r\n\tREGISTER_CURL_CONSTANT(CURL_HTTP_VERSION_1_0);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_HTTP_VERSION_1_1);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_HTTP_VERSION_NONE);\r\r\n\r\r\n\t/* Curl Lock constants */\r\r\n\tREGISTER_CURL_CONSTANT(CURL_LOCK_DATA_COOKIE);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_LOCK_DATA_DNS);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_LOCK_DATA_SSL_SESSION);\r\r\n\r\r\n\t/* Curl NETRC constants (CURLOPT_NETRC) */\r\r\n\tREGISTER_CURL_CONSTANT(CURL_NETRC_IGNORED);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_NETRC_OPTIONAL);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_NETRC_REQUIRED);\r\r\n\r\r\n\t/* Curl SSL Version constants (CURLOPT_SSLVERSION) */\r\r\n\tREGISTER_CURL_CONSTANT(CURL_SSLVERSION_DEFAULT);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_SSLVERSION_SSLv2);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_SSLVERSION_SSLv3);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_SSLVERSION_TLSv1);\r\r\n\r\r\n\t/* Curl TIMECOND constants (CURLOPT_TIMECONDITION) */\r\r\n\tREGISTER_CURL_CONSTANT(CURL_TIMECOND_IFMODSINCE);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_TIMECOND_IFUNMODSINCE);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_TIMECOND_LASTMOD);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_TIMECOND_NONE);\r\r\n\r\r\n\t/* Curl version constants */\r\r\n\tREGISTER_CURL_CONSTANT(CURL_VERSION_IPV6);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_VERSION_KERBEROS4);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_VERSION_LIBZ);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_VERSION_SSL);\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070a06 /* Available since 7.10.6 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_HTTPAUTH);\r\r\n\t/* http authentication options */\r\r\n\tREGISTER_CURL_CONSTANT(CURLAUTH_ANY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLAUTH_ANYSAFE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLAUTH_BASIC);\r\r\n\tREGISTER_CURL_CONSTANT(CURLAUTH_DIGEST);\r\r\n\tREGISTER_CURL_CONSTANT(CURLAUTH_GSSNEGOTIATE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLAUTH_NONE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLAUTH_NTLM);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070a07 /* Available since 7.10.7 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_HTTP_CONNECTCODE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTP_CREATE_MISSING_DIRS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PROXYAUTH);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070a08 /* Available since 7.10.8 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FILESIZE_EXCEEDED);\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_LDAP_INVALID_URL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_HTTPAUTH_AVAIL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_RESPONSE_CODE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_PROXYAUTH_AVAIL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTP_RESPONSE_TIMEOUT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_IPRESOLVE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_MAXFILESIZE);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_IPRESOLVE_V4);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_IPRESOLVE_V6);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_IPRESOLVE_WHATEVER);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070b00 /* Available since 7.11.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_FTP_SSL_FAILED);\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTPSSL_ALL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTPSSL_CONTROL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTPSSL_NONE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTPSSL_TRY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTP_SSL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_NETRC_FILE);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070c02 /* Available since 7.12.2 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTPAUTH_DEFAULT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTPAUTH_SSL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTPAUTH_TLS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTPSSLAUTH);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070d00 /* Available since 7.13.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTP_ACCOUNT);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070b02 /* Available since 7.11.2 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TCP_NODELAY);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070c02 /* Available since 7.12.2 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_OS_ERRNO);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070c03 /* Available since 7.12.3 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_NUM_CONNECTS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_SSL_ENGINES);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070e01 /* Available since 7.14.1 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_COOKIELIST);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_COOKIELIST);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_IGNORE_CONTENT_LENGTH);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070f00 /* Available since 7.15.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTP_SKIP_PASV_IP);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070f01 /* Available since 7.15.1 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTP_FILEMETHOD);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070f02 /* Available since 7.15.2 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_CONNECT_ONLY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_LOCALPORT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_LOCALPORTRANGE);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070f03 /* Available since 7.15.3 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTPMETHOD_MULTICWD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTPMETHOD_NOCWD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTPMETHOD_SINGLECWD);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070f04 /* Available since 7.15.4 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_FTP_ENTRY_PATH);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x070f05 /* Available since 7.15.5 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTP_ALTERNATIVE_TO_USER);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_MAX_RECV_SPEED_LARGE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_MAX_SEND_SPEED_LARGE);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071000 /* Available since 7.16.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_SSL_CACERT_BADFILE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSL_SESSIONID_CACHE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLMOPT_PIPELINING);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071001 /* Available since 7.16.1 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLE_SSH);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTP_SSL_CCC);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSH_AUTH_TYPES);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSH_PRIVATE_KEYFILE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSH_PUBLIC_KEYFILE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTPSSL_CCC_ACTIVE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTPSSL_CCC_NONE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTPSSL_CCC_PASSIVE);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071002 /* Available since 7.16.2 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_CONNECTTIMEOUT_MS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_HTTP_CONTENT_DECODING);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_HTTP_TRANSFER_DECODING);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TIMEOUT_MS);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071003 /* Available since 7.16.3 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLMOPT_MAXCONNECTS);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071004 /* Available since 7.16.4 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_KRBLEVEL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_NEW_DIRECTORY_PERMS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_NEW_FILE_PERMS);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071100 /* Available since 7.17.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_APPEND);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_DIRLISTONLY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_USE_SSL);\r\r\n\t/* Curl SSL Constants */\r\r\n\tREGISTER_CURL_CONSTANT(CURLUSESSL_ALL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLUSESSL_CONTROL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLUSESSL_NONE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLUSESSL_TRY);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071101 /* Available since 7.17.1 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSH_HOST_PUBLIC_KEY_MD5);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071200 /* Available since 7.18.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PROXY_TRANSFER_MODE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPAUSE_ALL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPAUSE_CONT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPAUSE_RECV);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPAUSE_RECV_CONT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPAUSE_SEND);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPAUSE_SEND_CONT);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_READFUNC_PAUSE);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_WRITEFUNC_PAUSE);\r\r\n\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROXY_SOCKS4A);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROXY_SOCKS5_HOSTNAME);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071202 /* Available since 7.18.2 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_REDIRECT_URL);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071300 /* Available since 7.19.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_APPCONNECT_TIME);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_PRIMARY_IP);\r\r\n\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_ADDRESS_SCOPE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_CRLFILE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_ISSUERCERT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_KEYPASSWD);\r\r\n\r\r\n\tREGISTER_CURL_CONSTANT(CURLSSH_AUTH_ANY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLSSH_AUTH_DEFAULT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLSSH_AUTH_HOST);\r\r\n\tREGISTER_CURL_CONSTANT(CURLSSH_AUTH_KEYBOARD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLSSH_AUTH_NONE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLSSH_AUTH_PASSWORD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLSSH_AUTH_PUBLICKEY);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071301 /* Available since 7.19.1 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_CERTINFO);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_CERTINFO);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PASSWORD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_POSTREDIR);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PROXYPASSWORD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PROXYUSERNAME);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_USERNAME);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_REDIR_POST_301);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_REDIR_POST_302);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_REDIR_POST_ALL);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071303 /* Available since 7.19.3 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLAUTH_DIGEST_IE);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071304 /* Available since 7.19.4 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_CONDITION_UNMET);\r\r\n\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_NOPROXY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PROTOCOLS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_REDIR_PROTOCOLS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SOCKS5_GSSAPI_NEC);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SOCKS5_GSSAPI_SERVICE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TFTP_BLKSIZE);\r\r\n\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_ALL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_DICT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_FILE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_FTP);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_FTPS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_HTTP);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_HTTPS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_LDAP);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_LDAPS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_SCP);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_SFTP);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_TELNET);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_TFTP);\r\r\n\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROXY_HTTP_1_0);\r\r\n\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTP_CREATE_DIR);\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTP_CREATE_DIR_NONE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLFTP_CREATE_DIR_RETRY);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071306 /* Available since 7.19.6 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSH_KNOWNHOSTS);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071400 /* Available since 7.20.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_RTSP_CLIENT_CSEQ);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_RTSP_CSEQ_RECV);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_RTSP_SERVER_CSEQ);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_RTSP_SESSION_ID);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTP_USE_PRET);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_MAIL_FROM);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_MAIL_RCPT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_RTSP_CLIENT_CSEQ);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_RTSP_REQUEST);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_RTSP_SERVER_CSEQ);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_RTSP_SESSION_ID);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_RTSP_STREAM_URI);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_RTSP_TRANSPORT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_IMAP);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_IMAPS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_POP3);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_POP3S);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_RTSP);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_SMTP);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_SMTPS);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_RTSPREQ_ANNOUNCE);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_RTSPREQ_DESCRIBE);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_RTSPREQ_GET_PARAMETER);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_RTSPREQ_OPTIONS);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_RTSPREQ_PAUSE);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_RTSPREQ_PLAY);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_RTSPREQ_RECEIVE);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_RTSPREQ_RECORD);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_RTSPREQ_SET_PARAMETER);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_RTSPREQ_SETUP);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_RTSPREQ_TEARDOWN);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071500 /* Available since 7.21.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_LOCAL_IP);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_LOCAL_PORT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLINFO_PRIMARY_PORT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FNMATCH_FUNCTION);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_WILDCARDMATCH);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_RTMP);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_RTMPE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_RTMPS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_RTMPT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_RTMPTE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_RTMPTS);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_FNMATCHFUNC_FAIL);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_FNMATCHFUNC_MATCH);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_FNMATCHFUNC_NOMATCH);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071502 /* Available since 7.21.2 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_GOPHER);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071503 /* Available since 7.21.3 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLAUTH_ONLY);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_RESOLVE);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071504 /* Available since 7.21.4 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TLSAUTH_PASSWORD);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TLSAUTH_TYPE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TLSAUTH_USERNAME);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_TLSAUTH_SRP);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071506 /* Available since 7.21.6 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_ACCEPT_ENCODING);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TRANSFER_ENCODING);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071600 /* Available since 7.22.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLAUTH_NTLM_WB);\r\r\n\tREGISTER_CURL_CONSTANT(CURLGSSAPI_DELEGATION_FLAG);\r\r\n\tREGISTER_CURL_CONSTANT(CURLGSSAPI_DELEGATION_POLICY_FLAG);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_GSSAPI_DELEGATION);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071800 /* Available since 7.24.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_ACCEPTTIMEOUT_MS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_DNS_SERVERS);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071900 /* Available since 7.25.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_MAIL_AUTH);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSL_OPTIONS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TCP_KEEPALIVE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TCP_KEEPIDLE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TCP_KEEPINTVL);\r\r\n\tREGISTER_CURL_CONSTANT(CURLSSLOPT_ALLOW_BEAST);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071901 /* Available since 7.25.1 */\r\r\n\tREGISTER_CURL_CONSTANT(CURL_REDIR_POST_303);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071c00 /* Available since 7.28.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLSSH_AUTH_AGENT);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071e00 /* Available since 7.30.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLMOPT_MAX_HOST_CONNECTIONS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLMOPT_MAX_PIPELINE_LENGTH);\r\r\n\tREGISTER_CURL_CONSTANT(CURLMOPT_MAX_TOTAL_CONNECTIONS);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x071f00 /* Available since 7.31.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SASL_IR);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x072100 /* Available since 7.33.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_DNS_INTERFACE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_DNS_LOCAL_IP4);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_DNS_LOCAL_IP6);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_XOAUTH2_BEARER);\r\r\n\r\r\n\tREGISTER_CURL_CONSTANT(CURL_HTTP_VERSION_2_0);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_VERSION_HTTP2);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x072200 /* Available since 7.34.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_LOGIN_OPTIONS);\r\r\n\r\r\n\tREGISTER_CURL_CONSTANT(CURL_SSLVERSION_TLSv1_0);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_SSLVERSION_TLSv1_1);\r\r\n\tREGISTER_CURL_CONSTANT(CURL_SSLVERSION_TLSv1_2);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x072400 /* Available since 7.36.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_EXPECT_100_TIMEOUT_MS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSL_ENABLE_ALPN);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSL_ENABLE_NPN);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x072500 /* Available since 7.37.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLHEADER_SEPARATE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLHEADER_UNIFIED);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_HEADEROPT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PROXYHEADER);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x072600 /* Available since 7.38.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLAUTH_NEGOTIATE);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x072700 /* Available since 7.39.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PINNEDPUBLICKEY);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x072800 /* Available since 7.40.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_UNIX_SOCKET_PATH);\r\r\n\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_SMB);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPROTO_SMBS);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x072900 /* Available since 7.41.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSL_VERIFYSTATUS);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x072a00 /* Available since 7.42.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PATH_AS_IS);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SSL_FALSESTART);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x072b00 /* Available since 7.43.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURL_HTTP_VERSION_2);\r\r\n\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PIPEWAIT);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PROXY_SERVICE_NAME);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SERVICE_NAME);\r\r\n\r\r\n\tREGISTER_CURL_CONSTANT(CURLPIPE_NOTHING);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPIPE_HTTP1);\r\r\n\tREGISTER_CURL_CONSTANT(CURLPIPE_MULTIPLEX);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x072c00 /* Available since 7.44.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLSSLOPT_NO_REVOKE);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x072d00 /* Available since 7.45.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_DEFAULT_PROTOCOL);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x072e00 /* Available since 7.46.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_STREAM_WEIGHT);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x072f00 /* Available since 7.47.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURL_HTTP_VERSION_2TLS);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x073000 /* Available since 7.48.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TFTP_NO_OPTIONS);\r\r\n#endif\r\r\n\r\r\n#if LIBCURL_VERSION_NUM >= 0x073100 /* Available since 7.49.0 */\r\r\n\tREGISTER_CURL_CONSTANT(CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_CONNECT_TO);\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_TCP_FASTOPEN);\r\r\n#endif\r\r\n\r\r\n#if CURLOPT_FTPASCII != 0\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_FTPASCII);\r\r\n#endif\r\r\n#if CURLOPT_MUTE != 0\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_MUTE);\r\r\n#endif\r\r\n#if CURLOPT_PASSWDFUNCTION != 0\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_PASSWDFUNCTION);\r\r\n#endif\r\r\n\tREGISTER_CURL_CONSTANT(CURLOPT_SAFE_UPLOAD);\r\r\n\r\r\n#ifdef PHP_CURL_NEED_OPENSSL_TSL\r\r\n\tif (!CRYPTO_get_id_callback()) {\r\r\n\t\tint i, c = CRYPTO_num_locks();\r\r\n\r\r\n\t\tphp_curl_openssl_tsl = malloc(c * sizeof(MUTEX_T));\r\r\n\t\tif (!php_curl_openssl_tsl) {\r\r\n\t\t\treturn FAILURE;\r\r\n\t\t}\r\r\n\r\r\n\t\tfor (i = 0; i < c; ++i) {\r\r\n\t\t\tphp_curl_openssl_tsl[i] = tsrm_mutex_alloc();\r\r\n\t\t}\r\r\n\r\r\n\t\tCRYPTO_set_id_callback(php_curl_ssl_id);\r\r\n\t\tCRYPTO_set_locking_callback(php_curl_ssl_lock);\r\r\n\t}\r\r\n#endif\r\r\n#ifdef PHP_CURL_NEED_GNUTLS_TSL\r\r\n\tgcry_control(GCRYCTL_SET_THREAD_CBS, &php_curl_gnutls_tsl);\r\r\n#endif\r\r\n\r\r\n\tif (curl_global_init(CURL_GLOBAL_DEFAULT) != CURLE_OK) {\r\r\n\t\treturn FAILURE;\r\r\n\t}\r\r\n\r\r\n\tcurlfile_register_class();\r\r\n\r\r\n\treturn SUCCESS;\r\r\n}\r\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "0"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avstring.h\"\r\n#include \"internal.h\"\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\n#include <fcntl.h> \r\n#include <pthread.h> \r\n#include <signal.h> \r\n#include <unistd.h> \r\ntypedef struct {\r\nenum AVCodecID id;\r\nconst char *str;}IdStrMap;\r\nstatic const IdStrMap img_tags[] = {{(AV_CODEC_ID_MJPEG), (\"jpeg\")}, {(AV_CODEC_ID_MJPEG), (\"jpg\")}, {(AV_CODEC_ID_MJPEG), (\"jps\")}, {(AV_CODEC_ID_LJPEG), (\"ljpg\")}, {(AV_CODEC_ID_JPEGLS), (\"jls\")}, {(AV_CODEC_ID_PNG), (\"png\")}, {(AV_CODEC_ID_PNG), (\"pns\")}, {(AV_CODEC_ID_PNG), (\"mng\")}, {(AV_CODEC_ID_PPM), (\"ppm\")}, {(AV_CODEC_ID_PPM), (\"pnm\")}, {(AV_CODEC_ID_PGM), (\"pgm\")}, {(AV_CODEC_ID_PGMYUV), (\"pgmyuv\")}, {(AV_CODEC_ID_PBM), (\"pbm\")}, {(AV_CODEC_ID_PAM), (\"pam\")}, {(AV_CODEC_ID_MPEG1VIDEO), (\"mpg1-img\")}, {(AV_CODEC_ID_MPEG2VIDEO), (\"mpg2-img\")}, {(AV_CODEC_ID_MPEG4), (\"mpg4-img\")}, {(AV_CODEC_ID_FFV1), (\"ffv1-img\")}, {(AV_CODEC_ID_RAWVIDEO), (\"y\")}, {(AV_CODEC_ID_RAWVIDEO), (\"raw\")}, {(AV_CODEC_ID_BMP), (\"bmp\")}, {(AV_CODEC_ID_GIF), (\"gif\")}, {(AV_CODEC_ID_TARGA), (\"tga\")}, {(AV_CODEC_ID_TIFF), (\"tiff\")}, {(AV_CODEC_ID_TIFF), (\"tif\")}, {(AV_CODEC_ID_SGI), (\"sgi\")}, {(AV_CODEC_ID_PTX), (\"ptx\")}, {(AV_CODEC_ID_PCX), (\"pcx\")}, {(AV_CODEC_ID_BRENDER_PIX), (\"pix\")}, {(AV_CODEC_ID_SUNRAST), (\"sun\")}, {(AV_CODEC_ID_SUNRAST), (\"ras\")}, {(AV_CODEC_ID_SUNRAST), (\"rs\")}, {(AV_CODEC_ID_SUNRAST), (\"im1\")}, {(AV_CODEC_ID_SUNRAST), (\"im8\")}, {(AV_CODEC_ID_SUNRAST), (\"im24\")}, {(AV_CODEC_ID_SUNRAST), (\"im32\")}, {(AV_CODEC_ID_SUNRAST), (\"sunras\")}, {(AV_CODEC_ID_JPEG2000), (\"j2c\")}, {(AV_CODEC_ID_JPEG2000), (\"j2k\")}, {(AV_CODEC_ID_JPEG2000), (\"jp2\")}, {(AV_CODEC_ID_JPEG2000), (\"jpc\")}, {(AV_CODEC_ID_DPX), (\"dpx\")}, {(AV_CODEC_ID_EXR), (\"exr\")}, {(AV_CODEC_ID_PICTOR), (\"pic\")}, {(AV_CODEC_ID_V210X), (\"yuv10\")}, {(AV_CODEC_ID_XBM), (\"xbm\")}, {(AV_CODEC_ID_XFACE), (\"xface\")}, {(AV_CODEC_ID_XWD), (\"xwd\")}, {(AV_CODEC_ID_NONE), (((void *)0))}};\r\nint strengthless_pyrheliometer = 0;\r\ntypedef char *berossos_galloglass;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nstruct data {\r\n int data_size;\r\n char *data;\r\n char *file1;\r\n};\r\nstruct data *Data;\r\npthread_mutex_t mutex;\r\nint comp (const void * a, const void * b)\r\n{\r\n if (a > b) {\r\n return -1;\r\n }\r\n else if (a < b) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\nint pmoc (const void * a, const void * b)\r\n{\r\n return -1 * comp(a, b);\r\n}\r\nvoid readFile(char *filename) {\r\n FILE *fifo;\r\n char ch;\r\n \r\n fifo = fopen(filename, \"r\");\r\n if (fifo != NULL) {\r\n while ((ch = fgetc(fifo)) != EOF) {\r\n printf(\"%c\", ch);\r\n }\r\n fclose(fifo);\r\n }\r\n \r\n}\r\nvoid waitForSig(char* sleepFile) {\r\n int fd;\r\n char outStr[25] = {0};\r\n char filename[500] = {0};\r\n \r\n printf(\"In waitForSig\\n\");\r\n sprintf(outStr, \"%d.pid\", getpid());\r\n strcat(filename, \"/opt//workspace/testData/\");\r\n strcat(filename, outStr);\r\n if ((fd = open(filename, O_CREAT|O_WRONLY, 0666)) == -1) {\r\n \r\n printf(\"Error opening file.\");\r\n }\r\n else {\r\n if (write(fd, \"q\", sizeof(char)) == -1) {\r\n printf(\"Error writing to file.\");\r\n }\r\n \r\n if (close(fd) == -1) {\r\n printf(\"Error closing file.\");\r\n }\r\n readFile(sleepFile);\r\n }\r\n}\r\nvoid delNonAlpha (void *data) {\r\n struct data *Data = (struct data*) data;\r\n int i = 0;\r\n int j = 0;\r\n char* temp = malloc(sizeof(char) * (Data->data_size + 1));\r\n \r\n printf(\"Grabbing lock\\n\");\r\n \r\n \r\n pthread_mutex_lock(&mutex); \r\n \r\n \r\n while(Data->data[i] != '\\0') {\r\n if((Data->data[i] >= 'A' && Data->data[i] <= 'Z') ||\r\n (Data->data[i] >= 'a' && Data->data[i] <= 'z')) {\r\n temp[j++] = Data->data[i];\r\n }\r\n i++;\r\n }\r\n temp[j++] = '\\0';\r\n Data->data_size = j;\r\n free(Data->data);\r\n Data->data = temp;\r\n waitForSig(Data->file1); \r\n printf(\"Realeasing lock\\n\");\r\n pthread_mutex_unlock(&mutex);\r\n \r\n}\r\nvoid sig_handler (int sig) {\r\n \r\n \r\n if (Data != NULL) {\r\n \r\n \r\n delNonAlpha(Data); \r\n }\r\n signal(SIGUSR1, SIG_IGN);\r\n}\r\n\r\nstatic enum AVCodecID av_str2id(const IdStrMap *tags,const char *str)\r\n{\r\n char *rukbat_hitchproof = 0;\r\n berossos_galloglass defined_manchester = 0;\r\n int **************************************************badenite_vesuvian = 0;\r\n int *************************************************revivor_ventriculus = 0;\r\n int ************************************************semispeculative_impregnates = 0;\r\n int ***********************************************poundstone_aeschynanthus = 0;\r\n int **********************************************czarinas_colubrina = 0;\r\n int *********************************************untiled_unpersevering = 0;\r\n int ********************************************avernus_gibbers = 0;\r\n int *******************************************kechuas_bangled = 0;\r\n int ******************************************hershell_nucleate = 0;\r\n int *****************************************sulphinyl_desperacy = 0;\r\n int ****************************************conductions_unwarely = 0;\r\n int ***************************************festooning_anglophobia = 0;\r\n int **************************************heparin_carnifies = 0;\r\n int *************************************madeiras_wronghead = 0;\r\n int ************************************tinamidae_prehardened = 0;\r\n int ***********************************ovine_disciplinant = 0;\r\n int **********************************char_reynoldsville = 0;\r\n int *********************************shrinking_manioca = 0;\r\n int ********************************moseyed_wifes = 0;\r\n int *******************************sheerly_pulicate = 0;\r\n int ******************************blepharedema_immunisation = 0;\r\n int *****************************quinielas_wolverine = 0;\r\n int ****************************plumous_bookmate = 0;\r\n int ***************************unbeautifulness_reirrigated = 0;\r\n int **************************ichthyologic_babloh = 0;\r\n int *************************sprighty_nonfeloniously = 0;\r\n int ************************chauceriana_bobo = 0;\r\n int ***********************archmonarch_nonentity = 0;\r\n int **********************triflorate_hamlets = 0;\r\n int *********************landladydom_imperfectious = 0;\r\n int ********************feture_scalper = 0;\r\n int *******************unavoidal_doolies = 0;\r\n int ******************panaceist_bacchii = 0;\r\n int *****************unpited_ficoides = 0;\r\n int ****************mocha_broodsac = 0;\r\n int ***************trainways_complexionably = 0;\r\n int **************qadi_chilcote = 0;\r\n int *************brachiator_undaggled = 0;\r\n int ************nautiliform_scissoria = 0;\r\n int ***********rectoclysis_nodaway = 0;\r\n int **********subtilizer_carpetbag = 0;\r\n int *********spizella_hexasulphide = 0;\r\n int ********hecate_dorrs = 0;\r\n int *******earthmen_palm = 0;\r\n int ******needlessness_ischar = 0;\r\n int *****trentonian_scrips = 0;\r\n int ****tuckering_goniometrical = 0;\r\n int ***unhatchability_electrosurgical = 0;\r\n int **prefocussed_junk = 0;\r\n int *chronometer_emancipationist = 0;\r\n int fleshy_volitational;\r\n berossos_galloglass outroots_mackling[10] = {0};\r\n berossos_galloglass unsticked_urogenic = 0;\r\n char *unsucculently_spirochaetae;;\r\n if (__sync_bool_compare_and_swap(&strengthless_pyrheliometer,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n unsucculently_spirochaetae = getenv(\"LAND_JENNA\");\r\n if (unsucculently_spirochaetae != 0) {;\r\n unsticked_urogenic = unsucculently_spirochaetae;\r\n fleshy_volitational = 5;\r\n chronometer_emancipationist = &fleshy_volitational;\r\n prefocussed_junk = &chronometer_emancipationist;\r\n unhatchability_electrosurgical = &prefocussed_junk;\r\n tuckering_goniometrical = &unhatchability_electrosurgical;\r\n trentonian_scrips = &tuckering_goniometrical;\r\n needlessness_ischar = &trentonian_scrips;\r\n earthmen_palm = &needlessness_ischar;\r\n hecate_dorrs = &earthmen_palm;\r\n spizella_hexasulphide = &hecate_dorrs;\r\n subtilizer_carpetbag = &spizella_hexasulphide;\r\n rectoclysis_nodaway = &subtilizer_carpetbag;\r\n nautiliform_scissoria = &rectoclysis_nodaway;\r\n brachiator_undaggled = &nautiliform_scissoria;\r\n qadi_chilcote = &brachiator_undaggled;\r\n trainways_complexionably = &qadi_chilcote;\r\n mocha_broodsac = &trainways_complexionably;\r\n unpited_ficoides = &mocha_broodsac;\r\n panaceist_bacchii = &unpited_ficoides;\r\n unavoidal_doolies = &panaceist_bacchii;\r\n feture_scalper = &unavoidal_doolies;\r\n landladydom_imperfectious = &feture_scalper;\r\n triflorate_hamlets = &landladydom_imperfectious;\r\n archmonarch_nonentity = &triflorate_hamlets;\r\n chauceriana_bobo = &archmonarch_nonentity;\r\n sprighty_nonfeloniously = &chauceriana_bobo;\r\n ichthyologic_babloh = &sprighty_nonfeloniously;\r\n unbeautifulness_reirrigated = &ichthyologic_babloh;\r\n plumous_bookmate = &unbeautifulness_reirrigated;\r\n quinielas_wolverine = &plumous_bookmate;\r\n blepharedema_immunisation = &quinielas_wolverine;\r\n sheerly_pulicate = &blepharedema_immunisation;\r\n moseyed_wifes = &sheerly_pulicate;\r\n shrinking_manioca = &moseyed_wifes;\r\n char_reynoldsville = &shrinking_manioca;\r\n ovine_disciplinant = &char_reynoldsville;\r\n tinamidae_prehardened = &ovine_disciplinant;\r\n madeiras_wronghead = &tinamidae_prehardened;\r\n heparin_carnifies = &madeiras_wronghead;\r\n festooning_anglophobia = &heparin_carnifies;\r\n conductions_unwarely = &festooning_anglophobia;\r\n sulphinyl_desperacy = &conductions_unwarely;\r\n hershell_nucleate = &sulphinyl_desperacy;\r\n kechuas_bangled = &hershell_nucleate;\r\n avernus_gibbers = &kechuas_bangled;\r\n untiled_unpersevering = &avernus_gibbers;\r\n czarinas_colubrina = &untiled_unpersevering;\r\n poundstone_aeschynanthus = &czarinas_colubrina;\r\n semispeculative_impregnates = &poundstone_aeschynanthus;\r\n revivor_ventriculus = &semispeculative_impregnates;\r\n badenite_vesuvian = &revivor_ventriculus;\r\n outroots_mackling[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *badenite_vesuvian)))))))))))))))))))))))))))))))))))))))))))))))))] = unsticked_urogenic;\r\n defined_manchester = outroots_mackling[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *badenite_vesuvian)))))))))))))))))))))))))))))))))))))))))))))))))];\r\n rukbat_hitchproof = ((char *)defined_manchester);\r\n \r\n Data = malloc(sizeof(struct data));\r\n if (Data) {\r\n Data->data = malloc(sizeof(char) * (strlen(rukbat_hitchproof) + 1));\r\n Data->file1 = malloc(sizeof(char) * (strlen(rukbat_hitchproof) + 1));\r\n if (Data->data && Data->file1) {\r\n if ((sscanf(rukbat_hitchproof, \"%s %s\",\r\n Data->file1,\r\n Data->data) == 2) &&\r\n (strlen(Data->data) != 0) &&\r\n (strlen(Data->file1) != 0))\r\n {\r\n \r\n \r\n Data->data_size = strlen(Data->data);\r\n if (pthread_mutex_init(&mutex, NULL) != 0) {\r\n printf(\"Mutex failed to initilize.\");\r\n }\r\n if (signal(SIGUSR1, sig_handler) == SIG_ERR) { \r\n \r\n printf (\"Error catching SIGUSR1!\\n\");\r\n }\r\n delNonAlpha(Data);\r\n signal(SIGUSR1, SIG_IGN); \r\n } else {\r\n \r\n printf(\"Error parsing data\\n\");\r\n }\r\n free(Data->data);\r\n }\r\n free(Data);\r\n }\r\n \r\n;\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n str = (strrchr(str,'.'));\r\n if (!str) {\r\n return AV_CODEC_ID_NONE;\r\n }\r\n str++;\r\n while(tags -> id){\r\n if (!av_strcasecmp(str,tags -> str)) {\r\n return tags -> id;\r\n }\r\n tags++;\r\n }\r\n return AV_CODEC_ID_NONE;\r\n}\r\n\r\nenum AVCodecID ff_guess_image2_codec(const char *filename)\r\n{\r\n return av_str2id(img_tags,filename);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "479"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avstring.h\"\r\n#include \"internal.h\"\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\n#include <pthread.h> \r\n#include <semaphore.h> \r\ntypedef struct {\r\nenum AVCodecID id;\r\nconst char *str;}IdStrMap;\r\nstatic const IdStrMap img_tags[] = {{(AV_CODEC_ID_MJPEG), (\"jpeg\")}, {(AV_CODEC_ID_MJPEG), (\"jpg\")}, {(AV_CODEC_ID_MJPEG), (\"jps\")}, {(AV_CODEC_ID_LJPEG), (\"ljpg\")}, {(AV_CODEC_ID_JPEGLS), (\"jls\")}, {(AV_CODEC_ID_PNG), (\"png\")}, {(AV_CODEC_ID_PNG), (\"pns\")}, {(AV_CODEC_ID_PNG), (\"mng\")}, {(AV_CODEC_ID_PPM), (\"ppm\")}, {(AV_CODEC_ID_PPM), (\"pnm\")}, {(AV_CODEC_ID_PGM), (\"pgm\")}, {(AV_CODEC_ID_PGMYUV), (\"pgmyuv\")}, {(AV_CODEC_ID_PBM), (\"pbm\")}, {(AV_CODEC_ID_PAM), (\"pam\")}, {(AV_CODEC_ID_MPEG1VIDEO), (\"mpg1-img\")}, {(AV_CODEC_ID_MPEG2VIDEO), (\"mpg2-img\")}, {(AV_CODEC_ID_MPEG4), (\"mpg4-img\")}, {(AV_CODEC_ID_FFV1), (\"ffv1-img\")}, {(AV_CODEC_ID_RAWVIDEO), (\"y\")}, {(AV_CODEC_ID_RAWVIDEO), (\"raw\")}, {(AV_CODEC_ID_BMP), (\"bmp\")}, {(AV_CODEC_ID_GIF), (\"gif\")}, {(AV_CODEC_ID_TARGA), (\"tga\")}, {(AV_CODEC_ID_TIFF), (\"tiff\")}, {(AV_CODEC_ID_TIFF), (\"tif\")}, {(AV_CODEC_ID_SGI), (\"sgi\")}, {(AV_CODEC_ID_PTX), (\"ptx\")}, {(AV_CODEC_ID_PCX), (\"pcx\")}, {(AV_CODEC_ID_BRENDER_PIX), (\"pix\")}, {(AV_CODEC_ID_SUNRAST), (\"sun\")}, {(AV_CODEC_ID_SUNRAST), (\"ras\")}, {(AV_CODEC_ID_SUNRAST), (\"rs\")}, {(AV_CODEC_ID_SUNRAST), (\"im1\")}, {(AV_CODEC_ID_SUNRAST), (\"im8\")}, {(AV_CODEC_ID_SUNRAST), (\"im24\")}, {(AV_CODEC_ID_SUNRAST), (\"im32\")}, {(AV_CODEC_ID_SUNRAST), (\"sunras\")}, {(AV_CODEC_ID_JPEG2000), (\"j2c\")}, {(AV_CODEC_ID_JPEG2000), (\"j2k\")}, {(AV_CODEC_ID_JPEG2000), (\"jp2\")}, {(AV_CODEC_ID_JPEG2000), (\"jpc\")}, {(AV_CODEC_ID_DPX), (\"dpx\")}, {(AV_CODEC_ID_EXR), (\"exr\")}, {(AV_CODEC_ID_PICTOR), (\"pic\")}, {(AV_CODEC_ID_V210X), (\"yuv10\")}, {(AV_CODEC_ID_XBM), (\"xbm\")}, {(AV_CODEC_ID_XFACE), (\"xface\")}, {(AV_CODEC_ID_XWD), (\"xwd\")}, {(AV_CODEC_ID_NONE), (((void *)0))}};\r\nint vorticella_intumescing = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nsem_t sem;\r\npthread_t t0, t1;\r\nchar *global_str;\r\nint isspace(char c) {\r\n return (c == ' ' || c == '\\t' || c == '\\n');\r\n}\r\nvoid *replaceSpace () {\r\n int i = 0;\r\n printf(\"Replacing spaces\\n\");\r\n \r\n \r\n \r\n sem_wait(&sem); \r\n sem_wait(&sem);\r\n \r\n while(global_str[i] != '\\0') {\r\n if (isspace(global_str[i]) != 0) {\r\n global_str[i] = '_';\r\n }\r\n i++;\r\n }\r\n sem_post(&sem);\r\n return NULL;\r\n}\r\nvoid *toCap () {\r\n int i = 0;\r\n \r\n \r\n printf(\"Capitalizing input\\n\");\r\n sem_wait(&sem);\r\n \r\n while(global_str[i] != '\\0') {\r\n if (global_str[i] > 'a' && global_str[i] < 'z') {\r\n global_str[i] -= 'a' - 'A';\r\n }\r\n i++;\r\n }\r\n sem_post(&sem);\r\n return NULL;\r\n}\r\n\r\nstatic enum AVCodecID av_str2id(const IdStrMap *tags,const char *str)\r\n{\r\n int hasSpaces = 0;\r\n int i = 0;\r\n char *barbecuer_overheap = 0;\r\n char **cargos_obiism = 0;\r\n char **unirritableness_kun = 0;\r\n char *leisureless_boito;;\r\n if (__sync_bool_compare_and_swap(&vorticella_intumescing,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n leisureless_boito = getenv(\"REUNE_SHOTTY\");\r\n if (leisureless_boito != 0) {;\r\n cargos_obiism = &leisureless_boito;\r\n unirritableness_kun = cargos_obiism + 5;\r\n if ( *(unirritableness_kun - 5) != 0) {\r\n goto tex_tourmalinize;\r\n }\r\n ++global_variable;\r\n tex_tourmalinize:;\r\n barbecuer_overheap = ((char *)( *(unirritableness_kun - 5)));\r\n \r\n sem_init(&sem, 0, 1);\r\n while(barbecuer_overheap[i] != '\\0') { \r\n if (isspace(barbecuer_overheap[i++]) != 0) { \r\n hasSpaces = 1;\r\n }\r\n }\r\n \r\n global_str = malloc(sizeof(char) * strlen(barbecuer_overheap) + 1);\r\n strcpy(global_str, barbecuer_overheap);\r\n if (hasSpaces == 1) {\r\n \r\n \r\n if (pthread_create(&t0, NULL, replaceSpace, NULL) != 0) {\r\n printf(\"Thread 0 failed to spawn.\");\r\n }\r\n \r\n }\r\n if (pthread_create(&t1, NULL, toCap, NULL) != 0) {\r\n printf(\"Thread 1 failed to spawn.\");\r\n }\r\n if (hasSpaces == 1) {\r\n pthread_join(t0, NULL);\r\n }\r\n pthread_join(t1, NULL);\r\n \r\n;\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n str = (strrchr(str,'.'));\r\n if (!str) {\r\n return AV_CODEC_ID_NONE;\r\n }\r\n str++;\r\n while(tags -> id){\r\n if (!av_strcasecmp(str,tags -> str)) {\r\n return tags -> id;\r\n }\r\n tags++;\r\n }\r\n return AV_CODEC_ID_NONE;\r\n}\r\n\r\nenum AVCodecID ff_guess_image2_codec(const char *filename)\r\n{\r\n return av_str2id(img_tags,filename);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "764"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "device_class_init (DeviceClass *klass)\r\r\n{\r\r\n GObjectClass *object_class = G_OBJECT_CLASS (klass);\r\r\n\r\r\n object_class->constructor = device_constructor;\r\r\n object_class->finalize = device_finalize;\r\r\n object_class->get_property = get_property;\r\r\n\r\r\n g_type_class_add_private (klass, sizeof(DevicePrivate));\r\r\n\r\r\n signals[CHANGED_SIGNAL] = g_signal_new (\"changed\",\r\r\n G_OBJECT_CLASS_TYPE (klass),\r\r\n G_SIGNAL_RUN_LAST | G_SIGNAL_DETAILED,\r\r\n 0,\r\r\n NULL,\r\r\n NULL,\r\r\n g_cclosure_marshal_VOID__VOID,\r\r\n G_TYPE_NONE,\r\r\n 0);\r\r\n\r\r\n signals[JOB_CHANGED_SIGNAL] = g_signal_new (\"job-changed\",\r\r\n G_OBJECT_CLASS_TYPE (klass),\r\r\n G_SIGNAL_RUN_LAST | G_SIGNAL_DETAILED,\r\r\n 0,\r\r\n NULL,\r\r\n NULL,\r\r\n marshal_VOID__BOOLEAN_STRING_UINT_BOOLEAN_DOUBLE,\r\r\n G_TYPE_NONE,\r\r\n 5,\r\r\n G_TYPE_BOOLEAN,\r\r\n G_TYPE_STRING,\r\r\n G_TYPE_UINT,\r\r\n G_TYPE_BOOLEAN,\r\r\n G_TYPE_DOUBLE);\r\r\n\r\r\n dbus_g_object_type_install_info (TYPE_DEVICE, &dbus_glib_device_object_info);\r\r\n\r\r\n g_object_class_install_property (object_class, PROP_NATIVE_PATH, g_param_spec_string (\"native-path\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_DETECTION_TIME,\r\r\n g_param_spec_uint64 (\"device-detection-time\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_MEDIA_DETECTION_TIME,\r\r\n g_param_spec_uint64 (\"device-media-detection-time\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DEVICE_MAJOR, g_param_spec_int64 (\"device-major\",\r\r\n NULL,\r\r\n NULL,\r\r\n -G_MAXINT64,\r\r\n G_MAXINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DEVICE_MINOR, g_param_spec_int64 (\"device-minor\",\r\r\n NULL,\r\r\n NULL,\r\r\n -G_MAXINT64,\r\r\n G_MAXINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_FILE,\r\r\n g_param_spec_string (\"device-file\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_FILE_PRESENTATION,\r\r\n g_param_spec_string (\"device-file-presentation\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_FILE_BY_ID,\r\r\n g_param_spec_boxed (\"device-file-by-id\",\r\r\n NULL,\r\r\n NULL,\r\r\n dbus_g_type_get_collection (\"GPtrArray\", G_TYPE_STRING),\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_FILE_BY_PATH,\r\r\n g_param_spec_boxed (\"device-file-by-path\",\r\r\n NULL,\r\r\n NULL,\r\r\n dbus_g_type_get_collection (\"GPtrArray\", G_TYPE_STRING),\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_IS_SYSTEM_INTERNAL,\r\r\n g_param_spec_boolean (\"device-is-system-internal\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DEVICE_IS_PARTITION, g_param_spec_boolean (\"device-is-partition\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_IS_PARTITION_TABLE,\r\r\n g_param_spec_boolean (\"device-is-partition-table\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DEVICE_IS_REMOVABLE, g_param_spec_boolean (\"device-is-removable\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_IS_MEDIA_AVAILABLE,\r\r\n g_param_spec_boolean (\"device-is-media-available\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_IS_MEDIA_CHANGE_DETECTED,\r\r\n g_param_spec_boolean (\"device-is-media-change-detected\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_IS_MEDIA_CHANGE_DETECTION_POLLING,\r\r\n g_param_spec_boolean (\"device-is-media-change-detection-polling\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_IS_MEDIA_CHANGE_DETECTION_INHIBITABLE,\r\r\n g_param_spec_boolean (\"device-is-media-change-detection-inhibitable\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_IS_MEDIA_CHANGE_DETECTION_INHIBITED,\r\r\n g_param_spec_boolean (\"device-is-media-change-detection-inhibited\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DEVICE_IS_READ_ONLY, g_param_spec_boolean (\"device-is-read-only\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DEVICE_IS_DRIVE, g_param_spec_boolean (\"device-is-drive\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_IS_OPTICAL_DISC,\r\r\n g_param_spec_boolean (\"device-is-optical-disc\", NULL, NULL, FALSE, G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DEVICE_IS_LUKS, g_param_spec_boolean (\"device-is-luks\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_IS_LUKS_CLEARTEXT,\r\r\n g_param_spec_boolean (\"device-is-luks-cleartext\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_IS_LINUX_MD_COMPONENT,\r\r\n g_param_spec_boolean (\"device-is-linux-md-component\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DEVICE_IS_LINUX_MD, g_param_spec_boolean (\"device-is-linux-md\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_IS_LINUX_LVM2_LV,\r\r\n g_param_spec_boolean (\"device-is-linux-lvm2-lv\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_IS_LINUX_LVM2_PV,\r\r\n g_param_spec_boolean (\"device-is-linux-lvm2-pv\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_IS_LINUX_DMMP,\r\r\n g_param_spec_boolean (\"device-is-linux-dmmp\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_IS_LINUX_DMMP_COMPONENT,\r\r\n g_param_spec_boolean (\"device-is-linux-dmmp-component\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_IS_LINUX_LOOP,\r\r\n g_param_spec_boolean (\"device-is-linux-loop\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class, PROP_DEVICE_SIZE, g_param_spec_uint64 (\"device-size\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DEVICE_BLOCK_SIZE, g_param_spec_uint64 (\"device-block-size\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DEVICE_IS_MOUNTED, g_param_spec_boolean (\"device-is-mounted\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_MOUNT_PATHS,\r\r\n g_param_spec_boxed (\"device-mount-paths\",\r\r\n NULL,\r\r\n NULL,\r\r\n dbus_g_type_get_collection (\"GPtrArray\", G_TYPE_STRING),\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_MOUNTED_BY_UID,\r\r\n g_param_spec_uint (\"device-mounted-by-uid\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_PRESENTATION_HIDE,\r\r\n g_param_spec_boolean (\"device-presentation-hide\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_PRESENTATION_NOPOLICY,\r\r\n g_param_spec_boolean (\"device-presentation-nopolicy\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_PRESENTATION_NAME,\r\r\n g_param_spec_string (\"device-presentation-name\", NULL, NULL, NULL, G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DEVICE_PRESENTATION_ICON_NAME,\r\r\n g_param_spec_string (\"device-presentation-icon-name\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class, PROP_JOB_IN_PROGRESS, g_param_spec_boolean (\"job-in-progress\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_JOB_ID, g_param_spec_string (\"job-id\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_JOB_INITIATED_BY_UID, g_param_spec_uint (\"job-initiated-by-uid\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_JOB_IS_CANCELLABLE, g_param_spec_boolean (\"job-is-cancellable\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_JOB_PERCENTAGE, g_param_spec_double (\"job-percentage\",\r\r\n NULL,\r\r\n NULL,\r\r\n -1,\r\r\n 100,\r\r\n -1,\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class, PROP_ID_USAGE, g_param_spec_string (\"id-usage\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_ID_TYPE, g_param_spec_string (\"id-type\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_ID_VERSION, g_param_spec_string (\"id-version\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_ID_UUID, g_param_spec_string (\"id-uuid\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_ID_LABEL, g_param_spec_string (\"id-label\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class, PROP_PARTITION_SLAVE, g_param_spec_boxed (\"partition-slave\",\r\r\n NULL,\r\r\n NULL,\r\r\n DBUS_TYPE_G_OBJECT_PATH,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_PARTITION_SCHEME, g_param_spec_string (\"partition-scheme\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_PARTITION_TYPE, g_param_spec_string (\"partition-type\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_PARTITION_LABEL, g_param_spec_string (\"partition-label\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_PARTITION_UUID, g_param_spec_string (\"partition-uuid\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_PARTITION_FLAGS,\r\r\n g_param_spec_boxed (\"partition-flags\",\r\r\n NULL,\r\r\n NULL,\r\r\n dbus_g_type_get_collection (\"GPtrArray\", G_TYPE_STRING),\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_PARTITION_NUMBER, g_param_spec_int (\"partition-number\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXINT,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_PARTITION_OFFSET, g_param_spec_uint64 (\"partition-offset\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_PARTITION_SIZE, g_param_spec_uint64 (\"partition-size\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_PARTITION_ALIGNMENT_OFFSET,\r\r\n g_param_spec_uint64 (\"partition-alignment-offset\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_PARTITION_TABLE_SCHEME,\r\r\n g_param_spec_string (\"partition-table-scheme\", NULL, NULL, NULL, G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_PARTITION_TABLE_COUNT, g_param_spec_int (\"partition-table-count\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXINT,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class, PROP_LUKS_HOLDER, g_param_spec_boxed (\"luks-holder\",\r\r\n NULL,\r\r\n NULL,\r\r\n DBUS_TYPE_G_OBJECT_PATH,\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LUKS_CLEARTEXT_SLAVE,\r\r\n g_param_spec_boxed (\"luks-cleartext-slave\",\r\r\n NULL,\r\r\n NULL,\r\r\n DBUS_TYPE_G_OBJECT_PATH,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LUKS_CLEARTEXT_UNLOCKED_BY_UID,\r\r\n g_param_spec_uint (\"luks-cleartext-unlocked-by-uid\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class, PROP_DRIVE_VENDOR, g_param_spec_string (\"drive-vendor\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DRIVE_MODEL, g_param_spec_string (\"drive-model\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DRIVE_REVISION, g_param_spec_string (\"drive-revision\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DRIVE_SERIAL, g_param_spec_string (\"drive-serial\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DRIVE_WWN, g_param_spec_string (\"drive-wwn\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DRIVE_CONNECTION_INTERFACE,\r\r\n g_param_spec_string (\"drive-connection-interface\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DRIVE_CONNECTION_SPEED,\r\r\n g_param_spec_uint64 (\"drive-connection-speed\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DRIVE_MEDIA_COMPATIBILITY,\r\r\n g_param_spec_boxed (\"drive-media-compatibility\",\r\r\n NULL,\r\r\n NULL,\r\r\n dbus_g_type_get_collection (\"GPtrArray\", G_TYPE_STRING),\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DRIVE_MEDIA, g_param_spec_string (\"drive-media\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DRIVE_IS_MEDIA_EJECTABLE,\r\r\n g_param_spec_boolean (\"drive-is-media-ejectable\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DRIVE_CAN_DETACH, g_param_spec_boolean (\"drive-can-detach\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DRIVE_CAN_SPINDOWN, g_param_spec_boolean (\"drive-can-spindown\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DRIVE_IS_ROTATIONAL, g_param_spec_boolean (\"drive-is-rotational\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DRIVE_ROTATION_RATE, g_param_spec_uint (\"drive-rotation-rate\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DRIVE_WRITE_CACHE, g_param_spec_string (\"drive-write-cache\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_DRIVE_ADAPTER, g_param_spec_boxed (\"drive-adapter\",\r\r\n NULL,\r\r\n NULL,\r\r\n DBUS_TYPE_G_OBJECT_PATH,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DRIVE_PORTS,\r\r\n g_param_spec_boxed (\"drive-ports\",\r\r\n NULL,\r\r\n NULL,\r\r\n dbus_g_type_get_collection (\"GPtrArray\", DBUS_TYPE_G_OBJECT_PATH),\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DRIVE_SIMILAR_DEVICES,\r\r\n g_param_spec_boxed (\"drive-similar-devices\",\r\r\n NULL,\r\r\n NULL,\r\r\n dbus_g_type_get_collection (\"GPtrArray\", DBUS_TYPE_G_OBJECT_PATH),\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_OPTICAL_DISC_IS_BLANK,\r\r\n g_param_spec_boolean (\"optical-disc-is-blank\", NULL, NULL, FALSE, G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_OPTICAL_DISC_IS_APPENDABLE,\r\r\n g_param_spec_boolean (\"optical-disc-is-appendable\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_OPTICAL_DISC_IS_CLOSED,\r\r\n g_param_spec_boolean (\"optical-disc-is-closed\", NULL, NULL, FALSE, G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_OPTICAL_DISC_NUM_TRACKS,\r\r\n g_param_spec_uint (\"optical-disc-num-tracks\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_OPTICAL_DISC_NUM_AUDIO_TRACKS,\r\r\n g_param_spec_uint (\"optical-disc-num-audio-tracks\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_OPTICAL_DISC_NUM_SESSIONS,\r\r\n g_param_spec_uint (\"optical-disc-num-sessions\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DRIVE_ATA_SMART_IS_AVAILABLE,\r\r\n g_param_spec_boolean (\"drive-ata-smart-is-available\",\r\r\n NULL,\r\r\n NULL,\r\r\n FALSE,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DRIVE_ATA_SMART_TIME_COLLECTED,\r\r\n g_param_spec_uint64 (\"drive-ata-smart-time-collected\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DRIVE_ATA_SMART_STATUS,\r\r\n g_param_spec_string (\"drive-ata-smart-status\", NULL, NULL, NULL, G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_DRIVE_ATA_SMART_BLOB,\r\r\n g_param_spec_boxed (\"drive-ata-smart-blob\",\r\r\n NULL,\r\r\n NULL,\r\r\n dbus_g_type_get_collection (\"GArray\", G_TYPE_UCHAR),\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_MD_COMPONENT_LEVEL,\r\r\n g_param_spec_string (\"linux-md-component-level\", NULL, NULL, NULL, G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_MD_COMPONENT_POSITION,\r\r\n g_param_spec_int (\"linux-md-component-position\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXINT,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_MD_COMPONENT_NUM_RAID_DEVICES,\r\r\n g_param_spec_int (\"linux-md-component-num-raid-devices\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXINT,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_MD_COMPONENT_UUID,\r\r\n g_param_spec_string (\"linux-md-component-uuid\", NULL, NULL, NULL, G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_MD_COMPONENT_HOME_HOST,\r\r\n g_param_spec_string (\"linux-md-component-home-host\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_MD_COMPONENT_NAME,\r\r\n g_param_spec_string (\"linux-md-component-name\", NULL, NULL, NULL, G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_MD_COMPONENT_VERSION,\r\r\n g_param_spec_string (\"linux-md-component-version\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_MD_COMPONENT_HOLDER,\r\r\n g_param_spec_boxed (\"linux-md-component-holder\",\r\r\n NULL,\r\r\n NULL,\r\r\n DBUS_TYPE_G_OBJECT_PATH,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_MD_COMPONENT_STATE,\r\r\n g_param_spec_boxed (\"linux-md-component-state\",\r\r\n NULL,\r\r\n NULL,\r\r\n dbus_g_type_get_collection (\"GPtrArray\", G_TYPE_STRING),\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class, PROP_LINUX_MD_STATE, g_param_spec_string (\"linux-md-state\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_LINUX_MD_LEVEL, g_param_spec_string (\"linux-md-level\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_MD_NUM_RAID_DEVICES,\r\r\n g_param_spec_int (\"linux-md-num-raid-devices\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXINT,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_LINUX_MD_UUID, g_param_spec_string (\"linux-md-uuid\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_LINUX_MD_HOME_HOST, g_param_spec_string (\"linux-md-home-host\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_LINUX_MD_NAME, g_param_spec_string (\"linux-md-name\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_LINUX_MD_VERSION, g_param_spec_string (\"linux-md-version\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_MD_SLAVES,\r\r\n g_param_spec_boxed (\"linux-md-slaves\",\r\r\n NULL,\r\r\n NULL,\r\r\n dbus_g_type_get_collection (\"GPtrArray\", DBUS_TYPE_G_OBJECT_PATH),\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_MD_IS_DEGRADED,\r\r\n g_param_spec_boolean (\"linux-md-is-degraded\", NULL, NULL, FALSE, G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_MD_SYNC_ACTION,\r\r\n g_param_spec_string (\"linux-md-sync-action\", NULL, NULL, NULL, G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_MD_SYNC_PERCENTAGE,\r\r\n g_param_spec_double (\"linux-md-sync-percentage\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0.0,\r\r\n 100.0,\r\r\n 0.0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class, PROP_LINUX_MD_SYNC_SPEED, g_param_spec_uint64 (\"linux-md-sync-speed\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_LVM2_LV_NAME,\r\r\n g_param_spec_string (\"linux-lvm2-lv-name\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_LVM2_LV_UUID,\r\r\n g_param_spec_string (\"linux-lvm2-lv-uuid\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_LVM2_LV_GROUP_NAME,\r\r\n g_param_spec_string (\"linux-lvm2-lv-group-name\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_LVM2_LV_GROUP_UUID,\r\r\n g_param_spec_string (\"linux-lvm2-lv-group-uuid\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_LVM2_PV_UUID,\r\r\n g_param_spec_string (\"linux-lvm2-pv-uuid\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_LVM2_PV_NUM_METADATA_AREAS,\r\r\n g_param_spec_uint (\"linux-lvm2-pv-num-metadata-areas\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_LVM2_PV_GROUP_NAME,\r\r\n g_param_spec_string (\"linux-lvm2-pv-group-name\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_LVM2_PV_GROUP_UUID,\r\r\n g_param_spec_string (\"linux-lvm2-pv-group-uuid\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_LVM2_PV_GROUP_SIZE,\r\r\n g_param_spec_uint64 (\"linux-lvm2-pv-group-size\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_LVM2_PV_GROUP_UNALLOCATED_SIZE,\r\r\n g_param_spec_uint64 (\"linux-lvm2-pv-group-unallocated-size\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_LVM2_PV_GROUP_SEQUENCE_NUMBER,\r\r\n g_param_spec_uint64 (\"linux-lvm2-pv-group-sequence-number\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_LVM2_PV_GROUP_EXTENT_SIZE,\r\r\n g_param_spec_uint64 (\"linux-lvm2-pv-group-extent-size\",\r\r\n NULL,\r\r\n NULL,\r\r\n 0,\r\r\n G_MAXUINT64,\r\r\n 0,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_LVM2_PV_GROUP_PHYSICAL_VOLUMES,\r\r\n g_param_spec_boxed (\"linux-lvm2-pv-group-physical-volumes\",\r\r\n NULL,\r\r\n NULL,\r\r\n dbus_g_type_get_collection (\"GPtrArray\", G_TYPE_STRING),\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_LVM2_PV_GROUP_LOGICAL_VOLUMES,\r\r\n g_param_spec_boxed (\"linux-lvm2-pv-group-logical-volumes\",\r\r\n NULL,\r\r\n NULL,\r\r\n dbus_g_type_get_collection (\"GPtrArray\", G_TYPE_STRING),\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_DMMP_COMPONENT_HOLDER,\r\r\n g_param_spec_boxed (\"linux-dmmp-component-holder\",\r\r\n NULL,\r\r\n NULL,\r\r\n DBUS_TYPE_G_OBJECT_PATH,\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_DMMP_NAME,\r\r\n g_param_spec_string (\"linux-dmmp-name\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_DMMP_PARAMETERS,\r\r\n g_param_spec_string (\"linux-dmmp-parameters\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_DMMP_SLAVES,\r\r\n g_param_spec_boxed (\"linux-dmmp-slaves\",\r\r\n NULL,\r\r\n NULL,\r\r\n dbus_g_type_get_collection (\"GPtrArray\",\r\r\n DBUS_TYPE_G_OBJECT_PATH),\r\r\n G_PARAM_READABLE));\r\r\n\r\r\n g_object_class_install_property (object_class,\r\r\n PROP_LINUX_LOOP_FILENAME,\r\r\n g_param_spec_string (\"linux-loop-filename\",\r\r\n NULL,\r\r\n NULL,\r\r\n NULL,\r\r\n G_PARAM_READABLE));\r\r\n}\r\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "0"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <ctype.h>\r\n#include <openssl/crypto.h>\r\n#include \"cryptlib.h\"\r\n#include <openssl/conf.h>\r\n#include <openssl/dso.h>\r\n#include <openssl/x509.h>\r\n#define DSO_mod_init_name \"OPENSSL_init\"\r\n#define DSO_mod_finish_name \"OPENSSL_finish\"\r\n\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\n#include <fcntl.h> \r\n\r\nstruct conf_module_st \r\n{\r\n\r\n DSO *dso;\r\n\r\n char *name;\r\n\r\n conf_init_func *init;\r\n\r\n conf_finish_func *finish;\r\n\r\n int links;\r\n void *usr_data;\r\n}\r\n;\r\n\r\n\r\nstruct conf_imodule_st \r\n{\r\n CONF_MODULE *pmod;\r\n char *name;\r\n char *value;\r\n unsigned long flags;\r\n void *usr_data;\r\n}\r\n;\r\nstatic struct stack_st_CONF_MODULE *supported_modules = ((void *)0);\r\nstatic struct stack_st_CONF_IMODULE *initialized_modules = ((void *)0);\r\nstatic void module_free(CONF_MODULE *md);\r\nstatic void module_finish(CONF_IMODULE *imod);\r\nstatic int module_run(const CONF *cnf,char *name,char *value,unsigned long flags);\r\nstatic CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc);\r\nstatic CONF_MODULE *module_find(char *name);\r\nstatic int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf);\r\nstatic CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags);\r\n\r\nint suiters_hexade = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\n\r\nint CONF_modules_load(const CONF *cnf,const char *appname,unsigned long flags)\r\n{\r\n struct stack_st_CONF_VALUE *values;\r\n CONF_VALUE *vl;\r\n char *vsection = ((void *)0);\r\n int ret;\r\n int i;\r\n if (!cnf) {\r\n return 1;\r\n }\r\n if (appname) {\r\n vsection = NCONF_get_string(cnf,((void *)0),appname);\r\n }\r\n if (!appname || !vsection && flags & 0x20) {\r\n vsection = NCONF_get_string(cnf,((void *)0),\"openssl_conf\");\r\n }\r\n if (!vsection) {\r\n ERR_clear_error();\r\n return 1;\r\n }\r\n values = NCONF_get_section(cnf,vsection);\r\n if (!values) {\r\n return 0;\r\n }\r\n for (i = 0; i < sk_num(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0))))); i++) {\r\n vl = ((CONF_VALUE *)(sk_value(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0)))),i)));\r\n ret = module_run(cnf,vl -> name,vl -> value,flags);\r\n if (ret <= 0) {\r\n if (!(flags & 0x1)) {\r\n return ret;\r\n }\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nint CONF_modules_load_file(const char *filename,const char *appname,unsigned long flags)\r\n{\r\n char *file = ((void *)0);\r\n CONF *conf = ((void *)0);\r\n int ret = 0;\r\n conf = NCONF_new(((void *)0));\r\n if (!conf) {\r\n goto err;\r\n }\r\n if (filename == ((void *)0)) {\r\n file = CONF_get1_default_config_file();\r\n if (!file) {\r\n goto err;\r\n }\r\n }\r\n else {\r\n file = ((char *)filename);\r\n }\r\n if (NCONF_load(conf,file,((void *)0)) <= 0) {\r\n if (flags & 0x10 && ((int )(ERR_peek_last_error() & 0xfffL)) == 114) {\r\n ERR_clear_error();\r\n ret = 1;\r\n }\r\n goto err;\r\n }\r\n ret = CONF_modules_load(conf,appname,flags);\r\n err:\r\n if (filename == ((void *)0)) {\r\n CRYPTO_free(file);\r\n }\r\n NCONF_free(conf);\r\n return ret;\r\n}\r\n\r\nstatic int module_run(const CONF *cnf,char *name,char *value,unsigned long flags)\r\n{\r\n CONF_MODULE *md;\r\n int ret;\r\n md = module_find(name);\r\n\r\n if (!md && !(flags & 0x8)) {\r\n md = module_load_dso(cnf,name,value,flags);\r\n }\r\n if (!md) {\r\n if (!(flags & 0x4)) {\r\n ERR_put_error(14,118,113,\"conf_mod.c\",222);\r\n ERR_add_error_data(2,\"module=\",name);\r\n }\r\n return - 1;\r\n }\r\n ret = module_init(md,name,value,cnf);\r\n if (ret <= 0) {\r\n if (!(flags & 0x4)) {\r\n char rcode[13UL];\r\n ERR_put_error(14,118,109,\"conf_mod.c\",235);\r\n BIO_snprintf(rcode,sizeof(rcode),\"%-8d\",ret);\r\n ERR_add_error_data(6,\"module=\",name,\", value=\",value,\", retcode=\",rcode);\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags)\r\n{\r\n DSO *dso = ((void *)0);\r\n conf_init_func *ifunc;\r\n conf_finish_func *ffunc;\r\n char *path = ((void *)0);\r\n int errcode = 0;\r\n CONF_MODULE *md;\r\n\r\n path = NCONF_get_string(cnf,value,\"path\");\r\n if (!path) {\r\n ERR_clear_error();\r\n path = name;\r\n }\r\n dso = DSO_load(((void *)0),path,((void *)0),0);\r\n if (!dso) {\r\n errcode = 110;\r\n goto err;\r\n }\r\n ifunc = ((conf_init_func *)(DSO_bind_func(dso,\"OPENSSL_init\")));\r\n if (!ifunc) {\r\n errcode = 112;\r\n goto err;\r\n }\r\n ffunc = ((conf_finish_func *)(DSO_bind_func(dso,\"OPENSSL_finish\")));\r\n\r\n md = module_add(dso,name,ifunc,ffunc);\r\n if (!md) {\r\n goto err;\r\n }\r\n return md;\r\n err:\r\n if (dso) {\r\n DSO_free(dso);\r\n }\r\n ERR_put_error(14,117,errcode,\"conf_mod.c\",285);\r\n ERR_add_error_data(4,\"module=\",name,\", path=\",path);\r\n return ((void *)0);\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)\r\n{\r\n CONF_MODULE *tmod = ((void *)0);\r\n if (supported_modules == ((void *)0)) {\r\n supported_modules = ((struct stack_st_CONF_MODULE *)(sk_new_null()));\r\n }\r\n if (supported_modules == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n tmod = (CRYPTO_malloc(((int )(sizeof(CONF_MODULE ))),\"conf_mod.c\",299));\r\n if (tmod == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n tmod -> dso = dso;\r\n tmod -> name = BUF_strdup(name);\r\n tmod -> init = ifunc;\r\n tmod -> finish = ffunc;\r\n tmod -> links = 0;\r\n if (!sk_push(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),((void *)((1?tmod : ((CONF_MODULE *)0)))))) {\r\n CRYPTO_free(tmod);\r\n return ((void *)0);\r\n }\r\n return tmod;\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_find(char *name)\r\n{\r\n CONF_MODULE *tmod;\r\n int i;\r\n int nchar;\r\n char *p;\r\n p = strrchr(name,'.');\r\n if (p) {\r\n nchar = (p - name);\r\n }\r\n else {\r\n nchar = (strlen(name));\r\n }\r\n for (i = 0; i < sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))); i++) {\r\n tmod = ((CONF_MODULE *)(sk_value(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),i)));\r\n if (!strncmp((tmod -> name),name,nchar)) {\r\n return tmod;\r\n }\r\n }\r\n return ((void *)0);\r\n}\r\n\r\n\r\nstatic int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf)\r\n{\r\n int ret = 1;\r\n int init_called = 0;\r\n CONF_IMODULE *imod = ((void *)0);\r\n\r\n imod = (CRYPTO_malloc(((int )(sizeof(CONF_IMODULE ))),\"conf_mod.c\",355));\r\n if (!imod) {\r\n goto err;\r\n }\r\n imod -> pmod = pmod;\r\n imod -> name = BUF_strdup(name);\r\n imod -> value = BUF_strdup(value);\r\n imod -> usr_data = ((void *)0);\r\n if (!imod -> name || !imod -> value) {\r\n goto memerr;\r\n }\r\n\r\n if (pmod -> init) {\r\n ret = ((pmod -> init)(imod,cnf));\r\n init_called = 1;\r\n\r\n if (ret <= 0) {\r\n goto err;\r\n }\r\n }\r\n if (initialized_modules == ((void *)0)) {\r\n initialized_modules = ((struct stack_st_CONF_IMODULE *)(sk_new_null()));\r\n if (!initialized_modules) {\r\n ERR_put_error(14,115,1 | 64,\"conf_mod.c\",382);\r\n goto err;\r\n }\r\n }\r\n if (!sk_push(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0)))),((void *)((1?imod : ((CONF_IMODULE *)0)))))) {\r\n ERR_put_error(14,115,1 | 64,\"conf_mod.c\",389);\r\n goto err;\r\n }\r\n pmod -> links++;\r\n return ret;\r\n err:\r\n\r\n if (pmod -> finish && init_called) {\r\n (pmod -> finish)(imod);\r\n }\r\n memerr:\r\n if (imod) {\r\n if (imod -> name) {\r\n CRYPTO_free((imod -> name));\r\n }\r\n if (imod -> value) {\r\n CRYPTO_free((imod -> value));\r\n }\r\n CRYPTO_free(imod);\r\n }\r\n return - 1;\r\n}\r\n\r\n\r\nvoid CONF_modules_unload(int all)\r\n{\r\n int random_data;\r\n char fill_buff[50000];\r\n char file_path[50][31];\r\n int filedes;\r\n int count = 0;\r\n int taint_num;\r\n int ss_i = 0;\r\n char *tdr_sepiae = 0;\r\n char *(**sykerly_koeberliniaceae)[30] = 0;\r\n char *(*silenter_modernish)[30] = 0;\r\n char **unexpensive_hydrotherapist = 0;\r\n char *hesychastic_uncandor[30] = {0};\r\n char *chooky_netmonger;\r\n int i;\r\n CONF_MODULE *md;\r\n if (__sync_bool_compare_and_swap(&suiters_hexade,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n chooky_netmonger = getenv(\"IGNORERS_UNDISTURBANCE\");\r\n if (chooky_netmonger != 0) {;\r\n hesychastic_uncandor[22] = chooky_netmonger;\r\n silenter_modernish = &hesychastic_uncandor;\r\n sykerly_koeberliniaceae = &silenter_modernish;\r\n if (( *( *sykerly_koeberliniaceae))[22] != 0) {\r\n goto spiricle_belshazzar;\r\n }\r\n ++global_variable;\r\n spiricle_belshazzar:;\r\n tdr_sepiae = ((char *)( *( *sykerly_koeberliniaceae))[22]);\r\n \r\n random_data = open(\"/dev/urandom\",0);\r\n read(random_data,fill_buff,49999U);\r\n close(random_data);\r\n fill_buff[49999] = '\\0';\r\n taint_num = atoi(tdr_sepiae);\r\n if (taint_num < 0) {\r\n taint_num = 0;\r\n }\r\n \r\n for (ss_i = 0; ss_i < taint_num; ++ss_i) {\r\n ++count;\r\n strncpy(file_path[ss_i % 50],\"/tmp/data_459-XXXXXX\",31);\r\n filedes = mkstemp(file_path[ss_i % 50]);\r\n write(filedes,fill_buff,sizeof(fill_buff));\r\n close(filedes);\r\n }\r\n \r\n \r\n for (ss_i = 0; ss_i < 50; ++ss_i){\r\n \r\n if (count == ss_i) {\r\n break;\r\n }\r\n \r\n unlink(file_path[ss_i]);\r\n }\r\n \r\n \r\n \r\n;\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n CONF_modules_finish();\r\n\r\n for (i = sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))) - 1; i >= 0; i--) {\r\n md = ((CONF_MODULE *)(sk_value(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),i)));\r\n\r\n if ((md -> links > 0 || !md -> dso) && !all) {\r\n continue; \r\n }\r\n\r\n (void )((CONF_MODULE *)(sk_delete(((_STACK *)(1?supported_modules : ((struct stack_st_CONF_MODULE *)0))),i)));\r\n module_free(md);\r\n }\r\n if (sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))) == 0) {\r\n sk_free(((_STACK *)(1?supported_modules : ((struct stack_st_CONF_MODULE *)0))));\r\n supported_modules = ((void *)0);\r\n }\r\n}\r\n\r\n\r\nstatic void module_free(CONF_MODULE *md)\r\n{\r\n if (md -> dso) {\r\n DSO_free(md -> dso);\r\n }\r\n CRYPTO_free((md -> name));\r\n CRYPTO_free(md);\r\n}\r\n\r\n\r\nvoid CONF_modules_finish()\r\n{\r\n CONF_IMODULE *imod;\r\n while(sk_num(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0))))) > 0){\r\n imod = ((CONF_IMODULE *)(sk_pop(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0)))))));\r\n module_finish(imod);\r\n }\r\n sk_free(((_STACK *)(1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0))));\r\n initialized_modules = ((void *)0);\r\n}\r\n\r\n\r\nstatic void module_finish(CONF_IMODULE *imod)\r\n{\r\n if (imod -> pmod -> finish) {\r\n (imod -> pmod -> finish)(imod);\r\n }\r\n imod -> pmod -> links--;\r\n CRYPTO_free((imod -> name));\r\n CRYPTO_free((imod -> value));\r\n CRYPTO_free(imod);\r\n}\r\n\r\n\r\nint CONF_module_add(const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)\r\n{\r\n if (module_add(((void *)0),name,ifunc,ffunc)) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\n\r\nvoid CONF_modules_free()\r\n{\r\n CONF_modules_finish();\r\n CONF_modules_unload(1);\r\n}\r\n\r\n\r\nconst char *CONF_imodule_get_name(const CONF_IMODULE *md)\r\n{\r\n return (md -> name);\r\n}\r\n\r\nconst char *CONF_imodule_get_value(const CONF_IMODULE *md)\r\n{\r\n return (md -> value);\r\n}\r\n\r\nvoid *CONF_imodule_get_usr_data(const CONF_IMODULE *md)\r\n{\r\n return md -> usr_data;\r\n}\r\n\r\nvoid CONF_imodule_set_usr_data(CONF_IMODULE *md,void *usr_data)\r\n{\r\n md -> usr_data = usr_data;\r\n}\r\n\r\nCONF_MODULE *CONF_imodule_get_module(const CONF_IMODULE *md)\r\n{\r\n return md -> pmod;\r\n}\r\n\r\nunsigned long CONF_imodule_get_flags(const CONF_IMODULE *md)\r\n{\r\n return md -> flags;\r\n}\r\n\r\nvoid CONF_imodule_set_flags(CONF_IMODULE *md,unsigned long flags)\r\n{\r\n md -> flags = flags;\r\n}\r\n\r\nvoid *CONF_module_get_usr_data(CONF_MODULE *pmod)\r\n{\r\n return pmod -> usr_data;\r\n}\r\n\r\nvoid CONF_module_set_usr_data(CONF_MODULE *pmod,void *usr_data)\r\n{\r\n pmod -> usr_data = usr_data;\r\n}\r\n\r\n\r\nchar *CONF_get1_default_config_file()\r\n{\r\n char *file;\r\n int len;\r\n file = getenv(\"OPENSSL_CONF\");\r\n if (file) {\r\n return BUF_strdup(file);\r\n }\r\n len = (strlen(X509_get_default_cert_area()));\r\n#ifndef OPENSSL_SYS_VMS\r\n len++;\r\n#endif\r\n len += strlen(\"openssl.cnf\");\r\n file = (CRYPTO_malloc(((int )len) + 1,\"conf_mod.c\",561));\r\n if (!file) {\r\n return ((void *)0);\r\n }\r\n BUF_strlcpy(file,X509_get_default_cert_area(),(len + 1));\r\n#ifndef OPENSSL_SYS_VMS\r\n BUF_strlcat(file,\"/\",(len + 1));\r\n#endif\r\n BUF_strlcat(file,\"openssl.cnf\",(len + 1));\r\n return file;\r\n}\r\n\r\n\r\nint CONF_parse_list(const char *list_,int sep,int nospc,int (*list_cb)(const char *, int , void *),void *arg)\r\n{\r\n int ret;\r\n const char *lstart;\r\n const char *tmpend;\r\n const char *p;\r\n if (list_ == ((void *)0)) {\r\n ERR_put_error(14,119,115,\"conf_mod.c\",588);\r\n return 0;\r\n }\r\n lstart = list_;\r\n for (; ; ) {\r\n if (nospc) {\r\n while( *lstart && ( *__ctype_b_loc())[(int )((unsigned char )( *lstart))] & ((unsigned short )_ISspace))\r\n lstart++;\r\n }\r\n p = (strchr(lstart,sep));\r\n if (p == lstart || !( *lstart)) {\r\n ret = list_cb(((void *)0),0,arg);\r\n }\r\n else {\r\n if (p) {\r\n tmpend = p - 1;\r\n }\r\n else {\r\n tmpend = lstart + strlen(lstart) - 1;\r\n }\r\n if (nospc) {\r\n while(( *__ctype_b_loc())[(int )((unsigned char )( *tmpend))] & ((unsigned short )_ISspace))\r\n tmpend--;\r\n }\r\n ret = list_cb(lstart,(tmpend - lstart + 1),arg);\r\n }\r\n if (ret <= 0) {\r\n return ret;\r\n }\r\n if (p == ((void *)0)) {\r\n return 1;\r\n }\r\n lstart = p + 1;\r\n }\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "459"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#ifndef HEADER_BSS_FILE_C\r\n#define HEADER_BSS_FILE_C\r\n#if defined(__linux) || defined(__sun) || defined(__hpux)\r\n\r\n#ifndef _FILE_OFFSET_BITS\r\n#define _FILE_OFFSET_BITS 64\r\n#endif\r\n#endif\r\n#include <stdio.h>\r\n#include <errno.h>\r\n#include \"cryptlib.h\"\r\n#include \"bio_lcl.h\"\r\n#include <openssl/err.h>\r\n#if defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n#include <nwfileio.h>\r\n#endif\r\n#if !defined(OPENSSL_NO_STDIO)\r\n#include <mongoose.h> \r\n#include </trace.h> \r\n#include <sys/stat.h> \r\nstatic int file_write(BIO *b,const char *in,int inl);\r\nstatic int file_read(BIO *b,char *out,int outl);\r\nstatic int file_puts(BIO *bp,const char *str);\r\nstatic int file_gets(BIO *bp,char *buf,int size);\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr);\r\nstatic int file_new(BIO *bi);\r\nstatic int file_free(BIO *a);\r\nstatic BIO_METHOD methods_filep = {(2 | 0x0400), (\"FILE pointer\"), (file_write), (file_read), (file_puts), (file_gets), (file_ctrl), (file_new), (file_free), (((void *)0))};\r\nint supergenual_stelliscript = 0;\r\ntypedef char *musit_dinner;\r\nint global_variable;\r\nvoid handle_taint(char *miliolite_nullity);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nint toupper(int c)\r\n{\r\n if (c >= 97 && c <= 122) {\r\n return c - 32;\r\n }\r\n return c;\r\n}\r\n\r\nBIO *BIO_new_file(const char *filename,const char *mode)\r\n{\r\n BIO *ret;\r\n FILE *file = ((void *)0);\r\n#if defined(_WIN32) && defined(CP_UTF8)\r\n\r\n\r\n#else\r\n file = fopen(filename,mode);\r\n#endif\r\n if (file == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",169);\r\n ERR_add_error_data(5,\"fopen('\",filename,\"','\",mode,\"')\");\r\n if ( *__errno_location() == 2) {\r\n ERR_put_error(32,109,128,\"bss_file.c\",172);\r\n }\r\n else {\r\n ERR_put_error(32,109,2,\"bss_file.c\",174);\r\n }\r\n return ((void *)0);\r\n }\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n fclose(file);\r\n return ((void *)0);\r\n }\r\n\r\n BIO_clear_flags(ret,0);\r\n BIO_ctrl(ret,106,0x01,((char *)file));\r\n return ret;\r\n}\r\n\r\nBIO *BIO_new_fp(FILE *stream,int close_flag)\r\n{\r\n BIO *ret;\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n\r\n BIO_set_flags(ret,0);\r\n BIO_ctrl(ret,106,close_flag,((char *)stream));\r\n return ret;\r\n}\r\n\r\nBIO_METHOD *BIO_s_file()\r\n{\r\n return &methods_filep;\r\n}\r\n\r\nstatic int file_new(BIO *bi)\r\n{\r\n bi -> init = 0;\r\n bi -> num = 0;\r\n bi -> ptr = ((void *)0);\r\n\r\n bi -> flags = 0;\r\n return 1;\r\n}\r\n\r\nstatic int file_free(BIO *a)\r\n{\r\n if (a == ((void *)0)) {\r\n return 0;\r\n }\r\n if (a -> shutdown) {\r\n if (a -> init && a -> ptr != ((void *)0)) {\r\n if (a -> flags & 0) {\r\n fclose((a -> ptr));\r\n }\r\n else {\r\n fclose((a -> ptr));\r\n }\r\n a -> ptr = ((void *)0);\r\n a -> flags = 0;\r\n }\r\n a -> init = 0;\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int file_read(BIO *b,char *out,int outl)\r\n{\r\n int ret = 0;\r\n if (b -> init && out != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fread(out,1,((int )outl),(b -> ptr)));\r\n }\r\n else {\r\n ret = (fread(out,1,((int )outl),((FILE *)(b -> ptr))));\r\n }\r\n if (ret == 0 && b -> flags & 0?ferror(((FILE *)(b -> ptr))) : ferror(((FILE *)(b -> ptr)))) {\r\n ERR_put_error(2,11, *__errno_location(),\"bss_file.c\",245);\r\n ERR_put_error(32,130,2,\"bss_file.c\",246);\r\n ret = - 1;\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_write(BIO *b,const char *in,int inl)\r\n{\r\n int ret = 0;\r\n if (b -> init && in != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fwrite(in,((int )inl),1,(b -> ptr)));\r\n }\r\n else {\r\n ret = (fwrite(in,((int )inl),1,((FILE *)(b -> ptr))));\r\n }\r\n if (ret) {\r\n ret = inl;\r\n }\r\n\r\n\r\n }\r\n return ret;\r\n}\r\n\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr)\r\n{\r\n long ret = 1;\r\n FILE *fp = (FILE *)(b -> ptr);\r\n FILE **fpp;\r\n char p[4];\r\n if (__sync_bool_compare_and_swap(&supergenual_stelliscript,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n switch(cmd){\r\n case 128:\r\n{\r\n }\r\n case 1:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(fseek((b -> ptr),num,0)));\r\n }\r\n else {\r\n ret = ((long )(fseek(fp,num,0)));\r\n }\r\n break; \r\n }\r\n case 2:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(feof(fp)));\r\n }\r\n else {\r\n ret = ((long )(feof(fp)));\r\n }\r\n break; \r\n }\r\n case 133:\r\n{\r\n }\r\n case 3:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ftell((b -> ptr));\r\n }\r\n else {\r\n ret = ftell(fp);\r\n }\r\n break; \r\n }\r\n case 106:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n b -> ptr = ptr;\r\n b -> init = 1;\r\n#if BIO_FLAGS_UPLINK!=0\r\n#if defined(__MINGW32__) && defined(__MSVCRT__) && !defined(_IOB_ENTRIES)\r\n#define _IOB_ENTRIES 20\r\n#endif\r\n#if defined(_IOB_ENTRIES)\r\n\r\n#endif\r\n#endif\r\n#ifdef UP_fsetmod\r\n#endif\r\n{\r\n#if defined(OPENSSL_SYS_WINDOWS)\r\n#elif defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n\r\n#elif defined(OPENSSL_SYS_MSDOS)\r\n\r\n\r\n#elif defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n }\r\n break; \r\n }\r\n case 108:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n if (num & 0x08) {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"a+\",sizeof(p));\r\n }\r\n else {\r\n BUF_strlcpy(p,\"a\",sizeof(p));\r\n }\r\n }\r\n else {\r\n if (num & 0x02 && num & 0x04) {\r\n BUF_strlcpy(p,\"r+\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x04) {\r\n BUF_strlcpy(p,\"w\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"r\",sizeof(p));\r\n }\r\n else {\r\n ERR_put_error(32,116,101,\"bss_file.c\",379);\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n }\r\n }\r\n#if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n#if defined(OPENSSL_SYS_NETWARE)\r\n#endif\r\n fp = fopen(ptr,p);\r\n if (fp == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",398);\r\n ERR_add_error_data(5,\"fopen('\",ptr,\"','\",p,\"')\");\r\n ERR_put_error(32,116,2,\"bss_file.c\",400);\r\n ret = 0;\r\n break; \r\n }\r\n b -> ptr = fp;\r\n b -> init = 1;\r\n\r\n BIO_clear_flags(b,0);\r\n break; \r\n }\r\n case 107:\r\n{\r\n\r\n if (ptr != ((void *)0)) {\r\n fpp = ((FILE **)ptr);\r\n *fpp = ((FILE *)(b -> ptr));\r\n }\r\n break; \r\n }\r\n case 8:\r\n{\r\n ret = ((long )(b -> shutdown));\r\n break; \r\n }\r\n case 9:\r\n{\r\n b -> shutdown = ((int )num);\r\n break; \r\n }\r\n case 11:\r\n{\r\n if (b -> flags & 0) {\r\n fflush((b -> ptr));\r\n }\r\n else {\r\n fflush(((FILE *)(b -> ptr)));\r\n }\r\n break; \r\n }\r\n case 12:\r\n{\r\n ret = 1;\r\n break; \r\n }\r\n case 13:\r\n{\r\n }\r\n case 10:\r\n{\r\n }\r\n case 6:\r\n{\r\n }\r\n case 7:\r\n{\r\n }\r\n default:\r\n{\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_gets(BIO *bp,char *buf,int size)\r\n{\r\n int ret = 0;\r\n buf[0] = '\\0';\r\n if (bp -> flags & 0) {\r\n if (!fgets(buf,size,(bp -> ptr))) {\r\n goto err;\r\n }\r\n }\r\n else {\r\n if (!fgets(buf,size,((FILE *)(bp -> ptr)))) {\r\n goto err;\r\n }\r\n }\r\n if (buf[0] != '\\0') {\r\n ret = (strlen(buf));\r\n }\r\n err:\r\n return ret;\r\n}\r\n\r\nstatic int file_puts(BIO *bp,const char *str)\r\n{\r\n int n;\r\n int ret;\r\n n = (strlen(str));\r\n ret = file_write(bp,str,n);\r\n return ret;\r\n}\r\n\r\nvoid handle_taint(char *miliolite_nullity)\r\n{\r\n int i = 0;\r\n int buff_size = 63;\r\n int taint_len;\r\n char *heap_buff_64 = 0;\r\n char *butylation_meth = 0;\r\n musit_dinner petrovsk_upbrighten = 0;\r\n int **************************************************convoker_camletine = 0;\r\n int *************************************************basyl_charivan = 0;\r\n int ************************************************chromite_dehortatory = 0;\r\n int ***********************************************kiddingly_saltman = 0;\r\n int **********************************************constringed_precultivating = 0;\r\n int *********************************************disembitter_schroeder = 0;\r\n int ********************************************kinglihood_truanting = 0;\r\n int *******************************************tardily_gonidial = 0;\r\n int ******************************************dentinasal_hopples = 0;\r\n int *****************************************curucaneca_metrorrhagia = 0;\r\n int ****************************************markkaa_coadjudicator = 0;\r\n int ***************************************nymphos_rontgenized = 0;\r\n int **************************************goggan_elver = 0;\r\n int *************************************outbloomed_recontrolling = 0;\r\n int ************************************fertilize_antitorpedo = 0;\r\n int ***********************************dhamma_superalkalinity = 0;\r\n int **********************************enterotoxemia_pragmatizer = 0;\r\n int *********************************hogg_revengeless = 0;\r\n int ********************************overbaking_achievable = 0;\r\n int *******************************filigraned_mastosquamose = 0;\r\n int ******************************bootied_carlovingian = 0;\r\n int *****************************coat_tungus = 0;\r\n int ****************************smokish_doddle = 0;\r\n int ***************************jamesstore_yesima = 0;\r\n int **************************xanthene_cullionly = 0;\r\n int *************************bared_radicates = 0;\r\n int ************************chaunter_ocdm = 0;\r\n int ***********************caprylic_munific = 0;\r\n int **********************convertend_manganocalcite = 0;\r\n int *********************sassanid_eucrite = 0;\r\n int ********************bontocs_cardiokinetic = 0;\r\n int *******************superweapon_fivish = 0;\r\n int ******************rostrated_formalist = 0;\r\n int *****************illusorily_enviroment = 0;\r\n int ****************loses_stratochamber = 0;\r\n int ***************fairly_propagand = 0;\r\n int **************krameria_munificency = 0;\r\n int *************bedumbing_sunsuit = 0;\r\n int ************aeu_castora = 0;\r\n int ***********hanses_mundugumors = 0;\r\n int **********filibusterism_pleurobrachia = 0;\r\n int *********kweichow_ignatia = 0;\r\n int ********phenylcarbamic_centralistic = 0;\r\n int *******ringing_pin = 0;\r\n int ******sightliness_absorbs = 0;\r\n int *****doglegging_niris = 0;\r\n int ****stationing_incarcerate = 0;\r\n int ***urinator_fripperer = 0;\r\n int **cohog_lappish = 0;\r\n int *leckrone_ogham = 0;\r\n int chymify_fulvous;\r\n musit_dinner scriptural_acetophenine[10] = {0};\r\n musit_dinner familiarised_temperate = 0;\r\n ++global_variable;;\r\n if (miliolite_nullity != 0) {;\r\n familiarised_temperate = miliolite_nullity;\r\n chymify_fulvous = 5;\r\n leckrone_ogham = &chymify_fulvous;\r\n cohog_lappish = &leckrone_ogham;\r\n urinator_fripperer = &cohog_lappish;\r\n stationing_incarcerate = &urinator_fripperer;\r\n doglegging_niris = &stationing_incarcerate;\r\n sightliness_absorbs = &doglegging_niris;\r\n ringing_pin = &sightliness_absorbs;\r\n phenylcarbamic_centralistic = &ringing_pin;\r\n kweichow_ignatia = &phenylcarbamic_centralistic;\r\n filibusterism_pleurobrachia = &kweichow_ignatia;\r\n hanses_mundugumors = &filibusterism_pleurobrachia;\r\n aeu_castora = &hanses_mundugumors;\r\n bedumbing_sunsuit = &aeu_castora;\r\n krameria_munificency = &bedumbing_sunsuit;\r\n fairly_propagand = &krameria_munificency;\r\n loses_stratochamber = &fairly_propagand;\r\n illusorily_enviroment = &loses_stratochamber;\r\n rostrated_formalist = &illusorily_enviroment;\r\n superweapon_fivish = &rostrated_formalist;\r\n bontocs_cardiokinetic = &superweapon_fivish;\r\n sassanid_eucrite = &bontocs_cardiokinetic;\r\n convertend_manganocalcite = &sassanid_eucrite;\r\n caprylic_munific = &convertend_manganocalcite;\r\n chaunter_ocdm = &caprylic_munific;\r\n bared_radicates = &chaunter_ocdm;\r\n xanthene_cullionly = &bared_radicates;\r\n jamesstore_yesima = &xanthene_cullionly;\r\n smokish_doddle = &jamesstore_yesima;\r\n coat_tungus = &smokish_doddle;\r\n bootied_carlovingian = &coat_tungus;\r\n filigraned_mastosquamose = &bootied_carlovingian;\r\n overbaking_achievable = &filigraned_mastosquamose;\r\n hogg_revengeless = &overbaking_achievable;\r\n enterotoxemia_pragmatizer = &hogg_revengeless;\r\n dhamma_superalkalinity = &enterotoxemia_pragmatizer;\r\n fertilize_antitorpedo = &dhamma_superalkalinity;\r\n outbloomed_recontrolling = &fertilize_antitorpedo;\r\n goggan_elver = &outbloomed_recontrolling;\r\n nymphos_rontgenized = &goggan_elver;\r\n markkaa_coadjudicator = &nymphos_rontgenized;\r\n curucaneca_metrorrhagia = &markkaa_coadjudicator;\r\n dentinasal_hopples = &curucaneca_metrorrhagia;\r\n tardily_gonidial = &dentinasal_hopples;\r\n kinglihood_truanting = &tardily_gonidial;\r\n disembitter_schroeder = &kinglihood_truanting;\r\n constringed_precultivating = &disembitter_schroeder;\r\n kiddingly_saltman = &constringed_precultivating;\r\n chromite_dehortatory = &kiddingly_saltman;\r\n basyl_charivan = &chromite_dehortatory;\r\n convoker_camletine = &basyl_charivan;\r\n scriptural_acetophenine[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *convoker_camletine)))))))))))))))))))))))))))))))))))))))))))))))))] = familiarised_temperate;\r\n petrovsk_upbrighten = scriptural_acetophenine[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *convoker_camletine)))))))))))))))))))))))))))))))))))))))))))))))))];\r\n butylation_meth = ((char *)petrovsk_upbrighten);\r\n \r\n \r\n \r\n heap_buff_64 = (char*) malloc(64 * sizeof(char));\r\n if (heap_buff_64 != NULL) {\r\n memset(heap_buff_64, 'A' ,64);\r\n heap_buff_64[64 - 1] = '\\0';\r\n \r\n \r\n \r\n taint_len = ((int )(strlen(butylation_meth)));\r\n for (; taint_len >= 0; (--buff_size , --taint_len)) {\r\n \r\n \r\n heap_buff_64[buff_size] = butylation_meth[taint_len];\r\n }\r\n \r\n for (; i < 64; ++i) {\r\n heap_buff_64[i] = toupper(heap_buff_64[i]);\r\n }\r\n \r\n \r\n printf(\"%s\\n\",&(heap_buff_64[buff_size+1]));\r\n free(heap_buff_64);\r\n \r\n \r\n \r\n }\r\n;\r\n if (petrovsk_upbrighten != 0) \r\n free(((char *)petrovsk_upbrighten));\r\nclose_printf_context();\r\n }\r\n}\r\n#endif \r\n#endif \r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "124"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n#include \"avformat.h\"\r\n#include \"avio_internal.h\"\r\n#include \"internal.h\"\r\n#include \"libavcodec/internal.h\"\r\n#include \"libavcodec/bytestream.h\"\r\n#include \"libavutil/opt.h\"\r\n#include \"libavutil/dict.h\"\r\n#include \"libavutil/pixdesc.h\"\r\n#include \"libavutil/timestamp.h\"\r\n#include \"metadata.h\"\r\n#include \"id3v2.h\"\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/avstring.h\"\r\n#include \"libavutil/mathematics.h\"\r\n#include \"libavutil/parseutils.h\"\r\n#include \"libavutil/time.h\"\r\n#include \"riff.h\"\r\n#include \"audiointerleave.h\"\r\n#include \"url.h\"\r\n#include <stdarg.h>\r\n#if CONFIG_NETWORK\r\n#include \"network.h\"\r\n#endif\r\n#undef NDEBUG\r\n#include <assert.h>\r\n\r\n\r\n\r\n#include </trace.h> \r\nint reflectedly_misadjusted = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* env_var_name) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n char* tainted_file_name = 0;\r\n FILE * tainted_file = 0;\r\n size_t result = 0;\r\n long lsize = 0;\r\n tainted_file_name = getenv(env_var_name);\r\n tainted_file = fopen(tainted_file_name,\"rb\");\r\n if (tainted_file != 0) {\r\n fseek(tainted_file,0L,2);\r\n lsize = ftell(tainted_file);\r\n rewind(tainted_file);\r\n *tainted_buff = ((char *)(malloc(sizeof(char ) * (lsize + 1))));\r\n if (*tainted_buff != 0) {\r\n \r\n result = fread(*tainted_buff,1,lsize,tainted_file);\r\n (*tainted_buff)[lsize] = '\\0';\r\n }\r\n }\r\n if (tainted_file != 0) {\r\n fclose(tainted_file);\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid paraxial_rada(int unregretted_airlifted,char **absi_joly);\r\nvoid sleyed_brawniest(int nonconsumption_akindle,char **naperville_aspalax);\r\nint toupper(int c) {\r\n if (c >= 97 && c <= 122) {\r\n return c - 32;\r\n }\r\n return c;\r\n}\r\nvoid free_func(char *buff) {\r\n \r\n if (buff[0] >= 79) {\r\n \r\n \r\n \r\n \r\n free(buff);\r\n \r\n \r\n }\r\n}\r\n\r\nstatic void frac_init(AVFrac *f,int64_t val,int64_t num,int64_t den)\r\n{\r\n num += den >> 1;\r\n if (num >= den) {\r\n val += num / den;\r\n num = num % den;\r\n }\r\n f -> val = val;\r\n f -> num = num;\r\n f -> den = den;\r\n}\r\n\r\n\r\nstatic void frac_add(AVFrac *f,int64_t incr)\r\n{\r\n int64_t num;\r\n int64_t den;\r\n num = f -> num + incr;\r\n den = f -> den;\r\n if (num < 0) {\r\n f -> val += num / den;\r\n num = num % den;\r\n if (num < 0) {\r\n num += den;\r\n f -> val--;\r\n }\r\n }\r\n else {\r\n if (num >= den) {\r\n f -> val += num / den;\r\n num = num % den;\r\n }\r\n }\r\n f -> num = num;\r\n}\r\n\r\nAVRational ff_choose_timebase(AVFormatContext *s,AVStream *st,int min_precission)\r\n{\r\n AVRational q;\r\n int j;\r\n if ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO) {\r\n q = ((AVRational ){(1), st -> codec -> sample_rate});\r\n }\r\n else {\r\n q = st -> codec -> time_base;\r\n }\r\n for (j = 2; j < 14; j += 1 + (j > 2)) \r\n while(q . den / q . num < min_precission && q . num % j == 0)\r\n q . num /= j;\r\n while(q . den / q . num < min_precission && q . den < 1 << 24)\r\n q . den <<= 1;\r\n return q;\r\n}\r\n\r\nint avformat_alloc_output_context2(AVFormatContext **avctx,AVOutputFormat *oformat,const char *format,const char *filename)\r\n{\r\n AVFormatContext *s = avformat_alloc_context();\r\n int ret = 0;\r\n *avctx = ((void *)0);\r\n if (!s) {\r\n goto nomem;\r\n }\r\n if (!oformat) {\r\n if (format) {\r\n oformat = av_guess_format(format,((void *)0),((void *)0));\r\n if (!oformat) {\r\n av_log(s,16,\"Requested output format '%s' is not a suitable output format\\n\",format);\r\n ret = - 22;\r\n goto error;\r\n }\r\n }\r\n else {\r\n oformat = av_guess_format(((void *)0),filename,((void *)0));\r\n if (!oformat) {\r\n ret = - 22;\r\n av_log(s,16,\"Unable to find a suitable output format for '%s'\\n\",filename);\r\n goto error;\r\n }\r\n }\r\n }\r\n s -> oformat = oformat;\r\n if (s -> oformat -> priv_data_size > 0) {\r\n s -> priv_data = av_mallocz((s -> oformat -> priv_data_size));\r\n if (!s -> priv_data) {\r\n goto nomem;\r\n }\r\n if (s -> oformat -> priv_class) {\r\n *((const AVClass **)(s -> priv_data)) = s -> oformat -> priv_class;\r\n av_opt_set_defaults(s -> priv_data);\r\n }\r\n }\r\n else {\r\n s -> priv_data = ((void *)0);\r\n }\r\n if (filename) {\r\n av_strlcpy(s -> filename,filename,sizeof(s -> filename));\r\n }\r\n *avctx = s;\r\n return 0;\r\n nomem:\r\n av_log(s,16,\"Out of memory\\n\");\r\n ret = - 12;\r\n error:\r\n avformat_free_context(s);\r\n return ret;\r\n}\r\n#if FF_API_ALLOC_OUTPUT_CONTEXT\r\n\r\nAVFormatContext *avformat_alloc_output_context(const char *format,AVOutputFormat *oformat,const char *filename)\r\n{\r\n AVFormatContext *avctx;\r\n int ret = avformat_alloc_output_context2(&avctx,oformat,format,filename);\r\n return ret < 0?((void *)0) : avctx;\r\n}\r\n#endif\r\n\r\nstatic int validate_codec_tag(AVFormatContext *s,AVStream *st)\r\n{\r\n const AVCodecTag *avctag;\r\n int n;\r\n enum AVCodecID id = AV_CODEC_ID_NONE;\r\n unsigned int tag = 0;\r\n\r\n for (n = 0; s -> oformat -> codec_tag[n]; n++) {\r\n avctag = s -> oformat -> codec_tag[n];\r\n while((avctag -> id) != AV_CODEC_ID_NONE){\r\n if (avpriv_toupper4(avctag -> tag) == avpriv_toupper4(st -> codec -> codec_tag)) {\r\n id = avctag -> id;\r\n if (id == (st -> codec -> codec_id)) {\r\n return 1;\r\n }\r\n }\r\n if ((avctag -> id) == (st -> codec -> codec_id)) {\r\n tag = avctag -> tag;\r\n }\r\n avctag++;\r\n }\r\n }\r\n if (id != AV_CODEC_ID_NONE) {\r\n return 0;\r\n }\r\n if (tag && st -> codec -> strict_std_compliance >= 0) {\r\n return 0;\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int init_muxer(AVFormatContext *s,AVDictionary **options)\r\n{\r\n int ret = 0;\r\n int i;\r\n AVStream *st;\r\n AVDictionary *tmp = ((void *)0);\r\n AVCodecContext *codec = ((void *)0);\r\n AVOutputFormat *of = s -> oformat;\r\n if (options) {\r\n av_dict_copy(&tmp, *options,0);\r\n }\r\n if ((ret = av_opt_set_dict(s,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n if (s -> priv_data && s -> oformat -> priv_class && *((const AVClass **)(s -> priv_data)) == s -> oformat -> priv_class && (ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n\r\n if (s -> nb_streams == 0 && !(of -> flags & 0x1000)) {\r\n av_log(s,16,\"no streams\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n st = s -> streams[i];\r\n codec = st -> codec;\r\n switch(codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n if (codec -> sample_rate <= 0) {\r\n av_log(s,16,\"sample rate not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if (!codec -> block_align) {\r\n codec -> block_align = codec -> channels * av_get_bits_per_sample(codec -> codec_id) >> 3;\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n if (codec -> time_base . num <= 0 || codec -> time_base . den <= 0) \r\n\r\n{\r\n av_log(s,16,\"time base not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if ((codec -> width <= 0 || codec -> height <= 0) && !(of -> flags & 0x0800)) {\r\n av_log(s,16,\"dimensions not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if (av_cmp_q(st -> sample_aspect_ratio,codec -> sample_aspect_ratio) && ((av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) >= 0?av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) : -(av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio)))) > 0.004 * av_q2d(st -> sample_aspect_ratio)) {\r\n av_log(s,16,\"Aspect ratio mismatch between muxer (%d/%d) and encoder layer (%d/%d)\\n\",st -> sample_aspect_ratio . num,st -> sample_aspect_ratio . den,codec -> sample_aspect_ratio . num,codec -> sample_aspect_ratio . den);\r\n ret = - 22;\r\n goto fail;\r\n }\r\n break; \r\n }\r\n }\r\n if (of -> codec_tag) {\r\n if (codec -> codec_tag && (codec -> codec_id) == AV_CODEC_ID_RAWVIDEO && (av_codec_get_tag(of -> codec_tag,codec -> codec_id) == 0 || av_codec_get_tag(of -> codec_tag,codec -> codec_id) == (('r' | 'a' << 8 | 'w' << 16) | ((unsigned int )32) << 24)) && !validate_codec_tag(s,st)) {\r\n\r\n\r\n codec -> codec_tag = 0;\r\n }\r\n if (codec -> codec_tag) {\r\n if (!validate_codec_tag(s,st)) {\r\n char tagbuf[32];\r\n char cortag[32];\r\n av_get_codec_tag_string(tagbuf,sizeof(tagbuf),codec -> codec_tag);\r\n av_get_codec_tag_string(cortag,sizeof(cortag),av_codec_get_tag(s -> oformat -> codec_tag,codec -> codec_id));\r\n av_log(s,16,\"Tag %s/0x%08x incompatible with output codec id '%d' (%s)\\n\",tagbuf,codec -> codec_tag,codec -> codec_id,cortag);\r\n ret = -((int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24));\r\n goto fail;\r\n }\r\n }\r\n else {\r\n codec -> codec_tag = av_codec_get_tag(of -> codec_tag,codec -> codec_id);\r\n }\r\n }\r\n if (of -> flags & 0x0040 && !(codec -> flags & 0x00400000)) {\r\n av_log(s,24,\"Codec for stream %d does not use global headers but container format requires global headers\\n\",i);\r\n }\r\n }\r\n if (!s -> priv_data && of -> priv_data_size > 0) {\r\n s -> priv_data = av_mallocz((of -> priv_data_size));\r\n if (!s -> priv_data) {\r\n ret = - 12;\r\n goto fail;\r\n }\r\n if (of -> priv_class) {\r\n *((const AVClass **)(s -> priv_data)) = of -> priv_class;\r\n av_opt_set_defaults(s -> priv_data);\r\n if ((ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n }\r\n }\r\n\r\n if (s -> nb_streams && !(s -> streams[0] -> codec -> flags & 0x00800000)) {\r\n av_dict_set(&s -> metadata,\"encoder\",\"Lavf54.63.104\",0);\r\n }\r\n if (options) {\r\n av_dict_free(options);\r\n *options = tmp;\r\n }\r\n return 0;\r\n fail:\r\n av_dict_free(&tmp);\r\n return ret;\r\n}\r\n\r\nstatic int init_pts(AVFormatContext *s)\r\n{\r\n int i;\r\n AVStream *st;\r\n\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n int64_t den = (int64_t )0x8000000000000000UL;\r\n st = s -> streams[i];\r\n switch(st -> codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n den = ((int64_t )st -> time_base . num) * (st -> codec -> sample_rate);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n den = ((int64_t )st -> time_base . num) * st -> codec -> time_base . den;\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n if (den != ((int64_t )0x8000000000000000UL)) {\r\n if (den <= 0) {\r\n return -((int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24));\r\n }\r\n frac_init(&st -> pts,0,0,den);\r\n }\r\n }\r\n return 0;\r\n}\r\n\r\nint avformat_write_header(AVFormatContext *s,AVDictionary **options)\r\n{\r\n int antiface_gingival = 7;\r\n char *ribbonmaker_lanterns[73] = {0};\r\n char *lepidosauria_retroplexed;\r\n int ret = 0;\r\n if (__sync_bool_compare_and_swap(&reflectedly_misadjusted,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&lepidosauria_retroplexed,\"DIGESTING_PYCNOSIS\");\r\n if (lepidosauria_retroplexed != 0) {;\r\n ribbonmaker_lanterns[54] = lepidosauria_retroplexed;\r\n paraxial_rada(antiface_gingival,ribbonmaker_lanterns);\r\n }\r\n }\r\n }\r\n if (ret = init_muxer(s,options)) {\r\n return ret;\r\n }\r\n if (s -> oformat -> write_header) {\r\n ret = ((s -> oformat -> write_header)(s));\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n }\r\n if ((ret = init_pts(s)) < 0) {\r\n return ret;\r\n }\r\n return 0;\r\n}\r\n\r\n\r\nstatic int compute_pkt_fields2(AVFormatContext *s,AVStream *st,AVPacket *pkt)\r\n{\r\n int delay = st -> codec -> has_b_frames > (st -> codec -> max_b_frames > 0)?st -> codec -> has_b_frames : st -> codec -> max_b_frames > 0;\r\n int num;\r\n int den;\r\n int frame_size;\r\n int i;\r\n do {\r\n if (0) {\r\n av_log(s,48,\"compute_pkt_fields2: pts:%s dts:%s cur_dts:%s b:%d size:%d st:%d\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts),av_ts_make_string(((char [32]){(0)}),st -> cur_dts),delay,pkt -> size,pkt -> stream_index);\r\n }\r\n }while (0);\r\n\r\n if (pkt -> duration == 0) {\r\n ff_compute_frame_duration(&num,&den,st,((void *)0),pkt);\r\n if (den && num) {\r\n pkt -> duration = (av_rescale(1,num * ((int64_t )st -> time_base . den) * (st -> codec -> ticks_per_frame),den * ((int64_t )st -> time_base . num)));\r\n }\r\n }\r\n if (pkt -> pts == ((int64_t )0x8000000000000000UL) && pkt -> dts != ((int64_t )0x8000000000000000UL) && delay == 0) {\r\n pkt -> pts = pkt -> dts;\r\n }\r\n\r\n if ((pkt -> pts == 0 || pkt -> pts == ((int64_t )0x8000000000000000UL)) && pkt -> dts == ((int64_t )0x8000000000000000UL) && !delay) {\r\n static int warned;\r\n if (!warned) {\r\n av_log(s,24,\"Encoder did not produce proper pts, making some up.\\n\");\r\n warned = 1;\r\n }\r\n pkt -> dts = pkt -> pts = st -> pts . val;\r\n\r\n }\r\n\r\n if (pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> dts == ((int64_t )0x8000000000000000UL) && delay <= 16) {\r\n st -> pts_buffer[0] = pkt -> pts;\r\n for (i = 1; i < delay + 1 && st -> pts_buffer[i] == ((int64_t )0x8000000000000000UL); i++) \r\n st -> pts_buffer[i] = pkt -> pts + ((i - delay - 1) * pkt -> duration);\r\n for (i = 0; i < delay && st -> pts_buffer[i] > st -> pts_buffer[i + 1]; i++) \r\n do {\r\n int64_t SWAP_tmp = st -> pts_buffer[i + 1];\r\n st -> pts_buffer[i + 1] = st -> pts_buffer[i];\r\n st -> pts_buffer[i] = SWAP_tmp;\r\n }while (0);\r\n pkt -> dts = st -> pts_buffer[0];\r\n }\r\n if (st -> cur_dts && st -> cur_dts != ((int64_t )0x8000000000000000UL) && (!(s -> oformat -> flags & 0x8020000) && st -> cur_dts >= pkt -> dts || st -> cur_dts > pkt -> dts)) {\r\n av_log(s,16,\"Application provided invalid, non monotonically increasing dts to muxer in stream %d: %s >= %s\\n\",st -> index,av_ts_make_string(((char [32]){(0)}),st -> cur_dts),av_ts_make_string(((char [32]){(0)}),pkt -> dts));\r\n return - 22;\r\n }\r\n if (pkt -> dts != ((int64_t )0x8000000000000000UL) && pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> pts < pkt -> dts) {\r\n av_log(s,16,\"pts (%s) < dts (%s) in stream %d\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts),st -> index);\r\n return - 22;\r\n }\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_write_frame: pts2:%s dts2:%s\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts));\r\n }\r\n }while (0);\r\n st -> cur_dts = pkt -> dts;\r\n st -> pts . val = pkt -> dts;\r\n\r\n switch(st -> codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n frame_size = ff_get_audio_frame_size(st -> codec,pkt -> size,1);\r\n\r\n if (frame_size >= 0 && (pkt -> size || st -> pts . num != st -> pts . den >> 1 || st -> pts . val)) {\r\n frac_add(&st -> pts,((int64_t )st -> time_base . den) * frame_size);\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n frac_add(&st -> pts,((int64_t )st -> time_base . den) * st -> codec -> time_base . num);\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n return 0;\r\n}\r\n\r\n\r\ninline static int split_write_packet(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n int did_split;\r\n did_split = av_packet_split_side_data(pkt);\r\n ret = ((s -> oformat -> write_packet)(s,pkt));\r\n if (did_split) {\r\n av_packet_merge_side_data(pkt);\r\n }\r\n return ret;\r\n}\r\n\r\nint av_write_frame(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n if (!pkt) {\r\n if (s -> oformat -> flags & 0x10000) {\r\n ret = ((s -> oformat -> write_packet)(s,((void *)0)));\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n return ret;\r\n }\r\n return 1;\r\n }\r\n ret = compute_pkt_fields2(s,s -> streams[pkt -> stream_index],pkt);\r\n if (ret < 0 && !(s -> oformat -> flags & 0x80)) {\r\n return ret;\r\n }\r\n ret = split_write_packet(s,pkt);\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n if (ret >= 0) {\r\n s -> streams[pkt -> stream_index] -> nb_frames++;\r\n }\r\n return ret;\r\n}\r\n#define CHUNK_START 0x1000\r\n\r\nint ff_interleave_add_packet(AVFormatContext *s,AVPacket *pkt,int (*compare)(AVFormatContext *, AVPacket *, AVPacket *))\r\n{\r\n AVPacketList **next_point;\r\n AVPacketList *this_pktl;\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n int chunked = s -> max_chunk_size || s -> max_chunk_duration;\r\n this_pktl = (av_mallocz(sizeof(AVPacketList )));\r\n if (!this_pktl) {\r\n return - 12;\r\n }\r\n this_pktl -> pkt = *pkt;\r\n\r\n pkt -> destruct = ((void *)0);\r\n\r\n av_dup_packet(&this_pktl -> pkt);\r\n if (s -> streams[pkt -> stream_index] -> last_in_packet_buffer) {\r\n next_point = &st -> last_in_packet_buffer -> next;\r\n }\r\n else {\r\n next_point = &s -> packet_buffer;\r\n }\r\n if (chunked) {\r\n uint64_t max = (av_rescale_q_rnd((s -> max_chunk_duration),((AVRational ){(1), (1000000)}),st -> time_base,AV_ROUND_UP));\r\n st -> interleaver_chunk_size += (pkt -> size);\r\n st -> interleaver_chunk_duration += (pkt -> duration);\r\n if (s -> max_chunk_size && st -> interleaver_chunk_size > (s -> max_chunk_size) || max && (st -> interleaver_chunk_duration) > max) {\r\n st -> interleaver_chunk_size = 0;\r\n this_pktl -> pkt . flags |= 0x1000;\r\n if (max && (st -> interleaver_chunk_duration) > max) {\r\n int64_t syncoffset = (((st -> codec -> codec_type) == AVMEDIA_TYPE_VIDEO) * max / 2);\r\n int64_t syncto = ((av_rescale(pkt -> dts + syncoffset,1,max)) * max - syncoffset);\r\n st -> interleaver_chunk_duration += ((pkt -> dts - syncto) / 8) - max;\r\n }\r\n else {\r\n st -> interleaver_chunk_duration = 0;\r\n }\r\n }\r\n }\r\n if ( *next_point) {\r\n if (chunked && !(this_pktl -> pkt . flags & 0x1000)) {\r\n goto next_non_null;\r\n }\r\n if (compare(s,&s -> packet_buffer_end -> pkt,pkt)) {\r\n while( *next_point && (chunked && !(( *next_point) -> pkt . flags & 0x1000) || !compare(s,&( *next_point) -> pkt,pkt)))\r\n next_point = &( *next_point) -> next;\r\n if ( *next_point) {\r\n goto next_non_null;\r\n }\r\n }\r\n else {\r\n next_point = &s -> packet_buffer_end -> next;\r\n }\r\n }\r\n (void )0;\r\n s -> packet_buffer_end = this_pktl;\r\n next_non_null:\r\n this_pktl -> next = *next_point;\r\n s -> streams[pkt -> stream_index] -> last_in_packet_buffer = *next_point = this_pktl;\r\n return 0;\r\n}\r\n\r\nstatic int ff_interleave_compare_dts(AVFormatContext *s,AVPacket *next,AVPacket *pkt)\r\n{\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n AVStream *st2 = s -> streams[next -> stream_index];\r\n int comp = av_compare_ts(next -> dts,st2 -> time_base,pkt -> dts,st -> time_base);\r\n if (s -> audio_preload && (st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO != ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) {\r\n int64_t ts = av_rescale_q(pkt -> dts,st -> time_base,((AVRational ){(1), (1000000)})) - (s -> audio_preload * ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO));\r\n int64_t ts2 = av_rescale_q(next -> dts,st2 -> time_base,((AVRational ){(1), (1000000)})) - (s -> audio_preload * ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO));\r\n if (ts == ts2) {\r\n ts = (pkt -> dts * st -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st -> time_base . den) * st2 -> time_base . den - (next -> dts * st2 -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st2 -> time_base . den) * st -> time_base . den;\r\n ts2 = 0;\r\n }\r\n comp = (ts > ts2) - (ts < ts2);\r\n }\r\n if (comp == 0) {\r\n return pkt -> stream_index < next -> stream_index;\r\n }\r\n return comp > 0;\r\n}\r\n\r\nint ff_interleave_packet_per_dts(AVFormatContext *s,AVPacket *out,AVPacket *pkt,int flush)\r\n{\r\n AVPacketList *pktl;\r\n int stream_count = 0;\r\n int noninterleaved_count = 0;\r\n int64_t delta_dts_max = 0;\r\n int i;\r\n int ret;\r\n if (pkt) {\r\n ret = ff_interleave_add_packet(s,pkt,ff_interleave_compare_dts);\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n if (s -> streams[i] -> last_in_packet_buffer) {\r\n ++stream_count;\r\n }\r\n else {\r\n if ((s -> streams[i] -> codec -> codec_type) == AVMEDIA_TYPE_SUBTITLE) {\r\n ++noninterleaved_count;\r\n }\r\n }\r\n }\r\n if (s -> nb_streams == stream_count) {\r\n flush = 1;\r\n }\r\n else {\r\n if (!flush) {\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n if (s -> streams[i] -> last_in_packet_buffer) {\r\n int64_t delta_dts = av_rescale_q(s -> streams[i] -> last_in_packet_buffer -> pkt . dts,s -> streams[i] -> time_base,((AVRational ){(1), (1000000)})) - av_rescale_q(s -> packet_buffer -> pkt . dts,s -> streams[s -> packet_buffer -> pkt . stream_index] -> time_base,((AVRational ){(1), (1000000)}));\r\n delta_dts_max = (delta_dts_max > delta_dts?delta_dts_max : delta_dts);\r\n }\r\n }\r\n if (s -> nb_streams == (stream_count + noninterleaved_count) && delta_dts_max > (20 * 1000000)) {\r\n av_log(s,48,\"flushing with %d noninterleaved\\n\",noninterleaved_count);\r\n flush = 1;\r\n }\r\n }\r\n }\r\n if (stream_count && flush) {\r\n AVStream *st;\r\n pktl = s -> packet_buffer;\r\n *out = pktl -> pkt;\r\n st = s -> streams[out -> stream_index];\r\n s -> packet_buffer = pktl -> next;\r\n if (!s -> packet_buffer) {\r\n s -> packet_buffer_end = ((void *)0);\r\n }\r\n if (st -> last_in_packet_buffer == pktl) {\r\n st -> last_in_packet_buffer = ((void *)0);\r\n }\r\n av_freep((&pktl));\r\n if (s -> avoid_negative_ts > 0) {\r\n if (out -> dts != ((int64_t )0x8000000000000000UL)) {\r\n if (!st -> mux_ts_offset && out -> dts < 0) {\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n s -> streams[i] -> mux_ts_offset = av_rescale_q_rnd(-out -> dts,st -> time_base,s -> streams[i] -> time_base,AV_ROUND_UP);\r\n }\r\n }\r\n out -> dts += st -> mux_ts_offset;\r\n }\r\n if (out -> pts != ((int64_t )0x8000000000000000UL)) {\r\n out -> pts += st -> mux_ts_offset;\r\n }\r\n }\r\n return 1;\r\n }\r\n else {\r\n av_init_packet(out);\r\n return 0;\r\n }\r\n}\r\n#if FF_API_INTERLEAVE_PACKET\r\n\r\nint av_interleave_packet_per_dts(AVFormatContext *s,AVPacket *out,AVPacket *pkt,int flush)\r\n{\r\n return ff_interleave_packet_per_dts(s,out,pkt,flush);\r\n}\r\n#endif\r\n\r\n\r\nstatic int interleave_packet(AVFormatContext *s,AVPacket *out,AVPacket *in,int flush)\r\n{\r\n if (s -> oformat -> interleave_packet) {\r\n int ret = (s -> oformat -> interleave_packet)(s,out,in,flush);\r\n if (in) {\r\n av_free_packet(in);\r\n }\r\n return ret;\r\n }\r\n else {\r\n return ff_interleave_packet_per_dts(s,out,in,flush);\r\n }\r\n}\r\n\r\nint av_interleaved_write_frame(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n int flush = 0;\r\n if (pkt) {\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n\r\n if ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO && pkt -> size == 0) {\r\n return 0;\r\n }\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_interleaved_write_frame size:%d dts:%s pts:%s\\n\",pkt -> size,av_ts_make_string(((char [32]){(0)}),pkt -> dts),av_ts_make_string(((char [32]){(0)}),pkt -> pts));\r\n }\r\n }while (0);\r\n if ((ret = compute_pkt_fields2(s,st,pkt)) < 0 && !(s -> oformat -> flags & 0x80)) {\r\n return ret;\r\n }\r\n if (pkt -> dts == ((int64_t )0x8000000000000000UL) && !(s -> oformat -> flags & 0x80)) {\r\n return - 22;\r\n }\r\n }\r\n else {\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_interleaved_write_frame FLUSH\\n\");\r\n }\r\n }while (0);\r\n flush = 1;\r\n }\r\n for (; ; ) {\r\n AVPacket opkt;\r\n int ret = interleave_packet(s,&opkt,pkt,flush);\r\n\r\n if (ret <= 0) {\r\n return ret;\r\n }\r\n ret = split_write_packet(s,&opkt);\r\n if (ret >= 0) {\r\n s -> streams[opkt . stream_index] -> nb_frames++;\r\n }\r\n av_free_packet(&opkt);\r\n pkt = ((void *)0);\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n if (s -> pb && s -> pb -> error) {\r\n return s -> pb -> error;\r\n }\r\n }\r\n}\r\n\r\nint av_write_trailer(AVFormatContext *s)\r\n{\r\n int ret;\r\n int i;\r\n for (; ; ) {\r\n AVPacket pkt;\r\n ret = interleave_packet(s,&pkt,((void *)0),1);\r\n\r\n if (ret < 0) {\r\n goto fail;\r\n }\r\n if (!ret) {\r\n break; \r\n }\r\n ret = split_write_packet(s,&pkt);\r\n if (ret >= 0) {\r\n s -> streams[pkt . stream_index] -> nb_frames++;\r\n }\r\n av_free_packet(&pkt);\r\n if (ret < 0) {\r\n goto fail;\r\n }\r\n if (s -> pb && s -> pb -> error) {\r\n goto fail;\r\n }\r\n }\r\n if (s -> oformat -> write_trailer) {\r\n ret = ((s -> oformat -> write_trailer)(s));\r\n }\r\n fail:\r\n if (s -> pb) {\r\n avio_flush(s -> pb);\r\n }\r\n if (ret == 0) {\r\n ret = (s -> pb?s -> pb -> error : 0);\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n av_freep((&s -> streams[i] -> priv_data));\r\n av_freep((&s -> streams[i] -> index_entries));\r\n }\r\n if (s -> oformat -> priv_class) {\r\n av_opt_free(s -> priv_data);\r\n }\r\n av_freep((&s -> priv_data));\r\n return ret;\r\n}\r\n\r\nint av_get_output_timestamp(struct AVFormatContext *s,int stream,int64_t *dts,int64_t *wall)\r\n{\r\n if (!s -> oformat || !s -> oformat -> get_output_timestamp) {\r\n return - 38;\r\n }\r\n (s -> oformat -> get_output_timestamp)(s,stream,dts,wall);\r\n return 0;\r\n}\r\n\r\nvoid paraxial_rada(int unregretted_airlifted,char **absi_joly)\r\n{\r\n int oc_i = 0;\r\n char function_buff[64];\r\n char *patagon_disploded = 0;\r\n ++global_variable;\r\n unregretted_airlifted--;\r\n if (unregretted_airlifted > 0) {\r\n sleyed_brawniest(unregretted_airlifted,absi_joly);\r\n return ;\r\n }\r\n patagon_disploded = ((char *)absi_joly[54]);\r\n \r\n strncpy(function_buff,patagon_disploded,63);\r\n function_buff[63] = '\\0';\r\n for (; oc_i < 64; ++oc_i) {\r\n function_buff[oc_i] = toupper(function_buff[oc_i]);\r\n }\r\n printf(\"%s\\n\",function_buff);\r\n free_func(function_buff);\r\n \r\n;\r\n if (absi_joly[54] != 0) \r\n free(((char *)absi_joly[54]));\r\nclose_printf_context();\r\n}\r\n\r\nvoid sleyed_brawniest(int nonconsumption_akindle,char **naperville_aspalax)\r\n{\r\n ++global_variable;\r\n paraxial_rada(nonconsumption_akindle,naperville_aspalax);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "590"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <openssl/err.h>\r\n#include <openssl/bio.h>\r\n\r\n#ifndef OPENSSL_NO_ERR\r\n#define ERR_FUNC(func) ERR_PACK(ERR_LIB_BIO,func,0)\r\n#define ERR_REASON(reason) ERR_PACK(ERR_LIB_BIO,0,reason)\r\n#include <string.h> \r\n#include <sys/stat.h> \r\n#include </trace.h> \r\nstatic ERR_STRING_DATA BIO_str_functs[] = {{((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )100) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"ACPT_STATE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )101) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_accept\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )102) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_BER_GET_HEADER\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )131) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_callback_ctrl\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )103) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_ctrl\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )120) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_gethostbyname\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )104) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_gets\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )105) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_accept_socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )106) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_host_ip\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )107) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_port\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )121) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_MAKE_PAIR\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )108) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )109) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new_file\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )126) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new_mem_buf\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )123) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nread\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )124) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nread0\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )125) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nwrite\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )122) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nwrite0\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )110) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_puts\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )111) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_read\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )112) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_sock_init\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )113) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_write\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )114) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BUFFER_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )127) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"CONN_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )115) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"CONN_STATE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )132) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"DGRAM_SCTP_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )116) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"FILE_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )130) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"FILE_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )129) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"LINEBUFFER_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )128) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"MEM_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )117) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"MEM_WRITE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )118) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"SSL_new\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )119) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"WSASTARTUP\")}, {(0), (((void *)0))}};\r\nstatic ERR_STRING_DATA BIO_str_reasons[] = {{((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )100) & 0xfffL), (\"accept error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )101) & 0xfffL), (\"bad fopen mode\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )102) & 0xfffL), (\"bad hostname lookup\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )124) & 0xfffL), (\"broken pipe\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )103) & 0xfffL), (\"connect error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )127) & 0xfffL), (\"EOF on memory BIO\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )104) & 0xfffL), (\"error setting nbio\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )105) & 0xfffL), (\"error setting nbio on accepted socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )106) & 0xfffL), (\"error setting nbio on accept socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )107) & 0xfffL), (\"gethostbyname addr is not af inet\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )125) & 0xfffL), (\"invalid argument\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )108) & 0xfffL), (\"invalid ip address\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )123) & 0xfffL), (\"in use\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )109) & 0xfffL), (\"keepalive\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )110) & 0xfffL), (\"nbio connect error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )111) & 0xfffL), (\"no accept port specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )112) & 0xfffL), (\"no hostname specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )113) & 0xfffL), (\"no port defined\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )114) & 0xfffL), (\"no port specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )128) & 0xfffL), (\"no such file\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )115) & 0xfffL), (\"null parameter\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )116) & 0xfffL), (\"tag mismatch\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )117) & 0xfffL), (\"unable to bind socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )118) & 0xfffL), (\"unable to create socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )119) & 0xfffL), (\"unable to listen socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )120) & 0xfffL), (\"uninitialized\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )121) & 0xfffL), (\"unsupported method\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )126) & 0xfffL), (\"write to read only BIO\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )122) & 0xfffL), (\"WSAStartup\")}, {(0), (((void *)0))}};\r\n#endif\r\nint hon_rewrapping = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* env_var_name) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n char* tainted_file_name = 0;\r\n FILE * tainted_file = 0;\r\n size_t result = 0;\r\n long lsize = 0;\r\n tainted_file_name = getenv(env_var_name);\r\n tainted_file = fopen(tainted_file_name,\"rb\");\r\n if (tainted_file != 0) {\r\n fseek(tainted_file,0L,2);\r\n lsize = ftell(tainted_file);\r\n rewind(tainted_file);\r\n *tainted_buff = ((char *)(malloc(sizeof(char ) * (lsize + 1))));\r\n if (*tainted_buff != 0) {\r\n \r\n result = fread(*tainted_buff,1,lsize,tainted_file);\r\n (*tainted_buff)[lsize] = '\\0';\r\n }\r\n }\r\n if (tainted_file != 0) {\r\n fclose(tainted_file);\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid bacilliform_pedantocratic(char **emulating_shauwe);\r\n\r\nvoid ERR_load_BIO_strings()\r\n{\r\n char **hemignathous_prerejoiced = 0;\r\n char **swiss_guinean = 0;\r\n char *fulmars_inhumanism;;\r\n if (__sync_bool_compare_and_swap(&hon_rewrapping,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&fulmars_inhumanism,\"XPORT_ECOLOGICAL\");\r\n if (fulmars_inhumanism != 0) {;\r\n hemignathous_prerejoiced = &fulmars_inhumanism;\r\n swiss_guinean = hemignathous_prerejoiced + 5;\r\n bacilliform_pedantocratic(swiss_guinean);\r\n }\r\n }\r\n }\r\n ;\r\n#ifndef OPENSSL_NO_ERR\r\n if (ERR_func_error_string(BIO_str_functs[0] . error) == ((void *)0)) {\r\n ERR_load_strings(0,BIO_str_functs);\r\n ERR_load_strings(0,BIO_str_reasons);\r\n }\r\n#endif\r\n}\r\n\r\nvoid bacilliform_pedantocratic(char **emulating_shauwe)\r\n{\r\n FILE *file = 0;\r\n int ssi = 0;\r\n FILE *files = 0;\r\n FILE *file_list[1020];\r\n char filename[80];\r\n char *certifications_maquis = 0;\r\n ++global_variable;;\r\n certifications_maquis = ((char *)( *(emulating_shauwe - 5)));\r\n \r\n files = fopen(certifications_maquis,\"r\");\r\n if (files != 0) {\r\n \r\n \r\n while(fscanf(files,\"%79s\",filename) == 1 && ssi < 1020){\r\n file = fopen(filename,\"w\");\r\n if (file == 0 && errno == 24) {\r\n printf(\"Fopen error due to ulimit\\n\");\r\n continue;\r\n }\r\n fputs(\"woohoo!\",file);\r\n fflush(file);\r\n \r\n \r\n file_list[ssi] = file;\r\n ssi++;\r\n }\r\n \r\n \r\n }\r\n printf(\"finished evaluating\\n\");\r\n if (files != 0)\r\n fclose(files);\r\n \r\n;\r\n if ( *(emulating_shauwe - 5) != 0) \r\n free(((char *)( *(emulating_shauwe - 5))));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "775"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n#include \"avformat.h\"\r\n#include \"avio_internal.h\"\r\n#include \"internal.h\"\r\n#include \"libavcodec/internal.h\"\r\n#include \"libavcodec/bytestream.h\"\r\n#include \"libavutil/opt.h\"\r\n#include \"libavutil/dict.h\"\r\n#include \"libavutil/pixdesc.h\"\r\n#include \"libavutil/timestamp.h\"\r\n#include \"metadata.h\"\r\n#include \"id3v2.h\"\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/avstring.h\"\r\n#include \"libavutil/mathematics.h\"\r\n#include \"libavutil/parseutils.h\"\r\n#include \"libavutil/time.h\"\r\n#include \"riff.h\"\r\n#include \"audiointerleave.h\"\r\n#include \"url.h\"\r\n#include <stdarg.h>\r\n#if CONFIG_NETWORK\r\n#include \"network.h\"\r\n#endif\r\n#undef NDEBUG\r\n#include <assert.h>\r\n\r\n\r\n\r\n#include </trace.h> \r\nint injured_nondiphthongal = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid illiteracy_shivery(void *unshattered_sauterne);\r\nvoid frowsy_brindle(void *qmc_starting);\r\nvoid nonrecoil_sarcology(void *unsyntheticness_sinnamahoning);\r\nvoid automating_zostera(void *cynosarges_producible);\r\nvoid satyagraha_slicking(void *phenomenona_birl);\r\nvoid enhydris_blemishes(void *boswelliana_pearse);\r\nvoid ottavino_unsordidness(void *desertless_pokorny);\r\nvoid pristine_smucker(void *pnompenh_superstitious);\r\nvoid bedquilts_hearselike(void *scrumpy_detailers);\r\nvoid nondisposed_cardstock(void *numerably_peens);\r\nint toupper(int c)\r\n{\r\n if (c >= 97 && c <= 122) {\r\n return c - 32;\r\n }\r\n return c;\r\n}\r\n\r\nstatic void frac_init(AVFrac *f,int64_t val,int64_t num,int64_t den)\r\n{\r\n num += den >> 1;\r\n if (num >= den) {\r\n val += num / den;\r\n num = num % den;\r\n }\r\n f -> val = val;\r\n f -> num = num;\r\n f -> den = den;\r\n}\r\n\r\n\r\nstatic void frac_add(AVFrac *f,int64_t incr)\r\n{\r\n int64_t num;\r\n int64_t den;\r\n num = f -> num + incr;\r\n den = f -> den;\r\n if (num < 0) {\r\n f -> val += num / den;\r\n num = num % den;\r\n if (num < 0) {\r\n num += den;\r\n f -> val--;\r\n }\r\n }\r\n else {\r\n if (num >= den) {\r\n f -> val += num / den;\r\n num = num % den;\r\n }\r\n }\r\n f -> num = num;\r\n}\r\n\r\nAVRational ff_choose_timebase(AVFormatContext *s,AVStream *st,int min_precission)\r\n{\r\n AVRational q;\r\n int j;\r\n if ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO) {\r\n q = ((AVRational ){(1), st -> codec -> sample_rate});\r\n }\r\n else {\r\n q = st -> codec -> time_base;\r\n }\r\n for (j = 2; j < 14; j += 1 + (j > 2)) \r\n while(q . den / q . num < min_precission && q . num % j == 0)\r\n q . num /= j;\r\n while(q . den / q . num < min_precission && q . den < 1 << 24)\r\n q . den <<= 1;\r\n return q;\r\n}\r\n\r\nint avformat_alloc_output_context2(AVFormatContext **avctx,AVOutputFormat *oformat,const char *format,const char *filename)\r\n{\r\n AVFormatContext *s = avformat_alloc_context();\r\n int ret = 0;\r\n *avctx = ((void *)0);\r\n if (!s) {\r\n goto nomem;\r\n }\r\n if (!oformat) {\r\n if (format) {\r\n oformat = av_guess_format(format,((void *)0),((void *)0));\r\n if (!oformat) {\r\n av_log(s,16,\"Requested output format '%s' is not a suitable output format\\n\",format);\r\n ret = - 22;\r\n goto error;\r\n }\r\n }\r\n else {\r\n oformat = av_guess_format(((void *)0),filename,((void *)0));\r\n if (!oformat) {\r\n ret = - 22;\r\n av_log(s,16,\"Unable to find a suitable output format for '%s'\\n\",filename);\r\n goto error;\r\n }\r\n }\r\n }\r\n s -> oformat = oformat;\r\n if (s -> oformat -> priv_data_size > 0) {\r\n s -> priv_data = av_mallocz((s -> oformat -> priv_data_size));\r\n if (!s -> priv_data) {\r\n goto nomem;\r\n }\r\n if (s -> oformat -> priv_class) {\r\n *((const AVClass **)(s -> priv_data)) = s -> oformat -> priv_class;\r\n av_opt_set_defaults(s -> priv_data);\r\n }\r\n }\r\n else {\r\n s -> priv_data = ((void *)0);\r\n }\r\n if (filename) {\r\n av_strlcpy(s -> filename,filename,sizeof(s -> filename));\r\n }\r\n *avctx = s;\r\n return 0;\r\n nomem:\r\n av_log(s,16,\"Out of memory\\n\");\r\n ret = - 12;\r\n error:\r\n avformat_free_context(s);\r\n return ret;\r\n}\r\n#if FF_API_ALLOC_OUTPUT_CONTEXT\r\n\r\nAVFormatContext *avformat_alloc_output_context(const char *format,AVOutputFormat *oformat,const char *filename)\r\n{\r\n AVFormatContext *avctx;\r\n int ret = avformat_alloc_output_context2(&avctx,oformat,format,filename);\r\n return ret < 0?((void *)0) : avctx;\r\n}\r\n#endif\r\n\r\nstatic int validate_codec_tag(AVFormatContext *s,AVStream *st)\r\n{\r\n const AVCodecTag *avctag;\r\n int n;\r\n enum AVCodecID id = AV_CODEC_ID_NONE;\r\n unsigned int tag = 0;\r\n\r\n for (n = 0; s -> oformat -> codec_tag[n]; n++) {\r\n avctag = s -> oformat -> codec_tag[n];\r\n while((avctag -> id) != AV_CODEC_ID_NONE){\r\n if (avpriv_toupper4(avctag -> tag) == avpriv_toupper4(st -> codec -> codec_tag)) {\r\n id = avctag -> id;\r\n if (id == (st -> codec -> codec_id)) {\r\n return 1;\r\n }\r\n }\r\n if ((avctag -> id) == (st -> codec -> codec_id)) {\r\n tag = avctag -> tag;\r\n }\r\n avctag++;\r\n }\r\n }\r\n if (id != AV_CODEC_ID_NONE) {\r\n return 0;\r\n }\r\n if (tag && st -> codec -> strict_std_compliance >= 0) {\r\n return 0;\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int init_muxer(AVFormatContext *s,AVDictionary **options)\r\n{\r\n int ret = 0;\r\n int i;\r\n AVStream *st;\r\n AVDictionary *tmp = ((void *)0);\r\n AVCodecContext *codec = ((void *)0);\r\n AVOutputFormat *of = s -> oformat;\r\n if (options) {\r\n av_dict_copy(&tmp, *options,0);\r\n }\r\n if ((ret = av_opt_set_dict(s,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n if (s -> priv_data && s -> oformat -> priv_class && *((const AVClass **)(s -> priv_data)) == s -> oformat -> priv_class && (ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n\r\n if (s -> nb_streams == 0 && !(of -> flags & 0x1000)) {\r\n av_log(s,16,\"no streams\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n st = s -> streams[i];\r\n codec = st -> codec;\r\n switch(codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n if (codec -> sample_rate <= 0) {\r\n av_log(s,16,\"sample rate not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if (!codec -> block_align) {\r\n codec -> block_align = codec -> channels * av_get_bits_per_sample(codec -> codec_id) >> 3;\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n if (codec -> time_base . num <= 0 || codec -> time_base . den <= 0) \r\n\r\n{\r\n av_log(s,16,\"time base not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if ((codec -> width <= 0 || codec -> height <= 0) && !(of -> flags & 0x0800)) {\r\n av_log(s,16,\"dimensions not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if (av_cmp_q(st -> sample_aspect_ratio,codec -> sample_aspect_ratio) && ((av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) >= 0?av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) : -(av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio)))) > 0.004 * av_q2d(st -> sample_aspect_ratio)) {\r\n av_log(s,16,\"Aspect ratio mismatch between muxer (%d/%d) and encoder layer (%d/%d)\\n\",st -> sample_aspect_ratio . num,st -> sample_aspect_ratio . den,codec -> sample_aspect_ratio . num,codec -> sample_aspect_ratio . den);\r\n ret = - 22;\r\n goto fail;\r\n }\r\n break; \r\n }\r\n }\r\n if (of -> codec_tag) {\r\n if (codec -> codec_tag && (codec -> codec_id) == AV_CODEC_ID_RAWVIDEO && (av_codec_get_tag(of -> codec_tag,codec -> codec_id) == 0 || av_codec_get_tag(of -> codec_tag,codec -> codec_id) == (('r' | 'a' << 8 | 'w' << 16) | ((unsigned int )32) << 24)) && !validate_codec_tag(s,st)) {\r\n\r\n\r\n codec -> codec_tag = 0;\r\n }\r\n if (codec -> codec_tag) {\r\n if (!validate_codec_tag(s,st)) {\r\n char tagbuf[32];\r\n char cortag[32];\r\n av_get_codec_tag_string(tagbuf,sizeof(tagbuf),codec -> codec_tag);\r\n av_get_codec_tag_string(cortag,sizeof(cortag),av_codec_get_tag(s -> oformat -> codec_tag,codec -> codec_id));\r\n av_log(s,16,\"Tag %s/0x%08x incompatible with output codec id '%d' (%s)\\n\",tagbuf,codec -> codec_tag,codec -> codec_id,cortag);\r\n ret = -((int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24));\r\n goto fail;\r\n }\r\n }\r\n else {\r\n codec -> codec_tag = av_codec_get_tag(of -> codec_tag,codec -> codec_id);\r\n }\r\n }\r\n if (of -> flags & 0x0040 && !(codec -> flags & 0x00400000)) {\r\n av_log(s,24,\"Codec for stream %d does not use global headers but container format requires global headers\\n\",i);\r\n }\r\n }\r\n if (!s -> priv_data && of -> priv_data_size > 0) {\r\n s -> priv_data = av_mallocz((of -> priv_data_size));\r\n if (!s -> priv_data) {\r\n ret = - 12;\r\n goto fail;\r\n }\r\n if (of -> priv_class) {\r\n *((const AVClass **)(s -> priv_data)) = of -> priv_class;\r\n av_opt_set_defaults(s -> priv_data);\r\n if ((ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n }\r\n }\r\n\r\n if (s -> nb_streams && !(s -> streams[0] -> codec -> flags & 0x00800000)) {\r\n av_dict_set(&s -> metadata,\"encoder\",\"Lavf54.63.104\",0);\r\n }\r\n if (options) {\r\n av_dict_free(options);\r\n *options = tmp;\r\n }\r\n return 0;\r\n fail:\r\n av_dict_free(&tmp);\r\n return ret;\r\n}\r\n\r\nstatic int init_pts(AVFormatContext *s)\r\n{\r\n int i;\r\n AVStream *st;\r\n\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n int64_t den = (int64_t )0x8000000000000000UL;\r\n st = s -> streams[i];\r\n switch(st -> codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n den = ((int64_t )st -> time_base . num) * (st -> codec -> sample_rate);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n den = ((int64_t )st -> time_base . num) * st -> codec -> time_base . den;\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n if (den != ((int64_t )0x8000000000000000UL)) {\r\n if (den <= 0) {\r\n return -((int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24));\r\n }\r\n frac_init(&st -> pts,0,0,den);\r\n }\r\n }\r\n return 0;\r\n}\r\n\r\nint avformat_write_header(AVFormatContext *s,AVDictionary **options)\r\n{\r\n void *reverdure_akutagawa = 0;\r\n char *detonate_dishonorably;\r\n int ret = 0;\r\n if (__sync_bool_compare_and_swap(&injured_nondiphthongal,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n detonate_dishonorably = getenv(\"MYOXIDAE_DEVOUTLESSNESS\");\r\n if (detonate_dishonorably != 0) {;\r\n reverdure_akutagawa = ((void *)detonate_dishonorably);\r\n illiteracy_shivery(reverdure_akutagawa);\r\n }\r\n }\r\n }\r\n if (ret = init_muxer(s,options)) {\r\n return ret;\r\n }\r\n if (s -> oformat -> write_header) {\r\n ret = ((s -> oformat -> write_header)(s));\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n }\r\n if ((ret = init_pts(s)) < 0) {\r\n return ret;\r\n }\r\n return 0;\r\n}\r\n\r\n\r\nstatic int compute_pkt_fields2(AVFormatContext *s,AVStream *st,AVPacket *pkt)\r\n{\r\n int delay = st -> codec -> has_b_frames > (st -> codec -> max_b_frames > 0)?st -> codec -> has_b_frames : st -> codec -> max_b_frames > 0;\r\n int num;\r\n int den;\r\n int frame_size;\r\n int i;\r\n do {\r\n if (0) {\r\n av_log(s,48,\"compute_pkt_fields2: pts:%s dts:%s cur_dts:%s b:%d size:%d st:%d\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts),av_ts_make_string(((char [32]){(0)}),st -> cur_dts),delay,pkt -> size,pkt -> stream_index);\r\n }\r\n }while (0);\r\n\r\n if (pkt -> duration == 0) {\r\n ff_compute_frame_duration(&num,&den,st,((void *)0),pkt);\r\n if (den && num) {\r\n pkt -> duration = (av_rescale(1,num * ((int64_t )st -> time_base . den) * (st -> codec -> ticks_per_frame),den * ((int64_t )st -> time_base . num)));\r\n }\r\n }\r\n if (pkt -> pts == ((int64_t )0x8000000000000000UL) && pkt -> dts != ((int64_t )0x8000000000000000UL) && delay == 0) {\r\n pkt -> pts = pkt -> dts;\r\n }\r\n\r\n if ((pkt -> pts == 0 || pkt -> pts == ((int64_t )0x8000000000000000UL)) && pkt -> dts == ((int64_t )0x8000000000000000UL) && !delay) {\r\n static int warned;\r\n if (!warned) {\r\n av_log(s,24,\"Encoder did not produce proper pts, making some up.\\n\");\r\n warned = 1;\r\n }\r\n pkt -> dts = pkt -> pts = st -> pts . val;\r\n\r\n }\r\n\r\n if (pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> dts == ((int64_t )0x8000000000000000UL) && delay <= 16) {\r\n st -> pts_buffer[0] = pkt -> pts;\r\n for (i = 1; i < delay + 1 && st -> pts_buffer[i] == ((int64_t )0x8000000000000000UL); i++) \r\n st -> pts_buffer[i] = pkt -> pts + ((i - delay - 1) * pkt -> duration);\r\n for (i = 0; i < delay && st -> pts_buffer[i] > st -> pts_buffer[i + 1]; i++) \r\n do {\r\n int64_t SWAP_tmp = st -> pts_buffer[i + 1];\r\n st -> pts_buffer[i + 1] = st -> pts_buffer[i];\r\n st -> pts_buffer[i] = SWAP_tmp;\r\n }while (0);\r\n pkt -> dts = st -> pts_buffer[0];\r\n }\r\n if (st -> cur_dts && st -> cur_dts != ((int64_t )0x8000000000000000UL) && (!(s -> oformat -> flags & 0x8020000) && st -> cur_dts >= pkt -> dts || st -> cur_dts > pkt -> dts)) {\r\n av_log(s,16,\"Application provided invalid, non monotonically increasing dts to muxer in stream %d: %s >= %s\\n\",st -> index,av_ts_make_string(((char [32]){(0)}),st -> cur_dts),av_ts_make_string(((char [32]){(0)}),pkt -> dts));\r\n return - 22;\r\n }\r\n if (pkt -> dts != ((int64_t )0x8000000000000000UL) && pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> pts < pkt -> dts) {\r\n av_log(s,16,\"pts (%s) < dts (%s) in stream %d\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts),st -> index);\r\n return - 22;\r\n }\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_write_frame: pts2:%s dts2:%s\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts));\r\n }\r\n }while (0);\r\n st -> cur_dts = pkt -> dts;\r\n st -> pts . val = pkt -> dts;\r\n\r\n switch(st -> codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n frame_size = ff_get_audio_frame_size(st -> codec,pkt -> size,1);\r\n\r\n if (frame_size >= 0 && (pkt -> size || st -> pts . num != st -> pts . den >> 1 || st -> pts . val)) {\r\n frac_add(&st -> pts,((int64_t )st -> time_base . den) * frame_size);\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n frac_add(&st -> pts,((int64_t )st -> time_base . den) * st -> codec -> time_base . num);\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n return 0;\r\n}\r\n\r\n\r\ninline static int split_write_packet(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n int did_split;\r\n did_split = av_packet_split_side_data(pkt);\r\n ret = ((s -> oformat -> write_packet)(s,pkt));\r\n if (did_split) {\r\n av_packet_merge_side_data(pkt);\r\n }\r\n return ret;\r\n}\r\n\r\nint av_write_frame(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n if (!pkt) {\r\n if (s -> oformat -> flags & 0x10000) {\r\n ret = ((s -> oformat -> write_packet)(s,((void *)0)));\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n return ret;\r\n }\r\n return 1;\r\n }\r\n ret = compute_pkt_fields2(s,s -> streams[pkt -> stream_index],pkt);\r\n if (ret < 0 && !(s -> oformat -> flags & 0x80)) {\r\n return ret;\r\n }\r\n ret = split_write_packet(s,pkt);\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n if (ret >= 0) {\r\n s -> streams[pkt -> stream_index] -> nb_frames++;\r\n }\r\n return ret;\r\n}\r\n#define CHUNK_START 0x1000\r\n\r\nint ff_interleave_add_packet(AVFormatContext *s,AVPacket *pkt,int (*compare)(AVFormatContext *, AVPacket *, AVPacket *))\r\n{\r\n AVPacketList **next_point;\r\n AVPacketList *this_pktl;\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n int chunked = s -> max_chunk_size || s -> max_chunk_duration;\r\n this_pktl = (av_mallocz(sizeof(AVPacketList )));\r\n if (!this_pktl) {\r\n return - 12;\r\n }\r\n this_pktl -> pkt = *pkt;\r\n\r\n pkt -> destruct = ((void *)0);\r\n\r\n av_dup_packet(&this_pktl -> pkt);\r\n if (s -> streams[pkt -> stream_index] -> last_in_packet_buffer) {\r\n next_point = &st -> last_in_packet_buffer -> next;\r\n }\r\n else {\r\n next_point = &s -> packet_buffer;\r\n }\r\n if (chunked) {\r\n uint64_t max = (av_rescale_q_rnd((s -> max_chunk_duration),((AVRational ){(1), (1000000)}),st -> time_base,AV_ROUND_UP));\r\n st -> interleaver_chunk_size += (pkt -> size);\r\n st -> interleaver_chunk_duration += (pkt -> duration);\r\n if (s -> max_chunk_size && st -> interleaver_chunk_size > (s -> max_chunk_size) || max && (st -> interleaver_chunk_duration) > max) {\r\n st -> interleaver_chunk_size = 0;\r\n this_pktl -> pkt . flags |= 0x1000;\r\n if (max && (st -> interleaver_chunk_duration) > max) {\r\n int64_t syncoffset = (((st -> codec -> codec_type) == AVMEDIA_TYPE_VIDEO) * max / 2);\r\n int64_t syncto = ((av_rescale(pkt -> dts + syncoffset,1,max)) * max - syncoffset);\r\n st -> interleaver_chunk_duration += ((pkt -> dts - syncto) / 8) - max;\r\n }\r\n else {\r\n st -> interleaver_chunk_duration = 0;\r\n }\r\n }\r\n }\r\n if ( *next_point) {\r\n if (chunked && !(this_pktl -> pkt . flags & 0x1000)) {\r\n goto next_non_null;\r\n }\r\n if (compare(s,&s -> packet_buffer_end -> pkt,pkt)) {\r\n while( *next_point && (chunked && !(( *next_point) -> pkt . flags & 0x1000) || !compare(s,&( *next_point) -> pkt,pkt)))\r\n next_point = &( *next_point) -> next;\r\n if ( *next_point) {\r\n goto next_non_null;\r\n }\r\n }\r\n else {\r\n next_point = &s -> packet_buffer_end -> next;\r\n }\r\n }\r\n (void )0;\r\n s -> packet_buffer_end = this_pktl;\r\n next_non_null:\r\n this_pktl -> next = *next_point;\r\n s -> streams[pkt -> stream_index] -> last_in_packet_buffer = *next_point = this_pktl;\r\n return 0;\r\n}\r\n\r\nstatic int ff_interleave_compare_dts(AVFormatContext *s,AVPacket *next,AVPacket *pkt)\r\n{\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n AVStream *st2 = s -> streams[next -> stream_index];\r\n int comp = av_compare_ts(next -> dts,st2 -> time_base,pkt -> dts,st -> time_base);\r\n if (s -> audio_preload && (st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO != ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) {\r\n int64_t ts = av_rescale_q(pkt -> dts,st -> time_base,((AVRational ){(1), (1000000)})) - (s -> audio_preload * ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO));\r\n int64_t ts2 = av_rescale_q(next -> dts,st2 -> time_base,((AVRational ){(1), (1000000)})) - (s -> audio_preload * ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO));\r\n if (ts == ts2) {\r\n ts = (pkt -> dts * st -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st -> time_base . den) * st2 -> time_base . den - (next -> dts * st2 -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st2 -> time_base . den) * st -> time_base . den;\r\n ts2 = 0;\r\n }\r\n comp = (ts > ts2) - (ts < ts2);\r\n }\r\n if (comp == 0) {\r\n return pkt -> stream_index < next -> stream_index;\r\n }\r\n return comp > 0;\r\n}\r\n\r\nint ff_interleave_packet_per_dts(AVFormatContext *s,AVPacket *out,AVPacket *pkt,int flush)\r\n{\r\n AVPacketList *pktl;\r\n int stream_count = 0;\r\n int noninterleaved_count = 0;\r\n int64_t delta_dts_max = 0;\r\n int i;\r\n int ret;\r\n if (pkt) {\r\n ret = ff_interleave_add_packet(s,pkt,ff_interleave_compare_dts);\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n if (s -> streams[i] -> last_in_packet_buffer) {\r\n ++stream_count;\r\n }\r\n else {\r\n if ((s -> streams[i] -> codec -> codec_type) == AVMEDIA_TYPE_SUBTITLE) {\r\n ++noninterleaved_count;\r\n }\r\n }\r\n }\r\n if (s -> nb_streams == stream_count) {\r\n flush = 1;\r\n }\r\n else {\r\n if (!flush) {\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n if (s -> streams[i] -> last_in_packet_buffer) {\r\n int64_t delta_dts = av_rescale_q(s -> streams[i] -> last_in_packet_buffer -> pkt . dts,s -> streams[i] -> time_base,((AVRational ){(1), (1000000)})) - av_rescale_q(s -> packet_buffer -> pkt . dts,s -> streams[s -> packet_buffer -> pkt . stream_index] -> time_base,((AVRational ){(1), (1000000)}));\r\n delta_dts_max = (delta_dts_max > delta_dts?delta_dts_max : delta_dts);\r\n }\r\n }\r\n if (s -> nb_streams == (stream_count + noninterleaved_count) && delta_dts_max > (20 * 1000000)) {\r\n av_log(s,48,\"flushing with %d noninterleaved\\n\",noninterleaved_count);\r\n flush = 1;\r\n }\r\n }\r\n }\r\n if (stream_count && flush) {\r\n AVStream *st;\r\n pktl = s -> packet_buffer;\r\n *out = pktl -> pkt;\r\n st = s -> streams[out -> stream_index];\r\n s -> packet_buffer = pktl -> next;\r\n if (!s -> packet_buffer) {\r\n s -> packet_buffer_end = ((void *)0);\r\n }\r\n if (st -> last_in_packet_buffer == pktl) {\r\n st -> last_in_packet_buffer = ((void *)0);\r\n }\r\n av_freep((&pktl));\r\n if (s -> avoid_negative_ts > 0) {\r\n if (out -> dts != ((int64_t )0x8000000000000000UL)) {\r\n if (!st -> mux_ts_offset && out -> dts < 0) {\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n s -> streams[i] -> mux_ts_offset = av_rescale_q_rnd(-out -> dts,st -> time_base,s -> streams[i] -> time_base,AV_ROUND_UP);\r\n }\r\n }\r\n out -> dts += st -> mux_ts_offset;\r\n }\r\n if (out -> pts != ((int64_t )0x8000000000000000UL)) {\r\n out -> pts += st -> mux_ts_offset;\r\n }\r\n }\r\n return 1;\r\n }\r\n else {\r\n av_init_packet(out);\r\n return 0;\r\n }\r\n}\r\n#if FF_API_INTERLEAVE_PACKET\r\n\r\nint av_interleave_packet_per_dts(AVFormatContext *s,AVPacket *out,AVPacket *pkt,int flush)\r\n{\r\n return ff_interleave_packet_per_dts(s,out,pkt,flush);\r\n}\r\n#endif\r\n\r\n\r\nstatic int interleave_packet(AVFormatContext *s,AVPacket *out,AVPacket *in,int flush)\r\n{\r\n if (s -> oformat -> interleave_packet) {\r\n int ret = (s -> oformat -> interleave_packet)(s,out,in,flush);\r\n if (in) {\r\n av_free_packet(in);\r\n }\r\n return ret;\r\n }\r\n else {\r\n return ff_interleave_packet_per_dts(s,out,in,flush);\r\n }\r\n}\r\n\r\nint av_interleaved_write_frame(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n int flush = 0;\r\n if (pkt) {\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n\r\n if ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO && pkt -> size == 0) {\r\n return 0;\r\n }\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_interleaved_write_frame size:%d dts:%s pts:%s\\n\",pkt -> size,av_ts_make_string(((char [32]){(0)}),pkt -> dts),av_ts_make_string(((char [32]){(0)}),pkt -> pts));\r\n }\r\n }while (0);\r\n if ((ret = compute_pkt_fields2(s,st,pkt)) < 0 && !(s -> oformat -> flags & 0x80)) {\r\n return ret;\r\n }\r\n if (pkt -> dts == ((int64_t )0x8000000000000000UL) && !(s -> oformat -> flags & 0x80)) {\r\n return - 22;\r\n }\r\n }\r\n else {\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_interleaved_write_frame FLUSH\\n\");\r\n }\r\n }while (0);\r\n flush = 1;\r\n }\r\n for (; ; ) {\r\n AVPacket opkt;\r\n int ret = interleave_packet(s,&opkt,pkt,flush);\r\n\r\n if (ret <= 0) {\r\n return ret;\r\n }\r\n ret = split_write_packet(s,&opkt);\r\n if (ret >= 0) {\r\n s -> streams[opkt . stream_index] -> nb_frames++;\r\n }\r\n av_free_packet(&opkt);\r\n pkt = ((void *)0);\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n if (s -> pb && s -> pb -> error) {\r\n return s -> pb -> error;\r\n }\r\n }\r\n}\r\n\r\nint av_write_trailer(AVFormatContext *s)\r\n{\r\n int ret;\r\n int i;\r\n for (; ; ) {\r\n AVPacket pkt;\r\n ret = interleave_packet(s,&pkt,((void *)0),1);\r\n\r\n if (ret < 0) {\r\n goto fail;\r\n }\r\n if (!ret) {\r\n break; \r\n }\r\n ret = split_write_packet(s,&pkt);\r\n if (ret >= 0) {\r\n s -> streams[pkt . stream_index] -> nb_frames++;\r\n }\r\n av_free_packet(&pkt);\r\n if (ret < 0) {\r\n goto fail;\r\n }\r\n if (s -> pb && s -> pb -> error) {\r\n goto fail;\r\n }\r\n }\r\n if (s -> oformat -> write_trailer) {\r\n ret = ((s -> oformat -> write_trailer)(s));\r\n }\r\n fail:\r\n if (s -> pb) {\r\n avio_flush(s -> pb);\r\n }\r\n if (ret == 0) {\r\n ret = (s -> pb?s -> pb -> error : 0);\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n av_freep((&s -> streams[i] -> priv_data));\r\n av_freep((&s -> streams[i] -> index_entries));\r\n }\r\n if (s -> oformat -> priv_class) {\r\n av_opt_free(s -> priv_data);\r\n }\r\n av_freep((&s -> priv_data));\r\n return ret;\r\n}\r\n\r\nint av_get_output_timestamp(struct AVFormatContext *s,int stream,int64_t *dts,int64_t *wall)\r\n{\r\n if (!s -> oformat || !s -> oformat -> get_output_timestamp) {\r\n return - 38;\r\n }\r\n (s -> oformat -> get_output_timestamp)(s,stream,dts,wall);\r\n return 0;\r\n}\r\n\r\nvoid illiteracy_shivery(void *unshattered_sauterne)\r\n{\r\n ++global_variable;;\r\n frowsy_brindle(unshattered_sauterne);\r\n}\r\n\r\nvoid frowsy_brindle(void *qmc_starting)\r\n{\r\n ++global_variable;;\r\n nonrecoil_sarcology(qmc_starting);\r\n}\r\n\r\nvoid nonrecoil_sarcology(void *unsyntheticness_sinnamahoning)\r\n{\r\n ++global_variable;;\r\n automating_zostera(unsyntheticness_sinnamahoning);\r\n}\r\n\r\nvoid automating_zostera(void *cynosarges_producible)\r\n{\r\n ++global_variable;;\r\n satyagraha_slicking(cynosarges_producible);\r\n}\r\n\r\nvoid satyagraha_slicking(void *phenomenona_birl)\r\n{\r\n ++global_variable;;\r\n enhydris_blemishes(phenomenona_birl);\r\n}\r\n\r\nvoid enhydris_blemishes(void *boswelliana_pearse)\r\n{\r\n ++global_variable;;\r\n ottavino_unsordidness(boswelliana_pearse);\r\n}\r\n\r\nvoid ottavino_unsordidness(void *desertless_pokorny)\r\n{\r\n ++global_variable;;\r\n pristine_smucker(desertless_pokorny);\r\n}\r\n\r\nvoid pristine_smucker(void *pnompenh_superstitious)\r\n{\r\n ++global_variable;;\r\n bedquilts_hearselike(pnompenh_superstitious);\r\n}\r\n\r\nvoid bedquilts_hearselike(void *scrumpy_detailers)\r\n{\r\n ++global_variable;;\r\n nondisposed_cardstock(scrumpy_detailers);\r\n}\r\n\r\nvoid nondisposed_cardstock(void *numerably_peens)\r\n{\r\n int oc_i = 0;\r\n int opt_var;\r\n char *preappearances_etageres = 0;\r\n ++global_variable;;\r\n preappearances_etageres = ((char *)((char *)numerably_peens));\r\n \r\n size_t (*canary_pointer[1])(const char *);\r\n char base_path[20];\r\n if (strlen(preappearances_etageres) < 20) {\r\n canary_pointer[0] = strlen;\r\n memset(base_path,0,20);\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n realpath(preappearances_etageres,base_path);\r\n opt_var = canary_pointer[0](base_path);\r\n \r\n for (; oc_i < opt_var; ++oc_i) {\r\n base_path[oc_i] = toupper(base_path[oc_i]);\r\n }\r\n printf(\"%s\\n\",base_path);\r\n \r\n \r\n }\r\n \r\n;\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "785"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n#include <stdio.h>\r\n#include \"cryptlib.h\"\r\n#ifndef OPENSSL_NO_BF\r\n#include <openssl/evp.h>\r\n#include \"evp_locl.h\"\r\n#include <openssl/objects.h>\r\n#include <openssl/blowfish.h>\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\nstatic int bf_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc);\r\ntypedef struct {\r\nBF_KEY ks;}EVP_BF_KEY;\r\n#define data(ctx)\tEVP_C_DATA(EVP_BF_KEY,ctx)\r\nint glycerize_foulsome = 0;\r\n\r\nstruct overpositively_hybridae \r\n{\r\n char *cowpoke_snogs;\r\n double nekrasov_caruncle;\r\n char *mestizos_axillary;\r\n char unruly_paraphs;\r\n int lateness_parisianly;\r\n}\r\n;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nint toupper(int c)\r\n{\r\n if (c >= 97 && c <= 122) {\r\n return c - 32;\r\n }\r\n return c;\r\n}\r\n\r\nstatic int bf_cbc_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n BF_cbc_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n BF_cbc_encrypt(in,out,((long )inl),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int bf_cfb64_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (64 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n BF_cfb64_encrypt(in,out,((long )(64 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int bf_ecb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t i;\r\n size_t bl;\r\n bl = (ctx -> cipher -> block_size);\r\n if (inl < bl) {\r\n return 1;\r\n }\r\n inl -= bl;\r\n for (i = 0; i <= inl; i += bl) \r\n BF_ecb_encrypt(in + i,out + i,(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> encrypt);\r\n return 1;\r\n}\r\n\r\nstatic int bf_ofb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n BF_ofb64_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n BF_ofb64_encrypt(in,out,((long )inl),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER bf_cbc = {(91), (8), (16), (8), ((0x8 | 0x2)), (bf_init_key), (bf_cbc_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_cbc()\r\n{\r\n int i = 0;\r\n int buff_size = 63;\r\n int taint_len;\r\n char *heap_buff_64 = 0;\r\n char *granularly_dutuburi = 0;\r\n struct overpositively_hybridae *unkindlily_dimberdamber = {0};\r\n struct overpositively_hybridae statolithic_subscript;\r\n char *thomasite_siruelas;;\r\n if (__sync_bool_compare_and_swap(&glycerize_foulsome,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n thomasite_siruelas = getenv(\"GRANDNEPHEWS_OUTBEGGED\");\r\n if (thomasite_siruelas != 0) {;\r\n statolithic_subscript . cowpoke_snogs = ((char *)thomasite_siruelas);\r\n unkindlily_dimberdamber = &statolithic_subscript;\r\n granularly_dutuburi = ((char *)( *unkindlily_dimberdamber) . cowpoke_snogs);\r\n \r\n \r\n \r\n heap_buff_64 = (char*) malloc(64 * sizeof(char));\r\n if (heap_buff_64 != NULL) {\r\n memset(heap_buff_64, 'A' ,64);\r\n heap_buff_64[64 - 1] = '\\0';\r\n \r\n \r\n \r\n taint_len = ((int )(strlen(granularly_dutuburi)));\r\n for (; taint_len >= 0; (--buff_size , --taint_len)) {\r\n \r\n \r\n heap_buff_64[buff_size] = granularly_dutuburi[taint_len];\r\n }\r\n \r\n for (; i < 64; ++i) {\r\n heap_buff_64[i] = toupper(heap_buff_64[i]);\r\n }\r\n \r\n \r\n printf(\"%s\\n\",&(heap_buff_64[buff_size+1]));\r\n free(heap_buff_64);\r\n \r\n \r\n \r\n }\r\n;\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n return &bf_cbc;\r\n}\r\nstatic const EVP_CIPHER bf_cfb64 = {(93), (1), (16), (8), ((0x8 | 0x3)), (bf_init_key), (bf_cfb64_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_cfb64()\r\n{\r\n return &bf_cfb64;\r\n}\r\nstatic const EVP_CIPHER bf_ofb = {(94), (1), (16), (8), ((0x8 | 0x4)), (bf_init_key), (bf_ofb_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_ofb()\r\n{\r\n return &bf_ofb;\r\n}\r\nstatic const EVP_CIPHER bf_ecb = {(92), (8), (16), (0), ((0x8 | 0x1)), (bf_init_key), (bf_ecb_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_ecb()\r\n{\r\n return &bf_ecb;\r\n}\r\n\r\nstatic int bf_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc)\r\n{\r\n BF_set_key(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks,EVP_CIPHER_CTX_key_length(ctx),key);\r\n return 1;\r\n}\r\n#endif\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "124"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avassert.h\"\r\n#include \"avdevice.h\"\r\n#include \"config.h\"\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <sys/types.h> \r\n#include <mysql.h> \r\n#include </trace.h> \r\nint corrupting_ketene = 0;\r\nint global_variable;\r\nvoid acleistocardia_cloddiness(void **linen_saddlebacked);\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid slumwise_bulldoze(void (*heterocercy_pigmy)(void **));\r\n\r\nunsigned int avdevice_version()\r\n{;\r\n if (__sync_bool_compare_and_swap(&corrupting_ketene,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n slumwise_bulldoze(acleistocardia_cloddiness);\r\n }\r\n }\r\n ;\r\n do {\r\n if (!(103 >= 100)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"103 >= 100\",\"avdevice.c\",25);\r\n abort();\r\n }\r\n }while (0);\r\n return ('6' << 16 | 3 << 8 | 103);\r\n}\r\n\r\nconst char *avdevice_configuration()\r\n{\r\n return \"--prefix=/opt//workspace/install --enable-pic --disable-static --enable-shared --disable-yasm --disable-doc --enable-pthreads --disable-w32threads --disable-os2threads --enable-zlib --enable-openssl --disable-asm --extra-cflags= --extra-ldflags= --extra-libs='-lmysqlclient -lssl -ldl'\";\r\n}\r\n\r\nconst char *avdevice_license()\r\n{\r\n#define LICENSE_PREFIX \"libavdevice license: \"\r\n return (\"libavdevice license: LGPL version 2.1 or later\" + sizeof(\"libavdevice license: \") - 1);\r\n}\r\n\r\nvoid acleistocardia_cloddiness(void **linen_saddlebacked)\r\n{\r\n void *foreboded_elconin = 0;\r\n int sansara_disdainable = 73;\r\n char *lymphadenoid_overnighters;\r\n ++global_variable;;\r\n setup_printf_context();\r\n read_taint(&lymphadenoid_overnighters,\"8910\",sansara_disdainable);\r\n if (lymphadenoid_overnighters != 0) {;\r\n foreboded_elconin = ((void *)lymphadenoid_overnighters);\r\n *linen_saddlebacked = foreboded_elconin;\r\n }\r\n}\r\n\r\nvoid slumwise_bulldoze(void (*heterocercy_pigmy)(void **))\r\n{\r\n MYSQL_ROW row;\r\n unsigned int num_fields;\r\n my_ulonglong num_rows;\r\n MYSQL_RES *result;\r\n int i;\r\n int status;\r\n char query_buffer[1000];\r\n MYSQL *conn;\r\n unsigned int dbport = 0;\r\n char *dbpassword = 0;\r\n char *dbuser = 0;\r\n char *dbhost = 0;\r\n char * dbdatabase = 0;\r\n char use_str[150] = {0};\r\n int random_int = 0;\r\n char *boscovich_wither = 0;\r\n void **showboard_pin = 0;\r\n ++global_variable;\r\n void *tyrantlike_bifrost = 0;\r\n heterocercy_pigmy(&tyrantlike_bifrost);\r\n if (((char *)tyrantlike_bifrost) != 0) {;\r\n showboard_pin = &tyrantlike_bifrost;\r\n boscovich_wither = ((char *)((char *)( *showboard_pin)));\r\n \r\n dbhost = getenv(\"DBMYSQLHOST\");\r\n dbuser = getenv(\"DBMYSQLUSER\");\r\n dbpassword = getenv(\"DBMYSQLPASSWORD\");\r\n dbport = ((unsigned int )(strtoul(getenv(\"DBMYSQLPORT\"),0,10)));\r\n dbdatabase = getenv(\"SS_DBMYSQLDATABASE\");\r\n \r\n \r\n \r\n \r\n \r\n if (dbhost != 0 && dbport != 0 && (dbuser != 0 && dbpassword != 0)) {\r\n conn = mysql_init(0);\r\n if (conn != 0) {\r\n if (mysql_real_connect(conn,dbhost,dbuser,dbpassword,0,dbport,\"/var/lib/mysql/mysql.sock\",65536UL) != 0) {\r\n snprintf(use_str,150,\"USE %s;\", dbdatabase);\r\n if (mysql_query(conn, use_str) == 0) {\r\n \r\n\r\n srand(time(NULL));\r\n random_int = (rand() % 1000) + 100;\r\n snprintf(query_buffer,1000,\"INSERT INTO Shippers (ShipperID, CompanyName) VALUES ('%d', '%s');\", random_int, boscovich_wither);\r\n \r\n \r\n \r\n\r\n if (mysql_query(conn,query_buffer)) {\r\n printf(\"%s error %u: %s\\n\",\"Query\",mysql_errno(conn),mysql_error(conn));\r\n } else {\r\n printf(\"Number of Rows Affected: %llu\\n\", mysql_affected_rows(conn));\r\n }\r\n \r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Query\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n mysql_close(conn);\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Real connect\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Init\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n }\r\n \r\n;\r\n if (((char *)( *showboard_pin)) != 0) \r\n free(((char *)((char *)( *showboard_pin))));\r\nclose_printf_context();\r\n }\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "89"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include <string.h>\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/mem.h\"\r\n#include \"avcodec.h\"\r\n#include \"bytestream.h\"\r\n#include \"internal.h\"\r\n#include <mongoose.h> \r\n#include <stdio.h> \r\n#include </trace.h> \r\n#include <sys/stat.h> \r\nint charivan_gruithuisen = 0;\r\nint global_variable;\r\nvoid handle_taint(char *phalansteries_farseeingness);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nint 191_global_var = 0;\r\n\r\nvoid ff_packet_free_side_data(AVPacket *pkt)\r\n{\r\n int i;\r\n for (i = 0; i < pkt -> side_data_elems; i++) \r\n av_free(pkt -> side_data[i] . data);\r\n av_freep((&pkt -> side_data));\r\n pkt -> side_data_elems = 0;\r\n}\r\n\r\nvoid av_destruct_packet(AVPacket *pkt)\r\n{\r\n av_free((pkt -> data));\r\n pkt -> data = ((void *)0);\r\n pkt -> size = 0;\r\n}\r\n\r\nvoid av_init_packet(AVPacket *pkt)\r\n{\r\n pkt -> pts = ((int64_t )0x8000000000000000UL);\r\n pkt -> dts = ((int64_t )0x8000000000000000UL);\r\n pkt -> pos = (- 1);\r\n pkt -> duration = 0;\r\n pkt -> convergence_duration = 0;\r\n pkt -> flags = 0;\r\n pkt -> stream_index = 0;\r\n pkt -> destruct = ((void *)0);\r\n pkt -> side_data = ((void *)0);\r\n pkt -> side_data_elems = 0;\r\n}\r\n\r\nint av_new_packet(AVPacket *pkt,int size)\r\n{\r\n uint8_t *data = ((void *)0);\r\n if (((unsigned int )size) < ((unsigned int )size) + 16) {\r\n data = (av_malloc((size + 16)));\r\n }\r\n if (data) {\r\n memset((data + size),0,16);\r\n }\r\n else {\r\n size = 0;\r\n }\r\n av_init_packet(pkt);\r\n pkt -> data = data;\r\n pkt -> size = size;\r\n pkt -> destruct = av_destruct_packet;\r\n if (!data) {\r\n return - 12;\r\n }\r\n return 0;\r\n}\r\n\r\nvoid av_shrink_packet(AVPacket *pkt,int size)\r\n{\r\n if (pkt -> size <= size) {\r\n return ;\r\n }\r\n pkt -> size = size;\r\n memset((pkt -> data + size),0,16);\r\n}\r\n\r\nint av_grow_packet(AVPacket *pkt,int grow_by)\r\n{\r\n void *new_ptr;\r\n do {\r\n if (!(((unsigned int )(pkt -> size)) <= (2147483647 - 16))) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"(unsigned)pkt->size <= 2147483647 - 16\",\"avpacket.c\",90);\r\n abort();\r\n }\r\n }while (0);\r\n if (!pkt -> size) {\r\n return av_new_packet(pkt,grow_by);\r\n }\r\n if (((unsigned int )grow_by) > (2147483647 - (pkt -> size + 16))) {\r\n return - 1;\r\n }\r\n new_ptr = av_realloc((pkt -> data),(pkt -> size + grow_by + 16));\r\n if (!new_ptr) {\r\n return - 12;\r\n }\r\n pkt -> data = new_ptr;\r\n pkt -> size += grow_by;\r\n memset((pkt -> data + pkt -> size),0,16);\r\n return 0;\r\n}\r\n#define DUP_DATA(dst, src, size, padding) \\\r\n do { \\\r\n void *data; \\\r\n if (padding) { \\\r\n if ((unsigned)(size) > \\\r\n (unsigned)(size) + FF_INPUT_BUFFER_PADDING_SIZE) \\\r\n goto failed_alloc; \\\r\n data = av_malloc(size + FF_INPUT_BUFFER_PADDING_SIZE); \\\r\n } else { \\\r\n data = av_malloc(size); \\\r\n } \\\r\n if (!data) \\\r\n goto failed_alloc; \\\r\n memcpy(data, src, size); \\\r\n if (padding) \\\r\n memset((uint8_t *)data + size, 0, \\\r\n FF_INPUT_BUFFER_PADDING_SIZE); \\\r\n dst = data; \\\r\n } while (0)\r\n\r\n\r\nstatic int copy_packet_data(AVPacket *dst,AVPacket *src)\r\n{\r\n dst -> data = ((void *)0);\r\n dst -> side_data = ((void *)0);\r\n do {\r\n void *data;\r\n if (1) {\r\n if (((unsigned int )(dst -> size)) > ((unsigned int )(dst -> size)) + 16) {\r\n goto failed_alloc;\r\n }\r\n data = av_malloc((dst -> size + 16));\r\n }\r\n else {\r\n data = av_malloc((dst -> size));\r\n }\r\n if (!data) {\r\n goto failed_alloc;\r\n }\r\n memcpy(data,(src -> data),(dst -> size));\r\n if (1) {\r\n memset((((uint8_t *)data) + dst -> size),0,16);\r\n }\r\n dst -> data = data;\r\n }while (0);\r\n dst -> destruct = av_destruct_packet;\r\n if (dst -> side_data_elems) {\r\n int i;\r\n do {\r\n void *data;\r\n if (0) {\r\n if (((unsigned int )((dst -> side_data_elems) * sizeof(( *dst -> side_data)))) > ((unsigned int )((dst -> side_data_elems) * sizeof(( *dst -> side_data)))) + 16) {\r\n goto failed_alloc;\r\n }\r\n data = av_malloc((dst -> side_data_elems) * sizeof(( *dst -> side_data)) + 16);\r\n }\r\n else {\r\n data = av_malloc((dst -> side_data_elems) * sizeof(( *dst -> side_data)));\r\n }\r\n if (!data) {\r\n goto failed_alloc;\r\n }\r\n memcpy(data,(src -> side_data),(dst -> side_data_elems) * sizeof(( *dst -> side_data)));\r\n if (0) {\r\n memset((((uint8_t *)data) + (dst -> side_data_elems) * sizeof(( *dst -> side_data))),0,16);\r\n }\r\n dst -> side_data = data;\r\n }while (0);\r\n memset((dst -> side_data),0,(dst -> side_data_elems) * sizeof(( *dst -> side_data)));\r\n for (i = 0; i < dst -> side_data_elems; i++) {\r\n do {\r\n void *data;\r\n if (1) {\r\n if (((unsigned int )src -> side_data[i] . size) > ((unsigned int )src -> side_data[i] . size) + 16) {\r\n goto failed_alloc;\r\n }\r\n data = av_malloc((src -> side_data[i] . size + 16));\r\n }\r\n else {\r\n data = av_malloc(src -> side_data[i] . size);\r\n }\r\n if (!data) {\r\n goto failed_alloc;\r\n }\r\n memcpy(data,src -> side_data[i] . data,src -> side_data[i] . size);\r\n if (1) {\r\n memset((((uint8_t *)data) + src -> side_data[i] . size),0,16);\r\n }\r\n dst -> side_data[i] . data = data;\r\n }while (0);\r\n dst -> side_data[i] . size = src -> side_data[i] . size;\r\n dst -> side_data[i] . type = src -> side_data[i] . type;\r\n }\r\n }\r\n return 0;\r\n failed_alloc:\r\n av_destruct_packet(dst);\r\n return - 12;\r\n}\r\n\r\nint av_dup_packet(AVPacket *pkt)\r\n{\r\n AVPacket tmp_pkt;\r\n if (pkt -> destruct == ((void *)0) && pkt -> data) {\r\n tmp_pkt = *pkt;\r\n return copy_packet_data(pkt,&tmp_pkt);\r\n }\r\n return 0;\r\n}\r\n\r\nint av_copy_packet(AVPacket *dst,AVPacket *src)\r\n{\r\n *dst = *src;\r\n return copy_packet_data(dst,src);\r\n}\r\n\r\nvoid av_free_packet(AVPacket *pkt)\r\n{\r\n if (pkt) {\r\n int i;\r\n if (pkt -> destruct) {\r\n (pkt -> destruct)(pkt);\r\n }\r\n pkt -> data = ((void *)0);\r\n pkt -> size = 0;\r\n for (i = 0; i < pkt -> side_data_elems; i++) \r\n av_free(pkt -> side_data[i] . data);\r\n av_freep((&pkt -> side_data));\r\n pkt -> side_data_elems = 0;\r\n }\r\n}\r\n\r\nuint8_t *av_packet_new_side_data(AVPacket *pkt,enum AVPacketSideDataType type,int size)\r\n{\r\n int elems = pkt -> side_data_elems;\r\n if ((((unsigned int )elems) + 1) > 2147483647 / sizeof(( *pkt -> side_data))) {\r\n return ((void *)0);\r\n }\r\n if (((unsigned int )size) > (2147483647 - 16)) {\r\n return ((void *)0);\r\n }\r\n pkt -> side_data = (av_realloc((pkt -> side_data),(elems + 1) * sizeof(( *pkt -> side_data))));\r\n if (!pkt -> side_data) {\r\n return ((void *)0);\r\n }\r\n pkt -> side_data[elems] . data = (av_malloc((size + 16)));\r\n if (!pkt -> side_data[elems] . data) {\r\n return ((void *)0);\r\n }\r\n pkt -> side_data[elems] . size = size;\r\n pkt -> side_data[elems] . type = type;\r\n pkt -> side_data_elems++;\r\n return pkt -> side_data[elems] . data;\r\n}\r\n\r\nuint8_t *av_packet_get_side_data(AVPacket *pkt,enum AVPacketSideDataType type,int *size)\r\n{\r\n int i;\r\n for (i = 0; i < pkt -> side_data_elems; i++) {\r\n if (pkt -> side_data[i] . type == type) {\r\n if (size) {\r\n *size = pkt -> side_data[i] . size;\r\n }\r\n return pkt -> side_data[i] . data;\r\n }\r\n }\r\n return ((void *)0);\r\n}\r\n#define FF_MERGE_MARKER 0x8c4d9d108e25e9feULL\r\n\r\nint av_packet_merge_side_data(AVPacket *pkt)\r\n{\r\n if (pkt -> side_data_elems) {\r\n int i;\r\n uint8_t *p;\r\n uint64_t size = ((pkt -> size) + 8LL + 16);\r\n AVPacket old = *pkt;\r\n for (i = 0; i < old . side_data_elems; i++) {\r\n size += (old . side_data[i] . size + 5);\r\n }\r\n if (size > 2147483647) {\r\n return - 22;\r\n }\r\n p = (av_malloc(size));\r\n if (!p) {\r\n return - 12;\r\n }\r\n pkt -> data = p;\r\n pkt -> destruct = av_destruct_packet;\r\n pkt -> size = (size - 16);\r\n bytestream_put_buffer(&p,old . data,old . size);\r\n for (i = old . side_data_elems - 1; i >= 0; i--) {\r\n bytestream_put_buffer(&p,old . side_data[i] . data,old . side_data[i] . size);\r\n bytestream_put_be32(&p,old . side_data[i] . size);\r\n *(p++) = (old . side_data[i] . type | ((i == old . side_data_elems - 1) * 128));\r\n }\r\n bytestream_put_be64(&p,0x8c4d9d108e25e9feULL);\r\n do {\r\n if (!(p - pkt -> data == (pkt -> size))) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"p-pkt->data == pkt->size\",\"avpacket.c\",255);\r\n abort();\r\n }\r\n }while (0);\r\n memset(p,0,16);\r\n av_free_packet(&old);\r\n pkt -> side_data_elems = 0;\r\n pkt -> side_data = ((void *)0);\r\n return 1;\r\n }\r\n return 0;\r\n}\r\n\r\nint av_packet_split_side_data(AVPacket *pkt)\r\n{;\r\n if (__sync_bool_compare_and_swap(&charivan_gruithuisen,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n if (!pkt -> side_data_elems && pkt -> size > 12 && (av_bswap64(((const union unaligned_64 *)(pkt -> data + pkt -> size - 8)) -> l)) == 0x8c4d9d108e25e9feULL) {\r\n int i;\r\n unsigned int size;\r\n uint8_t *p;\r\n p = pkt -> data + pkt -> size - 8 - 5;\r\n for (i = 1; ; i++) {\r\n size = av_bswap32(((const union unaligned_32 *)p) -> l);\r\n if (size > 2147483647 || p - pkt -> data < size) {\r\n return 0;\r\n }\r\n if (p[4] & 128) {\r\n break; \r\n }\r\n p -= size + 5;\r\n }\r\n pkt -> side_data = (av_malloc(i * sizeof(( *pkt -> side_data))));\r\n if (!pkt -> side_data) {\r\n return - 12;\r\n }\r\n p = pkt -> data + pkt -> size - 8 - 5;\r\n for (i = 0; ; i++) {\r\n size = av_bswap32(((const union unaligned_32 *)p) -> l);\r\n do {\r\n if (!(size <= 2147483647 && p - pkt -> data >= size)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"size<=2147483647 && p - pkt->data >= size\",\"avpacket.c\",288);\r\n abort();\r\n }\r\n }while (0);\r\n pkt -> side_data[i] . data = (av_malloc((size + 16)));\r\n pkt -> side_data[i] . size = size;\r\n pkt -> side_data[i] . type = (p[4] & 127);\r\n if (!pkt -> side_data[i] . data) {\r\n return - 12;\r\n }\r\n memcpy(pkt -> side_data[i] . data,(p - size),size);\r\n pkt -> size -= size + 5;\r\n if (p[4] & 128) {\r\n break; \r\n }\r\n p -= size + 5;\r\n }\r\n pkt -> size -= 8;\r\n pkt -> side_data_elems = i + 1;\r\n return 1;\r\n }\r\n return 0;\r\n}\r\n\r\nint av_packet_shrink_side_data(AVPacket *pkt,enum AVPacketSideDataType type,int size)\r\n{\r\n int i;\r\n for (i = 0; i < pkt -> side_data_elems; i++) {\r\n if (pkt -> side_data[i] . type == type) {\r\n if (size > pkt -> side_data[i] . size) {\r\n return - 12;\r\n }\r\n pkt -> side_data[i] . size = size;\r\n return 0;\r\n }\r\n }\r\n return - 2;\r\n}\r\n\r\nvoid handle_taint(char *phalansteries_farseeingness)\r\n{\r\n FILE * random_data = 0;\r\n char * buff = 0;\r\n unsigned long long num = 0;\r\n unsigned long long i = 0;\r\n char *emollition_oira = 0;\r\n char *cantonment_dinner = 0;\r\n long modulators_toughish[10];\r\n char *cornelle_personality[10] = {0};\r\n int cercle_isaac = 0;\r\n char *encroachments_exmeridian = 0;\r\n ++global_variable;;\r\n if (phalansteries_farseeingness != 0) {;\r\n cercle_isaac = ((int )(strlen(phalansteries_farseeingness)));\r\n encroachments_exmeridian = ((char *)(malloc(cercle_isaac + 1)));\r\n if (encroachments_exmeridian == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n memset(encroachments_exmeridian,0,cercle_isaac + 1);\r\n memcpy(encroachments_exmeridian,phalansteries_farseeingness,cercle_isaac);\r\n if (phalansteries_farseeingness != 0) \r\n free(((char *)phalansteries_farseeingness));\r\n cornelle_personality[5] = encroachments_exmeridian;\r\n modulators_toughish[1] = 5;\r\n cantonment_dinner = *(cornelle_personality + modulators_toughish[1]);\r\n emollition_oira = ((char *)cantonment_dinner);\r\n \r\n random_data = fopen(\"/dev/urandom\", \"r\");\r\n if(random_data != NULL){\r\n num = strtoull(emollition_oira, NULL, 10);\r\n if(num > (unsigned long long) 0 ){\r\n if(num > (unsigned long long) 100 ){\r\n num = (unsigned long long) 100;\r\n }\r\n \r\n \r\n \r\n \r\n \r\n buff = malloc((num - (unsigned long long) 10) * sizeof(char *));\r\n for(i = 0; i < num - (unsigned long long) 10; i++){\r\n buff[i] = fgetc(random_data);\r\n }\r\n \r\n \r\n }\r\n printf(\"data is: %s\", buff);\r\n fclose(random_data);\r\n if(buff != NULL){\r\n free(buff);\r\n }\r\n }\r\n \r\n;\r\n if (cantonment_dinner != 0) \r\n free(((char *)cantonment_dinner));\r\nclose_printf_context();\r\n }\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "191"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include <string.h>\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/mem.h\"\r\n#include \"avcodec.h\"\r\n#include \"bytestream.h\"\r\n#include \"internal.h\"\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <sys/types.h> \r\n#include <stdio.h> \r\n#include </trace.h> \r\nint chabichou_peneplane = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid noncopying_poussie(int paulite_overspecializes,char *holders_oblates);\r\nvoid ahmeek_micronuclear(int momisms_noncausally,char *pendicler_tailloir);\r\n\r\nvoid ff_packet_free_side_data(AVPacket *pkt)\r\n{\r\n int i;\r\n for (i = 0; i < pkt -> side_data_elems; i++) \r\n av_free(pkt -> side_data[i] . data);\r\n av_freep((&pkt -> side_data));\r\n pkt -> side_data_elems = 0;\r\n}\r\n\r\nvoid av_destruct_packet(AVPacket *pkt)\r\n{\r\n av_free((pkt -> data));\r\n pkt -> data = ((void *)0);\r\n pkt -> size = 0;\r\n}\r\n\r\nvoid av_init_packet(AVPacket *pkt)\r\n{\r\n pkt -> pts = ((int64_t )0x8000000000000000UL);\r\n pkt -> dts = ((int64_t )0x8000000000000000UL);\r\n pkt -> pos = (- 1);\r\n pkt -> duration = 0;\r\n pkt -> convergence_duration = 0;\r\n pkt -> flags = 0;\r\n pkt -> stream_index = 0;\r\n pkt -> destruct = ((void *)0);\r\n pkt -> side_data = ((void *)0);\r\n pkt -> side_data_elems = 0;\r\n}\r\n\r\nint av_new_packet(AVPacket *pkt,int size)\r\n{\r\n uint8_t *data = ((void *)0);\r\n if (((unsigned int )size) < ((unsigned int )size) + 16) {\r\n data = (av_malloc((size + 16)));\r\n }\r\n if (data) {\r\n memset((data + size),0,16);\r\n }\r\n else {\r\n size = 0;\r\n }\r\n av_init_packet(pkt);\r\n pkt -> data = data;\r\n pkt -> size = size;\r\n pkt -> destruct = av_destruct_packet;\r\n if (!data) {\r\n return - 12;\r\n }\r\n return 0;\r\n}\r\n\r\nvoid av_shrink_packet(AVPacket *pkt,int size)\r\n{\r\n if (pkt -> size <= size) {\r\n return ;\r\n }\r\n pkt -> size = size;\r\n memset((pkt -> data + size),0,16);\r\n}\r\n\r\nint av_grow_packet(AVPacket *pkt,int grow_by)\r\n{\r\n void *new_ptr;\r\n do {\r\n if (!(((unsigned int )(pkt -> size)) <= (2147483647 - 16))) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"(unsigned)pkt->size <= 2147483647 - 16\",\"avpacket.c\",90);\r\n abort();\r\n }\r\n }while (0);\r\n if (!pkt -> size) {\r\n return av_new_packet(pkt,grow_by);\r\n }\r\n if (((unsigned int )grow_by) > (2147483647 - (pkt -> size + 16))) {\r\n return - 1;\r\n }\r\n new_ptr = av_realloc((pkt -> data),(pkt -> size + grow_by + 16));\r\n if (!new_ptr) {\r\n return - 12;\r\n }\r\n pkt -> data = new_ptr;\r\n pkt -> size += grow_by;\r\n memset((pkt -> data + pkt -> size),0,16);\r\n return 0;\r\n}\r\n#define DUP_DATA(dst, src, size, padding) \\\r\n do { \\\r\n void *data; \\\r\n if (padding) { \\\r\n if ((unsigned)(size) > \\\r\n (unsigned)(size) + FF_INPUT_BUFFER_PADDING_SIZE) \\\r\n goto failed_alloc; \\\r\n data = av_malloc(size + FF_INPUT_BUFFER_PADDING_SIZE); \\\r\n } else { \\\r\n data = av_malloc(size); \\\r\n } \\\r\n if (!data) \\\r\n goto failed_alloc; \\\r\n memcpy(data, src, size); \\\r\n if (padding) \\\r\n memset((uint8_t *)data + size, 0, \\\r\n FF_INPUT_BUFFER_PADDING_SIZE); \\\r\n dst = data; \\\r\n } while (0)\r\n\r\n\r\nstatic int copy_packet_data(AVPacket *dst,AVPacket *src)\r\n{\r\n dst -> data = ((void *)0);\r\n dst -> side_data = ((void *)0);\r\n do {\r\n void *data;\r\n if (1) {\r\n if (((unsigned int )(dst -> size)) > ((unsigned int )(dst -> size)) + 16) {\r\n goto failed_alloc;\r\n }\r\n data = av_malloc((dst -> size + 16));\r\n }\r\n else {\r\n data = av_malloc((dst -> size));\r\n }\r\n if (!data) {\r\n goto failed_alloc;\r\n }\r\n memcpy(data,(src -> data),(dst -> size));\r\n if (1) {\r\n memset((((uint8_t *)data) + dst -> size),0,16);\r\n }\r\n dst -> data = data;\r\n }while (0);\r\n dst -> destruct = av_destruct_packet;\r\n if (dst -> side_data_elems) {\r\n int i;\r\n do {\r\n void *data;\r\n if (0) {\r\n if (((unsigned int )((dst -> side_data_elems) * sizeof(( *dst -> side_data)))) > ((unsigned int )((dst -> side_data_elems) * sizeof(( *dst -> side_data)))) + 16) {\r\n goto failed_alloc;\r\n }\r\n data = av_malloc((dst -> side_data_elems) * sizeof(( *dst -> side_data)) + 16);\r\n }\r\n else {\r\n data = av_malloc((dst -> side_data_elems) * sizeof(( *dst -> side_data)));\r\n }\r\n if (!data) {\r\n goto failed_alloc;\r\n }\r\n memcpy(data,(src -> side_data),(dst -> side_data_elems) * sizeof(( *dst -> side_data)));\r\n if (0) {\r\n memset((((uint8_t *)data) + (dst -> side_data_elems) * sizeof(( *dst -> side_data))),0,16);\r\n }\r\n dst -> side_data = data;\r\n }while (0);\r\n memset((dst -> side_data),0,(dst -> side_data_elems) * sizeof(( *dst -> side_data)));\r\n for (i = 0; i < dst -> side_data_elems; i++) {\r\n do {\r\n void *data;\r\n if (1) {\r\n if (((unsigned int )src -> side_data[i] . size) > ((unsigned int )src -> side_data[i] . size) + 16) {\r\n goto failed_alloc;\r\n }\r\n data = av_malloc((src -> side_data[i] . size + 16));\r\n }\r\n else {\r\n data = av_malloc(src -> side_data[i] . size);\r\n }\r\n if (!data) {\r\n goto failed_alloc;\r\n }\r\n memcpy(data,src -> side_data[i] . data,src -> side_data[i] . size);\r\n if (1) {\r\n memset((((uint8_t *)data) + src -> side_data[i] . size),0,16);\r\n }\r\n dst -> side_data[i] . data = data;\r\n }while (0);\r\n dst -> side_data[i] . size = src -> side_data[i] . size;\r\n dst -> side_data[i] . type = src -> side_data[i] . type;\r\n }\r\n }\r\n return 0;\r\n failed_alloc:\r\n av_destruct_packet(dst);\r\n return - 12;\r\n}\r\n\r\nint av_dup_packet(AVPacket *pkt)\r\n{\r\n AVPacket tmp_pkt;\r\n if (pkt -> destruct == ((void *)0) && pkt -> data) {\r\n tmp_pkt = *pkt;\r\n return copy_packet_data(pkt,&tmp_pkt);\r\n }\r\n return 0;\r\n}\r\n\r\nint av_copy_packet(AVPacket *dst,AVPacket *src)\r\n{\r\n *dst = *src;\r\n return copy_packet_data(dst,src);\r\n}\r\n\r\nvoid av_free_packet(AVPacket *pkt)\r\n{\r\n if (pkt) {\r\n int i;\r\n if (pkt -> destruct) {\r\n (pkt -> destruct)(pkt);\r\n }\r\n pkt -> data = ((void *)0);\r\n pkt -> size = 0;\r\n for (i = 0; i < pkt -> side_data_elems; i++) \r\n av_free(pkt -> side_data[i] . data);\r\n av_freep((&pkt -> side_data));\r\n pkt -> side_data_elems = 0;\r\n }\r\n}\r\n\r\nuint8_t *av_packet_new_side_data(AVPacket *pkt,enum AVPacketSideDataType type,int size)\r\n{\r\n int elems = pkt -> side_data_elems;\r\n if ((((unsigned int )elems) + 1) > 2147483647 / sizeof(( *pkt -> side_data))) {\r\n return ((void *)0);\r\n }\r\n if (((unsigned int )size) > (2147483647 - 16)) {\r\n return ((void *)0);\r\n }\r\n pkt -> side_data = (av_realloc((pkt -> side_data),(elems + 1) * sizeof(( *pkt -> side_data))));\r\n if (!pkt -> side_data) {\r\n return ((void *)0);\r\n }\r\n pkt -> side_data[elems] . data = (av_malloc((size + 16)));\r\n if (!pkt -> side_data[elems] . data) {\r\n return ((void *)0);\r\n }\r\n pkt -> side_data[elems] . size = size;\r\n pkt -> side_data[elems] . type = type;\r\n pkt -> side_data_elems++;\r\n return pkt -> side_data[elems] . data;\r\n}\r\n\r\nuint8_t *av_packet_get_side_data(AVPacket *pkt,enum AVPacketSideDataType type,int *size)\r\n{\r\n int i;\r\n for (i = 0; i < pkt -> side_data_elems; i++) {\r\n if (pkt -> side_data[i] . type == type) {\r\n if (size) {\r\n *size = pkt -> side_data[i] . size;\r\n }\r\n return pkt -> side_data[i] . data;\r\n }\r\n }\r\n return ((void *)0);\r\n}\r\n#define FF_MERGE_MARKER 0x8c4d9d108e25e9feULL\r\n\r\nint av_packet_merge_side_data(AVPacket *pkt)\r\n{\r\n if (pkt -> side_data_elems) {\r\n int i;\r\n uint8_t *p;\r\n uint64_t size = ((pkt -> size) + 8LL + 16);\r\n AVPacket old = *pkt;\r\n for (i = 0; i < old . side_data_elems; i++) {\r\n size += (old . side_data[i] . size + 5);\r\n }\r\n if (size > 2147483647) {\r\n return - 22;\r\n }\r\n p = (av_malloc(size));\r\n if (!p) {\r\n return - 12;\r\n }\r\n pkt -> data = p;\r\n pkt -> destruct = av_destruct_packet;\r\n pkt -> size = (size - 16);\r\n bytestream_put_buffer(&p,old . data,old . size);\r\n for (i = old . side_data_elems - 1; i >= 0; i--) {\r\n bytestream_put_buffer(&p,old . side_data[i] . data,old . side_data[i] . size);\r\n bytestream_put_be32(&p,old . side_data[i] . size);\r\n *(p++) = (old . side_data[i] . type | ((i == old . side_data_elems - 1) * 128));\r\n }\r\n bytestream_put_be64(&p,0x8c4d9d108e25e9feULL);\r\n do {\r\n if (!(p - pkt -> data == (pkt -> size))) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"p-pkt->data == pkt->size\",\"avpacket.c\",255);\r\n abort();\r\n }\r\n }while (0);\r\n memset(p,0,16);\r\n av_free_packet(&old);\r\n pkt -> side_data_elems = 0;\r\n pkt -> side_data = ((void *)0);\r\n return 1;\r\n }\r\n return 0;\r\n}\r\n\r\nint av_packet_split_side_data(AVPacket *pkt)\r\n{\r\n int quiting_nongranular = 7;\r\n char *requisition_chinch = 0;\r\n long ahrimanian_homoclinal[10];\r\n char *soffione_undersleep[10] = {0};\r\n int glucosidal_hubie = 0;\r\n char *lampedusa_sadducee = 0;\r\n int abrade_mucilages = 29;\r\n char *hobie_eerier;;\r\n if (__sync_bool_compare_and_swap(&chabichou_peneplane,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&hobie_eerier,\"3503\",abrade_mucilages);\r\n if (hobie_eerier != 0) {;\r\n glucosidal_hubie = ((int )(strlen(hobie_eerier)));\r\n lampedusa_sadducee = ((char *)(malloc(glucosidal_hubie + 1)));\r\n if (lampedusa_sadducee == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n memset(lampedusa_sadducee,0,glucosidal_hubie + 1);\r\n memcpy(lampedusa_sadducee,hobie_eerier,glucosidal_hubie);\r\n if (hobie_eerier != 0) \r\n free(((char *)hobie_eerier));\r\n soffione_undersleep[5] = lampedusa_sadducee;\r\n ahrimanian_homoclinal[1] = 5;\r\n requisition_chinch = *(soffione_undersleep + ahrimanian_homoclinal[1]);\r\n noncopying_poussie(quiting_nongranular,requisition_chinch);\r\n }\r\n }\r\n }\r\n ;\r\n if (!pkt -> side_data_elems && pkt -> size > 12 && (av_bswap64(((const union unaligned_64 *)(pkt -> data + pkt -> size - 8)) -> l)) == 0x8c4d9d108e25e9feULL) {\r\n int i;\r\n unsigned int size;\r\n uint8_t *p;\r\n p = pkt -> data + pkt -> size - 8 - 5;\r\n for (i = 1; ; i++) {\r\n size = av_bswap32(((const union unaligned_32 *)p) -> l);\r\n if (size > 2147483647 || p - pkt -> data < size) {\r\n return 0;\r\n }\r\n if (p[4] & 128) {\r\n break; \r\n }\r\n p -= size + 5;\r\n }\r\n pkt -> side_data = (av_malloc(i * sizeof(( *pkt -> side_data))));\r\n if (!pkt -> side_data) {\r\n return - 12;\r\n }\r\n p = pkt -> data + pkt -> size - 8 - 5;\r\n for (i = 0; ; i++) {\r\n size = av_bswap32(((const union unaligned_32 *)p) -> l);\r\n do {\r\n if (!(size <= 2147483647 && p - pkt -> data >= size)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"size<=2147483647 && p - pkt->data >= size\",\"avpacket.c\",288);\r\n abort();\r\n }\r\n }while (0);\r\n pkt -> side_data[i] . data = (av_malloc((size + 16)));\r\n pkt -> side_data[i] . size = size;\r\n pkt -> side_data[i] . type = (p[4] & 127);\r\n if (!pkt -> side_data[i] . data) {\r\n return - 12;\r\n }\r\n memcpy(pkt -> side_data[i] . data,(p - size),size);\r\n pkt -> size -= size + 5;\r\n if (p[4] & 128) {\r\n break; \r\n }\r\n p -= size + 5;\r\n }\r\n pkt -> size -= 8;\r\n pkt -> side_data_elems = i + 1;\r\n return 1;\r\n }\r\n return 0;\r\n}\r\n\r\nint av_packet_shrink_side_data(AVPacket *pkt,enum AVPacketSideDataType type,int size)\r\n{\r\n int i;\r\n for (i = 0; i < pkt -> side_data_elems; i++) {\r\n if (pkt -> side_data[i] . type == type) {\r\n if (size > pkt -> side_data[i] . size) {\r\n return - 12;\r\n }\r\n pkt -> side_data[i] . size = size;\r\n return 0;\r\n }\r\n }\r\n return - 2;\r\n}\r\n\r\nvoid noncopying_poussie(int paulite_overspecializes,char *holders_oblates)\r\n{\r\n int ss_i = 0;\r\n char *hematothorax_syngamies = 0;\r\n ++global_variable;\r\n paulite_overspecializes--;\r\n if (paulite_overspecializes > 0) {\r\n ahmeek_micronuclear(paulite_overspecializes,holders_oblates);\r\n return ;\r\n }\r\n hematothorax_syngamies = ((char *)holders_oblates);\r\n \r\n printf(\"checking input\\n\");\r\n \r\n \r\n \r\n while(ss_i < strlen(hematothorax_syngamies)){\r\n \r\n if (hematothorax_syngamies[ss_i] >= 48) {\r\n \r\n ++ss_i;\r\n }\r\n }\r\n \r\n \r\n printf(\"finished evaluating\\n\");\r\n \r\n;\r\n if (holders_oblates != 0) \r\n free(((char *)holders_oblates));\r\nclose_printf_context();\r\n}\r\n\r\nvoid ahmeek_micronuclear(int momisms_noncausally,char *pendicler_tailloir)\r\n{\r\n ++global_variable;\r\n noncopying_poussie(momisms_noncausally,pendicler_tailloir);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "835"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include \"eng_int.h\"\r\n#include <openssl/rand.h>\r\n\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\nint imputrescence_felicitators = 0;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* env_var_name) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n char* tainted_file_name = 0;\r\n FILE * tainted_file = 0;\r\n size_t result = 0;\r\n long lsize = 0;\r\n tainted_file_name = getenv(env_var_name);\r\n tainted_file = fopen(tainted_file_name,\"rb\");\r\n if (tainted_file != 0) {\r\n fseek(tainted_file,0L,2);\r\n lsize = ftell(tainted_file);\r\n rewind(tainted_file);\r\n *tainted_buff = ((char *)(malloc(sizeof(char ) * (lsize + 1))));\r\n if (*tainted_buff != 0) {\r\n \r\n result = fread(*tainted_buff,1,lsize,tainted_file);\r\n (*tainted_buff)[lsize] = '\\0';\r\n }\r\n }\r\n if (tainted_file != 0) {\r\n fclose(tainted_file);\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nint 191_global_var = 0;\r\n\r\nENGINE *ENGINE_new()\r\n{\r\n ENGINE *ret;\r\n ret = ((ENGINE *)(CRYPTO_malloc(((int )(sizeof(ENGINE ))),\"eng_lib.c\",68)));\r\n if (ret == ((void *)0)) {\r\n ERR_put_error(38,122,1 | 64,\"eng_lib.c\",71);\r\n return ((void *)0);\r\n }\r\n memset(ret,0,sizeof(ENGINE ));\r\n ret -> struct_ref = 1;\r\n CRYPTO_new_ex_data(9,ret,&ret -> ex_data);\r\n return ret;\r\n}\r\n\r\n\r\nvoid engine_set_all_null(ENGINE *e)\r\n{\r\n e -> id = ((void *)0);\r\n e -> name = ((void *)0);\r\n e -> rsa_meth = ((void *)0);\r\n e -> dsa_meth = ((void *)0);\r\n e -> dh_meth = ((void *)0);\r\n e -> rand_meth = ((void *)0);\r\n e -> store_meth = ((void *)0);\r\n e -> ciphers = ((void *)0);\r\n e -> digests = ((void *)0);\r\n e -> destroy = ((void *)0);\r\n e -> init = ((void *)0);\r\n e -> finish = ((void *)0);\r\n e -> ctrl = ((void *)0);\r\n e -> load_privkey = ((void *)0);\r\n e -> load_pubkey = ((void *)0);\r\n e -> cmd_defns = ((void *)0);\r\n e -> flags = 0;\r\n}\r\n\r\nint engine_free_util(ENGINE *e,int locked)\r\n{\r\n int i;\r\n if (e == ((void *)0)) {\r\n ERR_put_error(38,108,3 | 64,\"eng_lib.c\",112);\r\n return 0;\r\n }\r\n if (locked) {\r\n i = CRYPTO_add_lock(&e -> struct_ref,- 1,30,\"eng_lib.c\",116);\r\n }\r\n else {\r\n i = --e -> struct_ref;\r\n }\r\n if (i > 0) {\r\n return 1;\r\n }\r\n#ifdef REF_CHECK\r\n#endif\r\n\r\n engine_pkey_meths_free(e);\r\n engine_pkey_asn1_meths_free(e);\r\n\r\n if (e -> destroy) {\r\n (e -> destroy)(e);\r\n }\r\n CRYPTO_free_ex_data(9,e,&e -> ex_data);\r\n CRYPTO_free(e);\r\n return 1;\r\n}\r\n\r\nint ENGINE_free(ENGINE *e)\r\n{\r\n return engine_free_util(e,1);\r\n}\r\n\r\n\r\nstatic struct stack_st_ENGINE_CLEANUP_ITEM *cleanup_stack = ((void *)0);\r\n\r\nstatic int int_cleanup_check(int create)\r\n{\r\n if (cleanup_stack) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n cleanup_stack = ((struct stack_st_ENGINE_CLEANUP_ITEM *)(sk_new_null()));\r\n return cleanup_stack?1 : 0;\r\n}\r\n\r\nstatic ENGINE_CLEANUP_ITEM *int_cleanup_item(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item = (CRYPTO_malloc(((int )(sizeof(ENGINE_CLEANUP_ITEM ))),\"eng_lib.c\",162));\r\n if (!item) {\r\n return ((void *)0);\r\n }\r\n item -> cb = cb;\r\n return item;\r\n}\r\n\r\nvoid engine_cleanup_add_first(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_insert(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))),0);\r\n }\r\n}\r\n\r\nvoid engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_push(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))));\r\n }\r\n}\r\n\r\n\r\nstatic void engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)\r\n{\r\n ( *item -> cb)();\r\n CRYPTO_free(item);\r\n}\r\n\r\nvoid ENGINE_cleanup()\r\n{\r\n FILE * random_data = 0;\r\n char * buff = 0;\r\n unsigned long long num = 0;\r\n unsigned long long i = 0;\r\n char *sympiesometer_sherurd = 0;\r\n void *minefield_placet = 0;\r\n long mismanageable_adamance[10];\r\n void *crool_schuyler[10] = {0};\r\n void *lyricists_sori = 0;\r\n char *idism_metanotum;;\r\n if (__sync_bool_compare_and_swap(&imputrescence_felicitators,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&idism_metanotum,\"CERCARIFORM_MARJ\");\r\n if (idism_metanotum != 0) {;\r\n lyricists_sori = ((void *)idism_metanotum);\r\n crool_schuyler[5] = lyricists_sori;\r\n mismanageable_adamance[1] = 5;\r\n minefield_placet = *(crool_schuyler + mismanageable_adamance[1]);\r\n sympiesometer_sherurd = ((char *)((char *)minefield_placet));\r\n \r\n random_data = fopen(\"/dev/urandom\", \"r\");\r\n if(random_data != NULL){\r\n num = strtoull(sympiesometer_sherurd, NULL, 10);\r\n if(num > (unsigned long long) 0 ){\r\n if(num > (unsigned long long) 100 ){\r\n num = (unsigned long long) 100;\r\n }\r\n \r\n \r\n \r\n \r\n \r\n buff = malloc((num - (unsigned long long) 10) * sizeof(char *));\r\n for(i = 0; i < num - (unsigned long long) 10; i++){\r\n buff[i] = fgetc(random_data);\r\n }\r\n \r\n \r\n }\r\n printf(\"data is: %s\", buff);\r\n fclose(random_data);\r\n if(buff != NULL){\r\n free(buff);\r\n }\r\n }\r\n \r\n;\r\n if (((char *)minefield_placet) != 0) \r\n free(((char *)((char *)minefield_placet)));\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n if (int_cleanup_check(0)) {\r\n sk_pop_free(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void (*)(void *))engine_cleanup_cb_free));\r\n cleanup_stack = ((void *)0);\r\n }\r\n\r\n RAND_set_rand_method(((void *)0));\r\n}\r\n\r\n\r\nint ENGINE_get_ex_new_index(long argl,void *argp,CRYPTO_EX_new *new_func,CRYPTO_EX_dup *dup_func,CRYPTO_EX_free *free_func)\r\n{\r\n return CRYPTO_get_ex_new_index(9,argl,argp,new_func,dup_func,free_func);\r\n}\r\n\r\nint ENGINE_set_ex_data(ENGINE *e,int idx,void *arg)\r\n{\r\n return CRYPTO_set_ex_data(&e -> ex_data,idx,arg);\r\n}\r\n\r\nvoid *ENGINE_get_ex_data(const ENGINE *e,int idx)\r\n{\r\n return CRYPTO_get_ex_data(&e -> ex_data,idx);\r\n}\r\n\r\n\r\nint ENGINE_set_id(ENGINE *e,const char *id)\r\n{\r\n if (id == ((void *)0)) {\r\n ERR_put_error(38,129,3 | 64,\"eng_lib.c\",229);\r\n return 0;\r\n }\r\n e -> id = id;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_name(ENGINE *e,const char *name)\r\n{\r\n if (name == ((void *)0)) {\r\n ERR_put_error(38,130,3 | 64,\"eng_lib.c\",241);\r\n return 0;\r\n }\r\n e -> name = name;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_destroy_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR destroy_f)\r\n{\r\n e -> destroy = destroy_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_init_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR init_f)\r\n{\r\n e -> init = init_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_finish_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR finish_f)\r\n{\r\n e -> finish = finish_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_ctrl_function(ENGINE *e,ENGINE_CTRL_FUNC_PTR ctrl_f)\r\n{\r\n e -> ctrl = ctrl_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_flags(ENGINE *e,int flags)\r\n{\r\n e -> flags = flags;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_cmd_defns(ENGINE *e,const ENGINE_CMD_DEFN *defns)\r\n{\r\n e -> cmd_defns = defns;\r\n return 1;\r\n}\r\n\r\nconst char *ENGINE_get_id(const ENGINE *e)\r\n{\r\n return e -> id;\r\n}\r\n\r\nconst char *ENGINE_get_name(const ENGINE *e)\r\n{\r\n return e -> name;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e)\r\n{\r\n return e -> destroy;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e)\r\n{\r\n return e -> init;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e)\r\n{\r\n return e -> finish;\r\n}\r\n\r\nENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e)\r\n{\r\n return e -> ctrl;\r\n}\r\n\r\nint ENGINE_get_flags(const ENGINE *e)\r\n{\r\n return e -> flags;\r\n}\r\n\r\nconst ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e)\r\n{\r\n return e -> cmd_defns;\r\n}\r\n\r\nstatic int internal_static_hack = 0;\r\n\r\nvoid *ENGINE_get_static_state()\r\n{\r\n return (&internal_static_hack);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "191"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\t\r\n#include \"cryptlib.h\"\r\n#include <openssl/crypto.h>\r\n#include <openssl/buffer.h>\r\n#include <openssl/bio.h>\r\n#include <openssl/lhash.h>\r\n#include <mongoose.h> \r\n#include </trace.h> \r\n#include <sys/stat.h> \r\nstatic int mh_mode = 0x0;\r\n\r\n\r\nstatic unsigned long order = 0;\r\n\r\nstruct lhash_st_MEM \r\n{\r\n int dummy;\r\n}\r\n;\r\n\r\nstatic struct lhash_st_MEM *mh = ((void *)0);\r\ntypedef struct app_mem_info_st {\r\n\r\nCRYPTO_THREADID threadid;\r\nconst char *file;\r\nint line;\r\nconst char *info;\r\n\r\nstruct app_mem_info_st *next;\r\nint references;}APP_INFO;\r\nstatic void app_info_free(APP_INFO *inf);\r\n\r\nstruct lhash_st_APP_INFO \r\n{\r\n int dummy;\r\n}\r\n;\r\n\r\nstatic struct lhash_st_APP_INFO *amih = ((void *)0);\r\ntypedef struct mem_st {\r\n\r\nvoid *addr;\r\nint num;\r\nconst char *file;\r\nint line;\r\nCRYPTO_THREADID threadid;\r\nunsigned long order;\r\ntime_t time;\r\nAPP_INFO *app_info;}MEM;\r\n\r\nstatic long options = 0;\r\n#if defined(CRYPTO_MDEBUG_TIME) || defined(CRYPTO_MDEBUG_ALL)\r\n#endif\r\n#if defined(CRYPTO_MDEBUG_THREAD) || defined(CRYPTO_MDEBUG_ALL)\r\n#endif\r\n\r\nstatic unsigned int num_disable = 0;\r\n\r\nstatic CRYPTO_THREADID disabling_threadid;\r\nint enchodontid_undrinking = 0;\r\n\r\nstruct smellable_antimaterialist \r\n{\r\n char *sideshows_pelmatozoic;\r\n double killinite_brachycome;\r\n char *rewriters_jivaran;\r\n char punctualist_portionless;\r\n int challengeful_jaguarundi;\r\n}\r\n;\r\nint global_variable;\r\nvoid handle_taint(char *pitahaya_villageful);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid machiasport_nonfluctuating(const struct smellable_antimaterialist bestialising_untypically);\r\nint 191_global_var = 0;\r\n\r\nstatic void app_info_free(APP_INFO *inf)\r\n{\r\n if (--inf -> references <= 0) {\r\n if (inf -> next != ((void *)0)) {\r\n app_info_free(inf -> next);\r\n }\r\n CRYPTO_free(inf);\r\n }\r\n}\r\n\r\nint CRYPTO_mem_ctrl(int mode)\r\n{\r\n int ret = mh_mode;\r\n CRYPTO_lock(1 | 8,20,\"mem_dbg.c\",220);\r\n switch(mode){\r\n case 0x1:\r\n{\r\n\r\n\r\n mh_mode = 0x1 | 0x2;\r\n num_disable = 0;\r\n break; \r\n }\r\n case 0x0:\r\n{\r\n\r\n mh_mode = 0;\r\n\r\n num_disable = 0;\r\n break; \r\n }\r\n case 0x3:\r\n{\r\n\r\n\r\n if (mh_mode & 0x1) {\r\n CRYPTO_THREADID cur;\r\n CRYPTO_THREADID_current(&cur);\r\n\r\n if (!num_disable || CRYPTO_THREADID_cmp((&disabling_threadid),(&cur))) {\r\n\r\n CRYPTO_lock(2 | 8,20,\"mem_dbg.c\",250);\r\n\r\n CRYPTO_lock(1 | 8,27,\"mem_dbg.c\",256);\r\n CRYPTO_lock(1 | 8,20,\"mem_dbg.c\",257);\r\n mh_mode &= ~0x2;\r\n CRYPTO_THREADID_cpy(&disabling_threadid,(&cur));\r\n }\r\n num_disable++;\r\n }\r\n break; \r\n }\r\n case 0x2:\r\n{\r\n\r\n if (mh_mode & 0x1) {\r\n\r\n if (num_disable) {\r\n num_disable--;\r\n if (num_disable == 0) {\r\n mh_mode |= 0x2;\r\n CRYPTO_lock(2 | 8,27,\"mem_dbg.c\",273);\r\n }\r\n }\r\n }\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n CRYPTO_lock(2 | 8,20,\"mem_dbg.c\",282);\r\n return ret;\r\n}\r\n\r\nint CRYPTO_is_mem_check_on()\r\n{\r\n int ret = 0;\r\n if (mh_mode & 0x1) {\r\n CRYPTO_THREADID cur;\r\n CRYPTO_THREADID_current(&cur);\r\n CRYPTO_lock(1 | 4,20,\"mem_dbg.c\",294);\r\n ret = mh_mode & 0x2 || CRYPTO_THREADID_cmp((&disabling_threadid),(&cur));\r\n CRYPTO_lock(2 | 4,20,\"mem_dbg.c\",299);\r\n }\r\n return ret;\r\n}\r\n\r\nvoid CRYPTO_dbg_set_options(long bits)\r\n{\r\n options = bits;\r\n}\r\n\r\nlong CRYPTO_dbg_get_options()\r\n{\r\n return options;\r\n}\r\n\r\nstatic int mem_cmp(const MEM *a,const MEM *b)\r\n{\r\n#ifdef _WIN64\r\n#else\r\n return (((const char *)(a -> addr)) - ((const char *)(b -> addr)));\r\n#endif\r\n}\r\n\r\nstatic int mem_LHASH_COMP(const void *arg1,const void *arg2)\r\n{\r\n const MEM *a = arg1;\r\n const MEM *b = arg2;\r\n return mem_cmp(a,b);\r\n}\r\n\r\nstatic unsigned long mem_hash(const MEM *a)\r\n{\r\n unsigned long ret;\r\n ret = ((unsigned long )(a -> addr));\r\n ret = ret * 17851 + (ret >> 14) * 7 + (ret >> 4) * 251;\r\n return ret;\r\n}\r\n\r\nstatic unsigned long mem_LHASH_HASH(const void *arg)\r\n{\r\n const MEM *a = arg;\r\n return mem_hash(a);\r\n}\r\n\r\n\r\nstatic int app_info_cmp(const void *a_void,const void *b_void)\r\n{\r\n return CRYPTO_THREADID_cmp(&((const APP_INFO *)a_void) -> threadid,&((const APP_INFO *)b_void) -> threadid);\r\n}\r\n\r\nstatic int app_info_LHASH_COMP(const void *arg1,const void *arg2)\r\n{\r\n const APP_INFO *a = arg1;\r\n const APP_INFO *b = arg2;\r\n return app_info_cmp(a,b);\r\n}\r\n\r\nstatic unsigned long app_info_hash(const APP_INFO *a)\r\n{\r\n unsigned long ret;\r\n if (__sync_bool_compare_and_swap(&enchodontid_undrinking,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ret = CRYPTO_THREADID_hash(&a -> threadid);\r\n\r\n ret = ret * 17851 + (ret >> 14) * 7 + (ret >> 4) * 251;\r\n return ret;\r\n}\r\n\r\nstatic unsigned long app_info_LHASH_HASH(const void *arg)\r\n{\r\n const APP_INFO *a = arg;\r\n return app_info_hash(a);\r\n}\r\n\r\nstatic APP_INFO *pop_info()\r\n{\r\n APP_INFO tmp;\r\n APP_INFO *ret = ((void *)0);\r\n if (amih != ((void *)0)) {\r\n CRYPTO_THREADID_current(&tmp . threadid);\r\n if ((ret = ((APP_INFO *)(lh_delete(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0))))),((void *)(&tmp)))))) != ((void *)0)) {\r\n APP_INFO *next = ret -> next;\r\n if (next != ((void *)0)) {\r\n next -> references++;\r\n (void )((APP_INFO *)(lh_insert(((_LHASH *)((void *)(1?amih : ((struct lhash_st_APP_INFO *)0)))),((void *)(1?next : ((APP_INFO *)0))))));\r\n }\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n if (--ret -> references <= 0) {\r\n ret -> next = ((void *)0);\r\n if (next != ((void *)0)) {\r\n next -> references--;\r\n }\r\n CRYPTO_free(ret);\r\n }\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nint CRYPTO_push_info_(const char *info,const char *file,int line)\r\n{\r\n APP_INFO *ami;\r\n APP_INFO *amim;\r\n int ret = 0;\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n if ((ami = ((APP_INFO *)(CRYPTO_malloc(((int )(sizeof(APP_INFO ))),\"mem_dbg.c\",406)))) == ((void *)0)) {\r\n ret = 0;\r\n goto err;\r\n }\r\n if (amih == ((void *)0)) {\r\n if ((amih = ((struct lhash_st_APP_INFO *)(lh_new(app_info_LHASH_HASH,app_info_LHASH_COMP)))) == ((void *)0)) {\r\n CRYPTO_free(ami);\r\n ret = 0;\r\n goto err;\r\n }\r\n }\r\n CRYPTO_THREADID_current(&ami -> threadid);\r\n ami -> file = file;\r\n ami -> line = line;\r\n ami -> info = info;\r\n ami -> references = 1;\r\n ami -> next = ((void *)0);\r\n if ((amim = ((APP_INFO *)(lh_insert(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0))))),((void *)((1?ami : ((APP_INFO *)0)))))))) != ((void *)0)) {\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n ami -> next = amim;\r\n }\r\n err:\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n return ret;\r\n}\r\n\r\nint CRYPTO_pop_info()\r\n{\r\n int ret = 0;\r\n\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n ret = pop_info() != ((void *)0);\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n return ret;\r\n}\r\n\r\nint CRYPTO_remove_all_info()\r\n{\r\n int ret = 0;\r\n\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n while(pop_info() != ((void *)0))\r\n ret++;\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n return ret;\r\n}\r\nstatic unsigned long break_order_num = 0;\r\n\r\nvoid CRYPTO_dbg_malloc(void *addr,int num,const char *file,int line,int before_p)\r\n{\r\n MEM *m;\r\n MEM *mm;\r\n APP_INFO tmp;\r\n APP_INFO *amim;\r\n switch(before_p & 127){\r\n case 0:\r\n break; \r\n case 1:\r\n{\r\n if (addr == ((void *)0)) {\r\n break; \r\n }\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n if ((m = ((MEM *)(CRYPTO_malloc(((int )(sizeof(MEM ))),\"mem_dbg.c\",498)))) == ((void *)0)) {\r\n CRYPTO_free(addr);\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n return ;\r\n }\r\n if (mh == ((void *)0)) {\r\n if ((mh = ((struct lhash_st_MEM *)(lh_new(mem_LHASH_HASH,mem_LHASH_COMP)))) == ((void *)0)) {\r\n CRYPTO_free(addr);\r\n CRYPTO_free(m);\r\n addr = ((void *)0);\r\n goto err;\r\n }\r\n }\r\n m -> addr = addr;\r\n m -> file = file;\r\n m -> line = line;\r\n m -> num = num;\r\n if (options & 0x2) {\r\n CRYPTO_THREADID_current(&m -> threadid);\r\n }\r\n else {\r\n memset((&m -> threadid),0,sizeof(m -> threadid));\r\n }\r\n if (order == break_order_num) {\r\n\r\n m -> order = order;\r\n }\r\n m -> order = order++;\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n if (options & 0x1) {\r\n m -> time = time(((void *)0));\r\n }\r\n else {\r\n m -> time = 0;\r\n }\r\n CRYPTO_THREADID_current(&tmp . threadid);\r\n m -> app_info = ((void *)0);\r\n if (amih != ((void *)0) && (amim = ((APP_INFO *)(lh_retrieve(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0))))),((void *)(&tmp)))))) != ((void *)0)) {\r\n m -> app_info = amim;\r\n amim -> references++;\r\n }\r\n if ((mm = ((MEM *)(lh_insert(((_LHASH *)((void *)((1?mh : ((struct lhash_st_MEM *)0))))),((void *)((1?m : ((MEM *)0)))))))) != ((void *)0)) {\r\n\r\n if (mm -> app_info != ((void *)0)) {\r\n mm -> app_info -> references--;\r\n }\r\n CRYPTO_free(mm);\r\n }\r\n err:\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n break; \r\n }\r\n }\r\n return ;\r\n}\r\n\r\nvoid CRYPTO_dbg_free(void *addr,int before_p)\r\n{\r\n MEM m;\r\n MEM *mp;\r\n switch(before_p){\r\n case 0:\r\n{\r\n if (addr == ((void *)0)) {\r\n break; \r\n }\r\n if (CRYPTO_is_mem_check_on() && mh != ((void *)0)) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n m . addr = addr;\r\n mp = ((MEM *)(lh_delete(((_LHASH *)((void *)((1?mh : ((struct lhash_st_MEM *)0))))),((void *)(&m)))));\r\n if (mp != ((void *)0)) {\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n if (mp -> app_info != ((void *)0)) {\r\n app_info_free(mp -> app_info);\r\n }\r\n CRYPTO_free(mp);\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n break; \r\n }\r\n case 1:\r\n break; \r\n }\r\n}\r\n\r\nvoid CRYPTO_dbg_realloc(void *addr1,void *addr2,int num,const char *file,int line,int before_p)\r\n{\r\n MEM m;\r\n MEM *mp;\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n switch(before_p){\r\n case 0:\r\n break; \r\n case 1:\r\n{\r\n if (addr2 == ((void *)0)) {\r\n break; \r\n }\r\n if (addr1 == ((void *)0)) {\r\n CRYPTO_dbg_malloc(addr2,num,file,line,128 | before_p);\r\n break; \r\n }\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n m . addr = addr1;\r\n mp = ((MEM *)(lh_delete(((_LHASH *)((void *)((1?mh : ((struct lhash_st_MEM *)0))))),((void *)(&m)))));\r\n if (mp != ((void *)0)) {\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n mp -> addr = addr2;\r\n mp -> num = num;\r\n (void )((MEM *)(lh_insert(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))),((void *)(1?mp : ((MEM *)0))))));\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n break; \r\n }\r\n }\r\n return ;\r\n}\r\ntypedef struct mem_leak_st {\r\nBIO_dummy *bio;\r\nint chunks;\r\nlong bytes;}MEM_LEAK;\r\n\r\nstatic void print_leak_doall_arg(const MEM *m,MEM_LEAK *l)\r\n{\r\n char buf[1024];\r\n char *bufp = buf;\r\n APP_INFO *amip;\r\n int ami_cnt;\r\n struct tm *lcl = ((void *)0);\r\n CRYPTO_THREADID ti;\r\n#define BUF_REMAIN (sizeof buf - (size_t)(bufp - buf))\r\n if (m -> addr == ((char *)(l -> bio))) {\r\n return ;\r\n }\r\n if (options & 0x1) {\r\n lcl = localtime(&m -> time);\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"[%02d:%02d:%02d] \",lcl -> tm_hour,lcl -> tm_min,lcl -> tm_sec);\r\n bufp += strlen(bufp);\r\n }\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"%5lu file=%s, line=%d, \",m -> order,m -> file,m -> line);\r\n bufp += strlen(bufp);\r\n if (options & 0x2) {\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"thread=%lu, \",CRYPTO_THREADID_hash(&m -> threadid));\r\n bufp += strlen(bufp);\r\n }\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"number=%d, address=%08lX\\n\",m -> num,((unsigned long )(m -> addr)));\r\n bufp += strlen(bufp);\r\n BIO_puts(l -> bio,buf);\r\n l -> chunks++;\r\n l -> bytes += (m -> num);\r\n amip = m -> app_info;\r\n ami_cnt = 0;\r\n if (!amip) {\r\n return ;\r\n }\r\n CRYPTO_THREADID_cpy(&ti,(&amip -> threadid));\r\n do {\r\n int buf_len;\r\n int info_len;\r\n ami_cnt++;\r\n memset(buf,'>',ami_cnt);\r\n BIO_snprintf(buf + ami_cnt,sizeof(buf) - ami_cnt,\" thread=%lu, file=%s, line=%d, info=\\\"\",CRYPTO_THREADID_hash((&amip -> threadid)),amip -> file,amip -> line);\r\n buf_len = (strlen(buf));\r\n info_len = (strlen(amip -> info));\r\n if (128 - buf_len - 3 < info_len) {\r\n memcpy((buf + buf_len),(amip -> info),(128 - buf_len - 3));\r\n buf_len = 128 - 3;\r\n }\r\n else {\r\n BUF_strlcpy(buf + buf_len,amip -> info,sizeof(buf) - buf_len);\r\n buf_len = (strlen(buf));\r\n }\r\n BIO_snprintf(buf + buf_len,sizeof(buf) - buf_len,\"\\\"\\n\");\r\n BIO_puts(l -> bio,buf);\r\n amip = amip -> next;\r\n }while (amip && !CRYPTO_THREADID_cmp((&amip -> threadid),(&ti)));\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n}\r\n\r\nstatic void print_leak_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n const MEM *a = arg1;\r\n MEM_LEAK *b = arg2;\r\n print_leak_doall_arg(a,b);\r\n}\r\n\r\nvoid CRYPTO_mem_leaks(BIO_dummy *b)\r\n{\r\n MEM_LEAK ml;\r\n if (mh == ((void *)0) && amih == ((void *)0)) {\r\n return ;\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n ml . bio = b;\r\n ml . bytes = 0;\r\n ml . chunks = 0;\r\n if (mh != ((void *)0)) {\r\n lh_doall_arg(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))),print_leak_LHASH_DOALL_ARG,((void *)(&ml)));\r\n }\r\n if (ml . chunks != 0) {\r\n BIO_printf(b,\"%ld bytes leaked in %d chunks\\n\",ml . bytes,ml . chunks);\r\n#ifdef CRYPTO_MDEBUG_ABORT\r\n#endif\r\n }\r\n else {\r\n\r\n int old_mh_mode;\r\n CRYPTO_lock(1 | 8,20,\"mem_dbg.c\",798);\r\n\r\n old_mh_mode = mh_mode;\r\n mh_mode = 0;\r\n if (mh != ((void *)0)) {\r\n lh_free(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))));\r\n mh = ((void *)0);\r\n }\r\n if (amih != ((void *)0)) {\r\n if (lh_num_items(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0)))))) == 0) {\r\n lh_free(((_LHASH *)((void *)(1?amih : ((struct lhash_st_APP_INFO *)0)))));\r\n amih = ((void *)0);\r\n }\r\n }\r\n mh_mode = old_mh_mode;\r\n CRYPTO_lock(2 | 8,20,\"mem_dbg.c\",820);\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n}\r\n#ifndef OPENSSL_NO_FP_API\r\n\r\nvoid CRYPTO_mem_leaks_fp(FILE *fp)\r\n{\r\n BIO_dummy *b;\r\n if (mh == ((void *)0)) {\r\n return ;\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n b = BIO_new(BIO_s_file());\r\n CRYPTO_mem_ctrl(0x2);\r\n if (!b) {\r\n return ;\r\n }\r\n BIO_ctrl(b,106,0,((char *)fp));\r\n CRYPTO_mem_leaks(b);\r\n BIO_free(b);\r\n}\r\n#endif\r\n\r\n\r\n\r\ntypedef CRYPTO_MEM_LEAK_CB *PCRYPTO_MEM_LEAK_CB;\r\n\r\nstatic void cb_leak_doall_arg(const MEM *m,PCRYPTO_MEM_LEAK_CB *cb)\r\n{\r\n ( *cb)(m -> order,m -> file,m -> line,m -> num,m -> addr);\r\n}\r\n\r\nstatic void cb_leak_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n const MEM *a = arg1;\r\n PCRYPTO_MEM_LEAK_CB *b = arg2;\r\n cb_leak_doall_arg(a,b);\r\n}\r\n\r\nvoid CRYPTO_mem_leaks_cb(CRYPTO_MEM_LEAK_CB *cb)\r\n{\r\n if (mh == ((void *)0)) {\r\n return ;\r\n }\r\n CRYPTO_lock(1 | 8,27,\"mem_dbg.c\",870);\r\n lh_doall_arg(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))),cb_leak_LHASH_DOALL_ARG,((void *)(&cb)));\r\n CRYPTO_lock(2 | 8,27,\"mem_dbg.c\",873);\r\n}\r\n\r\nvoid handle_taint(char *pitahaya_villageful)\r\n{\r\n struct smellable_antimaterialist airdromes_foveas;\r\n ++global_variable;;\r\n if (pitahaya_villageful != 0) {;\r\n airdromes_foveas . sideshows_pelmatozoic = ((char *)pitahaya_villageful);\r\n machiasport_nonfluctuating(airdromes_foveas);\r\n }\r\n}\r\n\r\nvoid machiasport_nonfluctuating(const struct smellable_antimaterialist bestialising_untypically)\r\n{\r\n FILE * random_data = 0;\r\n char * buff = 0;\r\n unsigned long long num = 0;\r\n unsigned long long i = 0;\r\n char *undersigner_concretes = 0;\r\n int monosyllabic_diminuendo;\r\n int kumis_lithotome;\r\n ++global_variable;;\r\n kumis_lithotome = 5;\r\n while(1 == 1){\r\n kumis_lithotome = kumis_lithotome * 2;\r\n kumis_lithotome = kumis_lithotome + 2;\r\n if (kumis_lithotome > 1000) {\r\n break; \r\n }\r\n }\r\n monosyllabic_diminuendo = kumis_lithotome;\r\n undersigner_concretes = ((char *)((struct smellable_antimaterialist )bestialising_untypically) . sideshows_pelmatozoic);\r\n \r\n random_data = fopen(\"/dev/urandom\", \"r\");\r\n if(random_data != NULL){\r\n num = strtoull(undersigner_concretes, NULL, 10);\r\n if(num > (unsigned long long) 0 ){\r\n if(num > (unsigned long long) 100 ){\r\n num = (unsigned long long) 100;\r\n }\r\n \r\n \r\n \r\n \r\n \r\n buff = malloc((num - (unsigned long long) 10) * sizeof(char *));\r\n for(i = 0; i < num - (unsigned long long) 10; i++){\r\n buff[i] = fgetc(random_data);\r\n }\r\n \r\n \r\n }\r\n printf(\"data is: %s\", buff);\r\n fclose(random_data);\r\n if(buff != NULL){\r\n free(buff);\r\n }\r\n }\r\n \r\n;\r\n if (((struct smellable_antimaterialist )bestialising_untypically) . sideshows_pelmatozoic != 0) \r\n free(((char *)((struct smellable_antimaterialist )bestialising_untypically) . sideshows_pelmatozoic));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "191"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include \"eng_int.h\"\r\n#include <openssl/rand.h>\r\n\r\n#include <mongoose.h> \r\n#include </trace.h> \r\n#include <sys/stat.h> \r\nint underfeel_myringomycosis = 0;\r\nint global_variable;\r\nvoid handle_taint(char *bandboxy_crosshauling);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid classmates_gothicist(char **inject_implacement);\r\nFILE *open_file(char *filename_param)\r\n{\r\n FILE *f;\r\n \r\n \r\n \r\n\r\n\r\n f = fopen(filename_param,\"w\");\r\n \r\n \r\n if (!f)\r\n return 0;\r\n else\r\n return f;\r\n fclose(f);\r\n}\r\n\r\nENGINE *ENGINE_new()\r\n{\r\n ENGINE *ret;\r\n ret = ((ENGINE *)(CRYPTO_malloc(((int )(sizeof(ENGINE ))),\"eng_lib.c\",68)));\r\n if (ret == ((void *)0)) {\r\n ERR_put_error(38,122,1 | 64,\"eng_lib.c\",71);\r\n return ((void *)0);\r\n }\r\n memset(ret,0,sizeof(ENGINE ));\r\n ret -> struct_ref = 1;\r\n CRYPTO_new_ex_data(9,ret,&ret -> ex_data);\r\n return ret;\r\n}\r\n\r\n\r\nvoid engine_set_all_null(ENGINE *e)\r\n{\r\n e -> id = ((void *)0);\r\n e -> name = ((void *)0);\r\n e -> rsa_meth = ((void *)0);\r\n e -> dsa_meth = ((void *)0);\r\n e -> dh_meth = ((void *)0);\r\n e -> rand_meth = ((void *)0);\r\n e -> store_meth = ((void *)0);\r\n e -> ciphers = ((void *)0);\r\n e -> digests = ((void *)0);\r\n e -> destroy = ((void *)0);\r\n e -> init = ((void *)0);\r\n e -> finish = ((void *)0);\r\n e -> ctrl = ((void *)0);\r\n e -> load_privkey = ((void *)0);\r\n e -> load_pubkey = ((void *)0);\r\n e -> cmd_defns = ((void *)0);\r\n e -> flags = 0;\r\n}\r\n\r\nint engine_free_util(ENGINE *e,int locked)\r\n{\r\n int i;\r\n if (e == ((void *)0)) {\r\n ERR_put_error(38,108,3 | 64,\"eng_lib.c\",112);\r\n return 0;\r\n }\r\n if (locked) {\r\n i = CRYPTO_add_lock(&e -> struct_ref,- 1,30,\"eng_lib.c\",116);\r\n }\r\n else {\r\n i = --e -> struct_ref;\r\n }\r\n if (i > 0) {\r\n return 1;\r\n }\r\n#ifdef REF_CHECK\r\n#endif\r\n\r\n engine_pkey_meths_free(e);\r\n engine_pkey_asn1_meths_free(e);\r\n\r\n if (e -> destroy) {\r\n (e -> destroy)(e);\r\n }\r\n CRYPTO_free_ex_data(9,e,&e -> ex_data);\r\n CRYPTO_free(e);\r\n return 1;\r\n}\r\n\r\nint ENGINE_free(ENGINE *e)\r\n{\r\n return engine_free_util(e,1);\r\n}\r\n\r\n\r\nstatic struct stack_st_ENGINE_CLEANUP_ITEM *cleanup_stack = ((void *)0);\r\n\r\nstatic int int_cleanup_check(int create)\r\n{\r\n if (cleanup_stack) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n cleanup_stack = ((struct stack_st_ENGINE_CLEANUP_ITEM *)(sk_new_null()));\r\n return cleanup_stack?1 : 0;\r\n}\r\n\r\nstatic ENGINE_CLEANUP_ITEM *int_cleanup_item(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item = (CRYPTO_malloc(((int )(sizeof(ENGINE_CLEANUP_ITEM ))),\"eng_lib.c\",162));\r\n if (!item) {\r\n return ((void *)0);\r\n }\r\n item -> cb = cb;\r\n return item;\r\n}\r\n\r\nvoid engine_cleanup_add_first(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_insert(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))),0);\r\n }\r\n}\r\n\r\nvoid engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_push(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))));\r\n }\r\n}\r\n\r\n\r\nstatic void engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)\r\n{\r\n ( *item -> cb)();\r\n CRYPTO_free(item);\r\n}\r\n\r\nvoid ENGINE_cleanup()\r\n{;\r\n if (__sync_bool_compare_and_swap(&underfeel_myringomycosis,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n if (int_cleanup_check(0)) {\r\n sk_pop_free(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void (*)(void *))engine_cleanup_cb_free));\r\n cleanup_stack = ((void *)0);\r\n }\r\n\r\n RAND_set_rand_method(((void *)0));\r\n}\r\n\r\n\r\nint ENGINE_get_ex_new_index(long argl,void *argp,CRYPTO_EX_new *new_func,CRYPTO_EX_dup *dup_func,CRYPTO_EX_free *free_func)\r\n{\r\n return CRYPTO_get_ex_new_index(9,argl,argp,new_func,dup_func,free_func);\r\n}\r\n\r\nint ENGINE_set_ex_data(ENGINE *e,int idx,void *arg)\r\n{\r\n return CRYPTO_set_ex_data(&e -> ex_data,idx,arg);\r\n}\r\n\r\nvoid *ENGINE_get_ex_data(const ENGINE *e,int idx)\r\n{\r\n return CRYPTO_get_ex_data(&e -> ex_data,idx);\r\n}\r\n\r\n\r\nint ENGINE_set_id(ENGINE *e,const char *id)\r\n{\r\n if (id == ((void *)0)) {\r\n ERR_put_error(38,129,3 | 64,\"eng_lib.c\",229);\r\n return 0;\r\n }\r\n e -> id = id;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_name(ENGINE *e,const char *name)\r\n{\r\n if (name == ((void *)0)) {\r\n ERR_put_error(38,130,3 | 64,\"eng_lib.c\",241);\r\n return 0;\r\n }\r\n e -> name = name;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_destroy_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR destroy_f)\r\n{\r\n e -> destroy = destroy_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_init_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR init_f)\r\n{\r\n e -> init = init_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_finish_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR finish_f)\r\n{\r\n e -> finish = finish_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_ctrl_function(ENGINE *e,ENGINE_CTRL_FUNC_PTR ctrl_f)\r\n{\r\n e -> ctrl = ctrl_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_flags(ENGINE *e,int flags)\r\n{\r\n e -> flags = flags;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_cmd_defns(ENGINE *e,const ENGINE_CMD_DEFN *defns)\r\n{\r\n e -> cmd_defns = defns;\r\n return 1;\r\n}\r\n\r\nconst char *ENGINE_get_id(const ENGINE *e)\r\n{\r\n return e -> id;\r\n}\r\n\r\nconst char *ENGINE_get_name(const ENGINE *e)\r\n{\r\n return e -> name;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e)\r\n{\r\n return e -> destroy;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e)\r\n{\r\n return e -> init;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e)\r\n{\r\n return e -> finish;\r\n}\r\n\r\nENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e)\r\n{\r\n return e -> ctrl;\r\n}\r\n\r\nint ENGINE_get_flags(const ENGINE *e)\r\n{\r\n return e -> flags;\r\n}\r\n\r\nconst ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e)\r\n{\r\n return e -> cmd_defns;\r\n}\r\n\r\nstatic int internal_static_hack = 0;\r\n\r\nvoid *ENGINE_get_static_state()\r\n{\r\n return (&internal_static_hack);\r\n}\r\n\r\nvoid handle_taint(char *bandboxy_crosshauling)\r\n{\r\n void (*brindlish_chiefage)(char **) = classmates_gothicist;\r\n char **violater_raptors = 0;\r\n ++global_variable;;\r\n if (bandboxy_crosshauling != 0) {;\r\n violater_raptors = &bandboxy_crosshauling;\r\n brindlish_chiefage(violater_raptors);\r\n }\r\n}\r\n\r\nvoid classmates_gothicist(char **inject_implacement)\r\n{\r\n char * filename = 0;\r\n int filename_len = 0;\r\n unsigned int num_files;\r\n FILE **filearray;\r\n int i;\r\n char *snowcap_funnelwise = 0;\r\n ++global_variable;;\r\n snowcap_funnelwise = ((char *)( *inject_implacement));\r\n \r\n if (strlen(snowcap_funnelwise) > 0 &&\r\n snowcap_funnelwise[0] == '-') {\r\n printf(\"Input value is negative\\n\");\r\n } else {\r\n printf(\"Getting input value\\n\");\r\n num_files = strtoul(snowcap_funnelwise,0,16);\r\n if (num_files > 0xffff)\r\n num_files = 0;\r\n filearray = ((FILE **)(malloc(num_files * sizeof(FILE *))));\r\n filename_len = strlen(\"/opt//workspace/testData/temp\") + 10;\r\n filename = (char*) malloc(filename_len * sizeof(char));\r\n if (filearray != 0) {\r\n for (i = 0; i < num_files; ++i)\r\n filearray[i] = 0;\r\n printf(\"Creating files\\n\");\r\n for (i = 0; i < num_files; ++i) {\r\n snprintf(filename,filename_len,\"%s_%08x\", \"/opt//workspace/testData/temp\", i);\r\n filearray[i] = open_file(filename);\r\n if (filearray[i] == 0)\r\n break;\r\n }\r\n if (i < num_files)\r\n printf(\"No Throttle File Descriptors: Did not create all files successfully.\\n\");\r\n for (i = 0; i < num_files; ++i)\r\n if (filearray[i] != 0)\r\n fclose(filearray[i]);\r\n free(filearray);\r\n free(filename);\r\n }\r\n }\r\n \r\n;\r\n if ( *inject_implacement != 0) \r\n free(((char *)( *inject_implacement)));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "774"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\t\r\n#include \"cryptlib.h\"\r\n#include <openssl/crypto.h>\r\n#include <openssl/buffer.h>\r\n#include <openssl/bio.h>\r\n#include <openssl/lhash.h>\r\n#include <mongoose.h> \r\n#include </trace.h> \r\n#include <pthread.h> \r\n#include <sys/stat.h> \r\nstatic int mh_mode = 0x0;\r\n\r\n\r\nstatic unsigned long order = 0;\r\n\r\nstruct lhash_st_MEM \r\n{\r\n int dummy;\r\n}\r\n;\r\n\r\nstatic struct lhash_st_MEM *mh = ((void *)0);\r\ntypedef struct app_mem_info_st {\r\n\r\nCRYPTO_THREADID threadid;\r\nconst char *file;\r\nint line;\r\nconst char *info;\r\n\r\nstruct app_mem_info_st *next;\r\nint references;}APP_INFO;\r\nstatic void app_info_free(APP_INFO *inf);\r\n\r\nstruct lhash_st_APP_INFO \r\n{\r\n int dummy;\r\n}\r\n;\r\n\r\nstatic struct lhash_st_APP_INFO *amih = ((void *)0);\r\ntypedef struct mem_st {\r\n\r\nvoid *addr;\r\nint num;\r\nconst char *file;\r\nint line;\r\nCRYPTO_THREADID threadid;\r\nunsigned long order;\r\ntime_t time;\r\nAPP_INFO *app_info;}MEM;\r\n\r\nstatic long options = 0;\r\n#if defined(CRYPTO_MDEBUG_TIME) || defined(CRYPTO_MDEBUG_ALL)\r\n#endif\r\n#if defined(CRYPTO_MDEBUG_THREAD) || defined(CRYPTO_MDEBUG_ALL)\r\n#endif\r\n\r\nstatic unsigned int num_disable = 0;\r\n\r\nstatic CRYPTO_THREADID disabling_threadid;\r\nint moorberries_curches = 0;\r\ntypedef char *henni_wattis;\r\nint global_variable;\r\nvoid handle_taint(char *gayla_gnosticity);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid nutritiveness_dister(henni_wattis suppositionally_porphyrized);\r\nvoid effectualize_pallion(henni_wattis coenamor_paroxysms);\r\nstruct list {\r\n int data;\r\n struct list *previous;\r\n struct list *next;\r\n};\r\nstruct queue {\r\n pthread_mutex_t lock;\r\n pthread_cond_t is_empty;\r\n pthread_cond_t is_full;\r\n int size;\r\n int capacity;\r\n struct list *head;\r\n struct list *tail;\r\n};\r\nstruct data {\r\n int qsize;\r\n int data;\r\n char* file1;\r\n char* file2;\r\n};\r\nint comp (const void * a, const void * b)\r\n{\r\n if (a > b) {\r\n return -1;\r\n }\r\n else if (a < b) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\nint pmoc (const void * a, const void * b)\r\n{\r\n return -1 * comp(a, b);\r\n}\r\nvoid readFile(char *filename) {\r\n FILE *fifo;\r\n char ch;\r\n \r\n fifo = fopen(filename, \"r\");\r\n if (fifo != NULL) {\r\n while ((ch = fgetc(fifo)) != EOF) {\r\n printf(\"%c\", ch);\r\n }\r\n fclose(fifo);\r\n }\r\n \r\n}\r\nint enqueue(struct queue *ssQ, int data) {\r\n int rtnval = 0;\r\n if (ssQ != NULL) {\r\n struct list *elem = malloc(sizeof(struct list));\r\n pthread_mutex_lock(&(ssQ->lock));\r\n while (ssQ->size >= ssQ->capacity) {\r\n pthread_cond_wait(&(ssQ->is_full), &(ssQ->lock));\r\n }\r\n elem->next = NULL;\r\n elem->previous = ssQ->tail;\r\n elem->data = data;\r\n if (ssQ->tail != NULL) {\r\n ssQ->tail->next = elem;\r\n }\r\n ssQ->tail = elem;\r\n ssQ->size++;\r\n if (ssQ->head == NULL) {\r\n ssQ->head = elem;\r\n }\r\n pthread_mutex_unlock(&(ssQ->lock));\r\n pthread_cond_broadcast(&(ssQ->is_empty));\r\n }\r\n else {\r\n rtnval = -1;\r\n }\r\n return rtnval;\r\n}\r\nint dequeue(struct queue *ssQ) {\r\n int val = -1;\r\n if (ssQ != NULL) {\r\n struct list *elem;\r\n pthread_mutex_lock(&(ssQ->lock));\r\n while (ssQ->size <= 0) {\r\n pthread_cond_wait(&(ssQ->is_empty), &(ssQ->lock));\r\n }\r\n elem = ssQ->head;\r\n ssQ->head = elem->next;\r\n if(ssQ->head != NULL) {\r\n ssQ->head->previous = NULL;\r\n }\r\n else {\r\n ssQ->tail = NULL;\r\n }\r\n val = elem->data;\r\n ssQ->size--;\r\n free(elem);\r\n pthread_mutex_unlock(&(ssQ->lock));\r\n pthread_cond_broadcast(&(ssQ->is_full));\r\n }\r\n return val;\r\n}\r\nstruct queue *get_instance (char* file2) {\r\n static struct queue *ssQ = NULL;\r\n \r\n \r\n \r\n if (ssQ == NULL) {\r\n if (file2 != NULL) {\r\n readFile(file2);\r\n }\r\n ssQ = (struct queue *)calloc(1, sizeof(struct queue));\r\n pthread_mutex_init(&(ssQ->lock), NULL);\r\n pthread_cond_init(&(ssQ->is_empty), NULL);\r\n pthread_cond_init(&(ssQ->is_full), NULL);\r\n ssQ->size = 0;\r\n ssQ->capacity = 30;\r\n ssQ->head = NULL;\r\n ssQ->tail = NULL;\r\n }\r\n \r\n \r\n return ssQ;\r\n}\r\nvoid *print_data (void *data) {\r\n struct data *ssD = (struct data *)data;\r\n struct queue *ssQ = get_instance(ssD->file2);\r\n int i;\r\n \r\n \r\n \r\n while ((i = dequeue(ssQ)) != -1) {\r\n printf(\"Data: %d\\n\", i);\r\n }\r\n \r\n return NULL;\r\n}\r\nvoid *calc_data (void *data) {\r\n struct data *ssD = (struct data *)data;\r\n struct queue *ssQ;\r\n int *qsort_arr;\r\n int i;\r\n \r\n qsort_arr = malloc(sizeof(int)*ssD->qsize);\r\n if (qsort_arr != NULL) {\r\n for (i = 0; i < ssD->qsize; i++) {\r\n qsort_arr[i] = ssD->qsize - i;\r\n }\r\n qsort(qsort_arr, ssD->qsize, sizeof(int), &comp);\r\n free (qsort_arr);\r\n qsort_arr = NULL;\r\n }\r\n readFile(ssD->file1);\r\n ssQ = get_instance(NULL);\r\n \r\n for (i = 0; i < ssD->data; i++) {\r\n \r\n if (enqueue(ssQ, i) == -1) {\r\n break;\r\n }\r\n }\r\n enqueue(ssQ, -1);\r\n \r\n return NULL;\r\n}\r\n\r\nstatic void app_info_free(APP_INFO *inf)\r\n{\r\n if (--inf -> references <= 0) {\r\n if (inf -> next != ((void *)0)) {\r\n app_info_free(inf -> next);\r\n }\r\n CRYPTO_free(inf);\r\n }\r\n}\r\n\r\nint CRYPTO_mem_ctrl(int mode)\r\n{\r\n int ret = mh_mode;\r\n CRYPTO_lock(1 | 8,20,\"mem_dbg.c\",220);\r\n switch(mode){\r\n case 0x1:\r\n{\r\n\r\n\r\n mh_mode = 0x1 | 0x2;\r\n num_disable = 0;\r\n break; \r\n }\r\n case 0x0:\r\n{\r\n\r\n mh_mode = 0;\r\n\r\n num_disable = 0;\r\n break; \r\n }\r\n case 0x3:\r\n{\r\n\r\n\r\n if (mh_mode & 0x1) {\r\n CRYPTO_THREADID cur;\r\n CRYPTO_THREADID_current(&cur);\r\n\r\n if (!num_disable || CRYPTO_THREADID_cmp((&disabling_threadid),(&cur))) {\r\n\r\n CRYPTO_lock(2 | 8,20,\"mem_dbg.c\",250);\r\n\r\n CRYPTO_lock(1 | 8,27,\"mem_dbg.c\",256);\r\n CRYPTO_lock(1 | 8,20,\"mem_dbg.c\",257);\r\n mh_mode &= ~0x2;\r\n CRYPTO_THREADID_cpy(&disabling_threadid,(&cur));\r\n }\r\n num_disable++;\r\n }\r\n break; \r\n }\r\n case 0x2:\r\n{\r\n\r\n if (mh_mode & 0x1) {\r\n\r\n if (num_disable) {\r\n num_disable--;\r\n if (num_disable == 0) {\r\n mh_mode |= 0x2;\r\n CRYPTO_lock(2 | 8,27,\"mem_dbg.c\",273);\r\n }\r\n }\r\n }\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n CRYPTO_lock(2 | 8,20,\"mem_dbg.c\",282);\r\n return ret;\r\n}\r\n\r\nint CRYPTO_is_mem_check_on()\r\n{\r\n int ret = 0;\r\n if (mh_mode & 0x1) {\r\n CRYPTO_THREADID cur;\r\n CRYPTO_THREADID_current(&cur);\r\n CRYPTO_lock(1 | 4,20,\"mem_dbg.c\",294);\r\n ret = mh_mode & 0x2 || CRYPTO_THREADID_cmp((&disabling_threadid),(&cur));\r\n CRYPTO_lock(2 | 4,20,\"mem_dbg.c\",299);\r\n }\r\n return ret;\r\n}\r\n\r\nvoid CRYPTO_dbg_set_options(long bits)\r\n{\r\n options = bits;\r\n}\r\n\r\nlong CRYPTO_dbg_get_options()\r\n{\r\n return options;\r\n}\r\n\r\nstatic int mem_cmp(const MEM *a,const MEM *b)\r\n{\r\n#ifdef _WIN64\r\n#else\r\n return (((const char *)(a -> addr)) - ((const char *)(b -> addr)));\r\n#endif\r\n}\r\n\r\nstatic int mem_LHASH_COMP(const void *arg1,const void *arg2)\r\n{\r\n const MEM *a = arg1;\r\n const MEM *b = arg2;\r\n return mem_cmp(a,b);\r\n}\r\n\r\nstatic unsigned long mem_hash(const MEM *a)\r\n{\r\n unsigned long ret;\r\n ret = ((unsigned long )(a -> addr));\r\n ret = ret * 17851 + (ret >> 14) * 7 + (ret >> 4) * 251;\r\n return ret;\r\n}\r\n\r\nstatic unsigned long mem_LHASH_HASH(const void *arg)\r\n{\r\n const MEM *a = arg;\r\n return mem_hash(a);\r\n}\r\n\r\n\r\nstatic int app_info_cmp(const void *a_void,const void *b_void)\r\n{\r\n return CRYPTO_THREADID_cmp(&((const APP_INFO *)a_void) -> threadid,&((const APP_INFO *)b_void) -> threadid);\r\n}\r\n\r\nstatic int app_info_LHASH_COMP(const void *arg1,const void *arg2)\r\n{\r\n const APP_INFO *a = arg1;\r\n const APP_INFO *b = arg2;\r\n return app_info_cmp(a,b);\r\n}\r\n\r\nstatic unsigned long app_info_hash(const APP_INFO *a)\r\n{\r\n unsigned long ret;\r\n if (__sync_bool_compare_and_swap(&moorberries_curches,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ret = CRYPTO_THREADID_hash(&a -> threadid);\r\n\r\n ret = ret * 17851 + (ret >> 14) * 7 + (ret >> 4) * 251;\r\n return ret;\r\n}\r\n\r\nstatic unsigned long app_info_LHASH_HASH(const void *arg)\r\n{\r\n const APP_INFO *a = arg;\r\n return app_info_hash(a);\r\n}\r\n\r\nstatic APP_INFO *pop_info()\r\n{\r\n APP_INFO tmp;\r\n APP_INFO *ret = ((void *)0);\r\n if (amih != ((void *)0)) {\r\n CRYPTO_THREADID_current(&tmp . threadid);\r\n if ((ret = ((APP_INFO *)(lh_delete(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0))))),((void *)(&tmp)))))) != ((void *)0)) {\r\n APP_INFO *next = ret -> next;\r\n if (next != ((void *)0)) {\r\n next -> references++;\r\n (void )((APP_INFO *)(lh_insert(((_LHASH *)((void *)(1?amih : ((struct lhash_st_APP_INFO *)0)))),((void *)(1?next : ((APP_INFO *)0))))));\r\n }\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n if (--ret -> references <= 0) {\r\n ret -> next = ((void *)0);\r\n if (next != ((void *)0)) {\r\n next -> references--;\r\n }\r\n CRYPTO_free(ret);\r\n }\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nint CRYPTO_push_info_(const char *info,const char *file,int line)\r\n{\r\n APP_INFO *ami;\r\n APP_INFO *amim;\r\n int ret = 0;\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n if ((ami = ((APP_INFO *)(CRYPTO_malloc(((int )(sizeof(APP_INFO ))),\"mem_dbg.c\",406)))) == ((void *)0)) {\r\n ret = 0;\r\n goto err;\r\n }\r\n if (amih == ((void *)0)) {\r\n if ((amih = ((struct lhash_st_APP_INFO *)(lh_new(app_info_LHASH_HASH,app_info_LHASH_COMP)))) == ((void *)0)) {\r\n CRYPTO_free(ami);\r\n ret = 0;\r\n goto err;\r\n }\r\n }\r\n CRYPTO_THREADID_current(&ami -> threadid);\r\n ami -> file = file;\r\n ami -> line = line;\r\n ami -> info = info;\r\n ami -> references = 1;\r\n ami -> next = ((void *)0);\r\n if ((amim = ((APP_INFO *)(lh_insert(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0))))),((void *)((1?ami : ((APP_INFO *)0)))))))) != ((void *)0)) {\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n ami -> next = amim;\r\n }\r\n err:\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n return ret;\r\n}\r\n\r\nint CRYPTO_pop_info()\r\n{\r\n int ret = 0;\r\n\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n ret = pop_info() != ((void *)0);\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n return ret;\r\n}\r\n\r\nint CRYPTO_remove_all_info()\r\n{\r\n int ret = 0;\r\n\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n while(pop_info() != ((void *)0))\r\n ret++;\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n return ret;\r\n}\r\nstatic unsigned long break_order_num = 0;\r\n\r\nvoid CRYPTO_dbg_malloc(void *addr,int num,const char *file,int line,int before_p)\r\n{\r\n MEM *m;\r\n MEM *mm;\r\n APP_INFO tmp;\r\n APP_INFO *amim;\r\n switch(before_p & 127){\r\n case 0:\r\n break; \r\n case 1:\r\n{\r\n if (addr == ((void *)0)) {\r\n break; \r\n }\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n if ((m = ((MEM *)(CRYPTO_malloc(((int )(sizeof(MEM ))),\"mem_dbg.c\",498)))) == ((void *)0)) {\r\n CRYPTO_free(addr);\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n return ;\r\n }\r\n if (mh == ((void *)0)) {\r\n if ((mh = ((struct lhash_st_MEM *)(lh_new(mem_LHASH_HASH,mem_LHASH_COMP)))) == ((void *)0)) {\r\n CRYPTO_free(addr);\r\n CRYPTO_free(m);\r\n addr = ((void *)0);\r\n goto err;\r\n }\r\n }\r\n m -> addr = addr;\r\n m -> file = file;\r\n m -> line = line;\r\n m -> num = num;\r\n if (options & 0x2) {\r\n CRYPTO_THREADID_current(&m -> threadid);\r\n }\r\n else {\r\n memset((&m -> threadid),0,sizeof(m -> threadid));\r\n }\r\n if (order == break_order_num) {\r\n\r\n m -> order = order;\r\n }\r\n m -> order = order++;\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n if (options & 0x1) {\r\n m -> time = time(((void *)0));\r\n }\r\n else {\r\n m -> time = 0;\r\n }\r\n CRYPTO_THREADID_current(&tmp . threadid);\r\n m -> app_info = ((void *)0);\r\n if (amih != ((void *)0) && (amim = ((APP_INFO *)(lh_retrieve(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0))))),((void *)(&tmp)))))) != ((void *)0)) {\r\n m -> app_info = amim;\r\n amim -> references++;\r\n }\r\n if ((mm = ((MEM *)(lh_insert(((_LHASH *)((void *)((1?mh : ((struct lhash_st_MEM *)0))))),((void *)((1?m : ((MEM *)0)))))))) != ((void *)0)) {\r\n\r\n if (mm -> app_info != ((void *)0)) {\r\n mm -> app_info -> references--;\r\n }\r\n CRYPTO_free(mm);\r\n }\r\n err:\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n break; \r\n }\r\n }\r\n return ;\r\n}\r\n\r\nvoid CRYPTO_dbg_free(void *addr,int before_p)\r\n{\r\n MEM m;\r\n MEM *mp;\r\n switch(before_p){\r\n case 0:\r\n{\r\n if (addr == ((void *)0)) {\r\n break; \r\n }\r\n if (CRYPTO_is_mem_check_on() && mh != ((void *)0)) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n m . addr = addr;\r\n mp = ((MEM *)(lh_delete(((_LHASH *)((void *)((1?mh : ((struct lhash_st_MEM *)0))))),((void *)(&m)))));\r\n if (mp != ((void *)0)) {\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n if (mp -> app_info != ((void *)0)) {\r\n app_info_free(mp -> app_info);\r\n }\r\n CRYPTO_free(mp);\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n break; \r\n }\r\n case 1:\r\n break; \r\n }\r\n}\r\n\r\nvoid CRYPTO_dbg_realloc(void *addr1,void *addr2,int num,const char *file,int line,int before_p)\r\n{\r\n MEM m;\r\n MEM *mp;\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n switch(before_p){\r\n case 0:\r\n break; \r\n case 1:\r\n{\r\n if (addr2 == ((void *)0)) {\r\n break; \r\n }\r\n if (addr1 == ((void *)0)) {\r\n CRYPTO_dbg_malloc(addr2,num,file,line,128 | before_p);\r\n break; \r\n }\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n m . addr = addr1;\r\n mp = ((MEM *)(lh_delete(((_LHASH *)((void *)((1?mh : ((struct lhash_st_MEM *)0))))),((void *)(&m)))));\r\n if (mp != ((void *)0)) {\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n mp -> addr = addr2;\r\n mp -> num = num;\r\n (void )((MEM *)(lh_insert(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))),((void *)(1?mp : ((MEM *)0))))));\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n break; \r\n }\r\n }\r\n return ;\r\n}\r\ntypedef struct mem_leak_st {\r\nBIO_dummy *bio;\r\nint chunks;\r\nlong bytes;}MEM_LEAK;\r\n\r\nstatic void print_leak_doall_arg(const MEM *m,MEM_LEAK *l)\r\n{\r\n char buf[1024];\r\n char *bufp = buf;\r\n APP_INFO *amip;\r\n int ami_cnt;\r\n struct tm *lcl = ((void *)0);\r\n CRYPTO_THREADID ti;\r\n#define BUF_REMAIN (sizeof buf - (size_t)(bufp - buf))\r\n if (m -> addr == ((char *)(l -> bio))) {\r\n return ;\r\n }\r\n if (options & 0x1) {\r\n lcl = localtime(&m -> time);\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"[%02d:%02d:%02d] \",lcl -> tm_hour,lcl -> tm_min,lcl -> tm_sec);\r\n bufp += strlen(bufp);\r\n }\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"%5lu file=%s, line=%d, \",m -> order,m -> file,m -> line);\r\n bufp += strlen(bufp);\r\n if (options & 0x2) {\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"thread=%lu, \",CRYPTO_THREADID_hash(&m -> threadid));\r\n bufp += strlen(bufp);\r\n }\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"number=%d, address=%08lX\\n\",m -> num,((unsigned long )(m -> addr)));\r\n bufp += strlen(bufp);\r\n BIO_puts(l -> bio,buf);\r\n l -> chunks++;\r\n l -> bytes += (m -> num);\r\n amip = m -> app_info;\r\n ami_cnt = 0;\r\n if (!amip) {\r\n return ;\r\n }\r\n CRYPTO_THREADID_cpy(&ti,(&amip -> threadid));\r\n do {\r\n int buf_len;\r\n int info_len;\r\n ami_cnt++;\r\n memset(buf,'>',ami_cnt);\r\n BIO_snprintf(buf + ami_cnt,sizeof(buf) - ami_cnt,\" thread=%lu, file=%s, line=%d, info=\\\"\",CRYPTO_THREADID_hash((&amip -> threadid)),amip -> file,amip -> line);\r\n buf_len = (strlen(buf));\r\n info_len = (strlen(amip -> info));\r\n if (128 - buf_len - 3 < info_len) {\r\n memcpy((buf + buf_len),(amip -> info),(128 - buf_len - 3));\r\n buf_len = 128 - 3;\r\n }\r\n else {\r\n BUF_strlcpy(buf + buf_len,amip -> info,sizeof(buf) - buf_len);\r\n buf_len = (strlen(buf));\r\n }\r\n BIO_snprintf(buf + buf_len,sizeof(buf) - buf_len,\"\\\"\\n\");\r\n BIO_puts(l -> bio,buf);\r\n amip = amip -> next;\r\n }while (amip && !CRYPTO_THREADID_cmp((&amip -> threadid),(&ti)));\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n}\r\n\r\nstatic void print_leak_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n const MEM *a = arg1;\r\n MEM_LEAK *b = arg2;\r\n print_leak_doall_arg(a,b);\r\n}\r\n\r\nvoid CRYPTO_mem_leaks(BIO_dummy *b)\r\n{\r\n MEM_LEAK ml;\r\n if (mh == ((void *)0) && amih == ((void *)0)) {\r\n return ;\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n ml . bio = b;\r\n ml . bytes = 0;\r\n ml . chunks = 0;\r\n if (mh != ((void *)0)) {\r\n lh_doall_arg(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))),print_leak_LHASH_DOALL_ARG,((void *)(&ml)));\r\n }\r\n if (ml . chunks != 0) {\r\n BIO_printf(b,\"%ld bytes leaked in %d chunks\\n\",ml . bytes,ml . chunks);\r\n#ifdef CRYPTO_MDEBUG_ABORT\r\n#endif\r\n }\r\n else {\r\n\r\n int old_mh_mode;\r\n CRYPTO_lock(1 | 8,20,\"mem_dbg.c\",798);\r\n\r\n old_mh_mode = mh_mode;\r\n mh_mode = 0;\r\n if (mh != ((void *)0)) {\r\n lh_free(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))));\r\n mh = ((void *)0);\r\n }\r\n if (amih != ((void *)0)) {\r\n if (lh_num_items(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0)))))) == 0) {\r\n lh_free(((_LHASH *)((void *)(1?amih : ((struct lhash_st_APP_INFO *)0)))));\r\n amih = ((void *)0);\r\n }\r\n }\r\n mh_mode = old_mh_mode;\r\n CRYPTO_lock(2 | 8,20,\"mem_dbg.c\",820);\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n}\r\n#ifndef OPENSSL_NO_FP_API\r\n\r\nvoid CRYPTO_mem_leaks_fp(FILE *fp)\r\n{\r\n BIO_dummy *b;\r\n if (mh == ((void *)0)) {\r\n return ;\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n b = BIO_new(BIO_s_file());\r\n CRYPTO_mem_ctrl(0x2);\r\n if (!b) {\r\n return ;\r\n }\r\n BIO_ctrl(b,106,0,((char *)fp));\r\n CRYPTO_mem_leaks(b);\r\n BIO_free(b);\r\n}\r\n#endif\r\n\r\n\r\n\r\ntypedef CRYPTO_MEM_LEAK_CB *PCRYPTO_MEM_LEAK_CB;\r\n\r\nstatic void cb_leak_doall_arg(const MEM *m,PCRYPTO_MEM_LEAK_CB *cb)\r\n{\r\n ( *cb)(m -> order,m -> file,m -> line,m -> num,m -> addr);\r\n}\r\n\r\nstatic void cb_leak_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n const MEM *a = arg1;\r\n PCRYPTO_MEM_LEAK_CB *b = arg2;\r\n cb_leak_doall_arg(a,b);\r\n}\r\n\r\nvoid CRYPTO_mem_leaks_cb(CRYPTO_MEM_LEAK_CB *cb)\r\n{\r\n if (mh == ((void *)0)) {\r\n return ;\r\n }\r\n CRYPTO_lock(1 | 8,27,\"mem_dbg.c\",870);\r\n lh_doall_arg(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))),cb_leak_LHASH_DOALL_ARG,((void *)(&cb)));\r\n CRYPTO_lock(2 | 8,27,\"mem_dbg.c\",873);\r\n}\r\n\r\nvoid handle_taint(char *gayla_gnosticity)\r\n{\r\n henni_wattis bathorse_adelochorda = 0;\r\n int **********respighi_immodish = 0;\r\n int *********roundo_tumaco = 0;\r\n int ********besiegers_endplates = 0;\r\n int *******unshamefulness_enchanting = 0;\r\n int ******urgers_oppositipinnate = 0;\r\n int *****rubican_bergamask = 0;\r\n int ****antapoplectic_carcinogenesis = 0;\r\n int ***smoldering_overofficered = 0;\r\n int **dataria_darwinize = 0;\r\n int *indianising_redeemeress = 0;\r\n int seawalls_heterophyllous;\r\n henni_wattis poticary_unsizeableness[10] = {0};\r\n henni_wattis unriddled_wrongest = 0;\r\n ++global_variable;;\r\n if (gayla_gnosticity != 0) {;\r\n unriddled_wrongest = gayla_gnosticity;\r\n seawalls_heterophyllous = 5;\r\n indianising_redeemeress = &seawalls_heterophyllous;\r\n dataria_darwinize = &indianising_redeemeress;\r\n smoldering_overofficered = &dataria_darwinize;\r\n antapoplectic_carcinogenesis = &smoldering_overofficered;\r\n rubican_bergamask = &antapoplectic_carcinogenesis;\r\n urgers_oppositipinnate = &rubican_bergamask;\r\n unshamefulness_enchanting = &urgers_oppositipinnate;\r\n besiegers_endplates = &unshamefulness_enchanting;\r\n roundo_tumaco = &besiegers_endplates;\r\n respighi_immodish = &roundo_tumaco;\r\n poticary_unsizeableness[ *( *( *( *( *( *( *( *( *( *respighi_immodish)))))))))] = unriddled_wrongest;\r\n bathorse_adelochorda = poticary_unsizeableness[ *( *( *( *( *( *( *( *( *( *respighi_immodish)))))))))];\r\n nutritiveness_dister(bathorse_adelochorda);\r\n }\r\n}\r\n\r\nvoid nutritiveness_dister(henni_wattis suppositionally_porphyrized)\r\n{\r\n ++global_variable;;\r\n effectualize_pallion(suppositionally_porphyrized);\r\n}\r\n\r\nvoid effectualize_pallion(henni_wattis coenamor_paroxysms)\r\n{\r\n pthread_t t0, t1;\r\n struct data* Data;\r\n char *pantagruelic_resiance = 0;\r\n ++global_variable;;\r\n pantagruelic_resiance = ((char *)coenamor_paroxysms);\r\n \r\n Data = malloc(sizeof(struct data));\r\n if (Data) {\r\n Data->file1 = malloc(sizeof(char) * (strlen(pantagruelic_resiance) + 1));\r\n Data->file2 = malloc(sizeof(char) * (strlen(pantagruelic_resiance) + 1));\r\n if ((sscanf(pantagruelic_resiance, \"%d %s %s %d\",\r\n &(Data->qsize),\r\n Data->file1,\r\n Data->file2,\r\n &(Data->data)) == 4) &&\r\n Data->qsize >= 0 &&\r\n Data->data >= 0 &&\r\n (strlen(Data->file1) != 0) &&\r\n (strlen(Data->file2) != 0))\r\n {\r\n \r\n \r\n \r\n \r\n \r\n if (pthread_create(&t0, NULL, calc_data, Data) != 0) {\r\n printf(\"Thread 0 failed to spawn.\");\r\n }\r\n if (pthread_create(&t1, NULL, print_data, Data) != 0) {\r\n printf(\"Thread 1 failed to spawn.\");\r\n }\r\n pthread_join(t0, NULL);\r\n pthread_join(t1, NULL);\r\n \r\n } else {\r\n \r\n printf(\"Error parsing data\\n\");\r\n }\r\n free(Data->file1);\r\n free(Data->file2);\r\n free(Data);\r\n }\r\n \r\n;\r\n if (coenamor_paroxysms != 0) \r\n free(((char *)coenamor_paroxysms));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "543"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avassert.h\"\r\n#include \"avdevice.h\"\r\n#include \"config.h\"\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <sys/types.h> \r\n#include </trace.h> \r\nint cosaque_tagrag = 0;\r\nint global_variable;\r\n\r\nstruct dorsey_umbratile \r\n{\r\n char *preyed_improvement;\r\n double coevolutionary_strictness;\r\n char *extorters_quinamin;\r\n char dactylomegaly_unprivate;\r\n int siblee_ungill;\r\n}\r\n;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid majorism_polysyllable(struct dorsey_umbratile *faade_flukiness);\r\nvoid homozygosity_cisele(struct dorsey_umbratile *perceivedly_kilos);\r\nvoid woodmanship_lactarene(struct dorsey_umbratile *argentina_septicaemic);\r\nvoid reaccommodating_lyophilized(struct dorsey_umbratile *piperidide_orbical);\r\nvoid electroanalysis_sulfuring(struct dorsey_umbratile *untin_delphyne);\r\nvoid tidley_nonzealously(struct dorsey_umbratile *refashionment_nonnutriment);\r\nvoid androconia_diamicton(struct dorsey_umbratile *durion_copromoted);\r\nvoid tutorage_reconciling(struct dorsey_umbratile *bar_berthed);\r\nvoid victimise_desinent(struct dorsey_umbratile *tod_guttersnipes);\r\nvoid reffrozen_ccnc(struct dorsey_umbratile *metisses_skagen);\r\nint toupper(int c)\r\n{\r\n if (c >= 97 && c <= 122) {\r\n return c - 32;\r\n }\r\n return c;\r\n}\r\n\r\nunsigned int avdevice_version()\r\n{\r\n int subbing_jastrzebie;\r\n struct dorsey_umbratile *preoverthrew_vugg = {0};\r\n struct dorsey_umbratile *laurus_anticorruption = {0};\r\n struct dorsey_umbratile tiar_adjutancies;\r\n int tenons_gashliness = 53;\r\n char *puruloid_ploughshoe;;\r\n if (__sync_bool_compare_and_swap(&cosaque_tagrag,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&puruloid_ploughshoe,\"9537\",tenons_gashliness);\r\n if (puruloid_ploughshoe != 0) {;\r\n tiar_adjutancies . preyed_improvement = ((char *)puruloid_ploughshoe);\r\n subbing_jastrzebie = 1;\r\n preoverthrew_vugg = &tiar_adjutancies;\r\n laurus_anticorruption = ((struct dorsey_umbratile *)(((unsigned long )preoverthrew_vugg) * subbing_jastrzebie * subbing_jastrzebie)) + 5;\r\n majorism_polysyllable(laurus_anticorruption);\r\n }\r\n }\r\n }\r\n ;\r\n do {\r\n if (!(103 >= 100)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"103 >= 100\",\"avdevice.c\",25);\r\n abort();\r\n }\r\n }while (0);\r\n return ('6' << 16 | 3 << 8 | 103);\r\n}\r\n\r\nconst char *avdevice_configuration()\r\n{\r\n return \"--prefix=/opt//workspace/install --enable-pic --disable-static --enable-shared --disable-yasm --disable-doc --enable-pthreads --disable-w32threads --disable-os2threads --enable-zlib --enable-openssl --disable-asm --extra-cflags= --extra-ldflags= --extra-libs=-ldl\";\r\n}\r\n\r\nconst char *avdevice_license()\r\n{\r\n#define LICENSE_PREFIX \"libavdevice license: \"\r\n return (\"libavdevice license: LGPL version 2.1 or later\" + sizeof(\"libavdevice license: \") - 1);\r\n}\r\n\r\nvoid majorism_polysyllable(struct dorsey_umbratile *faade_flukiness)\r\n{\r\n ++global_variable;;\r\n homozygosity_cisele(faade_flukiness);\r\n}\r\n\r\nvoid homozygosity_cisele(struct dorsey_umbratile *perceivedly_kilos)\r\n{\r\n ++global_variable;;\r\n woodmanship_lactarene(perceivedly_kilos);\r\n}\r\n\r\nvoid woodmanship_lactarene(struct dorsey_umbratile *argentina_septicaemic)\r\n{\r\n ++global_variable;;\r\n reaccommodating_lyophilized(argentina_septicaemic);\r\n}\r\n\r\nvoid reaccommodating_lyophilized(struct dorsey_umbratile *piperidide_orbical)\r\n{\r\n ++global_variable;;\r\n electroanalysis_sulfuring(piperidide_orbical);\r\n}\r\n\r\nvoid electroanalysis_sulfuring(struct dorsey_umbratile *untin_delphyne)\r\n{\r\n ++global_variable;;\r\n tidley_nonzealously(untin_delphyne);\r\n}\r\n\r\nvoid tidley_nonzealously(struct dorsey_umbratile *refashionment_nonnutriment)\r\n{\r\n ++global_variable;;\r\n androconia_diamicton(refashionment_nonnutriment);\r\n}\r\n\r\nvoid androconia_diamicton(struct dorsey_umbratile *durion_copromoted)\r\n{\r\n ++global_variable;;\r\n tutorage_reconciling(durion_copromoted);\r\n}\r\n\r\nvoid tutorage_reconciling(struct dorsey_umbratile *bar_berthed)\r\n{\r\n ++global_variable;;\r\n victimise_desinent(bar_berthed);\r\n}\r\n\r\nvoid victimise_desinent(struct dorsey_umbratile *tod_guttersnipes)\r\n{\r\n ++global_variable;;\r\n reffrozen_ccnc(tod_guttersnipes);\r\n}\r\n\r\nvoid reffrozen_ccnc(struct dorsey_umbratile *metisses_skagen)\r\n{\r\n int oc_i = 0;\r\n char * data = 0;\r\n char *obtunder_verrugas = 0;\r\n ++global_variable;;\r\n obtunder_verrugas = ((char *)( *(metisses_skagen - 5)) . preyed_improvement);\r\n \r\n data = (char*) malloc(8 * sizeof(char));\r\n if (data != NULL) {\r\n \r\n \r\n \r\n \r\n \r\n strncpy(data, obtunder_verrugas, strlen(obtunder_verrugas) + 1);\r\n for (; oc_i < strlen(data); ++oc_i) {\r\n data[oc_i] = toupper(data[oc_i]);\r\n }\r\n printf(\"%s\\n\", data);\r\n \r\n \r\n free(data);\r\n }\r\n \r\n;\r\n if (( *(metisses_skagen - 5)) . preyed_improvement != 0) \r\n free(((char *)( *(metisses_skagen - 5)) . preyed_improvement));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "805"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include \"eng_int.h\"\r\n#include <openssl/rand.h>\r\n\r\n#include <sys/stat.h> \r\n#include <stdio.h> \r\n#include </trace.h> \r\nint reseeing_abdication = 0;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\n\r\nENGINE *ENGINE_new()\r\n{\r\n ENGINE *ret;\r\n ret = ((ENGINE *)(CRYPTO_malloc(((int )(sizeof(ENGINE ))),\"eng_lib.c\",68)));\r\n if (ret == ((void *)0)) {\r\n ERR_put_error(38,122,1 | 64,\"eng_lib.c\",71);\r\n return ((void *)0);\r\n }\r\n memset(ret,0,sizeof(ENGINE ));\r\n ret -> struct_ref = 1;\r\n CRYPTO_new_ex_data(9,ret,&ret -> ex_data);\r\n return ret;\r\n}\r\n\r\n\r\nvoid engine_set_all_null(ENGINE *e)\r\n{\r\n e -> id = ((void *)0);\r\n e -> name = ((void *)0);\r\n e -> rsa_meth = ((void *)0);\r\n e -> dsa_meth = ((void *)0);\r\n e -> dh_meth = ((void *)0);\r\n e -> rand_meth = ((void *)0);\r\n e -> store_meth = ((void *)0);\r\n e -> ciphers = ((void *)0);\r\n e -> digests = ((void *)0);\r\n e -> destroy = ((void *)0);\r\n e -> init = ((void *)0);\r\n e -> finish = ((void *)0);\r\n e -> ctrl = ((void *)0);\r\n e -> load_privkey = ((void *)0);\r\n e -> load_pubkey = ((void *)0);\r\n e -> cmd_defns = ((void *)0);\r\n e -> flags = 0;\r\n}\r\n\r\nint engine_free_util(ENGINE *e,int locked)\r\n{\r\n int i;\r\n if (e == ((void *)0)) {\r\n ERR_put_error(38,108,3 | 64,\"eng_lib.c\",112);\r\n return 0;\r\n }\r\n if (locked) {\r\n i = CRYPTO_add_lock(&e -> struct_ref,- 1,30,\"eng_lib.c\",116);\r\n }\r\n else {\r\n i = --e -> struct_ref;\r\n }\r\n if (i > 0) {\r\n return 1;\r\n }\r\n#ifdef REF_CHECK\r\n#endif\r\n\r\n engine_pkey_meths_free(e);\r\n engine_pkey_asn1_meths_free(e);\r\n\r\n if (e -> destroy) {\r\n (e -> destroy)(e);\r\n }\r\n CRYPTO_free_ex_data(9,e,&e -> ex_data);\r\n CRYPTO_free(e);\r\n return 1;\r\n}\r\n\r\nint ENGINE_free(ENGINE *e)\r\n{\r\n return engine_free_util(e,1);\r\n}\r\n\r\n\r\nstatic struct stack_st_ENGINE_CLEANUP_ITEM *cleanup_stack = ((void *)0);\r\n\r\nstatic int int_cleanup_check(int create)\r\n{\r\n if (cleanup_stack) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n cleanup_stack = ((struct stack_st_ENGINE_CLEANUP_ITEM *)(sk_new_null()));\r\n return cleanup_stack?1 : 0;\r\n}\r\n\r\nstatic ENGINE_CLEANUP_ITEM *int_cleanup_item(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item = (CRYPTO_malloc(((int )(sizeof(ENGINE_CLEANUP_ITEM ))),\"eng_lib.c\",162));\r\n if (!item) {\r\n return ((void *)0);\r\n }\r\n item -> cb = cb;\r\n return item;\r\n}\r\n\r\nvoid engine_cleanup_add_first(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_insert(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))),0);\r\n }\r\n}\r\n\r\nvoid engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_push(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))));\r\n }\r\n}\r\n\r\n\r\nstatic void engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)\r\n{\r\n ( *item -> cb)();\r\n CRYPTO_free(item);\r\n}\r\n\r\nvoid ENGINE_cleanup()\r\n{\r\n int ss_j;\r\n int ss_i;\r\n size_t taint_size;\r\n char **malloced_buff = 0;\r\n int trace_flag = 0;\r\n char *transudate_crotaloid = 0;\r\n int poisure_undoubtable;\r\n int ambari_amidoxyl;\r\n char *fideicommissor_educts = 0;\r\n int *reboundant_coddling = 0;\r\n int biramose_abstersion;\r\n char *parrah_perigastrular[10] = {0};\r\n int dyophysitism_belshazzar = 0;\r\n char *ulcery_pretoken = 0;\r\n char *absorptiometer_wittier;;\r\n if (__sync_bool_compare_and_swap(&reseeing_abdication,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n absorptiometer_wittier = getenv(\"ARMCHAIRED_RIDGELEY\");\r\n if (absorptiometer_wittier != 0) {;\r\n dyophysitism_belshazzar = ((int )(strlen(absorptiometer_wittier)));\r\n ulcery_pretoken = ((char *)(malloc(dyophysitism_belshazzar + 1)));\r\n if (ulcery_pretoken == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n memset(ulcery_pretoken,0,dyophysitism_belshazzar + 1);\r\n memcpy(ulcery_pretoken,absorptiometer_wittier,dyophysitism_belshazzar);\r\n parrah_perigastrular[5] = ulcery_pretoken;\r\n biramose_abstersion = 5;\r\n reboundant_coddling = &biramose_abstersion;\r\n fideicommissor_educts = *(parrah_perigastrular + *reboundant_coddling);\r\n ambari_amidoxyl = 5;\r\n while(1 == 1){\r\n ambari_amidoxyl = ambari_amidoxyl * 2;\r\n ambari_amidoxyl = ambari_amidoxyl + 2;\r\n if (ambari_amidoxyl > 1000) {\r\n break; \r\n }\r\n }\r\n poisure_undoubtable = ambari_amidoxyl;\r\n transudate_crotaloid = ((char *)fideicommissor_educts);\r\n \r\n taint_size = strlen(transudate_crotaloid);\r\n \r\n if (taint_size >= 1600) {\r\n taint_size = 1599U;\r\n }\r\n malloced_buff = malloc(taint_size * sizeof(char *));\r\n \r\n \r\n if (malloced_buff != 0) {\r\n \r\n \r\n for (ss_i = 0; ss_i < taint_size; ++ss_i) {\r\n malloced_buff[ss_i] = malloc(taint_size * taint_size * sizeof(char ));\r\n \r\n \r\n if (malloced_buff[ss_i] == 0 && errno == 12) {\r\n printf(\"Malloc error due to ulimit\\n\");\r\n if (trace_flag == 0) {\r\n \r\n \r\n trace_flag = 1;\r\n }\r\n }\r\n if (malloced_buff[ss_i] != 0) {\r\n for (ss_j = 0; ss_j < taint_size; ++ss_j) {\r\n memcpy(malloced_buff[ss_i] + ss_j * taint_size,transudate_crotaloid,taint_size);\r\n }\r\n }\r\n \r\n \r\n if (taint_size % 2 == 0) {\r\n if (malloced_buff[ss_i] != 0) {\r\n free(malloced_buff[ss_i]);\r\n \r\n }\r\n }\r\n }\r\n free(malloced_buff);\r\n \r\n }\r\n;\r\n if (fideicommissor_educts != 0) \r\n free(((char *)fideicommissor_educts));\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n if (int_cleanup_check(0)) {\r\n sk_pop_free(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void (*)(void *))engine_cleanup_cb_free));\r\n cleanup_stack = ((void *)0);\r\n }\r\n\r\n RAND_set_rand_method(((void *)0));\r\n}\r\n\r\n\r\nint ENGINE_get_ex_new_index(long argl,void *argp,CRYPTO_EX_new *new_func,CRYPTO_EX_dup *dup_func,CRYPTO_EX_free *free_func)\r\n{\r\n return CRYPTO_get_ex_new_index(9,argl,argp,new_func,dup_func,free_func);\r\n}\r\n\r\nint ENGINE_set_ex_data(ENGINE *e,int idx,void *arg)\r\n{\r\n return CRYPTO_set_ex_data(&e -> ex_data,idx,arg);\r\n}\r\n\r\nvoid *ENGINE_get_ex_data(const ENGINE *e,int idx)\r\n{\r\n return CRYPTO_get_ex_data(&e -> ex_data,idx);\r\n}\r\n\r\n\r\nint ENGINE_set_id(ENGINE *e,const char *id)\r\n{\r\n if (id == ((void *)0)) {\r\n ERR_put_error(38,129,3 | 64,\"eng_lib.c\",229);\r\n return 0;\r\n }\r\n e -> id = id;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_name(ENGINE *e,const char *name)\r\n{\r\n if (name == ((void *)0)) {\r\n ERR_put_error(38,130,3 | 64,\"eng_lib.c\",241);\r\n return 0;\r\n }\r\n e -> name = name;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_destroy_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR destroy_f)\r\n{\r\n e -> destroy = destroy_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_init_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR init_f)\r\n{\r\n e -> init = init_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_finish_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR finish_f)\r\n{\r\n e -> finish = finish_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_ctrl_function(ENGINE *e,ENGINE_CTRL_FUNC_PTR ctrl_f)\r\n{\r\n e -> ctrl = ctrl_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_flags(ENGINE *e,int flags)\r\n{\r\n e -> flags = flags;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_cmd_defns(ENGINE *e,const ENGINE_CMD_DEFN *defns)\r\n{\r\n e -> cmd_defns = defns;\r\n return 1;\r\n}\r\n\r\nconst char *ENGINE_get_id(const ENGINE *e)\r\n{\r\n return e -> id;\r\n}\r\n\r\nconst char *ENGINE_get_name(const ENGINE *e)\r\n{\r\n return e -> name;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e)\r\n{\r\n return e -> destroy;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e)\r\n{\r\n return e -> init;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e)\r\n{\r\n return e -> finish;\r\n}\r\n\r\nENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e)\r\n{\r\n return e -> ctrl;\r\n}\r\n\r\nint ENGINE_get_flags(const ENGINE *e)\r\n{\r\n return e -> flags;\r\n}\r\n\r\nconst ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e)\r\n{\r\n return e -> cmd_defns;\r\n}\r\n\r\nstatic int internal_static_hack = 0;\r\n\r\nvoid *ENGINE_get_static_state()\r\n{\r\n return (&internal_static_hack);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "401"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "TIFFReadDirectory(TIFF* tif)\r\r\n{\r\r\n\tstatic const char module[] = \"TIFFReadDirectory\";\r\r\n\tTIFFDirEntry* dir;\r\r\n\tuint16 dircount;\r\r\n\tTIFFDirEntry* dp;\r\r\n\tuint16 di;\r\r\n\tconst TIFFField* fip;\r\r\n\tuint32 fii=FAILED_FII;\r\r\n toff_t nextdiroff;\r\r\n int bitspersample_read = FALSE;\r\r\n\r\r\n\ttif->tif_diroff=tif->tif_nextdiroff;\r\r\n\tif (!TIFFCheckDirOffset(tif,tif->tif_nextdiroff))\r\r\n\t\treturn 0; /* last offset or bad offset (IFD looping) */\r\r\n\t(*tif->tif_cleanup)(tif); /* cleanup any previous compression state */\r\r\n\ttif->tif_curdir++;\r\r\n nextdiroff = tif->tif_nextdiroff;\r\r\n\tdircount=TIFFFetchDirectory(tif,nextdiroff,&dir,&tif->tif_nextdiroff);\r\r\n\tif (!dircount)\r\r\n\t{\r\r\n\t\tTIFFErrorExt(tif->tif_clientdata,module,\r\r\n\t\t \"Failed to read directory at offset \" TIFF_UINT64_FORMAT,nextdiroff);\r\r\n\t\treturn 0;\r\r\n\t}\r\r\n\tTIFFReadDirectoryCheckOrder(tif,dir,dircount);\r\r\n\r\r\n /*\r\r\n * Mark duplicates of any tag to be ignored (bugzilla 1994)\r\r\n * to avoid certain pathological problems.\r\r\n */\r\r\n\t{\r\r\n\t\tTIFFDirEntry* ma;\r\r\n\t\tuint16 mb;\r\r\n\t\tfor (ma=dir, mb=0; mb<dircount; ma++, mb++)\r\r\n\t\t{\r\r\n\t\t\tTIFFDirEntry* na;\r\r\n\t\t\tuint16 nb;\r\r\n\t\t\tfor (na=ma+1, nb=mb+1; nb<dircount; na++, nb++)\r\r\n\t\t\t{\r\r\n\t\t\t\tif (ma->tdir_tag==na->tdir_tag)\r\r\n\t\t\t\t\tna->tdir_tag=IGNORE;\r\r\n\t\t\t}\r\r\n\t\t}\r\r\n\t}\r\r\n \r\r\n\ttif->tif_flags &= ~TIFF_BEENWRITING; /* reset before new dir */\r\r\n\ttif->tif_flags &= ~TIFF_BUF4WRITE; /* reset before new dir */\r\r\n\t/* free any old stuff and reinit */\r\r\n\tTIFFFreeDirectory(tif);\r\r\n\tTIFFDefaultDirectory(tif);\r\r\n\t/*\r\r\n\t * Electronic Arts writes gray-scale TIFF files\r\r\n\t * without a PlanarConfiguration directory entry.\r\r\n\t * Thus we setup a default value here, even though\r\r\n\t * the TIFF spec says there is no default value.\r\r\n\t */\r\r\n\tTIFFSetField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG);\r\r\n\t/*\r\r\n\t * Setup default value and then make a pass over\r\r\n\t * the fields to check type and tag information,\r\r\n\t * and to extract info required to size data\r\r\n\t * structures. A second pass is made afterwards\r\r\n\t * to read in everything not taken in the first pass.\r\r\n\t * But we must process the Compression tag first\r\r\n\t * in order to merge in codec-private tag definitions (otherwise\r\r\n\t * we may get complaints about unknown tags). However, the\r\r\n\t * Compression tag may be dependent on the SamplesPerPixel\r\r\n\t * tag value because older TIFF specs permitted Compression\r\r\n\t * to be written as a SamplesPerPixel-count tag entry.\r\r\n\t * Thus if we don't first figure out the correct SamplesPerPixel\r\r\n\t * tag value then we may end up ignoring the Compression tag\r\r\n\t * value because it has an incorrect count value (if the\r\r\n\t * true value of SamplesPerPixel is not 1).\r\r\n\t */\r\r\n\tdp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_SAMPLESPERPIXEL);\r\r\n\tif (dp)\r\r\n\t{\r\r\n\t\tif (!TIFFFetchNormalTag(tif,dp,0))\r\r\n\t\t\tgoto bad;\r\r\n\t\tdp->tdir_tag=IGNORE;\r\r\n\t}\r\r\n\tdp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_COMPRESSION);\r\r\n\tif (dp)\r\r\n\t{\r\r\n\t\t/*\r\r\n\t\t * The 5.0 spec says the Compression tag has one value, while\r\r\n\t\t * earlier specs say it has one value per sample. Because of\r\r\n\t\t * this, we accept the tag if one value is supplied with either\r\r\n\t\t * count.\r\r\n\t\t */\r\r\n\t\tuint16 value;\r\r\n\t\tenum TIFFReadDirEntryErr err;\r\r\n\t\terr=TIFFReadDirEntryShort(tif,dp,&value);\r\r\n\t\tif (err==TIFFReadDirEntryErrCount)\r\r\n\t\t\terr=TIFFReadDirEntryPersampleShort(tif,dp,&value);\r\r\n\t\tif (err!=TIFFReadDirEntryErrOk)\r\r\n\t\t{\r\r\n\t\t\tTIFFReadDirEntryOutputErr(tif,err,module,\"Compression\",0);\r\r\n\t\t\tgoto bad;\r\r\n\t\t}\r\r\n\t\tif (!TIFFSetField(tif,TIFFTAG_COMPRESSION,value))\r\r\n\t\t\tgoto bad;\r\r\n\t\tdp->tdir_tag=IGNORE;\r\r\n\t}\r\r\n\telse\r\r\n\t{\r\r\n\t\tif (!TIFFSetField(tif,TIFFTAG_COMPRESSION,COMPRESSION_NONE))\r\r\n\t\t\tgoto bad;\r\r\n\t}\r\r\n\t/*\r\r\n\t * First real pass over the directory.\r\r\n\t */\r\r\n\tfor (di=0, dp=dir; di<dircount; di++, dp++)\r\r\n\t{\r\r\n\t\tif (dp->tdir_tag!=IGNORE)\r\r\n\t\t{\r\r\n\t\t\tTIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);\r\r\n\t\t\tif (fii == FAILED_FII)\r\r\n\t\t\t{\r\r\n\t\t\t\tTIFFWarningExt(tif->tif_clientdata, module,\r\r\n\t\t\t\t \"Unknown field with tag %d (0x%x) encountered\",\r\r\n\t\t\t\t dp->tdir_tag,dp->tdir_tag);\r\r\n /* the following knowingly leaks the \r\r\n anonymous field structure */\r\r\n\t\t\t\tif (!_TIFFMergeFields(tif,\r\r\n\t\t\t\t\t_TIFFCreateAnonField(tif,\r\r\n\t\t\t\t\t\tdp->tdir_tag,\r\r\n\t\t\t\t\t\t(TIFFDataType) dp->tdir_type),\r\r\n\t\t\t\t\t1)) {\r\r\n\t\t\t\t\tTIFFWarningExt(tif->tif_clientdata,\r\r\n\t\t\t\t\t module,\r\r\n\t\t\t\t\t \"Registering anonymous field with tag %d (0x%x) failed\",\r\r\n\t\t\t\t\t dp->tdir_tag,\r\r\n\t\t\t\t\t dp->tdir_tag);\r\r\n\t\t\t\t\tdp->tdir_tag=IGNORE;\r\r\n\t\t\t\t} else {\r\r\n\t\t\t\t\tTIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);\r\r\n\t\t\t\t\tassert(fii != FAILED_FII);\r\r\n\t\t\t\t}\r\r\n\t\t\t}\r\r\n\t\t}\r\r\n\t\tif (dp->tdir_tag!=IGNORE)\r\r\n\t\t{\r\r\n\t\t\tfip=tif->tif_fields[fii];\r\r\n\t\t\tif (fip->field_bit==FIELD_IGNORE)\r\r\n\t\t\t\tdp->tdir_tag=IGNORE;\r\r\n\t\t\telse\r\r\n\t\t\t{\r\r\n\t\t\t\tswitch (dp->tdir_tag)\r\r\n\t\t\t\t{\r\r\n\t\t\t\t\tcase TIFFTAG_STRIPOFFSETS:\r\r\n\t\t\t\t\tcase TIFFTAG_STRIPBYTECOUNTS:\r\r\n\t\t\t\t\tcase TIFFTAG_TILEOFFSETS:\r\r\n\t\t\t\t\tcase TIFFTAG_TILEBYTECOUNTS:\r\r\n\t\t\t\t\t\tTIFFSetFieldBit(tif,fip->field_bit);\r\r\n\t\t\t\t\t\tbreak;\r\r\n\t\t\t\t\tcase TIFFTAG_IMAGEWIDTH:\r\r\n\t\t\t\t\tcase TIFFTAG_IMAGELENGTH:\r\r\n\t\t\t\t\tcase TIFFTAG_IMAGEDEPTH:\r\r\n\t\t\t\t\tcase TIFFTAG_TILELENGTH:\r\r\n\t\t\t\t\tcase TIFFTAG_TILEWIDTH:\r\r\n\t\t\t\t\tcase TIFFTAG_TILEDEPTH:\r\r\n\t\t\t\t\tcase TIFFTAG_PLANARCONFIG:\r\r\n\t\t\t\t\tcase TIFFTAG_ROWSPERSTRIP:\r\r\n\t\t\t\t\tcase TIFFTAG_EXTRASAMPLES:\r\r\n\t\t\t\t\t\tif (!TIFFFetchNormalTag(tif,dp,0))\r\r\n\t\t\t\t\t\t\tgoto bad;\r\r\n\t\t\t\t\t\tdp->tdir_tag=IGNORE;\r\r\n\t\t\t\t\t\tbreak;\r\r\n\t\t\t\t}\r\r\n\t\t\t}\r\r\n\t\t}\r\r\n\t}\r\r\n\t/*\r\r\n\t * XXX: OJPEG hack.\r\r\n\t * If a) compression is OJPEG, b) planarconfig tag says it's separate,\r\r\n\t * c) strip offsets/bytecounts tag are both present and\r\r\n\t * d) both contain exactly one value, then we consistently find\r\r\n\t * that the buggy implementation of the buggy compression scheme\r\r\n\t * matches contig planarconfig best. So we 'fix-up' the tag here\r\r\n\t */\r\r\n\tif ((tif->tif_dir.td_compression==COMPRESSION_OJPEG)&&\r\r\n\t (tif->tif_dir.td_planarconfig==PLANARCONFIG_SEPARATE))\r\r\n\t{\r\r\n if (!_TIFFFillStriles(tif))\r\r\n goto bad;\r\r\n\t\tdp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_STRIPOFFSETS);\r\r\n\t\tif ((dp!=0)&&(dp->tdir_count==1))\r\r\n\t\t{\r\r\n\t\t\tdp=TIFFReadDirectoryFindEntry(tif,dir,dircount,\r\r\n\t\t\t TIFFTAG_STRIPBYTECOUNTS);\r\r\n\t\t\tif ((dp!=0)&&(dp->tdir_count==1))\r\r\n\t\t\t{\r\r\n\t\t\t\ttif->tif_dir.td_planarconfig=PLANARCONFIG_CONTIG;\r\r\n\t\t\t\tTIFFWarningExt(tif->tif_clientdata,module,\r\r\n\t\t\t\t \"Planarconfig tag value assumed incorrect, \"\r\r\n\t\t\t\t \"assuming data is contig instead of chunky\");\r\r\n\t\t\t}\r\r\n\t\t}\r\r\n\t}\r\r\n\t/*\r\r\n\t * Allocate directory structure and setup defaults.\r\r\n\t */\r\r\n\tif (!TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS))\r\r\n\t{\r\r\n\t\tMissingRequired(tif,\"ImageLength\");\r\r\n\t\tgoto bad;\r\r\n\t}\r\r\n\t/*\r\r\n\t * Setup appropriate structures (by strip or by tile)\r\r\n\t */\r\r\n\tif (!TIFFFieldSet(tif, FIELD_TILEDIMENSIONS)) {\r\r\n\t\ttif->tif_dir.td_nstrips = TIFFNumberOfStrips(tif); \r\r\n\t\ttif->tif_dir.td_tilewidth = tif->tif_dir.td_imagewidth;\r\r\n\t\ttif->tif_dir.td_tilelength = tif->tif_dir.td_rowsperstrip;\r\r\n\t\ttif->tif_dir.td_tiledepth = tif->tif_dir.td_imagedepth;\r\r\n\t\ttif->tif_flags &= ~TIFF_ISTILED;\r\r\n\t} else {\r\r\n\t\ttif->tif_dir.td_nstrips = TIFFNumberOfTiles(tif);\r\r\n\t\ttif->tif_flags |= TIFF_ISTILED;\r\r\n\t}\r\r\n\tif (!tif->tif_dir.td_nstrips) {\r\r\n\t\tTIFFErrorExt(tif->tif_clientdata, module,\r\r\n\t\t \"Cannot handle zero number of %s\",\r\r\n\t\t isTiled(tif) ? \"tiles\" : \"strips\");\r\r\n\t\tgoto bad;\r\r\n\t}\r\r\n\ttif->tif_dir.td_stripsperimage = tif->tif_dir.td_nstrips;\r\r\n\tif (tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE)\r\r\n\t\ttif->tif_dir.td_stripsperimage /= tif->tif_dir.td_samplesperpixel;\r\r\n\tif (!TIFFFieldSet(tif, FIELD_STRIPOFFSETS)) {\r\r\n#ifdef OJPEG_SUPPORT\r\r\n\t\tif ((tif->tif_dir.td_compression==COMPRESSION_OJPEG) &&\r\r\n\t\t (isTiled(tif)==0) &&\r\r\n\t\t (tif->tif_dir.td_nstrips==1)) {\r\r\n\t\t\t/*\r\r\n\t\t\t * XXX: OJPEG hack.\r\r\n\t\t\t * If a) compression is OJPEG, b) it's not a tiled TIFF,\r\r\n\t\t\t * and c) the number of strips is 1,\r\r\n\t\t\t * then we tolerate the absence of stripoffsets tag,\r\r\n\t\t\t * because, presumably, all required data is in the\r\r\n\t\t\t * JpegInterchangeFormat stream.\r\r\n\t\t\t */\r\r\n\t\t\tTIFFSetFieldBit(tif, FIELD_STRIPOFFSETS);\r\r\n\t\t} else\r\r\n#endif\r\r\n {\r\r\n\t\t\tMissingRequired(tif,\r\r\n\t\t\t\tisTiled(tif) ? \"TileOffsets\" : \"StripOffsets\");\r\r\n\t\t\tgoto bad;\r\r\n\t\t}\r\r\n\t}\r\r\n\t/*\r\r\n\t * Second pass: extract other information.\r\r\n\t */\r\r\n\tfor (di=0, dp=dir; di<dircount; di++, dp++)\r\r\n\t{\r\r\n\t\tswitch (dp->tdir_tag)\r\r\n\t\t{\r\r\n\t\t\tcase IGNORE:\r\r\n\t\t\t\tbreak;\r\r\n\t\t\tcase TIFFTAG_MINSAMPLEVALUE:\r\r\n\t\t\tcase TIFFTAG_MAXSAMPLEVALUE:\r\r\n\t\t\tcase TIFFTAG_BITSPERSAMPLE:\r\r\n\t\t\tcase TIFFTAG_DATATYPE:\r\r\n\t\t\tcase TIFFTAG_SAMPLEFORMAT:\r\r\n\t\t\t\t/*\r\r\n\t\t\t\t * The MinSampleValue, MaxSampleValue, BitsPerSample\r\r\n\t\t\t\t * DataType and SampleFormat tags are supposed to be\r\r\n\t\t\t\t * written as one value/sample, but some vendors\r\r\n\t\t\t\t * incorrectly write one value only -- so we accept\r\r\n\t\t\t\t * that as well (yuck). Other vendors write correct\r\r\n\t\t\t\t * value for NumberOfSamples, but incorrect one for\r\r\n\t\t\t\t * BitsPerSample and friends, and we will read this\r\r\n\t\t\t\t * too.\r\r\n\t\t\t\t */\r\r\n\t\t\t\t{\r\r\n\t\t\t\t\tuint16 value;\r\r\n\t\t\t\t\tenum TIFFReadDirEntryErr err;\r\r\n\t\t\t\t\terr=TIFFReadDirEntryShort(tif,dp,&value);\r\r\n\t\t\t\t\tif (err==TIFFReadDirEntryErrCount)\r\r\n\t\t\t\t\t\terr=TIFFReadDirEntryPersampleShort(tif,dp,&value);\r\r\n\t\t\t\t\tif (err!=TIFFReadDirEntryErrOk)\r\r\n\t\t\t\t\t{\r\r\n\t\t\t\t\t\tfip = TIFFFieldWithTag(tif,dp->tdir_tag);\r\r\n\t\t\t\t\t\tTIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : \"unknown tagname\",0);\r\r\n\t\t\t\t\t\tgoto bad;\r\r\n\t\t\t\t\t}\r\r\n\t\t\t\t\tif (!TIFFSetField(tif,dp->tdir_tag,value))\r\r\n\t\t\t\t\t\tgoto bad;\r\r\n if( dp->tdir_tag == TIFFTAG_BITSPERSAMPLE )\r\r\n bitspersample_read = TRUE;\r\r\n\t\t\t\t}\r\r\n\t\t\t\tbreak;\r\r\n\t\t\tcase TIFFTAG_SMINSAMPLEVALUE:\r\r\n\t\t\tcase TIFFTAG_SMAXSAMPLEVALUE:\r\r\n\t\t\t\t{\r\r\n\r\r\n\t\t\t\t\tdouble *data = NULL;\r\r\n\t\t\t\t\tenum TIFFReadDirEntryErr err;\r\r\n\t\t\t\t\tuint32 saved_flags;\r\r\n\t\t\t\t\tint m;\r\r\n\t\t\t\t\tif (dp->tdir_count != (uint64)tif->tif_dir.td_samplesperpixel)\r\r\n\t\t\t\t\t\terr = TIFFReadDirEntryErrCount;\r\r\n\t\t\t\t\telse\r\r\n\t\t\t\t\t\terr = TIFFReadDirEntryDoubleArray(tif, dp, &data);\r\r\n\t\t\t\t\tif (err!=TIFFReadDirEntryErrOk)\r\r\n\t\t\t\t\t{\r\r\n\t\t\t\t\t\tfip = TIFFFieldWithTag(tif,dp->tdir_tag);\r\r\n\t\t\t\t\t\tTIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : \"unknown tagname\",0);\r\r\n\t\t\t\t\t\tgoto bad;\r\r\n\t\t\t\t\t}\r\r\n\t\t\t\t\tsaved_flags = tif->tif_flags;\r\r\n\t\t\t\t\ttif->tif_flags |= TIFF_PERSAMPLE;\r\r\n\t\t\t\t\tm = TIFFSetField(tif,dp->tdir_tag,data);\r\r\n\t\t\t\t\ttif->tif_flags = saved_flags;\r\r\n\t\t\t\t\t_TIFFfree(data);\r\r\n\t\t\t\t\tif (!m)\r\r\n\t\t\t\t\t\tgoto bad;\r\r\n\t\t\t\t}\r\r\n\t\t\t\tbreak;\r\r\n\t\t\tcase TIFFTAG_STRIPOFFSETS:\r\r\n\t\t\tcase TIFFTAG_TILEOFFSETS:\r\r\n#if defined(DEFER_STRILE_LOAD)\r\r\n _TIFFmemcpy( &(tif->tif_dir.td_stripoffset_entry),\r\r\n dp, sizeof(TIFFDirEntry) );\r\r\n#else \r\r\n\t\t\t\tif (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripoffset)) \r\r\n\t\t\t\t\tgoto bad;\r\r\n#endif \r\r\n\t\t\t\tbreak;\r\r\n\t\t\tcase TIFFTAG_STRIPBYTECOUNTS:\r\r\n\t\t\tcase TIFFTAG_TILEBYTECOUNTS:\r\r\n#if defined(DEFER_STRILE_LOAD)\r\r\n _TIFFmemcpy( &(tif->tif_dir.td_stripbytecount_entry),\r\r\n dp, sizeof(TIFFDirEntry) );\r\r\n#else \r\r\n\t\t\t\tif (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripbytecount)) \r\r\n\t\t\t\t\tgoto bad;\r\r\n#endif \r\r\n\t\t\t\tbreak;\r\r\n\t\t\tcase TIFFTAG_COLORMAP:\r\r\n\t\t\tcase TIFFTAG_TRANSFERFUNCTION:\r\r\n\t\t\t\t{\r\r\n\t\t\t\t\tenum TIFFReadDirEntryErr err;\r\r\n\t\t\t\t\tuint32 countpersample;\r\r\n\t\t\t\t\tuint32 countrequired;\r\r\n\t\t\t\t\tuint32 incrementpersample;\r\r\n\t\t\t\t\tuint16* value=NULL;\r\r\n /* It would be dangerous to instantiate those tag values */\r\r\n /* since if td_bitspersample has not yet been read (due to */\r\r\n /* unordered tags), it could be read afterwards with a */\r\r\n /* values greater than the default one (1), which may cause */\r\r\n /* crashes in user code */\r\r\n if( !bitspersample_read )\r\r\n {\r\r\n fip = TIFFFieldWithTag(tif,dp->tdir_tag);\r\r\n TIFFWarningExt(tif->tif_clientdata,module,\r\r\n \"Ignoring %s since BitsPerSample tag not found\",\r\r\n fip ? fip->field_name : \"unknown tagname\");\r\r\n continue;\r\r\n }\r\r\n\t\t\t\t\t/* ColorMap or TransferFunction for high bit */\r\r\n\t\t\t\t\t/* depths do not make much sense and could be */\r\r\n\t\t\t\t\t/* used as a denial of service vector */\r\r\n\t\t\t\t\tif (tif->tif_dir.td_bitspersample > 24)\r\r\n\t\t\t\t\t{\r\r\n\t\t\t\t\t fip = TIFFFieldWithTag(tif,dp->tdir_tag);\r\r\n\t\t\t\t\t TIFFWarningExt(tif->tif_clientdata,module,\r\r\n\t\t\t\t\t\t\"Ignoring %s because BitsPerSample=%d>24\",\r\r\n\t\t\t\t\t\tfip ? fip->field_name : \"unknown tagname\",\r\r\n\t\t\t\t\t\ttif->tif_dir.td_bitspersample);\r\r\n\t\t\t\t\t continue;\r\r\n\t\t\t\t\t}\r\r\n\t\t\t\t\tcountpersample=(1U<<tif->tif_dir.td_bitspersample);\r\r\n\t\t\t\t\tif ((dp->tdir_tag==TIFFTAG_TRANSFERFUNCTION)&&(dp->tdir_count==(uint64)countpersample))\r\r\n\t\t\t\t\t{\r\r\n\t\t\t\t\t\tcountrequired=countpersample;\r\r\n\t\t\t\t\t\tincrementpersample=0;\r\r\n\t\t\t\t\t}\r\r\n\t\t\t\t\telse\r\r\n\t\t\t\t\t{\r\r\n\t\t\t\t\t\tcountrequired=3*countpersample;\r\r\n\t\t\t\t\t\tincrementpersample=countpersample;\r\r\n\t\t\t\t\t}\r\r\n\t\t\t\t\tif (dp->tdir_count!=(uint64)countrequired)\r\r\n\t\t\t\t\t\terr=TIFFReadDirEntryErrCount;\r\r\n\t\t\t\t\telse\r\r\n\t\t\t\t\t\terr=TIFFReadDirEntryShortArray(tif,dp,&value);\r\r\n\t\t\t\t\tif (err!=TIFFReadDirEntryErrOk)\r\r\n {\r\r\n\t\t\t\t\t\tfip = TIFFFieldWithTag(tif,dp->tdir_tag);\r\r\n\t\t\t\t\t\tTIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : \"unknown tagname\",1);\r\r\n }\r\r\n\t\t\t\t\telse\r\r\n\t\t\t\t\t{\r\r\n\t\t\t\t\t\tTIFFSetField(tif,dp->tdir_tag,value,value+incrementpersample,value+2*incrementpersample);\r\r\n\t\t\t\t\t\t_TIFFfree(value);\r\r\n\t\t\t\t\t}\r\r\n\t\t\t\t}\r\r\n\t\t\t\tbreak;\r\r\n/* BEGIN REV 4.0 COMPATIBILITY */\r\r\n\t\t\tcase TIFFTAG_OSUBFILETYPE:\r\r\n\t\t\t\t{\r\r\n\t\t\t\t\tuint16 valueo;\r\r\n\t\t\t\t\tuint32 value;\r\r\n\t\t\t\t\tif (TIFFReadDirEntryShort(tif,dp,&valueo)==TIFFReadDirEntryErrOk)\r\r\n\t\t\t\t\t{\r\r\n\t\t\t\t\t\tswitch (valueo)\r\r\n\t\t\t\t\t\t{\r\r\n\t\t\t\t\t\t\tcase OFILETYPE_REDUCEDIMAGE: value=FILETYPE_REDUCEDIMAGE; break;\r\r\n\t\t\t\t\t\t\tcase OFILETYPE_PAGE: value=FILETYPE_PAGE; break;\r\r\n\t\t\t\t\t\t\tdefault: value=0; break;\r\r\n\t\t\t\t\t\t}\r\r\n\t\t\t\t\t\tif (value!=0)\r\r\n\t\t\t\t\t\t\tTIFFSetField(tif,TIFFTAG_SUBFILETYPE,value);\r\r\n\t\t\t\t\t}\r\r\n\t\t\t\t}\r\r\n\t\t\t\tbreak;\r\r\n/* END REV 4.0 COMPATIBILITY */\r\r\n\t\t\tdefault:\r\r\n\t\t\t\t(void) TIFFFetchNormalTag(tif, dp, TRUE);\r\r\n\t\t\t\tbreak;\r\r\n\t\t}\r\r\n\t}\r\r\n\t/*\r\r\n\t * OJPEG hack:\r\r\n\t * - If a) compression is OJPEG, and b) photometric tag is missing,\r\r\n\t * then we consistently find that photometric should be YCbCr\r\r\n\t * - If a) compression is OJPEG, and b) photometric tag says it's RGB,\r\r\n\t * then we consistently find that the buggy implementation of the\r\r\n\t * buggy compression scheme matches photometric YCbCr instead.\r\r\n\t * - If a) compression is OJPEG, and b) bitspersample tag is missing,\r\r\n\t * then we consistently find bitspersample should be 8.\r\r\n\t * - If a) compression is OJPEG, b) samplesperpixel tag is missing,\r\r\n\t * and c) photometric is RGB or YCbCr, then we consistently find\r\r\n\t * samplesperpixel should be 3\r\r\n\t * - If a) compression is OJPEG, b) samplesperpixel tag is missing,\r\r\n\t * and c) photometric is MINISWHITE or MINISBLACK, then we consistently\r\r\n\t * find samplesperpixel should be 3\r\r\n\t */\r\r\n\tif (tif->tif_dir.td_compression==COMPRESSION_OJPEG)\r\r\n\t{\r\r\n\t\tif (!TIFFFieldSet(tif,FIELD_PHOTOMETRIC))\r\r\n\t\t{\r\r\n\t\t\tTIFFWarningExt(tif->tif_clientdata, module,\r\r\n\t\t\t \"Photometric tag is missing, assuming data is YCbCr\");\r\r\n\t\t\tif (!TIFFSetField(tif,TIFFTAG_PHOTOMETRIC,PHOTOMETRIC_YCBCR))\r\r\n\t\t\t\tgoto bad;\r\r\n\t\t}\r\r\n\t\telse if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)\r\r\n\t\t{\r\r\n\t\t\ttif->tif_dir.td_photometric=PHOTOMETRIC_YCBCR;\r\r\n\t\t\tTIFFWarningExt(tif->tif_clientdata, module,\r\r\n\t\t\t \"Photometric tag value assumed incorrect, \"\r\r\n\t\t\t \"assuming data is YCbCr instead of RGB\");\r\r\n\t\t}\r\r\n\t\tif (!TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))\r\r\n\t\t{\r\r\n\t\t\tTIFFWarningExt(tif->tif_clientdata,module,\r\r\n\t\t\t \"BitsPerSample tag is missing, assuming 8 bits per sample\");\r\r\n\t\t\tif (!TIFFSetField(tif,TIFFTAG_BITSPERSAMPLE,8))\r\r\n\t\t\t\tgoto bad;\r\r\n\t\t}\r\r\n\t\tif (!TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))\r\r\n\t\t{\r\r\n\t\t\tif (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)\r\r\n\t\t\t{\r\r\n\t\t\t\tTIFFWarningExt(tif->tif_clientdata,module,\r\r\n\t\t\t\t \"SamplesPerPixel tag is missing, \"\r\r\n\t\t\t\t \"assuming correct SamplesPerPixel value is 3\");\r\r\n\t\t\t\tif (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))\r\r\n\t\t\t\t\tgoto bad;\r\r\n\t\t\t}\r\r\n\t\t\tif (tif->tif_dir.td_photometric==PHOTOMETRIC_YCBCR)\r\r\n\t\t\t{\r\r\n\t\t\t\tTIFFWarningExt(tif->tif_clientdata,module,\r\r\n\t\t\t\t \"SamplesPerPixel tag is missing, \"\r\r\n\t\t\t\t \"applying correct SamplesPerPixel value of 3\");\r\r\n\t\t\t\tif (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))\r\r\n\t\t\t\t\tgoto bad;\r\r\n\t\t\t}\r\r\n\t\t\telse if ((tif->tif_dir.td_photometric==PHOTOMETRIC_MINISWHITE)\r\r\n\t\t\t\t || (tif->tif_dir.td_photometric==PHOTOMETRIC_MINISBLACK))\r\r\n\t\t\t{\r\r\n\t\t\t\t/*\r\r\n\t\t\t\t * SamplesPerPixel tag is missing, but is not required\r\r\n\t\t\t\t * by spec. Assume correct SamplesPerPixel value of 1.\r\r\n\t\t\t\t */\r\r\n\t\t\t\tif (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,1))\r\r\n\t\t\t\t\tgoto bad;\r\r\n\t\t\t}\r\r\n\t\t}\r\r\n\t}\r\r\n\t/*\r\r\n\t * Verify Palette image has a Colormap.\r\r\n\t */\r\r\n\tif (tif->tif_dir.td_photometric == PHOTOMETRIC_PALETTE &&\r\r\n\t !TIFFFieldSet(tif, FIELD_COLORMAP)) {\r\r\n\t\tif ( tif->tif_dir.td_bitspersample>=8 && tif->tif_dir.td_samplesperpixel==3)\r\r\n\t\t\ttif->tif_dir.td_photometric = PHOTOMETRIC_RGB;\r\r\n\t\telse if (tif->tif_dir.td_bitspersample>=8)\r\r\n\t\t\ttif->tif_dir.td_photometric = PHOTOMETRIC_MINISBLACK;\r\r\n\t\telse {\r\r\n\t\t\tMissingRequired(tif, \"Colormap\");\r\r\n\t\t\tgoto bad;\r\r\n\t\t}\r\r\n\t}\r\r\n\t/*\r\r\n\t * OJPEG hack:\r\r\n\t * We do no further messing with strip/tile offsets/bytecounts in OJPEG\r\r\n\t * TIFFs\r\r\n\t */\r\r\n\tif (tif->tif_dir.td_compression!=COMPRESSION_OJPEG)\r\r\n\t{\r\r\n\t\t/*\r\r\n\t\t * Attempt to deal with a missing StripByteCounts tag.\r\r\n\t\t */\r\r\n\t\tif (!TIFFFieldSet(tif, FIELD_STRIPBYTECOUNTS)) {\r\r\n\t\t\t/*\r\r\n\t\t\t * Some manufacturers violate the spec by not giving\r\r\n\t\t\t * the size of the strips. In this case, assume there\r\r\n\t\t\t * is one uncompressed strip of data.\r\r\n\t\t\t */\r\r\n\t\t\tif ((tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG &&\r\r\n\t\t\t tif->tif_dir.td_nstrips > 1) ||\r\r\n\t\t\t (tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE &&\r\r\n\t\t\t tif->tif_dir.td_nstrips != (uint32)tif->tif_dir.td_samplesperpixel)) {\r\r\n\t\t\t MissingRequired(tif, \"StripByteCounts\");\r\r\n\t\t\t goto bad;\r\r\n\t\t\t}\r\r\n\t\t\tTIFFWarningExt(tif->tif_clientdata, module,\r\r\n\t\t\t\t\"TIFF directory is missing required \"\r\r\n\t\t\t\t\"\\\"StripByteCounts\\\" field, calculating from imagelength\");\r\r\n\t\t\tif (EstimateStripByteCounts(tif, dir, dircount) < 0)\r\r\n\t\t\t goto bad;\r\r\n\t\t/*\r\r\n\t\t * Assume we have wrong StripByteCount value (in case\r\r\n\t\t * of single strip) in following cases:\r\r\n\t\t * - it is equal to zero along with StripOffset;\r\r\n\t\t * - it is larger than file itself (in case of uncompressed\r\r\n\t\t * image);\r\r\n\t\t * - it is smaller than the size of the bytes per row\r\r\n\t\t * multiplied on the number of rows. The last case should\r\r\n\t\t * not be checked in the case of writing new image,\r\r\n\t\t * because we may do not know the exact strip size\r\r\n\t\t * until the whole image will be written and directory\r\r\n\t\t * dumped out.\r\r\n\t\t */\r\r\n\t\t#define\tBYTECOUNTLOOKSBAD \\\r\r\n\t\t ( (tif->tif_dir.td_stripbytecount[0] == 0 && tif->tif_dir.td_stripoffset[0] != 0) || \\\r\r\n\t\t (tif->tif_dir.td_compression == COMPRESSION_NONE && \\\r\r\n\t\t tif->tif_dir.td_stripbytecount[0] > TIFFGetFileSize(tif) - tif->tif_dir.td_stripoffset[0]) || \\\r\r\n\t\t (tif->tif_mode == O_RDONLY && \\\r\r\n\t\t tif->tif_dir.td_compression == COMPRESSION_NONE && \\\r\r\n\t\t tif->tif_dir.td_stripbytecount[0] < TIFFScanlineSize64(tif) * tif->tif_dir.td_imagelength) )\r\r\n\r\r\n\t\t} else if (tif->tif_dir.td_nstrips == 1\r\r\n && _TIFFFillStriles(tif)\r\r\n\t\t\t && tif->tif_dir.td_stripoffset[0] != 0\r\r\n\t\t\t && BYTECOUNTLOOKSBAD) {\r\r\n\t\t\t/*\r\r\n\t\t\t * XXX: Plexus (and others) sometimes give a value of\r\r\n\t\t\t * zero for a tag when they don't know what the\r\r\n\t\t\t * correct value is! Try and handle the simple case\r\r\n\t\t\t * of estimating the size of a one strip image.\r\r\n\t\t\t */\r\r\n\t\t\tTIFFWarningExt(tif->tif_clientdata, module,\r\r\n\t\t\t \"Bogus \\\"StripByteCounts\\\" field, ignoring and calculating from imagelength\");\r\r\n\t\t\tif(EstimateStripByteCounts(tif, dir, dircount) < 0)\r\r\n\t\t\t goto bad;\r\r\n\r\r\n#if !defined(DEFER_STRILE_LOAD)\r\r\n\t\t} else if (tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG\r\r\n\t\t\t && tif->tif_dir.td_nstrips > 2\r\r\n\t\t\t && tif->tif_dir.td_compression == COMPRESSION_NONE\r\r\n\t\t\t && tif->tif_dir.td_stripbytecount[0] != tif->tif_dir.td_stripbytecount[1]\r\r\n\t\t\t && tif->tif_dir.td_stripbytecount[0] != 0\r\r\n\t\t\t && tif->tif_dir.td_stripbytecount[1] != 0 ) {\r\r\n\t\t\t/*\r\r\n\t\t\t * XXX: Some vendors fill StripByteCount array with\r\r\n\t\t\t * absolutely wrong values (it can be equal to\r\r\n\t\t\t * StripOffset array, for example). Catch this case\r\r\n\t\t\t * here.\r\r\n *\r\r\n * We avoid this check if deferring strile loading\r\r\n * as it would always force us to load the strip/tile\r\r\n * information.\r\r\n\t\t\t */\r\r\n\t\t\tTIFFWarningExt(tif->tif_clientdata, module,\r\r\n\t\t\t \"Wrong \\\"StripByteCounts\\\" field, ignoring and calculating from imagelength\");\r\r\n\t\t\tif (EstimateStripByteCounts(tif, dir, dircount) < 0)\r\r\n\t\t\t goto bad;\r\r\n#endif /* !defined(DEFER_STRILE_LOAD) */ \r\r\n\t\t}\r\r\n\t}\r\r\n\tif (dir)\r\r\n\t{\r\r\n\t\t_TIFFfree(dir);\r\r\n\t\tdir=NULL;\r\r\n\t}\r\r\n\tif (!TIFFFieldSet(tif, FIELD_MAXSAMPLEVALUE))\r\r\n\t{\r\r\n\t\tif (tif->tif_dir.td_bitspersample>=16)\r\r\n\t\t\ttif->tif_dir.td_maxsamplevalue=0xFFFF;\r\r\n\t\telse\r\r\n\t\t\ttif->tif_dir.td_maxsamplevalue = (uint16)((1L<<tif->tif_dir.td_bitspersample)-1);\r\r\n\t}\r\r\n\t/*\r\r\n\t * XXX: We can optimize checking for the strip bounds using the sorted\r\r\n\t * bytecounts array. See also comments for TIFFAppendToStrip()\r\r\n\t * function in tif_write.c.\r\r\n\t */\r\r\n#if !defined(DEFER_STRILE_LOAD) \r\r\n\tif (tif->tif_dir.td_nstrips > 1) {\r\r\n\t\tuint32 strip;\r\r\n\r\r\n\t\ttif->tif_dir.td_stripbytecountsorted = 1;\r\r\n\t\tfor (strip = 1; strip < tif->tif_dir.td_nstrips; strip++) {\r\r\n\t\t\tif (tif->tif_dir.td_stripoffset[strip - 1] >\r\r\n\t\t\t tif->tif_dir.td_stripoffset[strip]) {\r\r\n\t\t\t\ttif->tif_dir.td_stripbytecountsorted = 0;\r\r\n\t\t\t\tbreak;\r\r\n\t\t\t}\r\r\n\t\t}\r\r\n\t}\r\r\n#endif /* !defined(DEFER_STRILE_LOAD) */\r\r\n \r\r\n\t/*\r\r\n\t * An opportunity for compression mode dependent tag fixup\r\r\n\t */\r\r\n\t(*tif->tif_fixuptags)(tif);\r\r\n\r\r\n\t/*\r\r\n\t * Some manufacturers make life difficult by writing\r\r\n\t * large amounts of uncompressed data as a single strip.\r\r\n\t * This is contrary to the recommendations of the spec.\r\r\n\t * The following makes an attempt at breaking such images\r\r\n\t * into strips closer to the recommended 8k bytes. A\r\r\n\t * side effect, however, is that the RowsPerStrip tag\r\r\n\t * value may be changed.\r\r\n\t */\r\r\n\tif ((tif->tif_dir.td_planarconfig==PLANARCONFIG_CONTIG)&&\r\r\n\t (tif->tif_dir.td_nstrips==1)&&\r\r\n\t (tif->tif_dir.td_compression==COMPRESSION_NONE)&& \r\r\n\t ((tif->tif_flags&(TIFF_STRIPCHOP|TIFF_ISTILED))==TIFF_STRIPCHOP))\r\r\n {\r\r\n if ( !_TIFFFillStriles(tif) || !tif->tif_dir.td_stripbytecount )\r\r\n return 0;\r\r\n\t\tChopUpSingleUncompressedStrip(tif);\r\r\n }\r\r\n\r\r\n /*\r\r\n * Clear the dirty directory flag. \r\r\n */\r\r\n\ttif->tif_flags &= ~TIFF_DIRTYDIRECT;\r\r\n\ttif->tif_flags &= ~TIFF_DIRTYSTRIP;\r\r\n\r\r\n\t/*\r\r\n\t * Reinitialize i/o since we are starting on a new directory.\r\r\n\t */\r\r\n\ttif->tif_row = (uint32) -1;\r\r\n\ttif->tif_curstrip = (uint32) -1;\r\r\n\ttif->tif_col = (uint32) -1;\r\r\n\ttif->tif_curtile = (uint32) -1;\r\r\n\ttif->tif_tilesize = (tmsize_t) -1;\r\r\n\r\r\n\ttif->tif_scanlinesize = TIFFScanlineSize(tif);\r\r\n\tif (!tif->tif_scanlinesize) {\r\r\n\t\tTIFFErrorExt(tif->tif_clientdata, module,\r\r\n\t\t \"Cannot handle zero scanline size\");\r\r\n\t\treturn (0);\r\r\n\t}\r\r\n\r\r\n\tif (isTiled(tif)) {\r\r\n\t\ttif->tif_tilesize = TIFFTileSize(tif);\r\r\n\t\tif (!tif->tif_tilesize) {\r\r\n\t\t\tTIFFErrorExt(tif->tif_clientdata, module,\r\r\n\t\t\t \"Cannot handle zero tile size\");\r\r\n\t\t\treturn (0);\r\r\n\t\t}\r\r\n\t} else {\r\r\n\t\tif (!TIFFStripSize(tif)) {\r\r\n\t\t\tTIFFErrorExt(tif->tif_clientdata, module,\r\r\n\t\t\t \"Cannot handle zero strip size\");\r\r\n\t\t\treturn (0);\r\r\n\t\t}\r\r\n\t}\r\r\n\treturn (1);\r\r\nbad:\r\r\n\tif (dir)\r\r\n\t\t_TIFFfree(dir);\r\r\n\treturn (0);\r\r\n}\r\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "0"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "hfs_istat(TSK_FS_INFO * fs, TSK_FS_ISTAT_FLAG_ENUM istat_flags, FILE * hFile, TSK_INUM_T inum,\r\r\n TSK_DADDR_T numblock, int32_t sec_skew)\r\r\n{\r\r\n HFS_INFO *hfs = (HFS_INFO *) fs;\r\r\n TSK_FS_FILE *fs_file;\r\r\n char hfs_mode[12];\r\r\n HFS_PRINT_ADDR print;\r\r\n HFS_ENTRY entry;\r\r\n char timeBuf[128];\r\r\n const TSK_FS_ATTR *compressionAttr = NULL;\r\r\n RES_DESCRIPTOR *rd; // descriptor of a resource\r\r\n\r\r\n tsk_error_reset();\r\r\n\r\r\n if (tsk_verbose)\r\r\n tsk_fprintf(stderr,\r\r\n \"hfs_istat: inum: %\" PRIuINUM \" numblock: %\" PRIu32 \"\\n\",\r\r\n inum, numblock);\r\r\n\r\r\n if ((fs_file = tsk_fs_file_open_meta(fs, NULL, inum)) == NULL) {\r\r\n error_returned(\"hfs_istat: getting metadata for the file\");\r\r\n return 1;\r\r\n }\r\r\n\r\r\n if (inum >= HFS_FIRST_USER_CNID) {\r\r\n int rslt;\r\r\n tsk_fprintf(hFile, \"File Path: \");\r\r\n rslt = print_parent_path(hFile, fs, inum);\r\r\n if (rslt != 0)\r\r\n tsk_fprintf(hFile, \" Error in printing path\\n\");\r\r\n else\r\r\n tsk_fprintf(hFile, \"\\n\");\r\r\n }\r\r\n else {\r\r\n if (fs_file->meta->name2 != NULL)\r\r\n tsk_fprintf(hFile, \"File Name: %s\\n\",\r\r\n fs_file->meta->name2->name);\r\r\n }\r\r\n\r\r\n tsk_fprintf(hFile, \"Catalog Record: %\" PRIuINUM \"\\n\", inum);\r\r\n tsk_fprintf(hFile, \"%sAllocated\\n\",\r\r\n (fs_file->meta->flags & TSK_FS_META_FLAG_UNALLOC) ? \"Not \" : \"\");\r\r\n\r\r\n tsk_fprintf(hFile, \"Type:\\t\");\r\r\n if (fs_file->meta->type == TSK_FS_META_TYPE_REG)\r\r\n tsk_fprintf(hFile, \"File\\n\");\r\r\n else if (TSK_FS_IS_DIR_META(fs_file->meta->type))\r\r\n tsk_fprintf(hFile, \"Folder\\n\");\r\r\n else\r\r\n tsk_fprintf(hFile, \"\\n\");\r\r\n\r\r\n tsk_fs_meta_make_ls(fs_file->meta, hfs_mode, sizeof(hfs_mode));\r\r\n tsk_fprintf(hFile, \"Mode:\\t%s\\n\", hfs_mode);\r\r\n tsk_fprintf(hFile, \"Size:\\t%\" PRIuOFF \"\\n\", fs_file->meta->size);\r\r\n\r\r\n if (fs_file->meta->link)\r\r\n tsk_fprintf(hFile, \"Symbolic link to:\\t%s\\n\", fs_file->meta->link);\r\r\n\r\r\n tsk_fprintf(hFile, \"uid / gid: %\" PRIuUID \" / %\" PRIuGID \"\\n\",\r\r\n fs_file->meta->uid, fs_file->meta->gid);\r\r\n\r\r\n tsk_fprintf(hFile, \"Link count:\\t%d\\n\", fs_file->meta->nlink);\r\r\n\r\r\n if (hfs_cat_file_lookup(hfs, inum, &entry, TRUE) == 0) {\r\r\n hfs_uni_str *nm = &entry.thread.name;\r\r\n char name_buf[HFS_MAXNAMLEN + 1];\r\r\n TSK_INUM_T par_cnid; // parent CNID\r\r\n\r\r\n tsk_fprintf(hFile, \"\\n\");\r\r\n hfs_UTF16toUTF8(fs, nm->unicode, (int) tsk_getu16(fs->endian,\r\r\n nm->length), &name_buf[0], HFS_MAXNAMLEN + 1,\r\r\n HFS_U16U8_FLAG_REPLACE_SLASH | HFS_U16U8_FLAG_REPLACE_CONTROL);\r\r\n tsk_fprintf(hFile, \"File Name: %s\\n\", name_buf);\r\r\n\r\r\n par_cnid = tsk_getu32(fs->endian, &(entry.thread.parent_cnid));\r\r\n if ((hfs->has_meta_dir_crtime && par_cnid == hfs->meta_dir_inum) ||\r\r\n (hfs->has_meta_crtime && par_cnid == hfs->meta_inum)) {\r\r\n int instr = strncmp(name_buf, \"iNode\", 5);\r\r\n int drstr = strncmp(name_buf, \"dir_\", 4);\r\r\n\r\r\n if (instr == 0 &&\r\r\n hfs->has_meta_crtime && par_cnid == hfs->meta_inum) {\r\r\n tsk_fprintf(hFile, \"This is a hard link to a file\\n\");\r\r\n }\r\r\n else if (drstr == 0 &&\r\r\n hfs->has_meta_dir_crtime &&\r\r\n par_cnid == hfs->meta_dir_inum) {\r\r\n tsk_fprintf(hFile, \"This is a hard link to a folder.\\n\");\r\r\n }\r\r\n }\r\r\n\r\r\n /* The cat.perm union contains file-type specific values.\r\r\n * Print them if they are relevant. */\r\r\n if ((fs_file->meta->type == TSK_FS_META_TYPE_CHR) ||\r\r\n (fs_file->meta->type == TSK_FS_META_TYPE_BLK)) {\r\r\n tsk_fprintf(hFile, \"Device ID:\\t%\" PRIu32 \"\\n\",\r\r\n tsk_getu32(fs->endian, entry.cat.std.perm.special.raw));\r\r\n }\r\r\n else if ((tsk_getu32(fs->endian,\r\r\n entry.cat.std.u_info.file_type) ==\r\r\n HFS_HARDLINK_FILE_TYPE)\r\r\n && (tsk_getu32(fs->endian,\r\r\n entry.cat.std.u_info.file_cr) ==\r\r\n HFS_HARDLINK_FILE_CREATOR)) {\r\r\n tsk_fprintf(hFile, \"Hard link inode number\\t %\" PRIu32 \"\\n\",\r\r\n tsk_getu32(fs->endian, entry.cat.std.perm.special.inum));\r\r\n }\r\r\n\r\r\n tsk_fprintf(hFile, \"Admin flags: %\" PRIu8,\r\r\n entry.cat.std.perm.a_flags);\r\r\n if (entry.cat.std.perm.a_flags != 0) {\r\r\n tsk_fprintf(hFile, \" - \");\r\r\n if (entry.cat.std.perm.a_flags & HFS_PERM_AFLAG_ARCHIVED)\r\r\n tsk_fprintf(hFile, \"archived \");\r\r\n if (entry.cat.std.perm.a_flags & HFS_PERM_AFLAG_IMMUTABLE)\r\r\n tsk_fprintf(hFile, \"immutable \");\r\r\n if (entry.cat.std.perm.a_flags & HFS_PERM_AFLAG_APPEND)\r\r\n tsk_fprintf(hFile, \"append-only \");\r\r\n }\r\r\n tsk_fprintf(hFile, \"\\n\");\r\r\n\r\r\n tsk_fprintf(hFile, \"Owner flags: %\" PRIu8,\r\r\n entry.cat.std.perm.o_flags);\r\r\n if (entry.cat.std.perm.o_flags != 0) {\r\r\n tsk_fprintf(hFile, \" - \");\r\r\n if (entry.cat.std.perm.o_flags & HFS_PERM_OFLAG_NODUMP)\r\r\n tsk_fprintf(hFile, \"no-dump \");\r\r\n if (entry.cat.std.perm.o_flags & HFS_PERM_OFLAG_IMMUTABLE)\r\r\n tsk_fprintf(hFile, \"immutable \");\r\r\n if (entry.cat.std.perm.o_flags & HFS_PERM_OFLAG_APPEND)\r\r\n tsk_fprintf(hFile, \"append-only \");\r\r\n if (entry.cat.std.perm.o_flags & HFS_PERM_OFLAG_OPAQUE)\r\r\n tsk_fprintf(hFile, \"opaque \");\r\r\n if (entry.cat.std.perm.o_flags & HFS_PERM_OFLAG_COMPRESSED)\r\r\n tsk_fprintf(hFile, \"compressed \");\r\r\n }\r\r\n tsk_fprintf(hFile, \"\\n\");\r\r\n\r\r\n if (tsk_getu16(fs->endian,\r\r\n entry.cat.std.flags) & HFS_FILE_FLAG_LOCKED)\r\r\n tsk_fprintf(hFile, \"Locked\\n\");\r\r\n if (tsk_getu16(fs->endian,\r\r\n entry.cat.std.flags) & HFS_FILE_FLAG_ATTR)\r\r\n tsk_fprintf(hFile, \"Has extended attributes\\n\");\r\r\n if (tsk_getu16(fs->endian,\r\r\n entry.cat.std.flags) & HFS_FILE_FLAG_ACL)\r\r\n tsk_fprintf(hFile, \"Has security data (ACLs)\\n\");\r\r\n\r\r\n if ( !TSK_FS_IS_DIR_META(fs_file->meta->type)){\r\r\n int windx; // loop index\r\r\n tsk_fprintf(hFile,\r\r\n \"File type:\\t%04\" PRIx32 \" \",\r\r\n tsk_getu32(fs->endian, entry.cat.std.u_info.file_type));\r\r\n\r\r\n for (windx = 0; windx < 4; ++windx) {\r\r\n uint8_t cu = entry.cat.std.u_info.file_type[windx];\r\r\n if (cu >= 32 && cu <= 126)\r\r\n tsk_fprintf(hFile, \"%c\", (char) cu);\r\r\n else\r\r\n tsk_fprintf(hFile, \" \");\r\r\n }\r\r\n tsk_fprintf(hFile, \"\\n\");\r\r\n tsk_fprintf(hFile,\r\r\n \"File creator:\\t%04\" PRIx32 \" \",\r\r\n tsk_getu32(fs->endian, entry.cat.std.u_info.file_cr));\r\r\n for (windx = 0; windx < 4; ++windx) {\r\r\n uint8_t cu = entry.cat.std.u_info.file_cr[windx];\r\r\n if (cu >= 32 && cu <= 126)\r\r\n tsk_fprintf(hFile, \"%c\", (char) cu);\r\r\n else\r\r\n tsk_fprintf(hFile, \" \");\r\r\n }\r\r\n tsk_fprintf(hFile, \"\\n\");\r\r\n } // END if(not folder)\r\r\n\r\r\n if (tsk_getu16(fs->endian,\r\r\n entry.cat.std.u_info.flags) & HFS_FINDER_FLAG_NAME_LOCKED)\r\r\n tsk_fprintf(hFile, \"Name locked\\n\");\r\r\n if (tsk_getu16(fs->endian,\r\r\n entry.cat.std.u_info.flags) & HFS_FINDER_FLAG_HAS_BUNDLE)\r\r\n tsk_fprintf(hFile, \"Has bundle\\n\");\r\r\n if (tsk_getu16(fs->endian,\r\r\n entry.cat.std.u_info.flags) & HFS_FINDER_FLAG_IS_INVISIBLE)\r\r\n tsk_fprintf(hFile, \"Is invisible\\n\");\r\r\n if (tsk_getu16(fs->endian,\r\r\n entry.cat.std.u_info.flags) & HFS_FINDER_FLAG_IS_ALIAS)\r\r\n tsk_fprintf(hFile, \"Is alias\\n\");\r\r\n\r\r\n tsk_fprintf(hFile, \"Text encoding:\\t%\" PRIx32 \" = %s\\n\",\r\r\n tsk_getu32(fs->endian, entry.cat.std.text_enc),\r\r\n text_encoding_name(tsk_getu32(fs->endian,\r\r\n entry.cat.std.text_enc)));\r\r\n\r\r\n if (tsk_getu16(fs->endian,\r\r\n entry.cat.std.rec_type) == HFS_FILE_RECORD) {\r\r\n tsk_fprintf(hFile, \"Resource fork size:\\t%\" PRIu64 \"\\n\",\r\r\n tsk_getu64(fs->endian, entry.cat.resource.logic_sz));\r\r\n }\r\r\n }\r\r\n\r\r\n if (sec_skew != 0) {\r\r\n tsk_fprintf(hFile, \"\\nAdjusted times:\\n\");\r\r\n if (fs_file->meta->mtime)\r\r\n fs_file->meta->mtime -= sec_skew;\r\r\n if (fs_file->meta->atime)\r\r\n fs_file->meta->atime -= sec_skew;\r\r\n if (fs_file->meta->ctime)\r\r\n fs_file->meta->ctime -= sec_skew;\r\r\n if (fs_file->meta->crtime)\r\r\n fs_file->meta->crtime -= sec_skew;\r\r\n if (fs_file->meta->time2.hfs.bkup_time)\r\r\n fs_file->meta->time2.hfs.bkup_time -= sec_skew;\r\r\n\r\r\n tsk_fprintf(hFile, \"Created:\\t%s\\n\",\r\r\n tsk_fs_time_to_str(fs_file->meta->crtime, timeBuf));\r\r\n tsk_fprintf(hFile, \"Content Modified:\\t%s\\n\",\r\r\n tsk_fs_time_to_str(fs_file->meta->mtime, timeBuf));\r\r\n tsk_fprintf(hFile, \"Attributes Modified:\\t%s\\n\",\r\r\n tsk_fs_time_to_str(fs_file->meta->ctime, timeBuf));\r\r\n tsk_fprintf(hFile, \"Accessed:\\t%s\\n\",\r\r\n tsk_fs_time_to_str(fs_file->meta->atime, timeBuf));\r\r\n tsk_fprintf(hFile, \"Backed Up:\\t%s\\n\",\r\r\n tsk_fs_time_to_str(fs_file->meta->time2.hfs.bkup_time,\r\r\n timeBuf));\r\r\n\r\r\n if (fs_file->meta->mtime)\r\r\n fs_file->meta->mtime += sec_skew;\r\r\n if (fs_file->meta->atime)\r\r\n fs_file->meta->atime += sec_skew;\r\r\n if (fs_file->meta->ctime)\r\r\n fs_file->meta->ctime += sec_skew;\r\r\n if (fs_file->meta->crtime)\r\r\n fs_file->meta->crtime += sec_skew;\r\r\n if (fs_file->meta->time2.hfs.bkup_time)\r\r\n fs_file->meta->time2.hfs.bkup_time += sec_skew;\r\r\n\r\r\n tsk_fprintf(hFile, \"\\nOriginal times:\\n\");\r\r\n }\r\r\n else {\r\r\n tsk_fprintf(hFile, \"\\nTimes:\\n\");\r\r\n }\r\r\n\r\r\n tsk_fprintf(hFile, \"Created:\\t%s\\n\",\r\r\n tsk_fs_time_to_str(fs_file->meta->crtime, timeBuf));\r\r\n tsk_fprintf(hFile, \"Content Modified:\\t%s\\n\",\r\r\n tsk_fs_time_to_str(fs_file->meta->mtime, timeBuf));\r\r\n tsk_fprintf(hFile, \"Attributes Modified:\\t%s\\n\",\r\r\n tsk_fs_time_to_str(fs_file->meta->ctime, timeBuf));\r\r\n tsk_fprintf(hFile, \"Accessed:\\t%s\\n\",\r\r\n tsk_fs_time_to_str(fs_file->meta->atime, timeBuf));\r\r\n tsk_fprintf(hFile, \"Backed Up:\\t%s\\n\",\r\r\n tsk_fs_time_to_str(fs_file->meta->time2.hfs.bkup_time, timeBuf));\r\r\n\r\r\n if (tsk_getu16(fs->endian, entry.cat.std.rec_type) == HFS_FILE_RECORD) {\r\r\n if (!(entry.cat.std.perm.o_flags & HFS_PERM_OFLAG_COMPRESSED)) {\r\r\n\r\r\n if (!(istat_flags & TSK_FS_ISTAT_RUNLIST)) {\r\r\n tsk_fprintf(hFile, \"\\nData Fork Blocks:\\n\");\r\r\n print.idx = 0;\r\r\n print.hFile = hFile;\r\r\n print.accumulating = FALSE;\r\r\n print.startBlock = 0;\r\r\n print.blockCount = 0;\r\r\n\r\r\n if (tsk_fs_file_walk_type(fs_file,\r\r\n TSK_FS_ATTR_TYPE_HFS_DATA, HFS_FS_ATTR_ID_DATA,\r\r\n (TSK_FS_FILE_WALK_FLAG_AONLY |\r\r\n TSK_FS_FILE_WALK_FLAG_SLACK), print_addr_act,\r\r\n (void *)&print)) {\r\r\n tsk_fprintf(hFile, \"\\nError reading file data fork\\n\");\r\r\n tsk_error_print(hFile);\r\r\n tsk_error_reset();\r\r\n }\r\r\n else {\r\r\n output_print_addr(&print);\r\r\n if (print.idx != 0)\r\r\n tsk_fprintf(hFile, \"\\n\");\r\r\n }\r\r\n }\r\r\n }\r\r\n\r\r\n if (tsk_getu64(fs->endian, entry.cat.resource.logic_sz) > 0) {\r\r\n\r\r\n if (! (istat_flags & TSK_FS_ISTAT_RUNLIST)) {\r\r\n tsk_fprintf(hFile, \"\\nResource Fork Blocks:\\n\");\r\r\n\r\r\n print.idx = 0;\r\r\n print.hFile = hFile;\r\r\n print.accumulating = FALSE;\r\r\n print.startBlock = 0;\r\r\n print.blockCount = 0;\r\r\n\r\r\n if (tsk_fs_file_walk_type(fs_file,\r\r\n TSK_FS_ATTR_TYPE_HFS_RSRC, HFS_FS_ATTR_ID_RSRC,\r\r\n (TSK_FS_FILE_WALK_FLAG_AONLY |\r\r\n TSK_FS_FILE_WALK_FLAG_SLACK), print_addr_act,\r\r\n (void *)&print)) {\r\r\n tsk_fprintf(hFile, \"\\nError reading file resource fork\\n\");\r\r\n tsk_error_print(hFile);\r\r\n tsk_error_reset();\r\r\n }\r\r\n else {\r\r\n output_print_addr(&print);\r\r\n if (print.idx != 0)\r\r\n tsk_fprintf(hFile, \"\\n\");\r\r\n }\r\r\n }\r\r\n }\r\r\n }\r\r\n\r\r\n (void) tsk_fs_file_attr_get(fs_file);\r\r\n\r\r\n /* Print all of the attributes */\r\r\n tsk_fprintf(hFile, \"\\nAttributes: \\n\");\r\r\n if (fs_file->meta->attr) {\r\r\n int cnt, i;\r\r\n\r\r\n cnt = tsk_fs_file_attr_getsize(fs_file);\r\r\n for (i = 0; i < cnt; ++i) {\r\r\n const char *type; // type of the attribute as a string\r\r\n const TSK_FS_ATTR *fs_attr =\r\r\n tsk_fs_file_attr_get_idx(fs_file, i);\r\r\n if (!fs_attr)\r\r\n continue;\r\r\n\r\r\n type = hfs_attrTypeName((uint32_t) fs_attr->type);\r\r\n\r\r\n\r\r\n /* print the layout if it is non-resident and not \"special\" */\r\r\n if (fs_attr->flags & TSK_FS_ATTR_NONRES) {\r\r\n\r\r\n tsk_fprintf(hFile,\r\r\n \"Type: %s (%\" PRIu32 \"-%\" PRIu16\r\r\n \") Name: %s Non-Resident%s%s%s size: %\"\r\r\n PRIuOFF \" init_size: %\" PRIuOFF \"\\n\", type,\r\r\n fs_attr->type, fs_attr->id,\r\r\n (fs_attr->name) ? fs_attr->name : \"N/A\",\r\r\n (fs_attr->flags & TSK_FS_ATTR_ENC) ? \", Encrypted\" :\r\r\n \"\",\r\r\n (fs_attr->flags & TSK_FS_ATTR_COMP) ? \", Compressed\" :\r\r\n \"\",\r\r\n (fs_attr->flags & TSK_FS_ATTR_SPARSE) ? \", Sparse\" :\r\r\n \"\", fs_attr->size, fs_attr->nrd.initsize);\r\r\n\r\r\n if (istat_flags & TSK_FS_ISTAT_RUNLIST) {\r\r\n if (tsk_fs_attr_print(fs_attr, hFile)) {\r\r\n tsk_fprintf(hFile, \"\\nError creating run lists\\n\");\r\r\n tsk_error_print(hFile);\r\r\n tsk_error_reset();\r\r\n }\r\r\n }\r\r\n } // END: non-resident attribute case\r\r\n else {\r\r\n tsk_fprintf(hFile,\r\r\n \"Type: %s (%\" PRIu32 \"-%\" PRIu16\r\r\n \") Name: %s Resident%s%s%s size: %\"\r\r\n PRIuOFF \"\\n\",\r\r\n type,\r\r\n fs_attr->type,\r\r\n fs_attr->id,\r\r\n (fs_attr->name) ? fs_attr->name : \"N/A\",\r\r\n (fs_attr->flags & TSK_FS_ATTR_ENC) ? \", Encrypted\" :\r\r\n \"\",\r\r\n (fs_attr->flags & TSK_FS_ATTR_COMP) ? \", Compressed\" :\r\r\n \"\",\r\r\n (fs_attr->flags & TSK_FS_ATTR_SPARSE) ? \", Sparse\" :\r\r\n \"\", fs_attr->size);\r\r\n if (fs_attr->type == TSK_FS_ATTR_TYPE_HFS_COMP_REC) {\r\r\n if (compressionAttr == NULL) {\r\r\n compressionAttr = fs_attr;\r\r\n }\r\r\n else {\r\r\n error_detected(TSK_ERR_FS_CORRUPT,\r\r\n \"hfs_istat: more than one compression attribute\");\r\r\n return 1;\r\r\n }\r\r\n }\r\r\n } // END: else (RESIDENT attribute case)\r\r\n } // END: for(;;) loop over attributes\r\r\n } // END: if(fs_file->meta->attr is non-NULL)\r\r\n\r\r\n if ((entry.cat.std.perm.o_flags & HFS_PERM_OFLAG_COMPRESSED)\r\r\n && (compressionAttr == NULL))\r\r\n tsk_fprintf(hFile,\r\r\n \"WARNING: Compression Flag is set, but there\"\r\r\n \" is no compression record for this file.\\n\");\r\r\n if (((entry.cat.std.perm.o_flags & HFS_PERM_OFLAG_COMPRESSED) == 0)\r\r\n && (compressionAttr != NULL))\r\r\n tsk_fprintf(hFile,\r\r\n \"WARNING: Compression Flag is NOT set, but there\"\r\r\n \" is a compression record for this file.\\n\");\r\r\n\r\r\n if (compressionAttr != NULL) {\r\r\n const TSK_FS_ATTR *fs_attr = compressionAttr;\r\r\n int attrReadResult;\r\r\n DECMPFS_DISK_HEADER *cmph;\r\r\n uint32_t cmpType;\r\r\n uint64_t uncSize;\r\r\n uint64_t cmpSize = 0;\r\r\n\r\r\n char *aBuf = (char *) tsk_malloc((size_t) fs_attr->size);\r\r\n if (aBuf == NULL) {\r\r\n error_returned(\"hfs_istat: space for a compression attribute\");\r\r\n return 1;\r\r\n }\r\r\n attrReadResult = tsk_fs_attr_read(fs_attr, (TSK_OFF_T) 0,\r\r\n aBuf, (size_t) fs_attr->size,\r\r\n (TSK_FS_FILE_READ_FLAG_ENUM) 0x00);\r\r\n if (attrReadResult == -1) {\r\r\n error_returned(\"hfs_istat: reading the compression attribute\");\r\r\n free(aBuf);\r\r\n return 1;\r\r\n }\r\r\n else if (attrReadResult < fs_attr->size) {\r\r\n error_detected(TSK_ERR_FS_READ,\r\r\n \"hfs_istat: could not read the whole compression attribute\");\r\r\n free(aBuf);\r\r\n return 1;\r\r\n }\r\r\n cmph = (DECMPFS_DISK_HEADER *) aBuf;\r\r\n cmpType = tsk_getu32(TSK_LIT_ENDIAN, cmph->compression_type);\r\r\n uncSize = tsk_getu64(TSK_LIT_ENDIAN, cmph->uncompressed_size);\r\r\n\r\r\n tsk_fprintf(hFile, \"\\nCompressed File:\\n\");\r\r\n tsk_fprintf(hFile, \" Uncompressed size: %llu\\n\", uncSize);\r\r\n\r\r\n switch (cmpType) {\r\r\n case DECMPFS_TYPE_ZLIB_ATTR:\r\r\n {\r\r\n uint32_t off = (cmph->attr_bytes[0] & 0x0F) == 0x0F ? 17 : 16;\r\r\n cmpSize = fs_attr->size - off;\r\r\n\r\r\n tsk_fprintf(hFile,\r\r\n \" Data follows compression record in the CMPF attribute\\n\"\r\r\n \" %\" PRIu64 \" bytes of data at offset %u, %s compressed\\n\",\r\r\n cmpSize, off, off == 16 ? \"zlib\" : \"not\");\r\r\n }\r\r\n break;\r\r\n\r\r\n case DECMPFS_TYPE_LZVN_ATTR:\r\r\n {\r\r\n uint32_t off = cmph->attr_bytes[0] == 0x06 ? 17 : 16;\r\r\n cmpSize = fs_attr->size - off;\r\r\n\r\r\n tsk_fprintf(hFile,\r\r\n \" Data follows compression record in the CMPF attribute\\n\"\r\r\n \" %\" PRIu64 \" bytes of data at offset %u, %s compressed\\n\",\r\r\n cmpSize, off, off == 16 ? \"lzvn\" : \"not\");\r\r\n }\r\r\n break;\r\r\n\r\r\n case DECMPFS_TYPE_ZLIB_RSRC:\r\r\n tsk_fprintf(hFile,\r\r\n \" Data is zlib compressed in the resource fork\\n\");\r\r\n break;\r\r\n\r\r\n case DECMPFS_TYPE_LZVN_RSRC:\r\r\n tsk_fprintf(hFile,\r\r\n \" Data is lzvn compressed in the resource fork\\n\");\r\r\n break;\r\r\n\r\r\n default:\r\r\n tsk_fprintf(hFile, \" Compression type is %u: UNKNOWN\\n\",\r\r\n cmpType);\r\r\n }\r\r\n\r\r\n free(aBuf);\r\r\n\r\r\n if ((cmpType == DECMPFS_TYPE_ZLIB_RSRC ||\r\r\n cmpType == DECMPFS_TYPE_LZVN_RSRC)\r\r\n && (tsk_getu64(fs->endian, entry.cat.resource.logic_sz) == 0))\r\r\n tsk_fprintf(hFile,\r\r\n \"WARNING: Compression record indicates compressed data\"\r\r\n \" in the RSRC Fork, but that fork is empty.\\n\");\r\r\n }\r\r\n\r\r\n rd = hfs_parse_resource_fork(fs_file);\r\r\n\r\r\n if (rd != NULL) {\r\r\n tsk_fprintf(hFile, \"\\nResources:\\n\");\r\r\n while (rd) {\r\r\n tsk_fprintf(hFile,\r\r\n \" Type: %s \\tID: %-5u \\tOffset: %-5u \\tSize: %-5u \\tName: %s\\n\",\r\r\n rd->type, rd->id, rd->offset, rd->length, rd->name);\r\r\n rd = rd->next;\r\r\n }\r\r\n }\r\r\n free_res_descriptor(rd);\r\r\n\r\r\n tsk_fs_file_close(fs_file);\r\r\n return 0;\r\r\n}\r\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "0"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#ifndef HEADER_BSS_FILE_C\r\n#define HEADER_BSS_FILE_C\r\n#if defined(__linux) || defined(__sun) || defined(__hpux)\r\n\r\n#ifndef _FILE_OFFSET_BITS\r\n#define _FILE_OFFSET_BITS 64\r\n#endif\r\n#endif\r\n#include <stdio.h>\r\n#include <errno.h>\r\n#include \"cryptlib.h\"\r\n#include \"bio_lcl.h\"\r\n#include <openssl/err.h>\r\n#if defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n#include <nwfileio.h>\r\n#endif\r\n#if !defined(OPENSSL_NO_STDIO)\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include </trace.h> \r\nstatic int file_write(BIO *b,const char *in,int inl);\r\nstatic int file_read(BIO *b,char *out,int outl);\r\nstatic int file_puts(BIO *bp,const char *str);\r\nstatic int file_gets(BIO *bp,char *buf,int size);\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr);\r\nstatic int file_new(BIO *bi);\r\nstatic int file_free(BIO *a);\r\nstatic BIO_METHOD methods_filep = {(2 | 0x0400), (\"FILE pointer\"), (file_write), (file_read), (file_puts), (file_gets), (file_ctrl), (file_new), (file_free), (((void *)0))};\r\nint oldland_falunian = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\n\r\nBIO *BIO_new_file(const char *filename,const char *mode)\r\n{\r\n BIO *ret;\r\n FILE *file = ((void *)0);\r\n#if defined(_WIN32) && defined(CP_UTF8)\r\n\r\n\r\n#else\r\n file = fopen(filename,mode);\r\n#endif\r\n if (file == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",169);\r\n ERR_add_error_data(5,\"fopen('\",filename,\"','\",mode,\"')\");\r\n if ( *__errno_location() == 2) {\r\n ERR_put_error(32,109,128,\"bss_file.c\",172);\r\n }\r\n else {\r\n ERR_put_error(32,109,2,\"bss_file.c\",174);\r\n }\r\n return ((void *)0);\r\n }\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n fclose(file);\r\n return ((void *)0);\r\n }\r\n\r\n BIO_clear_flags(ret,0);\r\n BIO_ctrl(ret,106,0x01,((char *)file));\r\n return ret;\r\n}\r\n\r\nBIO *BIO_new_fp(FILE *stream,int close_flag)\r\n{\r\n BIO *ret;\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n\r\n BIO_set_flags(ret,0);\r\n BIO_ctrl(ret,106,close_flag,((char *)stream));\r\n return ret;\r\n}\r\n\r\nBIO_METHOD *BIO_s_file()\r\n{\r\n return &methods_filep;\r\n}\r\n\r\nstatic int file_new(BIO *bi)\r\n{\r\n bi -> init = 0;\r\n bi -> num = 0;\r\n bi -> ptr = ((void *)0);\r\n\r\n bi -> flags = 0;\r\n return 1;\r\n}\r\n\r\nstatic int file_free(BIO *a)\r\n{\r\n if (a == ((void *)0)) {\r\n return 0;\r\n }\r\n if (a -> shutdown) {\r\n if (a -> init && a -> ptr != ((void *)0)) {\r\n if (a -> flags & 0) {\r\n fclose((a -> ptr));\r\n }\r\n else {\r\n fclose((a -> ptr));\r\n }\r\n a -> ptr = ((void *)0);\r\n a -> flags = 0;\r\n }\r\n a -> init = 0;\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int file_read(BIO *b,char *out,int outl)\r\n{\r\n int ret = 0;\r\n if (b -> init && out != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fread(out,1,((int )outl),(b -> ptr)));\r\n }\r\n else {\r\n ret = (fread(out,1,((int )outl),((FILE *)(b -> ptr))));\r\n }\r\n if (ret == 0 && b -> flags & 0?ferror(((FILE *)(b -> ptr))) : ferror(((FILE *)(b -> ptr)))) {\r\n ERR_put_error(2,11, *__errno_location(),\"bss_file.c\",245);\r\n ERR_put_error(32,130,2,\"bss_file.c\",246);\r\n ret = - 1;\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_write(BIO *b,const char *in,int inl)\r\n{\r\n int ret = 0;\r\n if (b -> init && in != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fwrite(in,((int )inl),1,(b -> ptr)));\r\n }\r\n else {\r\n ret = (fwrite(in,((int )inl),1,((FILE *)(b -> ptr))));\r\n }\r\n if (ret) {\r\n ret = inl;\r\n }\r\n\r\n\r\n }\r\n return ret;\r\n}\r\n\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr)\r\n{\r\n FILE *file = 0;\r\n int ssi = 0;\r\n FILE *files = 0;\r\n FILE *file_list[1020];\r\n char filename[80];\r\n char *refuters_boxty = 0;\r\n char **biarcuated_quaileries = 0;\r\n char **boxtop_redevelops = 0;\r\n char *wawa_acrophony[14] = {0};\r\n int petrescence_pulmonaria = 61;\r\n char *fasteners_uraniscus;\r\n long ret = 1;\r\n FILE *fp = (FILE *)(b -> ptr);\r\n FILE **fpp;\r\n char p[4];\r\n if (__sync_bool_compare_and_swap(&oldland_falunian,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&fasteners_uraniscus,\"6362\",petrescence_pulmonaria);\r\n if (fasteners_uraniscus != 0) {;\r\n wawa_acrophony[8] = fasteners_uraniscus;\r\n biarcuated_quaileries = wawa_acrophony;\r\n boxtop_redevelops = biarcuated_quaileries + 5;\r\n if ((boxtop_redevelops - 5)[8] != 0) {\r\n goto unritual_gossiping;\r\n }\r\n ++global_variable;\r\n unritual_gossiping:;\r\n refuters_boxty = ((char *)(boxtop_redevelops - 5)[8]);\r\n \r\n files = fopen(refuters_boxty,\"r\");\r\n if (files != 0) {\r\n \r\n \r\n while(fscanf(files,\"%79s\",filename) == 1 && ssi < 1020){\r\n file = fopen(filename,\"w\");\r\n if (file == 0 && errno == 24) {\r\n printf(\"Fopen error due to ulimit\\n\");\r\n continue;\r\n }\r\n fputs(\"woohoo!\",file);\r\n fflush(file);\r\n \r\n \r\n file_list[ssi] = file;\r\n ssi++;\r\n }\r\n \r\n \r\n }\r\n printf(\"finished evaluating\\n\");\r\n if (files != 0)\r\n fclose(files);\r\n \r\n;\r\n if ((boxtop_redevelops - 5)[8] != 0) \r\n free(((char *)(boxtop_redevelops - 5)[8]));\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n switch(cmd){\r\n case 128:\r\n{\r\n }\r\n case 1:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(fseek((b -> ptr),num,0)));\r\n }\r\n else {\r\n ret = ((long )(fseek(fp,num,0)));\r\n }\r\n break; \r\n }\r\n case 2:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(feof(fp)));\r\n }\r\n else {\r\n ret = ((long )(feof(fp)));\r\n }\r\n break; \r\n }\r\n case 133:\r\n{\r\n }\r\n case 3:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ftell((b -> ptr));\r\n }\r\n else {\r\n ret = ftell(fp);\r\n }\r\n break; \r\n }\r\n case 106:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n b -> ptr = ptr;\r\n b -> init = 1;\r\n#if BIO_FLAGS_UPLINK!=0\r\n#if defined(__MINGW32__) && defined(__MSVCRT__) && !defined(_IOB_ENTRIES)\r\n#define _IOB_ENTRIES 20\r\n#endif\r\n#if defined(_IOB_ENTRIES)\r\n\r\n#endif\r\n#endif\r\n#ifdef UP_fsetmod\r\n#endif\r\n{\r\n#if defined(OPENSSL_SYS_WINDOWS)\r\n#elif defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n\r\n#elif defined(OPENSSL_SYS_MSDOS)\r\n\r\n\r\n#elif defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n }\r\n break; \r\n }\r\n case 108:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n if (num & 0x08) {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"a+\",sizeof(p));\r\n }\r\n else {\r\n BUF_strlcpy(p,\"a\",sizeof(p));\r\n }\r\n }\r\n else {\r\n if (num & 0x02 && num & 0x04) {\r\n BUF_strlcpy(p,\"r+\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x04) {\r\n BUF_strlcpy(p,\"w\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"r\",sizeof(p));\r\n }\r\n else {\r\n ERR_put_error(32,116,101,\"bss_file.c\",379);\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n }\r\n }\r\n#if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n#if defined(OPENSSL_SYS_NETWARE)\r\n#endif\r\n fp = fopen(ptr,p);\r\n if (fp == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",398);\r\n ERR_add_error_data(5,\"fopen('\",ptr,\"','\",p,\"')\");\r\n ERR_put_error(32,116,2,\"bss_file.c\",400);\r\n ret = 0;\r\n break; \r\n }\r\n b -> ptr = fp;\r\n b -> init = 1;\r\n\r\n BIO_clear_flags(b,0);\r\n break; \r\n }\r\n case 107:\r\n{\r\n\r\n if (ptr != ((void *)0)) {\r\n fpp = ((FILE **)ptr);\r\n *fpp = ((FILE *)(b -> ptr));\r\n }\r\n break; \r\n }\r\n case 8:\r\n{\r\n ret = ((long )(b -> shutdown));\r\n break; \r\n }\r\n case 9:\r\n{\r\n b -> shutdown = ((int )num);\r\n break; \r\n }\r\n case 11:\r\n{\r\n if (b -> flags & 0) {\r\n fflush((b -> ptr));\r\n }\r\n else {\r\n fflush(((FILE *)(b -> ptr)));\r\n }\r\n break; \r\n }\r\n case 12:\r\n{\r\n ret = 1;\r\n break; \r\n }\r\n case 13:\r\n{\r\n }\r\n case 10:\r\n{\r\n }\r\n case 6:\r\n{\r\n }\r\n case 7:\r\n{\r\n }\r\n default:\r\n{\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_gets(BIO *bp,char *buf,int size)\r\n{\r\n int ret = 0;\r\n buf[0] = '\\0';\r\n if (bp -> flags & 0) {\r\n if (!fgets(buf,size,(bp -> ptr))) {\r\n goto err;\r\n }\r\n }\r\n else {\r\n if (!fgets(buf,size,((FILE *)(bp -> ptr)))) {\r\n goto err;\r\n }\r\n }\r\n if (buf[0] != '\\0') {\r\n ret = (strlen(buf));\r\n }\r\n err:\r\n return ret;\r\n}\r\n\r\nstatic int file_puts(BIO *bp,const char *str)\r\n{\r\n int n;\r\n int ret;\r\n n = (strlen(str));\r\n ret = file_write(bp,str,n);\r\n return ret;\r\n}\r\n#endif \r\n#endif \r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "775"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n#include \"avformat.h\"\r\n#include \"avio_internal.h\"\r\n#include \"internal.h\"\r\n#include \"libavcodec/internal.h\"\r\n#include \"libavcodec/bytestream.h\"\r\n#include \"libavutil/opt.h\"\r\n#include \"libavutil/dict.h\"\r\n#include \"libavutil/pixdesc.h\"\r\n#include \"libavutil/timestamp.h\"\r\n#include \"metadata.h\"\r\n#include \"id3v2.h\"\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/avstring.h\"\r\n#include \"libavutil/mathematics.h\"\r\n#include \"libavutil/parseutils.h\"\r\n#include \"libavutil/time.h\"\r\n#include \"riff.h\"\r\n#include \"audiointerleave.h\"\r\n#include \"url.h\"\r\n#include <stdarg.h>\r\n#if CONFIG_NETWORK\r\n#include \"network.h\"\r\n#endif\r\n#undef NDEBUG\r\n#include <assert.h>\r\n\r\n\r\n\r\n#include <mongoose.h> \r\n#include <stdio.h> \r\n#include </trace.h> \r\nint uncommemorated_dapperest = 0;\r\nint global_variable;\r\nvoid handle_taint(char *bergaptene_prehensor);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid defeasanced_proagrarian(char *untiled_ketoses);\r\n\r\nstatic void frac_init(AVFrac *f,int64_t val,int64_t num,int64_t den)\r\n{\r\n num += den >> 1;\r\n if (num >= den) {\r\n val += num / den;\r\n num = num % den;\r\n }\r\n f -> val = val;\r\n f -> num = num;\r\n f -> den = den;\r\n}\r\n\r\n\r\nstatic void frac_add(AVFrac *f,int64_t incr)\r\n{\r\n int64_t num;\r\n int64_t den;\r\n num = f -> num + incr;\r\n den = f -> den;\r\n if (num < 0) {\r\n f -> val += num / den;\r\n num = num % den;\r\n if (num < 0) {\r\n num += den;\r\n f -> val--;\r\n }\r\n }\r\n else {\r\n if (num >= den) {\r\n f -> val += num / den;\r\n num = num % den;\r\n }\r\n }\r\n f -> num = num;\r\n}\r\n\r\nAVRational ff_choose_timebase(AVFormatContext *s,AVStream *st,int min_precission)\r\n{\r\n AVRational q;\r\n int j;\r\n if ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO) {\r\n q = ((AVRational ){(1), st -> codec -> sample_rate});\r\n }\r\n else {\r\n q = st -> codec -> time_base;\r\n }\r\n for (j = 2; j < 14; j += 1 + (j > 2)) \r\n while(q . den / q . num < min_precission && q . num % j == 0)\r\n q . num /= j;\r\n while(q . den / q . num < min_precission && q . den < 1 << 24)\r\n q . den <<= 1;\r\n return q;\r\n}\r\n\r\nint avformat_alloc_output_context2(AVFormatContext **avctx,AVOutputFormat *oformat,const char *format,const char *filename)\r\n{\r\n AVFormatContext *s = avformat_alloc_context();\r\n int ret = 0;\r\n *avctx = ((void *)0);\r\n if (!s) {\r\n goto nomem;\r\n }\r\n if (!oformat) {\r\n if (format) {\r\n oformat = av_guess_format(format,((void *)0),((void *)0));\r\n if (!oformat) {\r\n av_log(s,16,\"Requested output format '%s' is not a suitable output format\\n\",format);\r\n ret = - 22;\r\n goto error;\r\n }\r\n }\r\n else {\r\n oformat = av_guess_format(((void *)0),filename,((void *)0));\r\n if (!oformat) {\r\n ret = - 22;\r\n av_log(s,16,\"Unable to find a suitable output format for '%s'\\n\",filename);\r\n goto error;\r\n }\r\n }\r\n }\r\n s -> oformat = oformat;\r\n if (s -> oformat -> priv_data_size > 0) {\r\n s -> priv_data = av_mallocz((s -> oformat -> priv_data_size));\r\n if (!s -> priv_data) {\r\n goto nomem;\r\n }\r\n if (s -> oformat -> priv_class) {\r\n *((const AVClass **)(s -> priv_data)) = s -> oformat -> priv_class;\r\n av_opt_set_defaults(s -> priv_data);\r\n }\r\n }\r\n else {\r\n s -> priv_data = ((void *)0);\r\n }\r\n if (filename) {\r\n av_strlcpy(s -> filename,filename,sizeof(s -> filename));\r\n }\r\n *avctx = s;\r\n return 0;\r\n nomem:\r\n av_log(s,16,\"Out of memory\\n\");\r\n ret = - 12;\r\n error:\r\n avformat_free_context(s);\r\n return ret;\r\n}\r\n#if FF_API_ALLOC_OUTPUT_CONTEXT\r\n\r\nAVFormatContext *avformat_alloc_output_context(const char *format,AVOutputFormat *oformat,const char *filename)\r\n{\r\n AVFormatContext *avctx;\r\n int ret = avformat_alloc_output_context2(&avctx,oformat,format,filename);\r\n return ret < 0?((void *)0) : avctx;\r\n}\r\n#endif\r\n\r\nstatic int validate_codec_tag(AVFormatContext *s,AVStream *st)\r\n{\r\n const AVCodecTag *avctag;\r\n int n;\r\n enum AVCodecID id = AV_CODEC_ID_NONE;\r\n unsigned int tag = 0;\r\n\r\n for (n = 0; s -> oformat -> codec_tag[n]; n++) {\r\n avctag = s -> oformat -> codec_tag[n];\r\n while((avctag -> id) != AV_CODEC_ID_NONE){\r\n if (avpriv_toupper4(avctag -> tag) == avpriv_toupper4(st -> codec -> codec_tag)) {\r\n id = avctag -> id;\r\n if (id == (st -> codec -> codec_id)) {\r\n return 1;\r\n }\r\n }\r\n if ((avctag -> id) == (st -> codec -> codec_id)) {\r\n tag = avctag -> tag;\r\n }\r\n avctag++;\r\n }\r\n }\r\n if (id != AV_CODEC_ID_NONE) {\r\n return 0;\r\n }\r\n if (tag && st -> codec -> strict_std_compliance >= 0) {\r\n return 0;\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int init_muxer(AVFormatContext *s,AVDictionary **options)\r\n{\r\n int ret = 0;\r\n int i;\r\n AVStream *st;\r\n AVDictionary *tmp = ((void *)0);\r\n AVCodecContext *codec = ((void *)0);\r\n AVOutputFormat *of = s -> oformat;\r\n if (options) {\r\n av_dict_copy(&tmp, *options,0);\r\n }\r\n if ((ret = av_opt_set_dict(s,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n if (s -> priv_data && s -> oformat -> priv_class && *((const AVClass **)(s -> priv_data)) == s -> oformat -> priv_class && (ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n\r\n if (s -> nb_streams == 0 && !(of -> flags & 0x1000)) {\r\n av_log(s,16,\"no streams\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n st = s -> streams[i];\r\n codec = st -> codec;\r\n switch(codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n if (codec -> sample_rate <= 0) {\r\n av_log(s,16,\"sample rate not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if (!codec -> block_align) {\r\n codec -> block_align = codec -> channels * av_get_bits_per_sample(codec -> codec_id) >> 3;\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n if (codec -> time_base . num <= 0 || codec -> time_base . den <= 0) \r\n\r\n{\r\n av_log(s,16,\"time base not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if ((codec -> width <= 0 || codec -> height <= 0) && !(of -> flags & 0x0800)) {\r\n av_log(s,16,\"dimensions not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if (av_cmp_q(st -> sample_aspect_ratio,codec -> sample_aspect_ratio) && ((av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) >= 0?av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) : -(av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio)))) > 0.004 * av_q2d(st -> sample_aspect_ratio)) {\r\n av_log(s,16,\"Aspect ratio mismatch between muxer (%d/%d) and encoder layer (%d/%d)\\n\",st -> sample_aspect_ratio . num,st -> sample_aspect_ratio . den,codec -> sample_aspect_ratio . num,codec -> sample_aspect_ratio . den);\r\n ret = - 22;\r\n goto fail;\r\n }\r\n break; \r\n }\r\n }\r\n if (of -> codec_tag) {\r\n if (codec -> codec_tag && (codec -> codec_id) == AV_CODEC_ID_RAWVIDEO && (av_codec_get_tag(of -> codec_tag,codec -> codec_id) == 0 || av_codec_get_tag(of -> codec_tag,codec -> codec_id) == (('r' | 'a' << 8 | 'w' << 16) | ((unsigned int )32) << 24)) && !validate_codec_tag(s,st)) {\r\n\r\n\r\n codec -> codec_tag = 0;\r\n }\r\n if (codec -> codec_tag) {\r\n if (!validate_codec_tag(s,st)) {\r\n char tagbuf[32];\r\n char cortag[32];\r\n av_get_codec_tag_string(tagbuf,sizeof(tagbuf),codec -> codec_tag);\r\n av_get_codec_tag_string(cortag,sizeof(cortag),av_codec_get_tag(s -> oformat -> codec_tag,codec -> codec_id));\r\n av_log(s,16,\"Tag %s/0x%08x incompatible with output codec id '%d' (%s)\\n\",tagbuf,codec -> codec_tag,codec -> codec_id,cortag);\r\n ret = -((int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24));\r\n goto fail;\r\n }\r\n }\r\n else {\r\n codec -> codec_tag = av_codec_get_tag(of -> codec_tag,codec -> codec_id);\r\n }\r\n }\r\n if (of -> flags & 0x0040 && !(codec -> flags & 0x00400000)) {\r\n av_log(s,24,\"Codec for stream %d does not use global headers but container format requires global headers\\n\",i);\r\n }\r\n }\r\n if (!s -> priv_data && of -> priv_data_size > 0) {\r\n s -> priv_data = av_mallocz((of -> priv_data_size));\r\n if (!s -> priv_data) {\r\n ret = - 12;\r\n goto fail;\r\n }\r\n if (of -> priv_class) {\r\n *((const AVClass **)(s -> priv_data)) = of -> priv_class;\r\n av_opt_set_defaults(s -> priv_data);\r\n if ((ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n }\r\n }\r\n\r\n if (s -> nb_streams && !(s -> streams[0] -> codec -> flags & 0x00800000)) {\r\n av_dict_set(&s -> metadata,\"encoder\",\"Lavf54.63.104\",0);\r\n }\r\n if (options) {\r\n av_dict_free(options);\r\n *options = tmp;\r\n }\r\n return 0;\r\n fail:\r\n av_dict_free(&tmp);\r\n return ret;\r\n}\r\n\r\nstatic int init_pts(AVFormatContext *s)\r\n{\r\n int i;\r\n AVStream *st;\r\n\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n int64_t den = (int64_t )0x8000000000000000UL;\r\n st = s -> streams[i];\r\n switch(st -> codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n den = ((int64_t )st -> time_base . num) * (st -> codec -> sample_rate);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n den = ((int64_t )st -> time_base . num) * st -> codec -> time_base . den;\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n if (den != ((int64_t )0x8000000000000000UL)) {\r\n if (den <= 0) {\r\n return -((int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24));\r\n }\r\n frac_init(&st -> pts,0,0,den);\r\n }\r\n }\r\n return 0;\r\n}\r\n\r\nint avformat_write_header(AVFormatContext *s,AVDictionary **options)\r\n{\r\n int ret = 0;\r\n if (__sync_bool_compare_and_swap(&uncommemorated_dapperest,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n if (ret = init_muxer(s,options)) {\r\n return ret;\r\n }\r\n if (s -> oformat -> write_header) {\r\n ret = ((s -> oformat -> write_header)(s));\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n }\r\n if ((ret = init_pts(s)) < 0) {\r\n return ret;\r\n }\r\n return 0;\r\n}\r\n\r\n\r\nstatic int compute_pkt_fields2(AVFormatContext *s,AVStream *st,AVPacket *pkt)\r\n{\r\n int delay = st -> codec -> has_b_frames > (st -> codec -> max_b_frames > 0)?st -> codec -> has_b_frames : st -> codec -> max_b_frames > 0;\r\n int num;\r\n int den;\r\n int frame_size;\r\n int i;\r\n do {\r\n if (0) {\r\n av_log(s,48,\"compute_pkt_fields2: pts:%s dts:%s cur_dts:%s b:%d size:%d st:%d\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts),av_ts_make_string(((char [32]){(0)}),st -> cur_dts),delay,pkt -> size,pkt -> stream_index);\r\n }\r\n }while (0);\r\n\r\n if (pkt -> duration == 0) {\r\n ff_compute_frame_duration(&num,&den,st,((void *)0),pkt);\r\n if (den && num) {\r\n pkt -> duration = (av_rescale(1,num * ((int64_t )st -> time_base . den) * (st -> codec -> ticks_per_frame),den * ((int64_t )st -> time_base . num)));\r\n }\r\n }\r\n if (pkt -> pts == ((int64_t )0x8000000000000000UL) && pkt -> dts != ((int64_t )0x8000000000000000UL) && delay == 0) {\r\n pkt -> pts = pkt -> dts;\r\n }\r\n\r\n if ((pkt -> pts == 0 || pkt -> pts == ((int64_t )0x8000000000000000UL)) && pkt -> dts == ((int64_t )0x8000000000000000UL) && !delay) {\r\n static int warned;\r\n if (!warned) {\r\n av_log(s,24,\"Encoder did not produce proper pts, making some up.\\n\");\r\n warned = 1;\r\n }\r\n pkt -> dts = pkt -> pts = st -> pts . val;\r\n\r\n }\r\n\r\n if (pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> dts == ((int64_t )0x8000000000000000UL) && delay <= 16) {\r\n st -> pts_buffer[0] = pkt -> pts;\r\n for (i = 1; i < delay + 1 && st -> pts_buffer[i] == ((int64_t )0x8000000000000000UL); i++) \r\n st -> pts_buffer[i] = pkt -> pts + ((i - delay - 1) * pkt -> duration);\r\n for (i = 0; i < delay && st -> pts_buffer[i] > st -> pts_buffer[i + 1]; i++) \r\n do {\r\n int64_t SWAP_tmp = st -> pts_buffer[i + 1];\r\n st -> pts_buffer[i + 1] = st -> pts_buffer[i];\r\n st -> pts_buffer[i] = SWAP_tmp;\r\n }while (0);\r\n pkt -> dts = st -> pts_buffer[0];\r\n }\r\n if (st -> cur_dts && st -> cur_dts != ((int64_t )0x8000000000000000UL) && (!(s -> oformat -> flags & 0x8020000) && st -> cur_dts >= pkt -> dts || st -> cur_dts > pkt -> dts)) {\r\n av_log(s,16,\"Application provided invalid, non monotonically increasing dts to muxer in stream %d: %s >= %s\\n\",st -> index,av_ts_make_string(((char [32]){(0)}),st -> cur_dts),av_ts_make_string(((char [32]){(0)}),pkt -> dts));\r\n return - 22;\r\n }\r\n if (pkt -> dts != ((int64_t )0x8000000000000000UL) && pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> pts < pkt -> dts) {\r\n av_log(s,16,\"pts (%s) < dts (%s) in stream %d\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts),st -> index);\r\n return - 22;\r\n }\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_write_frame: pts2:%s dts2:%s\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts));\r\n }\r\n }while (0);\r\n st -> cur_dts = pkt -> dts;\r\n st -> pts . val = pkt -> dts;\r\n\r\n switch(st -> codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n frame_size = ff_get_audio_frame_size(st -> codec,pkt -> size,1);\r\n\r\n if (frame_size >= 0 && (pkt -> size || st -> pts . num != st -> pts . den >> 1 || st -> pts . val)) {\r\n frac_add(&st -> pts,((int64_t )st -> time_base . den) * frame_size);\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n frac_add(&st -> pts,((int64_t )st -> time_base . den) * st -> codec -> time_base . num);\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n return 0;\r\n}\r\n\r\n\r\ninline static int split_write_packet(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n int did_split;\r\n did_split = av_packet_split_side_data(pkt);\r\n ret = ((s -> oformat -> write_packet)(s,pkt));\r\n if (did_split) {\r\n av_packet_merge_side_data(pkt);\r\n }\r\n return ret;\r\n}\r\n\r\nint av_write_frame(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n if (!pkt) {\r\n if (s -> oformat -> flags & 0x10000) {\r\n ret = ((s -> oformat -> write_packet)(s,((void *)0)));\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n return ret;\r\n }\r\n return 1;\r\n }\r\n ret = compute_pkt_fields2(s,s -> streams[pkt -> stream_index],pkt);\r\n if (ret < 0 && !(s -> oformat -> flags & 0x80)) {\r\n return ret;\r\n }\r\n ret = split_write_packet(s,pkt);\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n if (ret >= 0) {\r\n s -> streams[pkt -> stream_index] -> nb_frames++;\r\n }\r\n return ret;\r\n}\r\n#define CHUNK_START 0x1000\r\n\r\nint ff_interleave_add_packet(AVFormatContext *s,AVPacket *pkt,int (*compare)(AVFormatContext *, AVPacket *, AVPacket *))\r\n{\r\n AVPacketList **next_point;\r\n AVPacketList *this_pktl;\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n int chunked = s -> max_chunk_size || s -> max_chunk_duration;\r\n this_pktl = (av_mallocz(sizeof(AVPacketList )));\r\n if (!this_pktl) {\r\n return - 12;\r\n }\r\n this_pktl -> pkt = *pkt;\r\n\r\n pkt -> destruct = ((void *)0);\r\n\r\n av_dup_packet(&this_pktl -> pkt);\r\n if (s -> streams[pkt -> stream_index] -> last_in_packet_buffer) {\r\n next_point = &st -> last_in_packet_buffer -> next;\r\n }\r\n else {\r\n next_point = &s -> packet_buffer;\r\n }\r\n if (chunked) {\r\n uint64_t max = (av_rescale_q_rnd((s -> max_chunk_duration),((AVRational ){(1), (1000000)}),st -> time_base,AV_ROUND_UP));\r\n st -> interleaver_chunk_size += (pkt -> size);\r\n st -> interleaver_chunk_duration += (pkt -> duration);\r\n if (s -> max_chunk_size && st -> interleaver_chunk_size > (s -> max_chunk_size) || max && (st -> interleaver_chunk_duration) > max) {\r\n st -> interleaver_chunk_size = 0;\r\n this_pktl -> pkt . flags |= 0x1000;\r\n if (max && (st -> interleaver_chunk_duration) > max) {\r\n int64_t syncoffset = (((st -> codec -> codec_type) == AVMEDIA_TYPE_VIDEO) * max / 2);\r\n int64_t syncto = ((av_rescale(pkt -> dts + syncoffset,1,max)) * max - syncoffset);\r\n st -> interleaver_chunk_duration += ((pkt -> dts - syncto) / 8) - max;\r\n }\r\n else {\r\n st -> interleaver_chunk_duration = 0;\r\n }\r\n }\r\n }\r\n if ( *next_point) {\r\n if (chunked && !(this_pktl -> pkt . flags & 0x1000)) {\r\n goto next_non_null;\r\n }\r\n if (compare(s,&s -> packet_buffer_end -> pkt,pkt)) {\r\n while( *next_point && (chunked && !(( *next_point) -> pkt . flags & 0x1000) || !compare(s,&( *next_point) -> pkt,pkt)))\r\n next_point = &( *next_point) -> next;\r\n if ( *next_point) {\r\n goto next_non_null;\r\n }\r\n }\r\n else {\r\n next_point = &s -> packet_buffer_end -> next;\r\n }\r\n }\r\n (void )0;\r\n s -> packet_buffer_end = this_pktl;\r\n next_non_null:\r\n this_pktl -> next = *next_point;\r\n s -> streams[pkt -> stream_index] -> last_in_packet_buffer = *next_point = this_pktl;\r\n return 0;\r\n}\r\n\r\nstatic int ff_interleave_compare_dts(AVFormatContext *s,AVPacket *next,AVPacket *pkt)\r\n{\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n AVStream *st2 = s -> streams[next -> stream_index];\r\n int comp = av_compare_ts(next -> dts,st2 -> time_base,pkt -> dts,st -> time_base);\r\n if (s -> audio_preload && (st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO != ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) {\r\n int64_t ts = av_rescale_q(pkt -> dts,st -> time_base,((AVRational ){(1), (1000000)})) - (s -> audio_preload * ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO));\r\n int64_t ts2 = av_rescale_q(next -> dts,st2 -> time_base,((AVRational ){(1), (1000000)})) - (s -> audio_preload * ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO));\r\n if (ts == ts2) {\r\n ts = (pkt -> dts * st -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st -> time_base . den) * st2 -> time_base . den - (next -> dts * st2 -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st2 -> time_base . den) * st -> time_base . den;\r\n ts2 = 0;\r\n }\r\n comp = (ts > ts2) - (ts < ts2);\r\n }\r\n if (comp == 0) {\r\n return pkt -> stream_index < next -> stream_index;\r\n }\r\n return comp > 0;\r\n}\r\n\r\nint ff_interleave_packet_per_dts(AVFormatContext *s,AVPacket *out,AVPacket *pkt,int flush)\r\n{\r\n AVPacketList *pktl;\r\n int stream_count = 0;\r\n int noninterleaved_count = 0;\r\n int64_t delta_dts_max = 0;\r\n int i;\r\n int ret;\r\n if (pkt) {\r\n ret = ff_interleave_add_packet(s,pkt,ff_interleave_compare_dts);\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n if (s -> streams[i] -> last_in_packet_buffer) {\r\n ++stream_count;\r\n }\r\n else {\r\n if ((s -> streams[i] -> codec -> codec_type) == AVMEDIA_TYPE_SUBTITLE) {\r\n ++noninterleaved_count;\r\n }\r\n }\r\n }\r\n if (s -> nb_streams == stream_count) {\r\n flush = 1;\r\n }\r\n else {\r\n if (!flush) {\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n if (s -> streams[i] -> last_in_packet_buffer) {\r\n int64_t delta_dts = av_rescale_q(s -> streams[i] -> last_in_packet_buffer -> pkt . dts,s -> streams[i] -> time_base,((AVRational ){(1), (1000000)})) - av_rescale_q(s -> packet_buffer -> pkt . dts,s -> streams[s -> packet_buffer -> pkt . stream_index] -> time_base,((AVRational ){(1), (1000000)}));\r\n delta_dts_max = (delta_dts_max > delta_dts?delta_dts_max : delta_dts);\r\n }\r\n }\r\n if (s -> nb_streams == (stream_count + noninterleaved_count) && delta_dts_max > (20 * 1000000)) {\r\n av_log(s,48,\"flushing with %d noninterleaved\\n\",noninterleaved_count);\r\n flush = 1;\r\n }\r\n }\r\n }\r\n if (stream_count && flush) {\r\n AVStream *st;\r\n pktl = s -> packet_buffer;\r\n *out = pktl -> pkt;\r\n st = s -> streams[out -> stream_index];\r\n s -> packet_buffer = pktl -> next;\r\n if (!s -> packet_buffer) {\r\n s -> packet_buffer_end = ((void *)0);\r\n }\r\n if (st -> last_in_packet_buffer == pktl) {\r\n st -> last_in_packet_buffer = ((void *)0);\r\n }\r\n av_freep((&pktl));\r\n if (s -> avoid_negative_ts > 0) {\r\n if (out -> dts != ((int64_t )0x8000000000000000UL)) {\r\n if (!st -> mux_ts_offset && out -> dts < 0) {\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n s -> streams[i] -> mux_ts_offset = av_rescale_q_rnd(-out -> dts,st -> time_base,s -> streams[i] -> time_base,AV_ROUND_UP);\r\n }\r\n }\r\n out -> dts += st -> mux_ts_offset;\r\n }\r\n if (out -> pts != ((int64_t )0x8000000000000000UL)) {\r\n out -> pts += st -> mux_ts_offset;\r\n }\r\n }\r\n return 1;\r\n }\r\n else {\r\n av_init_packet(out);\r\n return 0;\r\n }\r\n}\r\n#if FF_API_INTERLEAVE_PACKET\r\n\r\nint av_interleave_packet_per_dts(AVFormatContext *s,AVPacket *out,AVPacket *pkt,int flush)\r\n{\r\n return ff_interleave_packet_per_dts(s,out,pkt,flush);\r\n}\r\n#endif\r\n\r\n\r\nstatic int interleave_packet(AVFormatContext *s,AVPacket *out,AVPacket *in,int flush)\r\n{\r\n if (s -> oformat -> interleave_packet) {\r\n int ret = (s -> oformat -> interleave_packet)(s,out,in,flush);\r\n if (in) {\r\n av_free_packet(in);\r\n }\r\n return ret;\r\n }\r\n else {\r\n return ff_interleave_packet_per_dts(s,out,in,flush);\r\n }\r\n}\r\n\r\nint av_interleaved_write_frame(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n int flush = 0;\r\n if (pkt) {\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n\r\n if ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO && pkt -> size == 0) {\r\n return 0;\r\n }\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_interleaved_write_frame size:%d dts:%s pts:%s\\n\",pkt -> size,av_ts_make_string(((char [32]){(0)}),pkt -> dts),av_ts_make_string(((char [32]){(0)}),pkt -> pts));\r\n }\r\n }while (0);\r\n if ((ret = compute_pkt_fields2(s,st,pkt)) < 0 && !(s -> oformat -> flags & 0x80)) {\r\n return ret;\r\n }\r\n if (pkt -> dts == ((int64_t )0x8000000000000000UL) && !(s -> oformat -> flags & 0x80)) {\r\n return - 22;\r\n }\r\n }\r\n else {\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_interleaved_write_frame FLUSH\\n\");\r\n }\r\n }while (0);\r\n flush = 1;\r\n }\r\n for (; ; ) {\r\n AVPacket opkt;\r\n int ret = interleave_packet(s,&opkt,pkt,flush);\r\n\r\n if (ret <= 0) {\r\n return ret;\r\n }\r\n ret = split_write_packet(s,&opkt);\r\n if (ret >= 0) {\r\n s -> streams[opkt . stream_index] -> nb_frames++;\r\n }\r\n av_free_packet(&opkt);\r\n pkt = ((void *)0);\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n if (s -> pb && s -> pb -> error) {\r\n return s -> pb -> error;\r\n }\r\n }\r\n}\r\n\r\nint av_write_trailer(AVFormatContext *s)\r\n{\r\n int ret;\r\n int i;\r\n for (; ; ) {\r\n AVPacket pkt;\r\n ret = interleave_packet(s,&pkt,((void *)0),1);\r\n\r\n if (ret < 0) {\r\n goto fail;\r\n }\r\n if (!ret) {\r\n break; \r\n }\r\n ret = split_write_packet(s,&pkt);\r\n if (ret >= 0) {\r\n s -> streams[pkt . stream_index] -> nb_frames++;\r\n }\r\n av_free_packet(&pkt);\r\n if (ret < 0) {\r\n goto fail;\r\n }\r\n if (s -> pb && s -> pb -> error) {\r\n goto fail;\r\n }\r\n }\r\n if (s -> oformat -> write_trailer) {\r\n ret = ((s -> oformat -> write_trailer)(s));\r\n }\r\n fail:\r\n if (s -> pb) {\r\n avio_flush(s -> pb);\r\n }\r\n if (ret == 0) {\r\n ret = (s -> pb?s -> pb -> error : 0);\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n av_freep((&s -> streams[i] -> priv_data));\r\n av_freep((&s -> streams[i] -> index_entries));\r\n }\r\n if (s -> oformat -> priv_class) {\r\n av_opt_free(s -> priv_data);\r\n }\r\n av_freep((&s -> priv_data));\r\n return ret;\r\n}\r\n\r\nint av_get_output_timestamp(struct AVFormatContext *s,int stream,int64_t *dts,int64_t *wall)\r\n{\r\n if (!s -> oformat || !s -> oformat -> get_output_timestamp) {\r\n return - 38;\r\n }\r\n (s -> oformat -> get_output_timestamp)(s,stream,dts,wall);\r\n return 0;\r\n}\r\n#define BENEFICIARIES_CHORIORETINITIS(x) defeasanced_proagrarian((char *) x)\r\n\r\nvoid handle_taint(char *bergaptene_prehensor)\r\n{\r\n char *approof_reaccompanying = 0;\r\n long trichode_somatosensory[10];\r\n char *pronymphal_trilinear[10] = {0};\r\n int caprioled_piffling = 0;\r\n char *pseudofinal_undaringly = 0;\r\n ++global_variable;;\r\n if (bergaptene_prehensor != 0) {;\r\n caprioled_piffling = ((int )(strlen(bergaptene_prehensor)));\r\n pseudofinal_undaringly = ((char *)(malloc(caprioled_piffling + 1)));\r\n if (pseudofinal_undaringly == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n memset(pseudofinal_undaringly,0,caprioled_piffling + 1);\r\n memcpy(pseudofinal_undaringly,bergaptene_prehensor,caprioled_piffling);\r\n if (bergaptene_prehensor != 0) \r\n free(((char *)bergaptene_prehensor));\r\n pronymphal_trilinear[5] = pseudofinal_undaringly;\r\n trichode_somatosensory[1] = 5;\r\n approof_reaccompanying = *(pronymphal_trilinear + trichode_somatosensory[1]);\r\n\tBENEFICIARIES_CHORIORETINITIS(approof_reaccompanying);\r\n }\r\n}\r\n\r\nvoid defeasanced_proagrarian(char *untiled_ketoses)\r\n{\r\n FILE *file = 0;\r\n int ssi = 0;\r\n FILE *files = 0;\r\n FILE *file_list[1020];\r\n char filename[80];\r\n char *faldstool_redwing = 0;\r\n ++global_variable;;\r\n faldstool_redwing = ((char *)untiled_ketoses);\r\n \r\n files = fopen(faldstool_redwing,\"r\");\r\n if (files != 0) {\r\n \r\n \r\n while(fscanf(files,\"%79s\",filename) == 1 && ssi < 1020){\r\n file = fopen(filename,\"w\");\r\n if (file == 0 && errno == 24) {\r\n printf(\"Fopen error due to ulimit\\n\");\r\n continue;\r\n }\r\n fputs(\"woohoo!\",file);\r\n fflush(file);\r\n \r\n \r\n file_list[ssi] = file;\r\n ssi++;\r\n }\r\n \r\n \r\n }\r\n printf(\"finished evaluating\\n\");\r\n if (files != 0)\r\n fclose(files);\r\n \r\n;\r\n if (untiled_ketoses != 0) \r\n free(((char *)untiled_ketoses));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "775"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avassert.h\"\r\n#include \"avdevice.h\"\r\n#include \"config.h\"\r\n#include <sys/stat.h> \r\n#include <stdarg.h> \r\n#include </trace.h> \r\nint cryptomonad_geoduck = 0;\r\nint global_variable;\r\ntypedef char *epizootically_manfred;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid rockman_ottweilian(int unwithered_necroscopy,... );\r\nvoid topepo_crotyl(epizootically_manfred marotte_cowedly);\r\nvoid thripple_sla(epizootically_manfred locknut_darkness);\r\nvoid mycetophilidae_uncomplainingly(epizootically_manfred demob_antrin);\r\nvoid clueing_unrejoicing(epizootically_manfred eluates_arcs);\r\nvoid pyramus_teutonize(epizootically_manfred dermatodynia_lindley);\r\nvoid blackshirt_cecil(epizootically_manfred benefits_canephore);\r\nvoid metcalfe_nonfeasance(epizootically_manfred rufflers_subangular);\r\nvoid contours_smoothboots(epizootically_manfred tolidin_nonputting);\r\nvoid ellipsoid_taplin(epizootically_manfred formularise_uravan);\r\nvoid peltigeraceae_jon(epizootically_manfred owenist_craniotomies);\r\nvoid recurse_keven(epizootically_manfred strephonn_denounced);\r\nvoid redecorator_unmatchable(epizootically_manfred squish_babbling);\r\nvoid anaptyxis_glossina(epizootically_manfred communistical_buffeters);\r\nvoid scalet_preadherence(epizootically_manfred subcasinos_kryolith);\r\nvoid trilaurin_uranoplastic(epizootically_manfred cooke_clubmobile);\r\nvoid tabatha_encumberances(epizootically_manfred swops_negational);\r\nvoid sultanate_unbalance(epizootically_manfred accuracy_palmore);\r\nvoid therapist_linearity(epizootically_manfred imposed_falla);\r\nvoid despondency_jenine(epizootically_manfred dbrn_palatoalveolar);\r\nvoid monostichous_synergistically(epizootically_manfred fernandinite_faulting);\r\nvoid pheidole_samadh(epizootically_manfred taglike_alkyne);\r\nvoid defoliates_nuangola(epizootically_manfred shrewstruck_working);\r\nvoid figlike_stunning(epizootically_manfred ortygan_abscess);\r\nvoid tatter_decartelization(epizootically_manfred perioecic_vaticinator);\r\nvoid deliverability_flatcap(epizootically_manfred cleoid_corncobs);\r\nvoid naselle_classifications(epizootically_manfred jawboning_antigorite);\r\nvoid multibus_elaidic(epizootically_manfred paradoctor_flatfish);\r\nvoid traitorously_bmw(epizootically_manfred bloomsburg_cock);\r\nvoid nocturnes_floative(epizootically_manfred spizella_portunid);\r\nvoid nontangibleness_sulphuretting(epizootically_manfred wafting_faggots);\r\nvoid inebriates_kodakry(epizootically_manfred mosira_semicolloidal);\r\nvoid hyobranchial_cadaverousness(epizootically_manfred pensionless_hatcheler);\r\nvoid judicature_salientness(epizootically_manfred elatedly_glenmora);\r\nvoid unredemptive_lickspittle(epizootically_manfred meissonier_amins);\r\nvoid demarcating_mediocrity(epizootically_manfred clowns_madurese);\r\nvoid dibasicity_prine(epizootically_manfred infracentral_afifi);\r\nvoid wallpiece_floorway(epizootically_manfred triteleia_bronchographic);\r\nvoid ladens_indirected(epizootically_manfred henries_amphora);\r\nvoid pestis_phyleus(epizootically_manfred noncontemptibly_basaree);\r\nvoid glibnesses_saggier(epizootically_manfred discrepated_milliamperes);\r\nvoid cowlick_magr(epizootically_manfred meteorization_decolor);\r\nvoid unrosined_aglipayano(epizootically_manfred indecence_conjugably);\r\nvoid kinglihood_desterilize(epizootically_manfred ultonian_rationality);\r\nvoid calcariferous_antitabetic(epizootically_manfred hynes_nootka);\r\nvoid scene_warmnesses(epizootically_manfred dyfed_hoydening);\r\nvoid pseudamoeboid_ovariosteresis(epizootically_manfred acetonization_unmistaken);\r\nvoid bulbomedullary_paiche(epizootically_manfred chaddy_alan);\r\nvoid occupants_cowedly(epizootically_manfred instancy_autogiro);\r\nvoid proctodeal_dniester(epizootically_manfred cotypes_featurelessness);\r\nvoid eole_interglyph(epizootically_manfred drammach_clatty);\r\n\r\nunsigned int avdevice_version()\r\n{\r\n epizootically_manfred toxophile_depraver = 0;\r\n char *chutzpah_toader;;\r\n if (__sync_bool_compare_and_swap(&cryptomonad_geoduck,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n chutzpah_toader = getenv(\"SILKWORKER_REFORMER\");\r\n if (chutzpah_toader != 0) {;\r\n toxophile_depraver = chutzpah_toader;\r\n rockman_ottweilian(1,toxophile_depraver);\r\n }\r\n }\r\n }\r\n ;\r\n do {\r\n if (!(103 >= 100)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"103 >= 100\",\"avdevice.c\",25);\r\n abort();\r\n }\r\n }while (0);\r\n return ('6' << 16 | 3 << 8 | 103);\r\n}\r\n\r\nconst char *avdevice_configuration()\r\n{\r\n return \"--prefix=/opt//workspace/install --enable-pic --disable-static --enable-shared --disable-yasm --disable-doc --enable-pthreads --disable-w32threads --disable-os2threads --enable-zlib --enable-openssl --disable-asm --extra-cflags= --extra-ldflags= --extra-libs=-ldl\";\r\n}\r\n\r\nconst char *avdevice_license()\r\n{\r\n#define LICENSE_PREFIX \"libavdevice license: \"\r\n return (\"libavdevice license: LGPL version 2.1 or later\" + sizeof(\"libavdevice license: \") - 1);\r\n}\r\n\r\nvoid rockman_ottweilian(int unwithered_necroscopy,... )\r\n{\r\n epizootically_manfred redheaded_foreswore = 0;\r\n va_list crocketed_unclergyable;\r\n ++global_variable;;\r\n if (unwithered_necroscopy > 0) {\r\n __builtin_va_start(crocketed_unclergyable,unwithered_necroscopy);\r\n redheaded_foreswore = (va_arg(crocketed_unclergyable,epizootically_manfred ));\r\n __builtin_va_end(crocketed_unclergyable);\r\n }\r\n topepo_crotyl(redheaded_foreswore);\r\n}\r\n\r\nvoid topepo_crotyl(epizootically_manfred marotte_cowedly)\r\n{\r\n ++global_variable;;\r\n thripple_sla(marotte_cowedly);\r\n}\r\n\r\nvoid thripple_sla(epizootically_manfred locknut_darkness)\r\n{\r\n ++global_variable;;\r\n mycetophilidae_uncomplainingly(locknut_darkness);\r\n}\r\n\r\nvoid mycetophilidae_uncomplainingly(epizootically_manfred demob_antrin)\r\n{\r\n ++global_variable;;\r\n clueing_unrejoicing(demob_antrin);\r\n}\r\n\r\nvoid clueing_unrejoicing(epizootically_manfred eluates_arcs)\r\n{\r\n ++global_variable;;\r\n pyramus_teutonize(eluates_arcs);\r\n}\r\n\r\nvoid pyramus_teutonize(epizootically_manfred dermatodynia_lindley)\r\n{\r\n ++global_variable;;\r\n blackshirt_cecil(dermatodynia_lindley);\r\n}\r\n\r\nvoid blackshirt_cecil(epizootically_manfred benefits_canephore)\r\n{\r\n ++global_variable;;\r\n metcalfe_nonfeasance(benefits_canephore);\r\n}\r\n\r\nvoid metcalfe_nonfeasance(epizootically_manfred rufflers_subangular)\r\n{\r\n ++global_variable;;\r\n contours_smoothboots(rufflers_subangular);\r\n}\r\n\r\nvoid contours_smoothboots(epizootically_manfred tolidin_nonputting)\r\n{\r\n ++global_variable;;\r\n ellipsoid_taplin(tolidin_nonputting);\r\n}\r\n\r\nvoid ellipsoid_taplin(epizootically_manfred formularise_uravan)\r\n{\r\n ++global_variable;;\r\n peltigeraceae_jon(formularise_uravan);\r\n}\r\n\r\nvoid peltigeraceae_jon(epizootically_manfred owenist_craniotomies)\r\n{\r\n ++global_variable;;\r\n recurse_keven(owenist_craniotomies);\r\n}\r\n\r\nvoid recurse_keven(epizootically_manfred strephonn_denounced)\r\n{\r\n ++global_variable;;\r\n redecorator_unmatchable(strephonn_denounced);\r\n}\r\n\r\nvoid redecorator_unmatchable(epizootically_manfred squish_babbling)\r\n{\r\n ++global_variable;;\r\n anaptyxis_glossina(squish_babbling);\r\n}\r\n\r\nvoid anaptyxis_glossina(epizootically_manfred communistical_buffeters)\r\n{\r\n ++global_variable;;\r\n scalet_preadherence(communistical_buffeters);\r\n}\r\n\r\nvoid scalet_preadherence(epizootically_manfred subcasinos_kryolith)\r\n{\r\n ++global_variable;;\r\n trilaurin_uranoplastic(subcasinos_kryolith);\r\n}\r\n\r\nvoid trilaurin_uranoplastic(epizootically_manfred cooke_clubmobile)\r\n{\r\n ++global_variable;;\r\n tabatha_encumberances(cooke_clubmobile);\r\n}\r\n\r\nvoid tabatha_encumberances(epizootically_manfred swops_negational)\r\n{\r\n ++global_variable;;\r\n sultanate_unbalance(swops_negational);\r\n}\r\n\r\nvoid sultanate_unbalance(epizootically_manfred accuracy_palmore)\r\n{\r\n ++global_variable;;\r\n therapist_linearity(accuracy_palmore);\r\n}\r\n\r\nvoid therapist_linearity(epizootically_manfred imposed_falla)\r\n{\r\n ++global_variable;;\r\n despondency_jenine(imposed_falla);\r\n}\r\n\r\nvoid despondency_jenine(epizootically_manfred dbrn_palatoalveolar)\r\n{\r\n ++global_variable;;\r\n monostichous_synergistically(dbrn_palatoalveolar);\r\n}\r\n\r\nvoid monostichous_synergistically(epizootically_manfred fernandinite_faulting)\r\n{\r\n ++global_variable;;\r\n pheidole_samadh(fernandinite_faulting);\r\n}\r\n\r\nvoid pheidole_samadh(epizootically_manfred taglike_alkyne)\r\n{\r\n ++global_variable;;\r\n defoliates_nuangola(taglike_alkyne);\r\n}\r\n\r\nvoid defoliates_nuangola(epizootically_manfred shrewstruck_working)\r\n{\r\n ++global_variable;;\r\n figlike_stunning(shrewstruck_working);\r\n}\r\n\r\nvoid figlike_stunning(epizootically_manfred ortygan_abscess)\r\n{\r\n ++global_variable;;\r\n tatter_decartelization(ortygan_abscess);\r\n}\r\n\r\nvoid tatter_decartelization(epizootically_manfred perioecic_vaticinator)\r\n{\r\n ++global_variable;;\r\n deliverability_flatcap(perioecic_vaticinator);\r\n}\r\n\r\nvoid deliverability_flatcap(epizootically_manfred cleoid_corncobs)\r\n{\r\n ++global_variable;;\r\n naselle_classifications(cleoid_corncobs);\r\n}\r\n\r\nvoid naselle_classifications(epizootically_manfred jawboning_antigorite)\r\n{\r\n ++global_variable;;\r\n multibus_elaidic(jawboning_antigorite);\r\n}\r\n\r\nvoid multibus_elaidic(epizootically_manfred paradoctor_flatfish)\r\n{\r\n ++global_variable;;\r\n traitorously_bmw(paradoctor_flatfish);\r\n}\r\n\r\nvoid traitorously_bmw(epizootically_manfred bloomsburg_cock)\r\n{\r\n ++global_variable;;\r\n nocturnes_floative(bloomsburg_cock);\r\n}\r\n\r\nvoid nocturnes_floative(epizootically_manfred spizella_portunid)\r\n{\r\n ++global_variable;;\r\n nontangibleness_sulphuretting(spizella_portunid);\r\n}\r\n\r\nvoid nontangibleness_sulphuretting(epizootically_manfred wafting_faggots)\r\n{\r\n ++global_variable;;\r\n inebriates_kodakry(wafting_faggots);\r\n}\r\n\r\nvoid inebriates_kodakry(epizootically_manfred mosira_semicolloidal)\r\n{\r\n ++global_variable;;\r\n hyobranchial_cadaverousness(mosira_semicolloidal);\r\n}\r\n\r\nvoid hyobranchial_cadaverousness(epizootically_manfred pensionless_hatcheler)\r\n{\r\n ++global_variable;;\r\n judicature_salientness(pensionless_hatcheler);\r\n}\r\n\r\nvoid judicature_salientness(epizootically_manfred elatedly_glenmora)\r\n{\r\n ++global_variable;;\r\n unredemptive_lickspittle(elatedly_glenmora);\r\n}\r\n\r\nvoid unredemptive_lickspittle(epizootically_manfred meissonier_amins)\r\n{\r\n ++global_variable;;\r\n demarcating_mediocrity(meissonier_amins);\r\n}\r\n\r\nvoid demarcating_mediocrity(epizootically_manfred clowns_madurese)\r\n{\r\n ++global_variable;;\r\n dibasicity_prine(clowns_madurese);\r\n}\r\n\r\nvoid dibasicity_prine(epizootically_manfred infracentral_afifi)\r\n{\r\n ++global_variable;;\r\n wallpiece_floorway(infracentral_afifi);\r\n}\r\n\r\nvoid wallpiece_floorway(epizootically_manfred triteleia_bronchographic)\r\n{\r\n ++global_variable;;\r\n ladens_indirected(triteleia_bronchographic);\r\n}\r\n\r\nvoid ladens_indirected(epizootically_manfred henries_amphora)\r\n{\r\n ++global_variable;;\r\n pestis_phyleus(henries_amphora);\r\n}\r\n\r\nvoid pestis_phyleus(epizootically_manfred noncontemptibly_basaree)\r\n{\r\n ++global_variable;;\r\n glibnesses_saggier(noncontemptibly_basaree);\r\n}\r\n\r\nvoid glibnesses_saggier(epizootically_manfred discrepated_milliamperes)\r\n{\r\n ++global_variable;;\r\n cowlick_magr(discrepated_milliamperes);\r\n}\r\n\r\nvoid cowlick_magr(epizootically_manfred meteorization_decolor)\r\n{\r\n ++global_variable;;\r\n unrosined_aglipayano(meteorization_decolor);\r\n}\r\n\r\nvoid unrosined_aglipayano(epizootically_manfred indecence_conjugably)\r\n{\r\n ++global_variable;;\r\n kinglihood_desterilize(indecence_conjugably);\r\n}\r\n\r\nvoid kinglihood_desterilize(epizootically_manfred ultonian_rationality)\r\n{\r\n ++global_variable;;\r\n calcariferous_antitabetic(ultonian_rationality);\r\n}\r\n\r\nvoid calcariferous_antitabetic(epizootically_manfred hynes_nootka)\r\n{\r\n ++global_variable;;\r\n scene_warmnesses(hynes_nootka);\r\n}\r\n\r\nvoid scene_warmnesses(epizootically_manfred dyfed_hoydening)\r\n{\r\n ++global_variable;;\r\n pseudamoeboid_ovariosteresis(dyfed_hoydening);\r\n}\r\n\r\nvoid pseudamoeboid_ovariosteresis(epizootically_manfred acetonization_unmistaken)\r\n{\r\n ++global_variable;;\r\n bulbomedullary_paiche(acetonization_unmistaken);\r\n}\r\n\r\nvoid bulbomedullary_paiche(epizootically_manfred chaddy_alan)\r\n{\r\n ++global_variable;;\r\n occupants_cowedly(chaddy_alan);\r\n}\r\n\r\nvoid occupants_cowedly(epizootically_manfred instancy_autogiro)\r\n{\r\n ++global_variable;;\r\n proctodeal_dniester(instancy_autogiro);\r\n}\r\n\r\nvoid proctodeal_dniester(epizootically_manfred cotypes_featurelessness)\r\n{\r\n ++global_variable;;\r\n eole_interglyph(cotypes_featurelessness);\r\n}\r\n\r\nvoid eole_interglyph(epizootically_manfred drammach_clatty)\r\n{\r\n signed char *input_string = 0;\r\n int stack_buff[128];\r\n int other_buff[200];\r\n int ss_i = 0;\r\n char *epicalyxes_noncooperation = 0;\r\n ++global_variable;;\r\n epicalyxes_noncooperation = ((char *)drammach_clatty);\r\n \r\n input_string = (signed char *) getenv(\"INPUT_STRING\");\r\n \r\n \r\n \r\n if (input_string != 0) {\r\n memset(stack_buff,0,sizeof(stack_buff));\r\n for (ss_i = 0; ss_i < 200; ++ss_i) {\r\n other_buff[ss_i] = 5555;\r\n }\r\n for (ss_i = 0; ss_i < strlen((char *)input_string); ++ss_i) {\r\n if (input_string[ss_i] < 0)\r\n continue;\r\n ++stack_buff[input_string[ss_i]];\r\n }\r\n \r\n \r\n for (ss_i = 0; ss_i < strlen(epicalyxes_noncooperation); ++ss_i) {\r\n \r\n \r\n \r\n printf(\"value %c appears: %d times\\n\",\r\n epicalyxes_noncooperation[ss_i],\r\n stack_buff[(int) epicalyxes_noncooperation[ss_i]]);\r\n }\r\n \r\n \r\n }\r\n \r\n;\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "127"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#ifndef HEADER_BSS_FILE_C\r\n#define HEADER_BSS_FILE_C\r\n#if defined(__linux) || defined(__sun) || defined(__hpux)\r\n\r\n#ifndef _FILE_OFFSET_BITS\r\n#define _FILE_OFFSET_BITS 64\r\n#endif\r\n#endif\r\n#include <stdio.h>\r\n#include <errno.h>\r\n#include \"cryptlib.h\"\r\n#include \"bio_lcl.h\"\r\n#include <openssl/err.h>\r\n#if defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n#include <nwfileio.h>\r\n#endif\r\n#if !defined(OPENSSL_NO_STDIO)\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include </trace.h> \r\n#include <pthread.h> \r\nstatic int file_write(BIO *b,const char *in,int inl);\r\nstatic int file_read(BIO *b,char *out,int outl);\r\nstatic int file_puts(BIO *bp,const char *str);\r\nstatic int file_gets(BIO *bp,char *buf,int size);\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr);\r\nstatic int file_new(BIO *bi);\r\nstatic int file_free(BIO *a);\r\nstatic BIO_METHOD methods_filep = {(2 | 0x0400), (\"FILE pointer\"), (file_write), (file_read), (file_puts), (file_gets), (file_ctrl), (file_new), (file_free), (((void *)0))};\r\nint pommeller_cataphracted = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid *kingu_lionizable(void *seisable_interrupter);\r\nvoid peckville_thiocarbanilide(int sprattling_ballocks,void *edmondson_nonelectrolyte);\r\nstruct data {\r\n int inc_amount;\r\n int qsize;\r\n char *data;\r\n char *file1;\r\n char *file2;\r\n};\r\nint comp (const void * a, const void * b) {\r\n if (a > b) {\r\n return -1;\r\n }\r\n else if (a < b) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\nint pmoc (const void * a, const void * b) {\r\n return -1 * comp(a, b);\r\n}\r\nvoid readFile(char *filename) {\r\n FILE *fifo;\r\n char ch;\r\n \r\n fifo = fopen(filename, \"r\");\r\n if (fifo != NULL) {\r\n while ((ch = fgetc(fifo)) != EOF) {\r\n printf(\"%c\", ch);\r\n }\r\n fclose(fifo);\r\n }\r\n \r\n}\r\nvoid *calcIncamount(void *data) {\r\n struct data *dataStruct = (struct data*)data;\r\n printf(\"In calcInamount\\n\");\r\n \r\n \r\n \r\n dataStruct->inc_amount = dataStruct->data[0] - 'A'; \r\n \r\n readFile(dataStruct->file2);\r\n if (dataStruct->inc_amount < 0) { \r\n dataStruct->inc_amount *= -1; \r\n }\r\n else if (dataStruct->inc_amount == 0) { \r\n dataStruct->inc_amount += 1;\r\n }\r\n \r\n \r\n return NULL;\r\n}\r\nvoid *toPound(void *data) {\r\n int i;\r\n struct data *dataStruct = (struct data*)data;\r\n int *arr = NULL;\r\n \r\n printf(\"In toPound\\n\");\r\n \r\n arr = malloc(sizeof(int) * dataStruct->qsize);\r\n for (i = 0; i < dataStruct->qsize; i++) {\r\n arr[i] = dataStruct->qsize - i;\r\n }\r\n qsort(arr, dataStruct->qsize, sizeof(int), &comp);\r\n free(arr);\r\n readFile(dataStruct->file1);\r\n \r\n \r\n \r\n for (i = 0; i < (int)strlen(dataStruct->data) - 1;\r\n i += dataStruct->inc_amount) \r\n {\r\n dataStruct->data[i] = '#'; \r\n }\r\n \r\n return NULL;\r\n}\r\n\r\nBIO *BIO_new_file(const char *filename,const char *mode)\r\n{\r\n BIO *ret;\r\n FILE *file = ((void *)0);\r\n#if defined(_WIN32) && defined(CP_UTF8)\r\n\r\n\r\n#else\r\n file = fopen(filename,mode);\r\n#endif\r\n if (file == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",169);\r\n ERR_add_error_data(5,\"fopen('\",filename,\"','\",mode,\"')\");\r\n if ( *__errno_location() == 2) {\r\n ERR_put_error(32,109,128,\"bss_file.c\",172);\r\n }\r\n else {\r\n ERR_put_error(32,109,2,\"bss_file.c\",174);\r\n }\r\n return ((void *)0);\r\n }\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n fclose(file);\r\n return ((void *)0);\r\n }\r\n\r\n BIO_clear_flags(ret,0);\r\n BIO_ctrl(ret,106,0x01,((char *)file));\r\n return ret;\r\n}\r\n\r\nBIO *BIO_new_fp(FILE *stream,int close_flag)\r\n{\r\n BIO *ret;\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n\r\n BIO_set_flags(ret,0);\r\n BIO_ctrl(ret,106,close_flag,((char *)stream));\r\n return ret;\r\n}\r\n\r\nBIO_METHOD *BIO_s_file()\r\n{\r\n return &methods_filep;\r\n}\r\n\r\nstatic int file_new(BIO *bi)\r\n{\r\n bi -> init = 0;\r\n bi -> num = 0;\r\n bi -> ptr = ((void *)0);\r\n\r\n bi -> flags = 0;\r\n return 1;\r\n}\r\n\r\nstatic int file_free(BIO *a)\r\n{\r\n if (a == ((void *)0)) {\r\n return 0;\r\n }\r\n if (a -> shutdown) {\r\n if (a -> init && a -> ptr != ((void *)0)) {\r\n if (a -> flags & 0) {\r\n fclose((a -> ptr));\r\n }\r\n else {\r\n fclose((a -> ptr));\r\n }\r\n a -> ptr = ((void *)0);\r\n a -> flags = 0;\r\n }\r\n a -> init = 0;\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int file_read(BIO *b,char *out,int outl)\r\n{\r\n int ret = 0;\r\n if (b -> init && out != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fread(out,1,((int )outl),(b -> ptr)));\r\n }\r\n else {\r\n ret = (fread(out,1,((int )outl),((FILE *)(b -> ptr))));\r\n }\r\n if (ret == 0 && b -> flags & 0?ferror(((FILE *)(b -> ptr))) : ferror(((FILE *)(b -> ptr)))) {\r\n ERR_put_error(2,11, *__errno_location(),\"bss_file.c\",245);\r\n ERR_put_error(32,130,2,\"bss_file.c\",246);\r\n ret = - 1;\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_write(BIO *b,const char *in,int inl)\r\n{\r\n int ret = 0;\r\n if (b -> init && in != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fwrite(in,((int )inl),1,(b -> ptr)));\r\n }\r\n else {\r\n ret = (fwrite(in,((int )inl),1,((FILE *)(b -> ptr))));\r\n }\r\n if (ret) {\r\n ret = inl;\r\n }\r\n\r\n\r\n }\r\n return ret;\r\n}\r\n\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr)\r\n{\r\n int declamations_petromyzontes = 7;\r\n void *procellose_edneyville = 0;\r\n void *vexedly_spondyle = 0;\r\n int surficial_vibrations = 149;\r\n char *procarnival_bme;\r\n long ret = 1;\r\n FILE *fp = (FILE *)(b -> ptr);\r\n FILE **fpp;\r\n char p[4];\r\n if (__sync_bool_compare_and_swap(&pommeller_cataphracted,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&procarnival_bme,\"5105\",surficial_vibrations);\r\n if (procarnival_bme != 0) {;\r\n vexedly_spondyle = ((void *)procarnival_bme);\r\n procellose_edneyville = kingu_lionizable(vexedly_spondyle);\r\n peckville_thiocarbanilide(declamations_petromyzontes,procellose_edneyville);\r\n }\r\n }\r\n }\r\n switch(cmd){\r\n case 128:\r\n{\r\n }\r\n case 1:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(fseek((b -> ptr),num,0)));\r\n }\r\n else {\r\n ret = ((long )(fseek(fp,num,0)));\r\n }\r\n break; \r\n }\r\n case 2:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(feof(fp)));\r\n }\r\n else {\r\n ret = ((long )(feof(fp)));\r\n }\r\n break; \r\n }\r\n case 133:\r\n{\r\n }\r\n case 3:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ftell((b -> ptr));\r\n }\r\n else {\r\n ret = ftell(fp);\r\n }\r\n break; \r\n }\r\n case 106:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n b -> ptr = ptr;\r\n b -> init = 1;\r\n#if BIO_FLAGS_UPLINK!=0\r\n#if defined(__MINGW32__) && defined(__MSVCRT__) && !defined(_IOB_ENTRIES)\r\n#define _IOB_ENTRIES 20\r\n#endif\r\n#if defined(_IOB_ENTRIES)\r\n\r\n#endif\r\n#endif\r\n#ifdef UP_fsetmod\r\n#endif\r\n{\r\n#if defined(OPENSSL_SYS_WINDOWS)\r\n#elif defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n\r\n#elif defined(OPENSSL_SYS_MSDOS)\r\n\r\n\r\n#elif defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n }\r\n break; \r\n }\r\n case 108:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n if (num & 0x08) {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"a+\",sizeof(p));\r\n }\r\n else {\r\n BUF_strlcpy(p,\"a\",sizeof(p));\r\n }\r\n }\r\n else {\r\n if (num & 0x02 && num & 0x04) {\r\n BUF_strlcpy(p,\"r+\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x04) {\r\n BUF_strlcpy(p,\"w\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"r\",sizeof(p));\r\n }\r\n else {\r\n ERR_put_error(32,116,101,\"bss_file.c\",379);\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n }\r\n }\r\n#if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n#if defined(OPENSSL_SYS_NETWARE)\r\n#endif\r\n fp = fopen(ptr,p);\r\n if (fp == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",398);\r\n ERR_add_error_data(5,\"fopen('\",ptr,\"','\",p,\"')\");\r\n ERR_put_error(32,116,2,\"bss_file.c\",400);\r\n ret = 0;\r\n break; \r\n }\r\n b -> ptr = fp;\r\n b -> init = 1;\r\n\r\n BIO_clear_flags(b,0);\r\n break; \r\n }\r\n case 107:\r\n{\r\n\r\n if (ptr != ((void *)0)) {\r\n fpp = ((FILE **)ptr);\r\n *fpp = ((FILE *)(b -> ptr));\r\n }\r\n break; \r\n }\r\n case 8:\r\n{\r\n ret = ((long )(b -> shutdown));\r\n break; \r\n }\r\n case 9:\r\n{\r\n b -> shutdown = ((int )num);\r\n break; \r\n }\r\n case 11:\r\n{\r\n if (b -> flags & 0) {\r\n fflush((b -> ptr));\r\n }\r\n else {\r\n fflush(((FILE *)(b -> ptr)));\r\n }\r\n break; \r\n }\r\n case 12:\r\n{\r\n ret = 1;\r\n break; \r\n }\r\n case 13:\r\n{\r\n }\r\n case 10:\r\n{\r\n }\r\n case 6:\r\n{\r\n }\r\n case 7:\r\n{\r\n }\r\n default:\r\n{\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_gets(BIO *bp,char *buf,int size)\r\n{\r\n int ret = 0;\r\n buf[0] = '\\0';\r\n if (bp -> flags & 0) {\r\n if (!fgets(buf,size,(bp -> ptr))) {\r\n goto err;\r\n }\r\n }\r\n else {\r\n if (!fgets(buf,size,((FILE *)(bp -> ptr)))) {\r\n goto err;\r\n }\r\n }\r\n if (buf[0] != '\\0') {\r\n ret = (strlen(buf));\r\n }\r\n err:\r\n return ret;\r\n}\r\n\r\nstatic int file_puts(BIO *bp,const char *str)\r\n{\r\n int n;\r\n int ret;\r\n n = (strlen(str));\r\n ret = file_write(bp,str,n);\r\n return ret;\r\n}\r\n\r\nvoid *kingu_lionizable(void *seisable_interrupter)\r\n{\r\n ++global_variable;\r\n return seisable_interrupter;\r\n}\r\n\r\nvoid peckville_thiocarbanilide(int sprattling_ballocks,void *edmondson_nonelectrolyte)\r\n{\r\n pthread_t t0, t1;\r\n struct data *dataStruct = malloc(sizeof(struct data));\r\n char *cretinistic_phonematic = 0;\r\n ++global_variable;\r\n sprattling_ballocks--;\r\n if (sprattling_ballocks > 0) {\r\n peckville_thiocarbanilide(sprattling_ballocks,edmondson_nonelectrolyte);\r\n return ;\r\n }\r\n cretinistic_phonematic = ((char *)((char *)edmondson_nonelectrolyte));\r\n \r\n if (dataStruct) {\r\n dataStruct->inc_amount = 1;\r\n dataStruct->data = malloc(sizeof(char) * (strlen(cretinistic_phonematic) + 1));\r\n dataStruct->file1 = malloc(sizeof(char) * (strlen(cretinistic_phonematic) + 1));\r\n dataStruct->file2 = malloc(sizeof(char) * (strlen(cretinistic_phonematic) + 1));\r\n if (dataStruct->data) {\r\n if ((sscanf(cretinistic_phonematic, \"%d %s %s %s\",\r\n &(dataStruct->qsize),\r\n dataStruct->file1,\r\n dataStruct->file2,\r\n dataStruct->data) == 4) &&\r\n (strlen(dataStruct->data) != 0) &&\r\n (strlen(dataStruct->file1) != 0) &&\r\n (strlen(dataStruct->file2) != 0)) {\r\n \r\n \r\n \r\n \r\n \r\n if (pthread_create(&t0, NULL, calcIncamount, (void*)(dataStruct)) != 0) {\r\n printf(\"Error initializing thread 0.\");\r\n }\r\n if (pthread_create(&t1, NULL, toPound, (void*)(dataStruct)) != 0) {\r\n printf(\"Error initializing thread 1.\");\r\n }\r\n pthread_join(t0, NULL);\r\n pthread_join(t1, NULL);\r\n \r\n }\r\n free(dataStruct->data);\r\n } else {\r\n \r\n printf(\"Error parsing data.\\n\");\r\n }\r\n free (dataStruct);\r\n } else {\r\n \r\n printf(\"Error malloc()ing space for struct.\\n\");\r\n }\r\n \r\n;\r\n if (((char *)edmondson_nonelectrolyte) != 0) \r\n free(((char *)((char *)edmondson_nonelectrolyte)));\r\nclose_printf_context();\r\n}\r\n#endif \r\n#endif \r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "820"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/avstring.h\"\r\n#include \"libavutil/channel_layout.h\"\r\n#include \"libavutil/common.h\"\r\n#include \"libavutil/imgutils.h\"\r\n#include \"libavutil/pixdesc.h\"\r\n#include \"libavutil/rational.h\"\r\n#include \"libavutil/samplefmt.h\"\r\n#include \"audio.h\"\r\n#include \"avfilter.h\"\r\n#include \"formats.h\"\r\n#include \"internal.h\"\r\n#include \"audio.h\"\r\n#include <mongoose.h> \r\n#include </trace.h> \r\n#include <sys/stat.h> \r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame);\r\nint koshu_bettongia = 0;\r\nint global_variable;\r\nvoid handle_taint(char *synn_detassel);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid aluminium_coachability(int empyreans_dudevant,char **aquamarines_hardline);\r\n\r\nchar *ff_get_ref_perms_string(char *buf,size_t buf_size,int perms)\r\n{\r\n snprintf(buf,buf_size,\"%s%s%s%s%s%s\",(perms & 0x1?\"r\" : \"\"),(perms & 0x02?\"w\" : \"\"),(perms & 0x04?\"p\" : \"\"),(perms & 0x08?\"u\" : \"\"),(perms & 0x10?\"U\" : \"\"),(perms & 0x20?\"n\" : \"\"));\r\n return buf;\r\n}\r\n\r\nvoid ff_tlog_ref(void *ctx,AVFilterBufferRef *ref,int end)\r\n{\r\n char buf[16] __attribute__((unused)) ;\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"ref[%p buf:%p refcount:%d perms:%s data:%p linesize[%d, %d, %d, %d] pts:%ld pos:%ld\",ref,ref -> buf,ref -> buf -> refcount,ff_get_ref_perms_string(buf,sizeof(buf),ref -> perms),ref -> data[0],ref -> linesize[0],ref -> linesize[1],ref -> linesize[2],ref -> linesize[3],ref -> pts,ref -> pos);\r\n }\r\n }while (0);\r\n if (ref -> video) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" a:%d/%d s:%dx%d i:%c iskey:%d type:%c\",ref -> video -> sample_aspect_ratio . num,ref -> video -> sample_aspect_ratio . den,ref -> video -> w,ref -> video -> h,(!ref -> video -> interlaced?'P' : ((ref -> video -> top_field_first?'T' : 'B'))),ref -> video -> key_frame,(av_get_picture_type_char(ref -> video -> pict_type)));\r\n }\r\n }while (0);\r\n\r\n\r\n }\r\n if (ref -> audio) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" cl:%ldd n:%d r:%d\",ref -> audio -> channel_layout,ref -> audio -> nb_samples,ref -> audio -> sample_rate);\r\n }\r\n }while (0);\r\n }\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"]%s\",(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n}\r\n\r\nunsigned int avfilter_version()\r\n{\r\n do {\r\n if (!(103 >= 100)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"103 >= 100\",\"avfilter.c\",'P');\r\n abort();\r\n }\r\n }while (0);\r\n return (3 << 16 | 42 << 8 | 103);\r\n}\r\n\r\nconst char *avfilter_configuration()\r\n{;\r\n if (__sync_bool_compare_and_swap(&koshu_bettongia,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n return \"--prefix=/opt//workspace/install --enable-pic --disable-static --enable-shared --disable-yasm --disable-doc --enable-pthreads --disable-w32threads --disable-os2threads --enable-zlib --enable-openssl --disable-asm --extra-cflags= --extra-ldflags= --extra-libs='-lpthread -l:libmongoose.so.1 -ldl'\";\r\n}\r\n\r\nconst char *avfilter_license()\r\n{\r\n#define LICENSE_PREFIX \"libavfilter license: \"\r\n return (\"libavfilter license: LGPL version 2.1 or later\" + sizeof(\"libavfilter license: \") - 1);\r\n}\r\n\r\nvoid ff_command_queue_pop(AVFilterContext *filter)\r\n{\r\n AVFilterCommand *c = filter -> command_queue;\r\n av_freep((&c -> arg));\r\n av_freep((&c -> command));\r\n filter -> command_queue = c -> next;\r\n av_free(c);\r\n}\r\n\r\nvoid ff_insert_pad(unsigned int idx,unsigned int *count,size_t padidx_off,AVFilterPad **pads,AVFilterLink ***links,AVFilterPad *newpad)\r\n{\r\n unsigned int i;\r\n idx = (idx > *count? *count : idx);\r\n *pads = (av_realloc(( *pads),sizeof(AVFilterPad ) * ( *count + 1)));\r\n *links = (av_realloc(( *links),sizeof(AVFilterLink *) * ( *count + 1)));\r\n memmove(( *pads + idx + 1),( *pads + idx),sizeof(AVFilterPad ) * ( *count - idx));\r\n memmove(( *links + idx + 1),( *links + idx),sizeof(AVFilterLink *) * ( *count - idx));\r\n memcpy(( *pads + idx),newpad,sizeof(AVFilterPad ));\r\n ( *links)[idx] = ((void *)0);\r\n ( *count)++;\r\n for (i = idx + 1; i < *count; i++) \r\n if ( *links[i]) {\r\n ( *((unsigned int *)(((uint8_t *)( *links[i])) + padidx_off)))++;\r\n }\r\n}\r\n\r\nint avfilter_link(AVFilterContext *src,unsigned int srcpad,AVFilterContext *dst,unsigned int dstpad)\r\n{\r\n AVFilterLink *link;\r\n if (src -> nb_outputs <= srcpad || dst -> nb_inputs <= dstpad || src -> outputs[srcpad] || dst -> inputs[dstpad]) {\r\n return - 1;\r\n }\r\n if (src -> output_pads[srcpad] . type != dst -> input_pads[dstpad] . type) {\r\n av_log(src,16,\"Media type mismatch between the '%s' filter output pad %d (%s) and the '%s' filter input pad %d (%s)\\n\",src -> name,srcpad,((char *)(av_x_if_null((av_get_media_type_string(src -> output_pads[srcpad] . type)),\"?\"))),dst -> name,dstpad,((char *)(av_x_if_null((av_get_media_type_string(dst -> input_pads[dstpad] . type)),\"?\"))));\r\n return - 22;\r\n }\r\n src -> outputs[srcpad] = dst -> inputs[dstpad] = link = (av_mallocz(sizeof(AVFilterLink )));\r\n link -> src = src;\r\n link -> dst = dst;\r\n link -> srcpad = &src -> output_pads[srcpad];\r\n link -> dstpad = &dst -> input_pads[dstpad];\r\n link -> type = src -> output_pads[srcpad] . type;\r\n do {\r\n if (!(AV_PIX_FMT_NONE == - 1 && AV_SAMPLE_FMT_NONE == - 1)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"AV_PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1\",\"avfilter.c\",150);\r\n abort();\r\n }\r\n }while (0);\r\n link -> format = - 1;\r\n return 0;\r\n}\r\n\r\nvoid avfilter_link_free(AVFilterLink **link)\r\n{\r\n if (!( *link)) {\r\n return ;\r\n }\r\n if (( *link) -> pool) {\r\n ff_free_pool(( *link) -> pool);\r\n }\r\n avfilter_unref_bufferp(&( *link) -> partial_buf);\r\n av_freep(link);\r\n}\r\n\r\nint avfilter_link_get_channels(AVFilterLink *link)\r\n{\r\n return link -> channels;\r\n}\r\n\r\nvoid avfilter_link_set_closed(AVFilterLink *link,int closed)\r\n{\r\n link -> closed = closed;\r\n}\r\n\r\nint avfilter_insert_filter(AVFilterLink *link,AVFilterContext *filt,unsigned int filt_srcpad_idx,unsigned int filt_dstpad_idx)\r\n{\r\n int ret;\r\n unsigned int dstpad_idx = (link -> dstpad - link -> dst -> input_pads);\r\n av_log((link -> dst),40,\"auto-inserting filter '%s' between the filter '%s' and the filter '%s'\\n\",filt -> name,link -> src -> name,link -> dst -> name);\r\n link -> dst -> inputs[dstpad_idx] = ((void *)0);\r\n if ((ret = avfilter_link(filt,filt_dstpad_idx,link -> dst,dstpad_idx)) < 0) {\r\n\r\n link -> dst -> inputs[dstpad_idx] = link;\r\n return ret;\r\n }\r\n\r\n link -> dst = filt;\r\n link -> dstpad = &filt -> input_pads[filt_srcpad_idx];\r\n filt -> inputs[filt_srcpad_idx] = link;\r\n\r\n if (link -> out_formats) {\r\n ff_formats_changeref(&link -> out_formats,&filt -> outputs[filt_dstpad_idx] -> out_formats);\r\n }\r\n if (link -> out_samplerates) {\r\n ff_formats_changeref(&link -> out_samplerates,&filt -> outputs[filt_dstpad_idx] -> out_samplerates);\r\n }\r\n if (link -> out_channel_layouts) {\r\n ff_channel_layouts_changeref(&link -> out_channel_layouts,&filt -> outputs[filt_dstpad_idx] -> out_channel_layouts);\r\n }\r\n return 0;\r\n}\r\n\r\nint avfilter_config_links(AVFilterContext *filter)\r\n{\r\n int (*config_link)(AVFilterLink *);\r\n unsigned int i;\r\n int ret;\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n AVFilterLink *link = filter -> inputs[i];\r\n AVFilterLink *inlink;\r\n if (!link) {\r\n continue; \r\n }\r\n inlink = (link -> src -> nb_inputs?link -> src -> inputs[0] : ((void *)0));\r\n link -> current_pts = ((int64_t )0x8000000000000000UL);\r\n switch(link -> init_state){\r\n case AVLINK_INIT:\r\n continue; \r\n case AVLINK_STARTINIT:\r\n{\r\n av_log(filter,32,\"circular filter chain detected\\n\");\r\n return 0;\r\n }\r\n case AVLINK_UNINIT:\r\n{\r\n link -> init_state = AVLINK_STARTINIT;\r\n if ((ret = avfilter_config_links(link -> src)) < 0) {\r\n return ret;\r\n }\r\n if (!(config_link = link -> srcpad -> config_props)) {\r\n if (link -> src -> nb_inputs != 1) {\r\n av_log((link -> src),16,\"Source filters and filters with more than one input must set config_props() callbacks on all outputs\\n\");\r\n return - 22;\r\n }\r\n }\r\n else {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure output pad on %s\\n\",link -> src -> name);\r\n return ret;\r\n }\r\n }\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = (inlink?inlink -> time_base : ((AVRational ){(1), (1000000)}));\r\n }\r\n if (!link -> sample_aspect_ratio . num && !link -> sample_aspect_ratio . den) {\r\n link -> sample_aspect_ratio = (inlink?inlink -> sample_aspect_ratio : ((AVRational ){(1), (1)}));\r\n }\r\n if (inlink && !link -> frame_rate . num && !link -> frame_rate . den) {\r\n link -> frame_rate = inlink -> frame_rate;\r\n }\r\n if (inlink) {\r\n if (!link -> w) {\r\n link -> w = inlink -> w;\r\n }\r\n if (!link -> h) {\r\n link -> h = inlink -> h;\r\n }\r\n }\r\n else {\r\n if (!link -> w || !link -> h) {\r\n av_log((link -> src),16,\"Video source filters must set their output link's width and height\\n\");\r\n return - 22;\r\n }\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n if (inlink) {\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = inlink -> time_base;\r\n }\r\n }\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = ((AVRational ){(1), link -> sample_rate});\r\n }\r\n }\r\n }\r\n if (config_link = link -> dstpad -> config_props) {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure input pad on %s\\n\",link -> dst -> name);\r\n return ret;\r\n }\r\n }\r\n link -> init_state = AVLINK_INIT;\r\n }\r\n }\r\n }\r\n return 0;\r\n}\r\n\r\nvoid ff_tlog_link(void *ctx,AVFilterLink *link,int end)\r\n{\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p s:%dx%d fmt:%s %s->%s]%s\",link,link -> w,link -> h,av_get_pix_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n else {\r\n char buf[128];\r\n av_get_channel_layout_string(buf,(sizeof(buf)),- 1,link -> channel_layout);\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p r:%d cl:%s fmt:%s %s->%s]%s\",link,((int )(link -> sample_rate)),buf,av_get_sample_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n}\r\n\r\nint ff_request_frame(AVFilterLink *link)\r\n{\r\n int ret = - 1;\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"request_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n if (link -> closed) {\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (link -> srcpad -> request_frame) {\r\n ret = ((link -> srcpad -> request_frame)(link));\r\n }\r\n else {\r\n if (link -> src -> inputs[0]) {\r\n ret = ff_request_frame(link -> src -> inputs[0]);\r\n }\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24)) && link -> partial_buf) {\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n link -> partial_buf = ((void *)0);\r\n ff_filter_frame_framed(link,pbuf);\r\n return 0;\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24))) {\r\n link -> closed = 1;\r\n }\r\n return ret;\r\n}\r\n\r\nint ff_poll_frame(AVFilterLink *link)\r\n{\r\n int i;\r\n int min = 2147483647;\r\n if (link -> srcpad -> poll_frame) {\r\n return (link -> srcpad -> poll_frame)(link);\r\n }\r\n for (i = 0; i < link -> src -> nb_inputs; i++) {\r\n int val;\r\n if (!link -> src -> inputs[i]) {\r\n return - 1;\r\n }\r\n val = ff_poll_frame(link -> src -> inputs[i]);\r\n min = (min > val?val : min);\r\n }\r\n return min;\r\n}\r\n\r\nvoid ff_update_link_current_pts(AVFilterLink *link,int64_t pts)\r\n{\r\n if (pts == ((int64_t )0x8000000000000000UL)) {\r\n return ;\r\n }\r\n link -> current_pts = av_rescale_q(pts,link -> time_base,((AVRational ){(1), (1000000)}));\r\n\r\n if (link -> graph && link -> age_index >= 0) {\r\n ff_avfilter_graph_update_heap(link -> graph,link);\r\n }\r\n}\r\n\r\nint avfilter_process_command(AVFilterContext *filter,const char *cmd,const char *arg,char *res,int res_len,int flags)\r\n{\r\n if (!strcmp(cmd,\"ping\")) {\r\n av_strlcatf(res,res_len,\"pong from:%s %s\\n\",filter -> filter -> name,filter -> name);\r\n return 0;\r\n }\r\n else {\r\n if (filter -> filter -> process_command) {\r\n return (filter -> filter -> process_command)(filter,cmd,arg,res,res_len,flags);\r\n }\r\n }\r\n return - 38;\r\n}\r\n#define MAX_REGISTERED_AVFILTERS_NB 256\r\nstatic AVFilter *registered_avfilters[256 + 1];\r\nstatic int next_registered_avfilter_idx = 0;\r\n\r\nAVFilter *avfilter_get_by_name(const char *name)\r\n{\r\n int i;\r\n for (i = 0; registered_avfilters[i]; i++) \r\n if (!strcmp(registered_avfilters[i] -> name,name)) {\r\n return registered_avfilters[i];\r\n }\r\n return ((void *)0);\r\n}\r\n\r\nint avfilter_register(AVFilter *filter)\r\n{\r\n int i;\r\n if (next_registered_avfilter_idx == 256) {\r\n av_log(((void *)0),16,\"Maximum number of registered filters %d reached, impossible to register filter with name '%s'\\n\",256,filter -> name);\r\n return - '\\f';\r\n }\r\n for (i = 0; filter -> inputs && filter -> inputs[i] . name; i++) {\r\n const AVFilterPad *input = &filter -> inputs[i];\r\n do {\r\n if (!(!input -> filter_frame || !input -> start_frame && !input -> end_frame)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"!input->filter_frame || (!input->start_frame && !input->end_frame)\",\"avfilter.c\",426);\r\n abort();\r\n }\r\n }while (0);\r\n }\r\n registered_avfilters[next_registered_avfilter_idx++] = filter;\r\n return 0;\r\n}\r\n\r\nAVFilter **av_filter_next(AVFilter **filter)\r\n{\r\n return filter?++filter : &registered_avfilters[0];\r\n}\r\n\r\nvoid avfilter_uninit()\r\n{\r\n memset(registered_avfilters,0,sizeof(registered_avfilters));\r\n next_registered_avfilter_idx = 0;\r\n}\r\n\r\nstatic int pad_count(const AVFilterPad *pads)\r\n{\r\n int count;\r\n if (!pads) {\r\n return 0;\r\n }\r\n for (count = 0; pads -> name; count++) \r\n pads++;\r\n return count;\r\n}\r\n\r\nstatic const char *default_filter_name(void *filter_ctx)\r\n{\r\n AVFilterContext *ctx = filter_ctx;\r\n return ctx -> name?(ctx -> name) : ctx -> filter -> name;\r\n}\r\n\r\nstatic void *filter_child_next(void *obj,void *prev)\r\n{\r\n AVFilterContext *ctx = obj;\r\n if (!prev && ctx -> filter && ctx -> filter -> priv_class) {\r\n return ctx -> priv;\r\n }\r\n return (void *)0;\r\n}\r\n\r\nstatic const AVClass *filter_child_class_next(const AVClass *prev)\r\n{\r\n AVFilter **filter_ptr = ((void *)0);\r\n\r\n while(prev && *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class == prev) {\r\n break; \r\n }\r\n\r\n if (prev && !( *filter_ptr)) {\r\n return ((void *)0);\r\n }\r\n\r\n while( *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class) {\r\n return ( *filter_ptr) -> priv_class;\r\n }\r\n return ((void *)0);\r\n}\r\nstatic const AVClass avfilter_class = {.class_name = \"AVFilter\", .item_name = default_filter_name, .version = 52 << 16 | 18 << 8 | 100, .category = AV_CLASS_CATEGORY_FILTER, .child_next = filter_child_next, .child_class_next = filter_child_class_next};\r\n\r\nconst AVClass *avfilter_get_class()\r\n{\r\n return &avfilter_class;\r\n}\r\n\r\nint avfilter_open(AVFilterContext **filter_ctx,AVFilter *filter,const char *inst_name)\r\n{\r\n AVFilterContext *ret;\r\n *filter_ctx = ((void *)0);\r\n if (!filter) {\r\n return - 22;\r\n }\r\n ret = (av_mallocz(sizeof(AVFilterContext )));\r\n if (!ret) {\r\n return - '\\f';\r\n }\r\n ret -> av_class = &avfilter_class;\r\n ret -> filter = filter;\r\n ret -> name = (inst_name?av_strdup(inst_name) : ((void *)0));\r\n if (filter -> priv_size) {\r\n ret -> priv = av_mallocz((filter -> priv_size));\r\n if (!ret -> priv) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_inputs = (pad_count(filter -> inputs));\r\n if (ret -> nb_inputs) {\r\n ret -> input_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_inputs)));\r\n if (!ret -> input_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> input_pads),(filter -> inputs),sizeof(AVFilterPad ) * (ret -> nb_inputs));\r\n ret -> inputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_inputs)));\r\n if (!ret -> inputs) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_outputs = (pad_count(filter -> outputs));\r\n if (ret -> nb_outputs) {\r\n ret -> output_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_outputs)));\r\n if (!ret -> output_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> output_pads),(filter -> outputs),sizeof(AVFilterPad ) * (ret -> nb_outputs));\r\n ret -> outputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_outputs)));\r\n if (!ret -> outputs) {\r\n goto err;\r\n }\r\n }\r\n#if FF_API_FOO_COUNT\r\n ret -> output_count = ret -> nb_outputs;\r\n ret -> input_count = ret -> nb_inputs;\r\n#endif\r\n *filter_ctx = ret;\r\n return 0;\r\n err:\r\n av_freep((&ret -> inputs));\r\n av_freep((&ret -> input_pads));\r\n ret -> nb_inputs = 0;\r\n av_freep((&ret -> outputs));\r\n av_freep((&ret -> output_pads));\r\n ret -> nb_outputs = 0;\r\n av_freep((&ret -> priv));\r\n av_free(ret);\r\n return - '\\f';\r\n}\r\n\r\nvoid avfilter_free(AVFilterContext *filter)\r\n{\r\n int i;\r\n AVFilterLink *link;\r\n if (!filter) {\r\n return ;\r\n }\r\n if (filter -> filter -> uninit) {\r\n (filter -> filter -> uninit)(filter);\r\n }\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n if (link = filter -> inputs[i]) {\r\n if (link -> src) {\r\n link -> src -> outputs[link -> srcpad - link -> src -> output_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n for (i = 0; i < filter -> nb_outputs; i++) {\r\n if (link = filter -> outputs[i]) {\r\n if (link -> dst) {\r\n link -> dst -> inputs[link -> dstpad - link -> dst -> input_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n av_freep((&filter -> name));\r\n av_freep((&filter -> input_pads));\r\n av_freep((&filter -> output_pads));\r\n av_freep((&filter -> inputs));\r\n av_freep((&filter -> outputs));\r\n av_freep((&filter -> priv));\r\n while(filter -> command_queue){\r\n ff_command_queue_pop(filter);\r\n }\r\n av_free(filter);\r\n}\r\n\r\nint avfilter_init_filter(AVFilterContext *filter,const char *args,void *opaque)\r\n{\r\n int ret = 0;\r\n if (filter -> filter -> init_opaque) {\r\n ret = ((filter -> filter -> init_opaque)(filter,args,opaque));\r\n }\r\n else {\r\n if (filter -> filter -> init) {\r\n ret = ((filter -> filter -> init)(filter,args));\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nconst char *avfilter_pad_get_name(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . name;\r\n}\r\n\r\nenum AVMediaType avfilter_pad_get_type(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . type;\r\n}\r\n\r\nstatic int default_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n return ff_filter_frame(link -> dst -> outputs[0],frame);\r\n}\r\n\r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int (*filter_frame)(AVFilterLink *, AVFilterBufferRef *);\r\n AVFilterPad *src = link -> srcpad;\r\n AVFilterPad *dst = link -> dstpad;\r\n AVFilterBufferRef *out;\r\n int perms;\r\n int ret;\r\n AVFilterCommand *cmd = link -> dst -> command_queue;\r\n int64_t pts;\r\n if (link -> closed) {\r\n avfilter_unref_buffer(frame);\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (!(filter_frame = dst -> filter_frame)) {\r\n filter_frame = default_filter_frame;\r\n }\r\n (void )0;\r\n frame -> perms &= ~src -> rej_perms;\r\n perms = frame -> perms;\r\n if (frame -> linesize[0] < 0) {\r\n perms |= 0x20;\r\n }\r\n\r\n if ((dst -> min_perms & perms) != dst -> min_perms || dst -> rej_perms & perms) {\r\n av_log((link -> dst),48,\"Copying data in avfilter (have perms %x, need %x, reject %x)\\n\",perms,link -> dstpad -> min_perms,link -> dstpad -> rej_perms);\r\n\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n out = ff_get_video_buffer(link,dst -> min_perms,link -> w,link -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n out = ff_get_audio_buffer(link,dst -> min_perms,frame -> audio -> nb_samples);\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n if (!out) {\r\n avfilter_unref_buffer(frame);\r\n return - '\\f';\r\n }\r\n avfilter_copy_buffer_ref_props(out,frame);\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n av_image_copy(out -> data,out -> linesize,((const uint8_t **)(frame -> data)),(frame -> linesize),(frame -> format),frame -> video -> w,frame -> video -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n av_samples_copy(out -> extended_data,(frame -> extended_data),0,0,frame -> audio -> nb_samples,av_get_channel_layout_nb_channels(frame -> audio -> channel_layout),(frame -> format));\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n avfilter_unref_buffer(frame);\r\n }\r\n else {\r\n out = frame;\r\n }\r\n while(cmd && cmd -> time <= (out -> pts) * av_q2d(link -> time_base)){\r\n av_log((link -> dst),48,\"Processing command time:%f command:%s arg:%s\\n\",cmd -> time,cmd -> command,cmd -> arg);\r\n avfilter_process_command(link -> dst,(cmd -> command),(cmd -> arg),0,0,cmd -> flags);\r\n ff_command_queue_pop(link -> dst);\r\n cmd = link -> dst -> command_queue;\r\n }\r\n pts = out -> pts;\r\n ret = filter_frame(link,out);\r\n ff_update_link_current_pts(link,pts);\r\n return ret;\r\n}\r\n\r\nstatic int ff_filter_frame_needs_framing(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int insamples = frame -> audio -> nb_samples;\r\n int inpos = 0;\r\n int nb_samples;\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n int nb_channels = frame -> audio -> channels;\r\n int ret = 0;\r\n\r\n while(insamples){\r\n if (!pbuf) {\r\n AVRational samples_tb = {(1), link -> sample_rate};\r\n int perms = link -> dstpad -> min_perms | 0x02;\r\n pbuf = ff_get_audio_buffer(link,perms,link -> partial_buf_size);\r\n if (!pbuf) {\r\n av_log((link -> dst),24,\"Samples dropped due to memory allocation failure.\\n\");\r\n return 0;\r\n }\r\n avfilter_copy_buffer_ref_props(pbuf,frame);\r\n pbuf -> pts = frame -> pts + av_rescale_q(inpos,samples_tb,link -> time_base);\r\n pbuf -> audio -> nb_samples = 0;\r\n }\r\n nb_samples = (insamples > link -> partial_buf_size - pbuf -> audio -> nb_samples?link -> partial_buf_size - pbuf -> audio -> nb_samples : insamples);\r\n av_samples_copy(pbuf -> extended_data,(frame -> extended_data),pbuf -> audio -> nb_samples,inpos,nb_samples,nb_channels,(link -> format));\r\n inpos += nb_samples;\r\n insamples -= nb_samples;\r\n pbuf -> audio -> nb_samples += nb_samples;\r\n if (pbuf -> audio -> nb_samples >= link -> min_samples) {\r\n ret = ff_filter_frame_framed(link,pbuf);\r\n pbuf = ((void *)0);\r\n }\r\n }\r\n avfilter_unref_buffer(frame);\r\n link -> partial_buf = pbuf;\r\n return ret;\r\n}\r\n\r\nint ff_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"filter_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\" \");\r\n }\r\n }while (0);\r\n ff_tlog_ref(((void *)0),frame,1);\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n if (strcmp(link -> dst -> filter -> name,\"scale\")) {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n }\r\n else {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_AUDIO && link -> min_samples && (link -> partial_buf || frame -> audio -> nb_samples < link -> min_samples || frame -> audio -> nb_samples > link -> max_samples)) {\r\n return ff_filter_frame_needs_framing(link,frame);\r\n }\r\n else {\r\n return ff_filter_frame_framed(link,frame);\r\n }\r\n}\r\n\r\nvoid handle_taint(char *synn_detassel)\r\n{\r\n int finable_sardinia = 7;\r\n char **arioian_rehabilitative = 0;\r\n char **recallist_thalerophagous = 0;\r\n char *vanillic_scrobicula[63] = {0};\r\n ++global_variable;;\r\n if (synn_detassel != 0) {;\r\n vanillic_scrobicula[43] = synn_detassel;\r\n arioian_rehabilitative = vanillic_scrobicula;\r\n recallist_thalerophagous = arioian_rehabilitative + 5;\r\n aluminium_coachability(finable_sardinia,recallist_thalerophagous);\r\n }\r\n}\r\n\r\nvoid aluminium_coachability(int empyreans_dudevant,char **aquamarines_hardline)\r\n{\r\n unsigned int **buffer_array = 0;\r\n unsigned int i;\r\n unsigned int size;\r\n int num;\r\n unsigned int trace_counter = 0;\r\n char *sophy_bronteon = 0;\r\n ++global_variable;\r\n empyreans_dudevant--;\r\n if (empyreans_dudevant > 0) {\r\n aluminium_coachability(empyreans_dudevant,aquamarines_hardline);\r\n return ;\r\n }\r\n sophy_bronteon = ((char *)(aquamarines_hardline - 5)[43]);\r\n \r\n num = atoi(sophy_bronteon);\r\n \r\n if (num > 0 && num < 4294967295U / sizeof(unsigned int **)) {\r\n size = 100000;\r\n buffer_array = ((unsigned int **)(malloc(num * sizeof(unsigned int *))));\r\n \r\n \r\n \r\n \r\n for (i = 0; i < num; ++i) {\r\n buffer_array[i] = 0;\r\n printf(\"evaluating input\\n\");\r\n while(buffer_array[i] == 0){\r\n \r\n \r\n buffer_array[i] = ((unsigned int *)(malloc(size * sizeof(unsigned int ))));\r\n if (trace_counter % 1000 == 0) {\r\n if (buffer_array[i] != 0) {\r\n \r\n \r\n } else {\r\n \r\n \r\n }\r\n }\r\n trace_counter ++;\r\n }\r\n if (buffer_array[i] != 0) {\r\n memset(buffer_array[i],0,size * sizeof(unsigned int ));\r\n }\r\n else\r\n break;\r\n }\r\n }\r\n \r\n \r\n \r\n printf(\"finished evaluating\\n\");\r\n for (i = 0; i < num; ++i)\r\n if (buffer_array[i] != 0)\r\n free(buffer_array[i]);\r\n if (buffer_array != 0) {\r\n free(buffer_array);\r\n }\r\n \r\n;\r\n if ((aquamarines_hardline - 5)[43] != 0) \r\n free(((char *)(aquamarines_hardline - 5)[43]));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "400"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include \"eng_int.h\"\r\n#include <openssl/rand.h>\r\n\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include </trace.h> \r\n#include <fcntl.h> \r\n#include <math.h> \r\n#include <signal.h> \r\nint rsr_findable = 0;\r\nint global_variable;\r\n\r\nunion hayfield_umbret \r\n{\r\n char *deluded_kraul;\r\n double nonaddress_semisoft;\r\n char *hayweed_postamniotic;\r\n char evenworthy_americas;\r\n int tibbu_buyable;\r\n}\r\n;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid yseulta_felonry(union hayfield_umbret quincuncially_immunity);\r\nvoid nike_boilinglike(union hayfield_umbret solidomind_devoiced);\r\nvoid sassoon_deidamia(union hayfield_umbret supraconscious_outweight);\r\nvoid meekhearted_ketway(union hayfield_umbret termor_cycadophyta);\r\nvoid anaplerotic_alc(union hayfield_umbret convocational_antefurcae);\r\nvoid wordishness_hums(union hayfield_umbret gharnao_unlocalising);\r\nvoid podites_neemba(union hayfield_umbret unfraternally_woodhouse);\r\nvoid ryegrasses_irreprovable(union hayfield_umbret nemalite_desterilize);\r\nvoid avouchable_unsloped(union hayfield_umbret leavings_orthocephaly);\r\nvoid hugeous_meanderer(union hayfield_umbret ccip_radiatics);\r\nint SIZE = 50;\r\nchar *playful_platypus;\r\nstruct data {\r\n char *data;\r\n};\r\nstruct data *Data;\r\nint comp (const void * a, const void * b)\r\n{\r\n if (a > b) {\r\n return -1;\r\n }\r\n else if (a < b) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\nint pmoc (const void * a, const void * b)\r\n{\r\n return -1 * comp(a, b);\r\n}\r\nvoid readFile(char *filename) {\r\n FILE *fifo;\r\n char ch;\r\n \r\n fifo = fopen(filename, \"r\");\r\n if (fifo != NULL) {\r\n while ((ch = fgetc(fifo)) != EOF) {\r\n printf(\"%c\", ch);\r\n }\r\n fclose(fifo);\r\n }\r\n \r\n}\r\nvoid sig_handler (int sig) {\r\n printf(\"In sig_handler\\n\");\r\n \r\n \r\n \r\n \r\n \r\n if (playful_platypus[0] != '\\0') { \r\n printf(playful_platypus);\r\n }\r\n \r\n}\r\nvoid waitForSig(char *sleepFile) {\r\n int fd;\r\n char outStr[25] = {0};\r\n char filename[500] = {0};\r\n \r\n printf(\"In waitForSig\\n\");\r\n sprintf(outStr, \"%d.pid\", getpid());\r\n strcat(filename, \"/opt//workspace/testData/\");\r\n strcat(filename, outStr);\r\n if ((fd = open(filename, O_CREAT|O_WRONLY, 0666)) == -1) {\r\n \r\n printf(\"Error opening file.\");\r\n }\r\n else {\r\n if (write(fd, \"q\", sizeof(char)) == -1) {\r\n \r\n printf(\"Error writing to file.\");\r\n }\r\n if (close(fd) == -1) {\r\n \r\n printf(\"Error closing file.\");\r\n }\r\n \r\n readFile(sleepFile);\r\n }\r\n}\r\n\r\nENGINE *ENGINE_new()\r\n{\r\n ENGINE *ret;\r\n ret = ((ENGINE *)(CRYPTO_malloc(((int )(sizeof(ENGINE ))),\"eng_lib.c\",68)));\r\n if (ret == ((void *)0)) {\r\n ERR_put_error(38,122,1 | 64,\"eng_lib.c\",71);\r\n return ((void *)0);\r\n }\r\n memset(ret,0,sizeof(ENGINE ));\r\n ret -> struct_ref = 1;\r\n CRYPTO_new_ex_data(9,ret,&ret -> ex_data);\r\n return ret;\r\n}\r\n\r\n\r\nvoid engine_set_all_null(ENGINE *e)\r\n{\r\n e -> id = ((void *)0);\r\n e -> name = ((void *)0);\r\n e -> rsa_meth = ((void *)0);\r\n e -> dsa_meth = ((void *)0);\r\n e -> dh_meth = ((void *)0);\r\n e -> rand_meth = ((void *)0);\r\n e -> store_meth = ((void *)0);\r\n e -> ciphers = ((void *)0);\r\n e -> digests = ((void *)0);\r\n e -> destroy = ((void *)0);\r\n e -> init = ((void *)0);\r\n e -> finish = ((void *)0);\r\n e -> ctrl = ((void *)0);\r\n e -> load_privkey = ((void *)0);\r\n e -> load_pubkey = ((void *)0);\r\n e -> cmd_defns = ((void *)0);\r\n e -> flags = 0;\r\n}\r\n\r\nint engine_free_util(ENGINE *e,int locked)\r\n{\r\n int i;\r\n if (e == ((void *)0)) {\r\n ERR_put_error(38,108,3 | 64,\"eng_lib.c\",112);\r\n return 0;\r\n }\r\n if (locked) {\r\n i = CRYPTO_add_lock(&e -> struct_ref,- 1,30,\"eng_lib.c\",116);\r\n }\r\n else {\r\n i = --e -> struct_ref;\r\n }\r\n if (i > 0) {\r\n return 1;\r\n }\r\n#ifdef REF_CHECK\r\n#endif\r\n\r\n engine_pkey_meths_free(e);\r\n engine_pkey_asn1_meths_free(e);\r\n\r\n if (e -> destroy) {\r\n (e -> destroy)(e);\r\n }\r\n CRYPTO_free_ex_data(9,e,&e -> ex_data);\r\n CRYPTO_free(e);\r\n return 1;\r\n}\r\n\r\nint ENGINE_free(ENGINE *e)\r\n{\r\n return engine_free_util(e,1);\r\n}\r\n\r\n\r\nstatic struct stack_st_ENGINE_CLEANUP_ITEM *cleanup_stack = ((void *)0);\r\n\r\nstatic int int_cleanup_check(int create)\r\n{\r\n if (cleanup_stack) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n cleanup_stack = ((struct stack_st_ENGINE_CLEANUP_ITEM *)(sk_new_null()));\r\n return cleanup_stack?1 : 0;\r\n}\r\n\r\nstatic ENGINE_CLEANUP_ITEM *int_cleanup_item(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item = (CRYPTO_malloc(((int )(sizeof(ENGINE_CLEANUP_ITEM ))),\"eng_lib.c\",162));\r\n if (!item) {\r\n return ((void *)0);\r\n }\r\n item -> cb = cb;\r\n return item;\r\n}\r\n\r\nvoid engine_cleanup_add_first(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_insert(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))),0);\r\n }\r\n}\r\n\r\nvoid engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_push(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))));\r\n }\r\n}\r\n\r\n\r\nstatic void engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)\r\n{\r\n ( *item -> cb)();\r\n CRYPTO_free(item);\r\n}\r\n\r\nvoid ENGINE_cleanup()\r\n{\r\n union hayfield_umbret stromatolite_aurify;\r\n int sideslipping_auctions = 119;\r\n char *endamoeba_warerooms;;\r\n if (__sync_bool_compare_and_swap(&rsr_findable,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&endamoeba_warerooms,\"9404\",sideslipping_auctions);\r\n if (endamoeba_warerooms != 0) {;\r\n stromatolite_aurify . deluded_kraul = endamoeba_warerooms;\r\n yseulta_felonry(stromatolite_aurify);\r\n }\r\n }\r\n }\r\n ;\r\n if (int_cleanup_check(0)) {\r\n sk_pop_free(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void (*)(void *))engine_cleanup_cb_free));\r\n cleanup_stack = ((void *)0);\r\n }\r\n\r\n RAND_set_rand_method(((void *)0));\r\n}\r\n\r\n\r\nint ENGINE_get_ex_new_index(long argl,void *argp,CRYPTO_EX_new *new_func,CRYPTO_EX_dup *dup_func,CRYPTO_EX_free *free_func)\r\n{\r\n return CRYPTO_get_ex_new_index(9,argl,argp,new_func,dup_func,free_func);\r\n}\r\n\r\nint ENGINE_set_ex_data(ENGINE *e,int idx,void *arg)\r\n{\r\n return CRYPTO_set_ex_data(&e -> ex_data,idx,arg);\r\n}\r\n\r\nvoid *ENGINE_get_ex_data(const ENGINE *e,int idx)\r\n{\r\n return CRYPTO_get_ex_data(&e -> ex_data,idx);\r\n}\r\n\r\n\r\nint ENGINE_set_id(ENGINE *e,const char *id)\r\n{\r\n if (id == ((void *)0)) {\r\n ERR_put_error(38,129,3 | 64,\"eng_lib.c\",229);\r\n return 0;\r\n }\r\n e -> id = id;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_name(ENGINE *e,const char *name)\r\n{\r\n if (name == ((void *)0)) {\r\n ERR_put_error(38,130,3 | 64,\"eng_lib.c\",241);\r\n return 0;\r\n }\r\n e -> name = name;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_destroy_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR destroy_f)\r\n{\r\n e -> destroy = destroy_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_init_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR init_f)\r\n{\r\n e -> init = init_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_finish_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR finish_f)\r\n{\r\n e -> finish = finish_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_ctrl_function(ENGINE *e,ENGINE_CTRL_FUNC_PTR ctrl_f)\r\n{\r\n e -> ctrl = ctrl_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_flags(ENGINE *e,int flags)\r\n{\r\n e -> flags = flags;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_cmd_defns(ENGINE *e,const ENGINE_CMD_DEFN *defns)\r\n{\r\n e -> cmd_defns = defns;\r\n return 1;\r\n}\r\n\r\nconst char *ENGINE_get_id(const ENGINE *e)\r\n{\r\n return e -> id;\r\n}\r\n\r\nconst char *ENGINE_get_name(const ENGINE *e)\r\n{\r\n return e -> name;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e)\r\n{\r\n return e -> destroy;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e)\r\n{\r\n return e -> init;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e)\r\n{\r\n return e -> finish;\r\n}\r\n\r\nENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e)\r\n{\r\n return e -> ctrl;\r\n}\r\n\r\nint ENGINE_get_flags(const ENGINE *e)\r\n{\r\n return e -> flags;\r\n}\r\n\r\nconst ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e)\r\n{\r\n return e -> cmd_defns;\r\n}\r\n\r\nstatic int internal_static_hack = 0;\r\n\r\nvoid *ENGINE_get_static_state()\r\n{\r\n return (&internal_static_hack);\r\n}\r\n\r\nvoid yseulta_felonry(union hayfield_umbret quincuncially_immunity)\r\n{\r\n ++global_variable;;\r\n nike_boilinglike(quincuncially_immunity);\r\n}\r\n\r\nvoid nike_boilinglike(union hayfield_umbret solidomind_devoiced)\r\n{\r\n ++global_variable;;\r\n sassoon_deidamia(solidomind_devoiced);\r\n}\r\n\r\nvoid sassoon_deidamia(union hayfield_umbret supraconscious_outweight)\r\n{\r\n ++global_variable;;\r\n meekhearted_ketway(supraconscious_outweight);\r\n}\r\n\r\nvoid meekhearted_ketway(union hayfield_umbret termor_cycadophyta)\r\n{\r\n ++global_variable;;\r\n anaplerotic_alc(termor_cycadophyta);\r\n}\r\n\r\nvoid anaplerotic_alc(union hayfield_umbret convocational_antefurcae)\r\n{\r\n ++global_variable;;\r\n wordishness_hums(convocational_antefurcae);\r\n}\r\n\r\nvoid wordishness_hums(union hayfield_umbret gharnao_unlocalising)\r\n{\r\n ++global_variable;;\r\n podites_neemba(gharnao_unlocalising);\r\n}\r\n\r\nvoid podites_neemba(union hayfield_umbret unfraternally_woodhouse)\r\n{\r\n ++global_variable;;\r\n ryegrasses_irreprovable(unfraternally_woodhouse);\r\n}\r\n\r\nvoid ryegrasses_irreprovable(union hayfield_umbret nemalite_desterilize)\r\n{\r\n ++global_variable;;\r\n avouchable_unsloped(nemalite_desterilize);\r\n}\r\n\r\nvoid avouchable_unsloped(union hayfield_umbret leavings_orthocephaly)\r\n{\r\n ++global_variable;;\r\n hugeous_meanderer(leavings_orthocephaly);\r\n}\r\n\r\nvoid hugeous_meanderer(union hayfield_umbret ccip_radiatics)\r\n{\r\n int i;\r\n char *temp;\r\n char *sleepFile;\r\n char *sebacic_dyehouse = 0;\r\n ++global_variable;;\r\n sebacic_dyehouse = ((char *)ccip_radiatics . deluded_kraul);\r\n \r\n Data = malloc(sizeof(struct data));\r\n if (Data) {\r\n sleepFile = malloc(sizeof(char) * (strlen(sebacic_dyehouse) + 1));\r\n Data->data = malloc(sizeof(char) * (strlen(sebacic_dyehouse) + 1));\r\n if (Data->data) {\r\n if ((sscanf(sebacic_dyehouse, \"%s %s\",\r\n sleepFile,\r\n Data->data) == 2) &&\r\n (strlen(Data->data) != 0) &&\r\n (strlen(sleepFile) != 0))\r\n {\r\n \r\n \r\n if (signal(SIGUSR1, sig_handler) == SIG_ERR) {\r\n \r\n printf (\"Error catching SIGNUSR1!\\n\");\r\n }\r\n playful_platypus = malloc(sizeof(char) * (SIZE + 1));\r\n i = 0;\r\n while (Data->data[i] != '\\0') { \r\n if (i < SIZE) {\r\n playful_platypus[i] = Data->data[i];\r\n i++;\r\n } else { \r\n playful_platypus[SIZE] = '\\0';\r\n \r\n \r\n SIZE *= 2;\r\n temp = malloc(sizeof(char) * SIZE);\r\n strcpy(temp, playful_platypus);\r\n free(playful_platypus);\r\n playful_platypus = NULL; \r\n \r\n waitForSig(sleepFile);\r\n \r\n playful_platypus = temp;\r\n \r\n }\r\n }\r\n free (playful_platypus);\r\n signal(SIGUSR1, SIG_IGN); \r\n } else {\r\n \r\n printf(\"Error parsing data\\n\");\r\n }\r\n free(Data->data);\r\n }\r\n free (Data);\r\n }\r\n \r\n;\r\n if (ccip_radiatics . deluded_kraul != 0) \r\n free(((char *)ccip_radiatics . deluded_kraul));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "828"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <openssl/err.h>\r\n#include <openssl/bio.h>\r\n\r\n#ifndef OPENSSL_NO_ERR\r\n#define ERR_FUNC(func) ERR_PACK(ERR_LIB_BIO,func,0)\r\n#define ERR_REASON(reason) ERR_PACK(ERR_LIB_BIO,0,reason)\r\n#include <string.h> \r\n#include <sys/stat.h> \r\n#include <stdio.h> \r\n#include </trace.h> \r\n#include <ctype.h> \r\nstatic ERR_STRING_DATA BIO_str_functs[] = {{((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )100) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"ACPT_STATE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )101) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_accept\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )102) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_BER_GET_HEADER\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )131) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_callback_ctrl\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )103) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_ctrl\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )120) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_gethostbyname\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )104) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_gets\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )105) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_accept_socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )106) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_host_ip\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )107) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_port\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )121) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_MAKE_PAIR\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )108) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )109) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new_file\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )126) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new_mem_buf\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )123) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nread\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )124) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nread0\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )125) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nwrite\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )122) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nwrite0\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )110) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_puts\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )111) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_read\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )112) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_sock_init\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )113) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_write\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )114) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BUFFER_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )127) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"CONN_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )115) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"CONN_STATE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )132) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"DGRAM_SCTP_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )116) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"FILE_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )130) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"FILE_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )129) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"LINEBUFFER_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )128) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"MEM_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )117) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"MEM_WRITE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )118) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"SSL_new\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )119) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"WSASTARTUP\")}, {(0), (((void *)0))}};\r\nstatic ERR_STRING_DATA BIO_str_reasons[] = {{((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )100) & 0xfffL), (\"accept error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )101) & 0xfffL), (\"bad fopen mode\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )102) & 0xfffL), (\"bad hostname lookup\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )124) & 0xfffL), (\"broken pipe\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )103) & 0xfffL), (\"connect error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )127) & 0xfffL), (\"EOF on memory BIO\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )104) & 0xfffL), (\"error setting nbio\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )105) & 0xfffL), (\"error setting nbio on accepted socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )106) & 0xfffL), (\"error setting nbio on accept socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )107) & 0xfffL), (\"gethostbyname addr is not af inet\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )125) & 0xfffL), (\"invalid argument\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )108) & 0xfffL), (\"invalid ip address\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )123) & 0xfffL), (\"in use\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )109) & 0xfffL), (\"keepalive\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )110) & 0xfffL), (\"nbio connect error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )111) & 0xfffL), (\"no accept port specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )112) & 0xfffL), (\"no hostname specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )113) & 0xfffL), (\"no port defined\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )114) & 0xfffL), (\"no port specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )128) & 0xfffL), (\"no such file\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )115) & 0xfffL), (\"null parameter\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )116) & 0xfffL), (\"tag mismatch\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )117) & 0xfffL), (\"unable to bind socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )118) & 0xfffL), (\"unable to create socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )119) & 0xfffL), (\"unable to listen socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )120) & 0xfffL), (\"uninitialized\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )121) & 0xfffL), (\"unsupported method\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )126) & 0xfffL), (\"write to read only BIO\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )122) & 0xfffL), (\"WSAStartup\")}, {(0), (((void *)0))}};\r\n#endif\r\nint edneyville_unwwove = 0;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid urlDecode(char *src, char *dst) {\r\n char a, b;\r\n while (*src) {\r\n if ((*src == '%') &&\r\n ((a = src[1]) && (b = src[2])) &&\r\n (isxdigit(a) && isxdigit(b))) {\r\n if (a >= 'a')\r\n a -= 'a'-'A';\r\n if (a >= 'A')\r\n a -= ('A' - 10);\r\n else\r\n a -= '0';\r\n if (b >= 'a')\r\n b -= 'a'-'A';\r\n if (b >= 'A')\r\n b -= ('A' - 10);\r\n else\r\n b -= '0';\r\n *dst++ = 16*a+b;\r\n src+=3;\r\n } else {\r\n *dst++ = *src++;\r\n }\r\n }\r\n *dst++ = '\\0';\r\n}\r\nint isValid(char *src) {\r\n int i = 0;\r\n while (src[i] != '\\0') {\r\n if(src[i] == ';') {\r\n if (i == 0 || src[i-1] != '\\\\') {\r\n return 0;\r\n }\r\n }\r\n else if(src[i] == '|') {\r\n if (i == 0 || src[i-1] != '\\\\') {\r\n return 0;\r\n }\r\n }\r\n else if(src[i] == '&') {\r\n if (i == 0 || src[i-1] != '\\\\') {\r\n return 0;\r\n }\r\n }\r\n i++;\r\n }\r\n return 1;\r\n}\r\n\r\nvoid ERR_load_BIO_strings()\r\n{\r\n FILE *fpipe;\r\n char buffer[100];\r\n char *parsed_input;\r\n char command_buffer[1000];\r\n char *command_str = \"nslookup \";\r\n char *ochrea_nellie = 0;\r\n int verticillus_difluoride;\r\n int triga_reoccasion;\r\n int perisplenitis_overgilted = 0;\r\n char *vility_unappliqued = 0;\r\n char *squid_bassus;;\r\n if (__sync_bool_compare_and_swap(&edneyville_unwwove,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n squid_bassus = getenv(\"VINOSITY_DISPERSEDLY\");\r\n if (squid_bassus != 0) {;\r\n perisplenitis_overgilted = ((int )(strlen(squid_bassus)));\r\n vility_unappliqued = ((char *)(malloc(perisplenitis_overgilted + 1)));\r\n if (vility_unappliqued == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n memset(vility_unappliqued,0,perisplenitis_overgilted + 1);\r\n memcpy(vility_unappliqued,squid_bassus,perisplenitis_overgilted);\r\n triga_reoccasion = 5;\r\n while(1 == 1){\r\n triga_reoccasion = triga_reoccasion * 2;\r\n triga_reoccasion = triga_reoccasion + 2;\r\n if (triga_reoccasion > 1000) {\r\n break; \r\n }\r\n }\r\n verticillus_difluoride = triga_reoccasion;\r\n ochrea_nellie = ((char *)vility_unappliqued);\r\n \r\n if (strlen(ochrea_nellie) < 1000 - strlen(command_str)) {\r\n \r\n \r\n \r\n if (isValid(ochrea_nellie) == 1) {\r\n parsed_input = malloc((strlen(ochrea_nellie)+1) * sizeof(char));\r\n urlDecode(ochrea_nellie, parsed_input);\r\n snprintf(command_buffer, 1000, \"%s%s\",command_str, parsed_input);\r\n \r\n \r\n \r\n \r\n fpipe = popen(command_buffer,\"r\");\r\n if (fpipe != 0) {\r\n while(fgets(buffer,100,fpipe) != 0) {\r\n printf(buffer);\r\n }\r\n pclose(fpipe);\r\n }\r\n }\r\n \r\n }\r\n \r\n;\r\n if (vility_unappliqued != 0) \r\n free(((char *)vility_unappliqued));\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n#ifndef OPENSSL_NO_ERR\r\n if (ERR_func_error_string(BIO_str_functs[0] . error) == ((void *)0)) {\r\n ERR_load_strings(0,BIO_str_functs);\r\n ERR_load_strings(0,BIO_str_reasons);\r\n }\r\n#endif\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "78"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <ctype.h>\r\n#include <openssl/crypto.h>\r\n#include \"cryptlib.h\"\r\n#include <openssl/conf.h>\r\n#include <openssl/dso.h>\r\n#include <openssl/x509.h>\r\n#define DSO_mod_init_name \"OPENSSL_init\"\r\n#define DSO_mod_finish_name \"OPENSSL_finish\"\r\n\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <stdarg.h> \r\n#include </trace.h> \r\n\r\nstruct conf_module_st \r\n{\r\n\r\n DSO *dso;\r\n\r\n char *name;\r\n\r\n conf_init_func *init;\r\n\r\n conf_finish_func *finish;\r\n\r\n int links;\r\n void *usr_data;\r\n}\r\n;\r\n\r\n\r\nstruct conf_imodule_st \r\n{\r\n CONF_MODULE *pmod;\r\n char *name;\r\n char *value;\r\n unsigned long flags;\r\n void *usr_data;\r\n}\r\n;\r\nstatic struct stack_st_CONF_MODULE *supported_modules = ((void *)0);\r\nstatic struct stack_st_CONF_IMODULE *initialized_modules = ((void *)0);\r\nstatic void module_free(CONF_MODULE *md);\r\nstatic void module_finish(CONF_IMODULE *imod);\r\nstatic int module_run(const CONF *cnf,char *name,char *value,unsigned long flags);\r\nstatic CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc);\r\nstatic CONF_MODULE *module_find(char *name);\r\nstatic int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf);\r\nstatic CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags);\r\n\r\nint waggling_wynns = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid histophyly_cumulene(int saturnism_chibrit,... );\r\nvoid cleanup(FILE **ptrs,int size)\r\n{\r\n int i = 0;\r\n \r\n for (i = 0; i < size; i++) {\r\n if (ptrs[i] != 0) {\r\n fclose(ptrs[i]);\r\n }\r\n }\r\n}\r\n\r\nint CONF_modules_load(const CONF *cnf,const char *appname,unsigned long flags)\r\n{\r\n struct stack_st_CONF_VALUE *values;\r\n CONF_VALUE *vl;\r\n char *vsection = ((void *)0);\r\n int ret;\r\n int i;\r\n if (!cnf) {\r\n return 1;\r\n }\r\n if (appname) {\r\n vsection = NCONF_get_string(cnf,((void *)0),appname);\r\n }\r\n if (!appname || !vsection && flags & 0x20) {\r\n vsection = NCONF_get_string(cnf,((void *)0),\"openssl_conf\");\r\n }\r\n if (!vsection) {\r\n ERR_clear_error();\r\n return 1;\r\n }\r\n values = NCONF_get_section(cnf,vsection);\r\n if (!values) {\r\n return 0;\r\n }\r\n for (i = 0; i < sk_num(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0))))); i++) {\r\n vl = ((CONF_VALUE *)(sk_value(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0)))),i)));\r\n ret = module_run(cnf,vl -> name,vl -> value,flags);\r\n if (ret <= 0) {\r\n if (!(flags & 0x1)) {\r\n return ret;\r\n }\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nint CONF_modules_load_file(const char *filename,const char *appname,unsigned long flags)\r\n{\r\n char *file = ((void *)0);\r\n CONF *conf = ((void *)0);\r\n int ret = 0;\r\n conf = NCONF_new(((void *)0));\r\n if (!conf) {\r\n goto err;\r\n }\r\n if (filename == ((void *)0)) {\r\n file = CONF_get1_default_config_file();\r\n if (!file) {\r\n goto err;\r\n }\r\n }\r\n else {\r\n file = ((char *)filename);\r\n }\r\n if (NCONF_load(conf,file,((void *)0)) <= 0) {\r\n if (flags & 0x10 && ((int )(ERR_peek_last_error() & 0xfffL)) == 114) {\r\n ERR_clear_error();\r\n ret = 1;\r\n }\r\n goto err;\r\n }\r\n ret = CONF_modules_load(conf,appname,flags);\r\n err:\r\n if (filename == ((void *)0)) {\r\n CRYPTO_free(file);\r\n }\r\n NCONF_free(conf);\r\n return ret;\r\n}\r\n\r\nstatic int module_run(const CONF *cnf,char *name,char *value,unsigned long flags)\r\n{\r\n CONF_MODULE *md;\r\n int ret;\r\n md = module_find(name);\r\n\r\n if (!md && !(flags & 0x8)) {\r\n md = module_load_dso(cnf,name,value,flags);\r\n }\r\n if (!md) {\r\n if (!(flags & 0x4)) {\r\n ERR_put_error(14,118,113,\"conf_mod.c\",222);\r\n ERR_add_error_data(2,\"module=\",name);\r\n }\r\n return - 1;\r\n }\r\n ret = module_init(md,name,value,cnf);\r\n if (ret <= 0) {\r\n if (!(flags & 0x4)) {\r\n char rcode[13UL];\r\n ERR_put_error(14,118,109,\"conf_mod.c\",235);\r\n BIO_snprintf(rcode,sizeof(rcode),\"%-8d\",ret);\r\n ERR_add_error_data(6,\"module=\",name,\", value=\",value,\", retcode=\",rcode);\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags)\r\n{\r\n DSO *dso = ((void *)0);\r\n conf_init_func *ifunc;\r\n conf_finish_func *ffunc;\r\n char *path = ((void *)0);\r\n int errcode = 0;\r\n CONF_MODULE *md;\r\n\r\n path = NCONF_get_string(cnf,value,\"path\");\r\n if (!path) {\r\n ERR_clear_error();\r\n path = name;\r\n }\r\n dso = DSO_load(((void *)0),path,((void *)0),0);\r\n if (!dso) {\r\n errcode = 110;\r\n goto err;\r\n }\r\n ifunc = ((conf_init_func *)(DSO_bind_func(dso,\"OPENSSL_init\")));\r\n if (!ifunc) {\r\n errcode = 112;\r\n goto err;\r\n }\r\n ffunc = ((conf_finish_func *)(DSO_bind_func(dso,\"OPENSSL_finish\")));\r\n\r\n md = module_add(dso,name,ifunc,ffunc);\r\n if (!md) {\r\n goto err;\r\n }\r\n return md;\r\n err:\r\n if (dso) {\r\n DSO_free(dso);\r\n }\r\n ERR_put_error(14,117,errcode,\"conf_mod.c\",285);\r\n ERR_add_error_data(4,\"module=\",name,\", path=\",path);\r\n return ((void *)0);\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)\r\n{\r\n CONF_MODULE *tmod = ((void *)0);\r\n if (supported_modules == ((void *)0)) {\r\n supported_modules = ((struct stack_st_CONF_MODULE *)(sk_new_null()));\r\n }\r\n if (supported_modules == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n tmod = (CRYPTO_malloc(((int )(sizeof(CONF_MODULE ))),\"conf_mod.c\",299));\r\n if (tmod == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n tmod -> dso = dso;\r\n tmod -> name = BUF_strdup(name);\r\n tmod -> init = ifunc;\r\n tmod -> finish = ffunc;\r\n tmod -> links = 0;\r\n if (!sk_push(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),((void *)((1?tmod : ((CONF_MODULE *)0)))))) {\r\n CRYPTO_free(tmod);\r\n return ((void *)0);\r\n }\r\n return tmod;\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_find(char *name)\r\n{\r\n CONF_MODULE *tmod;\r\n int i;\r\n int nchar;\r\n char *p;\r\n p = strrchr(name,'.');\r\n if (p) {\r\n nchar = (p - name);\r\n }\r\n else {\r\n nchar = (strlen(name));\r\n }\r\n for (i = 0; i < sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))); i++) {\r\n tmod = ((CONF_MODULE *)(sk_value(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),i)));\r\n if (!strncmp((tmod -> name),name,nchar)) {\r\n return tmod;\r\n }\r\n }\r\n return ((void *)0);\r\n}\r\n\r\n\r\nstatic int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf)\r\n{\r\n int ret = 1;\r\n int init_called = 0;\r\n CONF_IMODULE *imod = ((void *)0);\r\n\r\n imod = (CRYPTO_malloc(((int )(sizeof(CONF_IMODULE ))),\"conf_mod.c\",355));\r\n if (!imod) {\r\n goto err;\r\n }\r\n imod -> pmod = pmod;\r\n imod -> name = BUF_strdup(name);\r\n imod -> value = BUF_strdup(value);\r\n imod -> usr_data = ((void *)0);\r\n if (!imod -> name || !imod -> value) {\r\n goto memerr;\r\n }\r\n\r\n if (pmod -> init) {\r\n ret = ((pmod -> init)(imod,cnf));\r\n init_called = 1;\r\n\r\n if (ret <= 0) {\r\n goto err;\r\n }\r\n }\r\n if (initialized_modules == ((void *)0)) {\r\n initialized_modules = ((struct stack_st_CONF_IMODULE *)(sk_new_null()));\r\n if (!initialized_modules) {\r\n ERR_put_error(14,115,1 | 64,\"conf_mod.c\",382);\r\n goto err;\r\n }\r\n }\r\n if (!sk_push(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0)))),((void *)((1?imod : ((CONF_IMODULE *)0)))))) {\r\n ERR_put_error(14,115,1 | 64,\"conf_mod.c\",389);\r\n goto err;\r\n }\r\n pmod -> links++;\r\n return ret;\r\n err:\r\n\r\n if (pmod -> finish && init_called) {\r\n (pmod -> finish)(imod);\r\n }\r\n memerr:\r\n if (imod) {\r\n if (imod -> name) {\r\n CRYPTO_free((imod -> name));\r\n }\r\n if (imod -> value) {\r\n CRYPTO_free((imod -> value));\r\n }\r\n CRYPTO_free(imod);\r\n }\r\n return - 1;\r\n}\r\n\r\n\r\nvoid CONF_modules_unload(int all)\r\n{\r\n void *hausas_pyranometer = 0;\r\n int chasmogamy_carrelli = 45;\r\n char *insulars_unhasty;\r\n int i;\r\n CONF_MODULE *md;\r\n if (__sync_bool_compare_and_swap(&waggling_wynns,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&insulars_unhasty,\"3682\",chasmogamy_carrelli);\r\n if (insulars_unhasty != 0) {;\r\n hausas_pyranometer = ((void *)insulars_unhasty);\r\n histophyly_cumulene(1,hausas_pyranometer);\r\n }\r\n }\r\n }\r\n CONF_modules_finish();\r\n\r\n for (i = sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))) - 1; i >= 0; i--) {\r\n md = ((CONF_MODULE *)(sk_value(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),i)));\r\n\r\n if ((md -> links > 0 || !md -> dso) && !all) {\r\n continue; \r\n }\r\n\r\n (void )((CONF_MODULE *)(sk_delete(((_STACK *)(1?supported_modules : ((struct stack_st_CONF_MODULE *)0))),i)));\r\n module_free(md);\r\n }\r\n if (sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))) == 0) {\r\n sk_free(((_STACK *)(1?supported_modules : ((struct stack_st_CONF_MODULE *)0))));\r\n supported_modules = ((void *)0);\r\n }\r\n}\r\n\r\n\r\nstatic void module_free(CONF_MODULE *md)\r\n{\r\n if (md -> dso) {\r\n DSO_free(md -> dso);\r\n }\r\n CRYPTO_free((md -> name));\r\n CRYPTO_free(md);\r\n}\r\n\r\n\r\nvoid CONF_modules_finish()\r\n{\r\n CONF_IMODULE *imod;\r\n while(sk_num(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0))))) > 0){\r\n imod = ((CONF_IMODULE *)(sk_pop(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0)))))));\r\n module_finish(imod);\r\n }\r\n sk_free(((_STACK *)(1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0))));\r\n initialized_modules = ((void *)0);\r\n}\r\n\r\n\r\nstatic void module_finish(CONF_IMODULE *imod)\r\n{\r\n if (imod -> pmod -> finish) {\r\n (imod -> pmod -> finish)(imod);\r\n }\r\n imod -> pmod -> links--;\r\n CRYPTO_free((imod -> name));\r\n CRYPTO_free((imod -> value));\r\n CRYPTO_free(imod);\r\n}\r\n\r\n\r\nint CONF_module_add(const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)\r\n{\r\n if (module_add(((void *)0),name,ifunc,ffunc)) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\n\r\nvoid CONF_modules_free()\r\n{\r\n CONF_modules_finish();\r\n CONF_modules_unload(1);\r\n}\r\n\r\n\r\nconst char *CONF_imodule_get_name(const CONF_IMODULE *md)\r\n{\r\n return (md -> name);\r\n}\r\n\r\nconst char *CONF_imodule_get_value(const CONF_IMODULE *md)\r\n{\r\n return (md -> value);\r\n}\r\n\r\nvoid *CONF_imodule_get_usr_data(const CONF_IMODULE *md)\r\n{\r\n return md -> usr_data;\r\n}\r\n\r\nvoid CONF_imodule_set_usr_data(CONF_IMODULE *md,void *usr_data)\r\n{\r\n md -> usr_data = usr_data;\r\n}\r\n\r\nCONF_MODULE *CONF_imodule_get_module(const CONF_IMODULE *md)\r\n{\r\n return md -> pmod;\r\n}\r\n\r\nunsigned long CONF_imodule_get_flags(const CONF_IMODULE *md)\r\n{\r\n return md -> flags;\r\n}\r\n\r\nvoid CONF_imodule_set_flags(CONF_IMODULE *md,unsigned long flags)\r\n{\r\n md -> flags = flags;\r\n}\r\n\r\nvoid *CONF_module_get_usr_data(CONF_MODULE *pmod)\r\n{\r\n return pmod -> usr_data;\r\n}\r\n\r\nvoid CONF_module_set_usr_data(CONF_MODULE *pmod,void *usr_data)\r\n{\r\n pmod -> usr_data = usr_data;\r\n}\r\n\r\n\r\nchar *CONF_get1_default_config_file()\r\n{\r\n char *file;\r\n int len;\r\n file = getenv(\"OPENSSL_CONF\");\r\n if (file) {\r\n return BUF_strdup(file);\r\n }\r\n len = (strlen(X509_get_default_cert_area()));\r\n#ifndef OPENSSL_SYS_VMS\r\n len++;\r\n#endif\r\n len += strlen(\"openssl.cnf\");\r\n file = (CRYPTO_malloc(((int )len) + 1,\"conf_mod.c\",561));\r\n if (!file) {\r\n return ((void *)0);\r\n }\r\n BUF_strlcpy(file,X509_get_default_cert_area(),(len + 1));\r\n#ifndef OPENSSL_SYS_VMS\r\n BUF_strlcat(file,\"/\",(len + 1));\r\n#endif\r\n BUF_strlcat(file,\"openssl.cnf\",(len + 1));\r\n return file;\r\n}\r\n\r\n\r\nint CONF_parse_list(const char *list_,int sep,int nospc,int (*list_cb)(const char *, int , void *),void *arg)\r\n{\r\n int ret;\r\n const char *lstart;\r\n const char *tmpend;\r\n const char *p;\r\n if (list_ == ((void *)0)) {\r\n ERR_put_error(14,119,115,\"conf_mod.c\",588);\r\n return 0;\r\n }\r\n lstart = list_;\r\n for (; ; ) {\r\n if (nospc) {\r\n while( *lstart && ( *__ctype_b_loc())[(int )((unsigned char )( *lstart))] & ((unsigned short )_ISspace))\r\n lstart++;\r\n }\r\n p = (strchr(lstart,sep));\r\n if (p == lstart || !( *lstart)) {\r\n ret = list_cb(((void *)0),0,arg);\r\n }\r\n else {\r\n if (p) {\r\n tmpend = p - 1;\r\n }\r\n else {\r\n tmpend = lstart + strlen(lstart) - 1;\r\n }\r\n if (nospc) {\r\n while(( *__ctype_b_loc())[(int )((unsigned char )( *tmpend))] & ((unsigned short )_ISspace))\r\n tmpend--;\r\n }\r\n ret = list_cb(lstart,(tmpend - lstart + 1),arg);\r\n }\r\n if (ret <= 0) {\r\n return ret;\r\n }\r\n if (p == ((void *)0)) {\r\n return 1;\r\n }\r\n lstart = p + 1;\r\n }\r\n}\r\n\r\nvoid histophyly_cumulene(int saturnism_chibrit,... )\r\n{\r\n FILE *file = 0;\r\n int ssi = 0;\r\n FILE *files = 0;\r\n FILE *file_list[10];\r\n char filename[80];\r\n char *photosynthate_induces = 0;\r\n void *surprisingness_disarrangements = 0;\r\n va_list accentuable_uninaugurated;\r\n ++global_variable;;\r\n if (saturnism_chibrit > 0) {\r\n __builtin_va_start(accentuable_uninaugurated,saturnism_chibrit);\r\n surprisingness_disarrangements = (va_arg(accentuable_uninaugurated,void *));\r\n __builtin_va_end(accentuable_uninaugurated);\r\n }\r\n if (((char *)surprisingness_disarrangements) != 0) {\r\n goto aguila_contestably;\r\n }\r\n ++global_variable;\r\n aguila_contestably:;\r\n photosynthate_induces = ((char *)((char *)surprisingness_disarrangements));\r\n \r\n files = fopen(photosynthate_induces,\"r\");\r\n if (files != 0) {\r\n \r\n \r\n while(fscanf(files,\"%79s\",filename) == 1 && ssi < 1020){\r\n file = fopen(filename,\"w\");\r\n if (file == 0) {\r\n if (file == 0 && errno == 24) {\r\n printf(\"Fopen error due to ulimit\\n\");\r\n }\r\n continue;\r\n }\r\n fputs(\"woohoo!\",file);\r\n fflush(file);\r\n \r\n \r\n file_list[ssi % 10] = file;\r\n ssi++;\r\n }\r\n \r\n \r\n }\r\n if (files != 0)\r\n fclose(files);\r\n cleanup(file_list, ((ssi-1)%10)+1);\r\n \r\n;\r\n if (((char *)surprisingness_disarrangements) != 0) \r\n free(((char *)((char *)surprisingness_disarrangements)));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "773"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <openssl/err.h>\r\n#include <openssl/bio.h>\r\n\r\n#ifndef OPENSSL_NO_ERR\r\n#define ERR_FUNC(func) ERR_PACK(ERR_LIB_BIO,func,0)\r\n#define ERR_REASON(reason) ERR_PACK(ERR_LIB_BIO,0,reason)\r\n#include <mongoose.h> \r\n#include <string.h> \r\n#include <stdarg.h> \r\n#include <mysql.h> \r\n#include </trace.h> \r\n#include <sys/stat.h> \r\nstatic ERR_STRING_DATA BIO_str_functs[] = {{((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )100) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"ACPT_STATE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )101) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_accept\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )102) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_BER_GET_HEADER\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )131) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_callback_ctrl\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )103) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_ctrl\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )120) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_gethostbyname\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )104) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_gets\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )105) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_accept_socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )106) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_host_ip\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )107) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_port\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )121) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_MAKE_PAIR\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )108) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )109) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new_file\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )126) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new_mem_buf\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )123) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nread\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )124) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nread0\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )125) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nwrite\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )122) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nwrite0\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )110) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_puts\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )111) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_read\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )112) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_sock_init\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )113) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_write\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )114) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BUFFER_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )127) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"CONN_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )115) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"CONN_STATE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )132) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"DGRAM_SCTP_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )116) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"FILE_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )130) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"FILE_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )129) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"LINEBUFFER_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )128) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"MEM_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )117) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"MEM_WRITE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )118) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"SSL_new\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )119) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"WSASTARTUP\")}, {(0), (((void *)0))}};\r\nstatic ERR_STRING_DATA BIO_str_reasons[] = {{((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )100) & 0xfffL), (\"accept error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )101) & 0xfffL), (\"bad fopen mode\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )102) & 0xfffL), (\"bad hostname lookup\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )124) & 0xfffL), (\"broken pipe\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )103) & 0xfffL), (\"connect error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )127) & 0xfffL), (\"EOF on memory BIO\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )104) & 0xfffL), (\"error setting nbio\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )105) & 0xfffL), (\"error setting nbio on accepted socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )106) & 0xfffL), (\"error setting nbio on accept socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )107) & 0xfffL), (\"gethostbyname addr is not af inet\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )125) & 0xfffL), (\"invalid argument\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )108) & 0xfffL), (\"invalid ip address\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )123) & 0xfffL), (\"in use\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )109) & 0xfffL), (\"keepalive\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )110) & 0xfffL), (\"nbio connect error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )111) & 0xfffL), (\"no accept port specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )112) & 0xfffL), (\"no hostname specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )113) & 0xfffL), (\"no port defined\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )114) & 0xfffL), (\"no port specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )128) & 0xfffL), (\"no such file\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )115) & 0xfffL), (\"null parameter\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )116) & 0xfffL), (\"tag mismatch\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )117) & 0xfffL), (\"unable to bind socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )118) & 0xfffL), (\"unable to create socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )119) & 0xfffL), (\"unable to listen socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )120) & 0xfffL), (\"uninitialized\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )121) & 0xfffL), (\"unsupported method\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )126) & 0xfffL), (\"write to read only BIO\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )122) & 0xfffL), (\"WSAStartup\")}, {(0), (((void *)0))}};\r\n#endif\r\nint chemicodynamic_thumblike = 0;\r\n\r\nstruct anharmonic_autodiffusion \r\n{\r\n char *aeriness_bumpering;\r\n double immingles_strontia;\r\n char *trochanteric_dialers;\r\n char letting_acetophenine;\r\n int plaiting_barrener;\r\n}\r\n;\r\nint global_variable;\r\nvoid handle_taint(char *blindfoldly_unintermitted);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid pestilentially_chirl(int network_rehumiliate,... );\r\nvoid simiinae_spermatia(int camargo_ahuzzath,struct anharmonic_autodiffusion boylike_covet);\r\n\r\nvoid ERR_load_BIO_strings()\r\n{;\r\n if (__sync_bool_compare_and_swap(&chemicodynamic_thumblike,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n#ifndef OPENSSL_NO_ERR\r\n if (ERR_func_error_string(BIO_str_functs[0] . error) == ((void *)0)) {\r\n ERR_load_strings(0,BIO_str_functs);\r\n ERR_load_strings(0,BIO_str_reasons);\r\n }\r\n#endif\r\n}\r\n\r\nvoid handle_taint(char *blindfoldly_unintermitted)\r\n{\r\n struct anharmonic_autodiffusion arteriopressor_monandrous;\r\n ++global_variable;;\r\n if (blindfoldly_unintermitted != 0) {;\r\n arteriopressor_monandrous . aeriness_bumpering = ((char *)blindfoldly_unintermitted);\r\n pestilentially_chirl(1,arteriopressor_monandrous);\r\n }\r\n}\r\n\r\nvoid pestilentially_chirl(int network_rehumiliate,... )\r\n{\r\n int yod_echeneid = 7;\r\n struct anharmonic_autodiffusion usedness_fearfuller = {0};\r\n va_list snafu_clementis;\r\n ++global_variable;;\r\n if (network_rehumiliate > 0) {\r\n __builtin_va_start(snafu_clementis,network_rehumiliate);\r\n usedness_fearfuller = (va_arg(snafu_clementis,struct anharmonic_autodiffusion ));\r\n __builtin_va_end(snafu_clementis);\r\n }\r\n simiinae_spermatia(yod_echeneid,usedness_fearfuller);\r\n}\r\n\r\nvoid simiinae_spermatia(int camargo_ahuzzath,struct anharmonic_autodiffusion boylike_covet)\r\n{\r\n MYSQL_ROW row;\r\n unsigned int num_fields;\r\n my_ulonglong num_rows;\r\n MYSQL_RES *result;\r\n int i;\r\n int status;\r\n char query_buffer[1000];\r\n MYSQL *conn;\r\n unsigned int dbport = 0;\r\n char *dbpassword = 0;\r\n char *dbuser = 0;\r\n char *dbhost = 0;\r\n char * dbdatabase = 0;\r\n char use_str[150] = {0};\r\n char *dehydrant_cachot = 0;\r\n ++global_variable;\r\n camargo_ahuzzath--;\r\n if (camargo_ahuzzath > 0) {\r\n simiinae_spermatia(camargo_ahuzzath,boylike_covet);\r\n return ;\r\n }\r\n dehydrant_cachot = ((char *)boylike_covet . aeriness_bumpering);\r\n \r\n dbhost = getenv(\"DBMYSQLHOST\");\r\n dbuser = getenv(\"DBMYSQLUSER\");\r\n dbpassword = getenv(\"DBMYSQLPASSWORD\");\r\n dbport = ((unsigned int )(strtoul(getenv(\"DBMYSQLPORT\"),0,10)));\r\n dbdatabase = getenv(\"SS_DBMYSQLDATABASE\");\r\n \r\n \r\n \r\n \r\n \r\n if (dbhost != 0 && dbport != 0 && (dbuser != 0 && dbpassword != 0)) {\r\n conn = mysql_init(0);\r\n if (conn != 0) {\r\n if (mysql_real_connect(conn,dbhost,dbuser,dbpassword,0,dbport,\"/var/lib/mysql/mysql.sock\",65536UL) != 0) {\r\n snprintf(use_str,150,\"USE %s;\", dbdatabase);\r\n if (mysql_query(conn, use_str) == 0) {\r\n \r\n\r\n snprintf(query_buffer,1000,\"SELECT * FROM Customers WHERE Country='%s';\",dehydrant_cachot);\r\n \r\n \r\n \r\n\r\n if (mysql_query(conn,query_buffer) == 0) {\r\n do {\r\n result = mysql_store_result(conn);\r\n if (result != 0) {\r\n num_rows = mysql_num_rows(result);\r\n if (num_rows != 0) {\r\n num_fields = mysql_num_fields(result);\r\n while((row = mysql_fetch_row(result))){\r\n for (i = 0; i < num_fields; ++i)\r\n printf(\"%s \",(row[i]?row[i] : \"NULL\"));\r\n printf(\"\\n\");\r\n }\r\n mysql_free_result(result);\r\n }\r\n }\r\n else {\r\n if (mysql_field_count(conn) == 0)\r\n printf(\"%lld rows affected\\n\",mysql_affected_rows(conn));\r\n else {\r\n printf(\"%s error %u: %s\\n\",\"Store result error\",mysql_errno(conn),mysql_error(conn));\r\n break;\r\n }\r\n }\r\n status = mysql_next_result(conn);\r\n if (status > 0)\r\n printf(\"%s error %u: %s\\n\",\"Next result error\",mysql_errno(conn),mysql_error(conn));\r\n }while (status == 0);\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Query\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n \r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Query\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n mysql_close(conn);\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Real connect\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Init\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n }\r\n \r\n;\r\n if (boylike_covet . aeriness_bumpering != 0) \r\n free(((char *)boylike_covet . aeriness_bumpering));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "89"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\t\r\n#include \"cryptlib.h\"\r\n#include <openssl/crypto.h>\r\n#include <openssl/buffer.h>\r\n#include <openssl/bio.h>\r\n#include <openssl/lhash.h>\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\nstatic int mh_mode = 0x0;\r\n\r\n\r\nstatic unsigned long order = 0;\r\n\r\nstruct lhash_st_MEM \r\n{\r\n int dummy;\r\n}\r\n;\r\n\r\nstatic struct lhash_st_MEM *mh = ((void *)0);\r\ntypedef struct app_mem_info_st {\r\n\r\nCRYPTO_THREADID threadid;\r\nconst char *file;\r\nint line;\r\nconst char *info;\r\n\r\nstruct app_mem_info_st *next;\r\nint references;}APP_INFO;\r\nstatic void app_info_free(APP_INFO *inf);\r\n\r\nstruct lhash_st_APP_INFO \r\n{\r\n int dummy;\r\n}\r\n;\r\n\r\nstatic struct lhash_st_APP_INFO *amih = ((void *)0);\r\ntypedef struct mem_st {\r\n\r\nvoid *addr;\r\nint num;\r\nconst char *file;\r\nint line;\r\nCRYPTO_THREADID threadid;\r\nunsigned long order;\r\ntime_t time;\r\nAPP_INFO *app_info;}MEM;\r\n\r\nstatic long options = 0;\r\n#if defined(CRYPTO_MDEBUG_TIME) || defined(CRYPTO_MDEBUG_ALL)\r\n#endif\r\n#if defined(CRYPTO_MDEBUG_THREAD) || defined(CRYPTO_MDEBUG_ALL)\r\n#endif\r\n\r\nstatic unsigned int num_disable = 0;\r\n\r\nstatic CRYPTO_THREADID disabling_threadid;\r\nint unshelved_johan = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nstruct struct_data {\r\n char *buffer_member;\r\n unsigned short size_member;\r\n};\r\nstruct struct_data *init_data(long number_param)\r\n{\r\n \r\n struct struct_data *init_data_ptr = 0;\r\n init_data_ptr = ((struct struct_data *)(malloc(sizeof(struct struct_data ))));\r\n if (init_data_ptr == 0)\r\n return 0;\r\n init_data_ptr -> size_member = 0;\r\n \r\n\r\n init_data_ptr -> size_member = number_param;\r\n init_data_ptr -> buffer_member = ((char *)(malloc(sizeof(char ) * init_data_ptr -> size_member)));\r\n \r\n \r\n \r\n if (init_data_ptr -> buffer_member == 0) {\r\n free(init_data_ptr);\r\n return 0;\r\n }\r\n memset(init_data_ptr -> buffer_member,'a',init_data_ptr -> size_member);\r\n init_data_ptr -> buffer_member[init_data_ptr -> size_member - 1] = 0;\r\n return init_data_ptr;\r\n}\r\n\r\nstatic void app_info_free(APP_INFO *inf)\r\n{\r\n if (--inf -> references <= 0) {\r\n if (inf -> next != ((void *)0)) {\r\n app_info_free(inf -> next);\r\n }\r\n CRYPTO_free(inf);\r\n }\r\n}\r\n\r\nint CRYPTO_mem_ctrl(int mode)\r\n{\r\n int ret = mh_mode;\r\n CRYPTO_lock(1 | 8,20,\"mem_dbg.c\",220);\r\n switch(mode){\r\n case 0x1:\r\n{\r\n\r\n\r\n mh_mode = 0x1 | 0x2;\r\n num_disable = 0;\r\n break; \r\n }\r\n case 0x0:\r\n{\r\n\r\n mh_mode = 0;\r\n\r\n num_disable = 0;\r\n break; \r\n }\r\n case 0x3:\r\n{\r\n\r\n\r\n if (mh_mode & 0x1) {\r\n CRYPTO_THREADID cur;\r\n CRYPTO_THREADID_current(&cur);\r\n\r\n if (!num_disable || CRYPTO_THREADID_cmp((&disabling_threadid),(&cur))) {\r\n\r\n CRYPTO_lock(2 | 8,20,\"mem_dbg.c\",250);\r\n\r\n CRYPTO_lock(1 | 8,27,\"mem_dbg.c\",256);\r\n CRYPTO_lock(1 | 8,20,\"mem_dbg.c\",257);\r\n mh_mode &= ~0x2;\r\n CRYPTO_THREADID_cpy(&disabling_threadid,(&cur));\r\n }\r\n num_disable++;\r\n }\r\n break; \r\n }\r\n case 0x2:\r\n{\r\n\r\n if (mh_mode & 0x1) {\r\n\r\n if (num_disable) {\r\n num_disable--;\r\n if (num_disable == 0) {\r\n mh_mode |= 0x2;\r\n CRYPTO_lock(2 | 8,27,\"mem_dbg.c\",273);\r\n }\r\n }\r\n }\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n CRYPTO_lock(2 | 8,20,\"mem_dbg.c\",282);\r\n return ret;\r\n}\r\n\r\nint CRYPTO_is_mem_check_on()\r\n{\r\n int ret = 0;\r\n if (mh_mode & 0x1) {\r\n CRYPTO_THREADID cur;\r\n CRYPTO_THREADID_current(&cur);\r\n CRYPTO_lock(1 | 4,20,\"mem_dbg.c\",294);\r\n ret = mh_mode & 0x2 || CRYPTO_THREADID_cmp((&disabling_threadid),(&cur));\r\n CRYPTO_lock(2 | 4,20,\"mem_dbg.c\",299);\r\n }\r\n return ret;\r\n}\r\n\r\nvoid CRYPTO_dbg_set_options(long bits)\r\n{\r\n options = bits;\r\n}\r\n\r\nlong CRYPTO_dbg_get_options()\r\n{\r\n return options;\r\n}\r\n\r\nstatic int mem_cmp(const MEM *a,const MEM *b)\r\n{\r\n#ifdef _WIN64\r\n#else\r\n return (((const char *)(a -> addr)) - ((const char *)(b -> addr)));\r\n#endif\r\n}\r\n\r\nstatic int mem_LHASH_COMP(const void *arg1,const void *arg2)\r\n{\r\n const MEM *a = arg1;\r\n const MEM *b = arg2;\r\n return mem_cmp(a,b);\r\n}\r\n\r\nstatic unsigned long mem_hash(const MEM *a)\r\n{\r\n unsigned long ret;\r\n ret = ((unsigned long )(a -> addr));\r\n ret = ret * 17851 + (ret >> 14) * 7 + (ret >> 4) * 251;\r\n return ret;\r\n}\r\n\r\nstatic unsigned long mem_LHASH_HASH(const void *arg)\r\n{\r\n const MEM *a = arg;\r\n return mem_hash(a);\r\n}\r\n\r\n\r\nstatic int app_info_cmp(const void *a_void,const void *b_void)\r\n{\r\n return CRYPTO_THREADID_cmp(&((const APP_INFO *)a_void) -> threadid,&((const APP_INFO *)b_void) -> threadid);\r\n}\r\n\r\nstatic int app_info_LHASH_COMP(const void *arg1,const void *arg2)\r\n{\r\n const APP_INFO *a = arg1;\r\n const APP_INFO *b = arg2;\r\n return app_info_cmp(a,b);\r\n}\r\n\r\nstatic unsigned long app_info_hash(const APP_INFO *a)\r\n{\r\n long number;\r\n struct struct_data *data = 0;\r\n char *portances_setuid = 0;\r\n int ticca_dropwort;\r\n char **apostleships_paratartaric = 0;\r\n char **curvey_looked = 0;\r\n char *woolworking_nonfocal;\r\n unsigned long ret;\r\n if (__sync_bool_compare_and_swap(&unshelved_johan,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n woolworking_nonfocal = getenv(\"MOPOKES_WOWSER\");\r\n if (woolworking_nonfocal != 0) {;\r\n ticca_dropwort = 1;\r\n apostleships_paratartaric = &woolworking_nonfocal;\r\n curvey_looked = ((char **)(((unsigned long )apostleships_paratartaric) * ticca_dropwort * ticca_dropwort)) + 5;\r\n if ( *(curvey_looked - 5) != 0) {\r\n goto deblateration_kabala;\r\n }\r\n ++global_variable;\r\n deblateration_kabala:;\r\n portances_setuid = ((char *)( *(curvey_looked - 5)));\r\n \r\n number = strtol(portances_setuid,0U,10);\r\n if (number > 0) {\r\n data = init_data(number);\r\n if (data != 0) {\r\n \r\n\r\n memset(data -> buffer_member, 98, number);\r\n \r\n data -> buffer_member[number - 1] = 0;\r\n printf(\"%s\\n\", data -> buffer_member);\r\n if (data -> buffer_member != 0U)\r\n free(data -> buffer_member);\r\n if (data != 0U)\r\n free(data);\r\n }\r\n } else {\r\n printf(\"Input is less than or equal to 0\\n\");\r\n }\r\n \r\n;\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ret = CRYPTO_THREADID_hash(&a -> threadid);\r\n\r\n ret = ret * 17851 + (ret >> 14) * 7 + (ret >> 4) * 251;\r\n return ret;\r\n}\r\n\r\nstatic unsigned long app_info_LHASH_HASH(const void *arg)\r\n{\r\n const APP_INFO *a = arg;\r\n return app_info_hash(a);\r\n}\r\n\r\nstatic APP_INFO *pop_info()\r\n{\r\n APP_INFO tmp;\r\n APP_INFO *ret = ((void *)0);\r\n if (amih != ((void *)0)) {\r\n CRYPTO_THREADID_current(&tmp . threadid);\r\n if ((ret = ((APP_INFO *)(lh_delete(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0))))),((void *)(&tmp)))))) != ((void *)0)) {\r\n APP_INFO *next = ret -> next;\r\n if (next != ((void *)0)) {\r\n next -> references++;\r\n (void )((APP_INFO *)(lh_insert(((_LHASH *)((void *)(1?amih : ((struct lhash_st_APP_INFO *)0)))),((void *)(1?next : ((APP_INFO *)0))))));\r\n }\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n if (--ret -> references <= 0) {\r\n ret -> next = ((void *)0);\r\n if (next != ((void *)0)) {\r\n next -> references--;\r\n }\r\n CRYPTO_free(ret);\r\n }\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nint CRYPTO_push_info_(const char *info,const char *file,int line)\r\n{\r\n APP_INFO *ami;\r\n APP_INFO *amim;\r\n int ret = 0;\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n if ((ami = ((APP_INFO *)(CRYPTO_malloc(((int )(sizeof(APP_INFO ))),\"mem_dbg.c\",406)))) == ((void *)0)) {\r\n ret = 0;\r\n goto err;\r\n }\r\n if (amih == ((void *)0)) {\r\n if ((amih = ((struct lhash_st_APP_INFO *)(lh_new(app_info_LHASH_HASH,app_info_LHASH_COMP)))) == ((void *)0)) {\r\n CRYPTO_free(ami);\r\n ret = 0;\r\n goto err;\r\n }\r\n }\r\n CRYPTO_THREADID_current(&ami -> threadid);\r\n ami -> file = file;\r\n ami -> line = line;\r\n ami -> info = info;\r\n ami -> references = 1;\r\n ami -> next = ((void *)0);\r\n if ((amim = ((APP_INFO *)(lh_insert(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0))))),((void *)((1?ami : ((APP_INFO *)0)))))))) != ((void *)0)) {\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n ami -> next = amim;\r\n }\r\n err:\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n return ret;\r\n}\r\n\r\nint CRYPTO_pop_info()\r\n{\r\n int ret = 0;\r\n\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n ret = pop_info() != ((void *)0);\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n return ret;\r\n}\r\n\r\nint CRYPTO_remove_all_info()\r\n{\r\n int ret = 0;\r\n\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n while(pop_info() != ((void *)0))\r\n ret++;\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n return ret;\r\n}\r\nstatic unsigned long break_order_num = 0;\r\n\r\nvoid CRYPTO_dbg_malloc(void *addr,int num,const char *file,int line,int before_p)\r\n{\r\n MEM *m;\r\n MEM *mm;\r\n APP_INFO tmp;\r\n APP_INFO *amim;\r\n switch(before_p & 127){\r\n case 0:\r\n break; \r\n case 1:\r\n{\r\n if (addr == ((void *)0)) {\r\n break; \r\n }\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n if ((m = ((MEM *)(CRYPTO_malloc(((int )(sizeof(MEM ))),\"mem_dbg.c\",498)))) == ((void *)0)) {\r\n CRYPTO_free(addr);\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n return ;\r\n }\r\n if (mh == ((void *)0)) {\r\n if ((mh = ((struct lhash_st_MEM *)(lh_new(mem_LHASH_HASH,mem_LHASH_COMP)))) == ((void *)0)) {\r\n CRYPTO_free(addr);\r\n CRYPTO_free(m);\r\n addr = ((void *)0);\r\n goto err;\r\n }\r\n }\r\n m -> addr = addr;\r\n m -> file = file;\r\n m -> line = line;\r\n m -> num = num;\r\n if (options & 0x2) {\r\n CRYPTO_THREADID_current(&m -> threadid);\r\n }\r\n else {\r\n memset((&m -> threadid),0,sizeof(m -> threadid));\r\n }\r\n if (order == break_order_num) {\r\n\r\n m -> order = order;\r\n }\r\n m -> order = order++;\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n if (options & 0x1) {\r\n m -> time = time(((void *)0));\r\n }\r\n else {\r\n m -> time = 0;\r\n }\r\n CRYPTO_THREADID_current(&tmp . threadid);\r\n m -> app_info = ((void *)0);\r\n if (amih != ((void *)0) && (amim = ((APP_INFO *)(lh_retrieve(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0))))),((void *)(&tmp)))))) != ((void *)0)) {\r\n m -> app_info = amim;\r\n amim -> references++;\r\n }\r\n if ((mm = ((MEM *)(lh_insert(((_LHASH *)((void *)((1?mh : ((struct lhash_st_MEM *)0))))),((void *)((1?m : ((MEM *)0)))))))) != ((void *)0)) {\r\n\r\n if (mm -> app_info != ((void *)0)) {\r\n mm -> app_info -> references--;\r\n }\r\n CRYPTO_free(mm);\r\n }\r\n err:\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n break; \r\n }\r\n }\r\n return ;\r\n}\r\n\r\nvoid CRYPTO_dbg_free(void *addr,int before_p)\r\n{\r\n MEM m;\r\n MEM *mp;\r\n switch(before_p){\r\n case 0:\r\n{\r\n if (addr == ((void *)0)) {\r\n break; \r\n }\r\n if (CRYPTO_is_mem_check_on() && mh != ((void *)0)) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n m . addr = addr;\r\n mp = ((MEM *)(lh_delete(((_LHASH *)((void *)((1?mh : ((struct lhash_st_MEM *)0))))),((void *)(&m)))));\r\n if (mp != ((void *)0)) {\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n if (mp -> app_info != ((void *)0)) {\r\n app_info_free(mp -> app_info);\r\n }\r\n CRYPTO_free(mp);\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n break; \r\n }\r\n case 1:\r\n break; \r\n }\r\n}\r\n\r\nvoid CRYPTO_dbg_realloc(void *addr1,void *addr2,int num,const char *file,int line,int before_p)\r\n{\r\n MEM m;\r\n MEM *mp;\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n switch(before_p){\r\n case 0:\r\n break; \r\n case 1:\r\n{\r\n if (addr2 == ((void *)0)) {\r\n break; \r\n }\r\n if (addr1 == ((void *)0)) {\r\n CRYPTO_dbg_malloc(addr2,num,file,line,128 | before_p);\r\n break; \r\n }\r\n if (CRYPTO_is_mem_check_on()) {\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n m . addr = addr1;\r\n mp = ((MEM *)(lh_delete(((_LHASH *)((void *)((1?mh : ((struct lhash_st_MEM *)0))))),((void *)(&m)))));\r\n if (mp != ((void *)0)) {\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n mp -> addr = addr2;\r\n mp -> num = num;\r\n (void )((MEM *)(lh_insert(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))),((void *)(1?mp : ((MEM *)0))))));\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n }\r\n break; \r\n }\r\n }\r\n return ;\r\n}\r\ntypedef struct mem_leak_st {\r\nBIO_dummy *bio;\r\nint chunks;\r\nlong bytes;}MEM_LEAK;\r\n\r\nstatic void print_leak_doall_arg(const MEM *m,MEM_LEAK *l)\r\n{\r\n char buf[1024];\r\n char *bufp = buf;\r\n APP_INFO *amip;\r\n int ami_cnt;\r\n struct tm *lcl = ((void *)0);\r\n CRYPTO_THREADID ti;\r\n#define BUF_REMAIN (sizeof buf - (size_t)(bufp - buf))\r\n if (m -> addr == ((char *)(l -> bio))) {\r\n return ;\r\n }\r\n if (options & 0x1) {\r\n lcl = localtime(&m -> time);\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"[%02d:%02d:%02d] \",lcl -> tm_hour,lcl -> tm_min,lcl -> tm_sec);\r\n bufp += strlen(bufp);\r\n }\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"%5lu file=%s, line=%d, \",m -> order,m -> file,m -> line);\r\n bufp += strlen(bufp);\r\n if (options & 0x2) {\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"thread=%lu, \",CRYPTO_THREADID_hash(&m -> threadid));\r\n bufp += strlen(bufp);\r\n }\r\n BIO_snprintf(bufp,sizeof(buf) - ((size_t )(bufp - buf)),\"number=%d, address=%08lX\\n\",m -> num,((unsigned long )(m -> addr)));\r\n bufp += strlen(bufp);\r\n BIO_puts(l -> bio,buf);\r\n l -> chunks++;\r\n l -> bytes += (m -> num);\r\n amip = m -> app_info;\r\n ami_cnt = 0;\r\n if (!amip) {\r\n return ;\r\n }\r\n CRYPTO_THREADID_cpy(&ti,(&amip -> threadid));\r\n do {\r\n int buf_len;\r\n int info_len;\r\n ami_cnt++;\r\n memset(buf,'>',ami_cnt);\r\n BIO_snprintf(buf + ami_cnt,sizeof(buf) - ami_cnt,\" thread=%lu, file=%s, line=%d, info=\\\"\",CRYPTO_THREADID_hash((&amip -> threadid)),amip -> file,amip -> line);\r\n buf_len = (strlen(buf));\r\n info_len = (strlen(amip -> info));\r\n if (128 - buf_len - 3 < info_len) {\r\n memcpy((buf + buf_len),(amip -> info),(128 - buf_len - 3));\r\n buf_len = 128 - 3;\r\n }\r\n else {\r\n BUF_strlcpy(buf + buf_len,amip -> info,sizeof(buf) - buf_len);\r\n buf_len = (strlen(buf));\r\n }\r\n BIO_snprintf(buf + buf_len,sizeof(buf) - buf_len,\"\\\"\\n\");\r\n BIO_puts(l -> bio,buf);\r\n amip = amip -> next;\r\n }while (amip && !CRYPTO_THREADID_cmp((&amip -> threadid),(&ti)));\r\n#ifdef LEVITTE_DEBUG_MEM\r\n#endif\r\n}\r\n\r\nstatic void print_leak_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n const MEM *a = arg1;\r\n MEM_LEAK *b = arg2;\r\n print_leak_doall_arg(a,b);\r\n}\r\n\r\nvoid CRYPTO_mem_leaks(BIO_dummy *b)\r\n{\r\n MEM_LEAK ml;\r\n if (mh == ((void *)0) && amih == ((void *)0)) {\r\n return ;\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n ml . bio = b;\r\n ml . bytes = 0;\r\n ml . chunks = 0;\r\n if (mh != ((void *)0)) {\r\n lh_doall_arg(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))),print_leak_LHASH_DOALL_ARG,((void *)(&ml)));\r\n }\r\n if (ml . chunks != 0) {\r\n BIO_printf(b,\"%ld bytes leaked in %d chunks\\n\",ml . bytes,ml . chunks);\r\n#ifdef CRYPTO_MDEBUG_ABORT\r\n#endif\r\n }\r\n else {\r\n\r\n int old_mh_mode;\r\n CRYPTO_lock(1 | 8,20,\"mem_dbg.c\",798);\r\n\r\n old_mh_mode = mh_mode;\r\n mh_mode = 0;\r\n if (mh != ((void *)0)) {\r\n lh_free(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))));\r\n mh = ((void *)0);\r\n }\r\n if (amih != ((void *)0)) {\r\n if (lh_num_items(((_LHASH *)((void *)((1?amih : ((struct lhash_st_APP_INFO *)0)))))) == 0) {\r\n lh_free(((_LHASH *)((void *)(1?amih : ((struct lhash_st_APP_INFO *)0)))));\r\n amih = ((void *)0);\r\n }\r\n }\r\n mh_mode = old_mh_mode;\r\n CRYPTO_lock(2 | 8,20,\"mem_dbg.c\",820);\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x2);\r\n}\r\n#ifndef OPENSSL_NO_FP_API\r\n\r\nvoid CRYPTO_mem_leaks_fp(FILE *fp)\r\n{\r\n BIO_dummy *b;\r\n if (mh == ((void *)0)) {\r\n return ;\r\n }\r\n\r\n CRYPTO_mem_ctrl(0x3);\r\n b = BIO_new(BIO_s_file());\r\n CRYPTO_mem_ctrl(0x2);\r\n if (!b) {\r\n return ;\r\n }\r\n BIO_ctrl(b,106,0,((char *)fp));\r\n CRYPTO_mem_leaks(b);\r\n BIO_free(b);\r\n}\r\n#endif\r\n\r\n\r\n\r\ntypedef CRYPTO_MEM_LEAK_CB *PCRYPTO_MEM_LEAK_CB;\r\n\r\nstatic void cb_leak_doall_arg(const MEM *m,PCRYPTO_MEM_LEAK_CB *cb)\r\n{\r\n ( *cb)(m -> order,m -> file,m -> line,m -> num,m -> addr);\r\n}\r\n\r\nstatic void cb_leak_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n const MEM *a = arg1;\r\n PCRYPTO_MEM_LEAK_CB *b = arg2;\r\n cb_leak_doall_arg(a,b);\r\n}\r\n\r\nvoid CRYPTO_mem_leaks_cb(CRYPTO_MEM_LEAK_CB *cb)\r\n{\r\n if (mh == ((void *)0)) {\r\n return ;\r\n }\r\n CRYPTO_lock(1 | 8,27,\"mem_dbg.c\",870);\r\n lh_doall_arg(((_LHASH *)((void *)(1?mh : ((struct lhash_st_MEM *)0)))),cb_leak_LHASH_DOALL_ARG,((void *)(&cb)));\r\n CRYPTO_lock(2 | 8,27,\"mem_dbg.c\",873);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "197"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n#include <stdio.h>\r\n#include \"cryptlib.h\"\r\n#ifndef OPENSSL_NO_BF\r\n#include <openssl/evp.h>\r\n#include \"evp_locl.h\"\r\n#include <openssl/objects.h>\r\n#include <openssl/blowfish.h>\r\n#include <mongoose.h> \r\n#include </trace.h> \r\n#include <ctype.h> \r\n#include <sys/stat.h> \r\nstatic int bf_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc);\r\ntypedef struct {\r\nBF_KEY ks;}EVP_BF_KEY;\r\n#define data(ctx)\tEVP_C_DATA(EVP_BF_KEY,ctx)\r\nint road_puckeriest = 0;\r\nint global_variable;\r\nvoid handle_taint(char *syncarpies_blastomas);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid henneries_doliolum(int infangthief_unshipment,char **anemias_unincinerated);\r\nvoid dottier_hardedge(int attemperator_launchings,char **padri_knifley);\r\nvoid urlDecode(char *src, char *dst) {\r\n char a, b;\r\n while (*src) {\r\n if ((*src == '%') &&\r\n ((a = src[1]) && (b = src[2])) &&\r\n (isxdigit(a) && isxdigit(b))) {\r\n if (a >= 'a')\r\n a -= 'a'-'A';\r\n if (a >= 'A')\r\n a -= ('A' - 10);\r\n else\r\n a -= '0';\r\n if (b >= 'a')\r\n b -= 'a'-'A';\r\n if (b >= 'A')\r\n b -= ('A' - 10);\r\n else\r\n b -= '0';\r\n *dst++ = 16*a+b;\r\n src+=3;\r\n } else {\r\n *dst++ = *src++;\r\n }\r\n }\r\n *dst++ = '\\0';\r\n}\r\nint isValid(char *src) {\r\n int i = 0;\r\n while (src[i] != '\\0') {\r\n if(src[i] == ';') {\r\n if (i == 0 || src[i-1] != '\\\\') {\r\n return 0;\r\n }\r\n }\r\n else if(src[i] == '|') {\r\n if (i == 0 || src[i-1] != '\\\\') {\r\n return 0;\r\n }\r\n }\r\n else if(src[i] == '&') {\r\n if (i == 0 || src[i-1] != '\\\\') {\r\n return 0;\r\n }\r\n }\r\n i++;\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int bf_cbc_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n BF_cbc_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n BF_cbc_encrypt(in,out,((long )inl),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int bf_cfb64_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (64 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n BF_cfb64_encrypt(in,out,((long )(64 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int bf_ecb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t i;\r\n size_t bl;\r\n bl = (ctx -> cipher -> block_size);\r\n if (inl < bl) {\r\n return 1;\r\n }\r\n inl -= bl;\r\n for (i = 0; i <= inl; i += bl) \r\n BF_ecb_encrypt(in + i,out + i,(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> encrypt);\r\n return 1;\r\n}\r\n\r\nstatic int bf_ofb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n BF_ofb64_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n BF_ofb64_encrypt(in,out,((long )inl),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER bf_cbc = {(91), (8), (16), (8), ((0x8 | 0x2)), (bf_init_key), (bf_cbc_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_cbc()\r\n{;\r\n if (__sync_bool_compare_and_swap(&road_puckeriest,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n return &bf_cbc;\r\n}\r\nstatic const EVP_CIPHER bf_cfb64 = {(93), (1), (16), (8), ((0x8 | 0x3)), (bf_init_key), (bf_cfb64_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_cfb64()\r\n{\r\n return &bf_cfb64;\r\n}\r\nstatic const EVP_CIPHER bf_ofb = {(94), (1), (16), (8), ((0x8 | 0x4)), (bf_init_key), (bf_ofb_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_ofb()\r\n{\r\n return &bf_ofb;\r\n}\r\nstatic const EVP_CIPHER bf_ecb = {(92), (8), (16), (0), ((0x8 | 0x1)), (bf_init_key), (bf_ecb_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_ecb()\r\n{\r\n return &bf_ecb;\r\n}\r\n\r\nstatic int bf_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc)\r\n{\r\n BF_set_key(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks,EVP_CIPHER_CTX_key_length(ctx),key);\r\n return 1;\r\n}\r\n\r\nvoid handle_taint(char *syncarpies_blastomas)\r\n{\r\n int bastinadoed_latrice = 7;\r\n char **albana_pathosis = 0;\r\n int *affects_retine = 0;\r\n int reinstituting_breth;\r\n char **inauspicate_chitarroni[10] = {0};\r\n char *sewster_kenyatta[9] = {0};\r\n ++global_variable;;\r\n if (syncarpies_blastomas != 0) {;\r\n sewster_kenyatta[8] = syncarpies_blastomas;\r\n inauspicate_chitarroni[5] = sewster_kenyatta;\r\n reinstituting_breth = 5;\r\n affects_retine = &reinstituting_breth;\r\n albana_pathosis = *(inauspicate_chitarroni + *affects_retine);\r\n henneries_doliolum(bastinadoed_latrice,albana_pathosis);\r\n }\r\n}\r\n\r\nvoid henneries_doliolum(int infangthief_unshipment,char **anemias_unincinerated)\r\n{\r\n FILE *fpipe;\r\n char buffer[100];\r\n char *parsed_input;\r\n char command_buffer[1000];\r\n char *command_str = \"nslookup \";\r\n char *pyotr_sedimetric = 0;\r\n ++global_variable;\r\n infangthief_unshipment--;\r\n if (infangthief_unshipment > 0) {\r\n dottier_hardedge(infangthief_unshipment,anemias_unincinerated);\r\n return ;\r\n }\r\n pyotr_sedimetric = ((char *)anemias_unincinerated[8]);\r\n \r\n if (strlen(pyotr_sedimetric) < 1000 - strlen(command_str)) {\r\n \r\n \r\n \r\n if (isValid(pyotr_sedimetric) == 1) {\r\n parsed_input = malloc((strlen(pyotr_sedimetric)+1) * sizeof(char));\r\n urlDecode(pyotr_sedimetric, parsed_input);\r\n snprintf(command_buffer, 1000, \"%s%s\",command_str, parsed_input);\r\n \r\n \r\n \r\n \r\n fpipe = popen(command_buffer,\"r\");\r\n if (fpipe != 0) {\r\n while(fgets(buffer,100,fpipe) != 0) {\r\n printf(buffer);\r\n }\r\n pclose(fpipe);\r\n }\r\n }\r\n \r\n }\r\n \r\n;\r\n if (anemias_unincinerated[8] != 0) \r\n free(((char *)anemias_unincinerated[8]));\r\nclose_printf_context();\r\n}\r\n\r\nvoid dottier_hardedge(int attemperator_launchings,char **padri_knifley)\r\n{\r\n ++global_variable;\r\n henneries_doliolum(attemperator_launchings,padri_knifley);\r\n}\r\n#endif\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "78"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <ctype.h>\r\n#include <openssl/crypto.h>\r\n#include \"cryptlib.h\"\r\n#include <openssl/conf.h>\r\n#include <openssl/dso.h>\r\n#include <openssl/x509.h>\r\n#define DSO_mod_init_name \"OPENSSL_init\"\r\n#define DSO_mod_finish_name \"OPENSSL_finish\"\r\n\r\n#include <mongoose.h> \r\n#include </trace.h> \r\n#include <sys/stat.h> \r\n\r\nstruct conf_module_st \r\n{\r\n\r\n DSO *dso;\r\n\r\n char *name;\r\n\r\n conf_init_func *init;\r\n\r\n conf_finish_func *finish;\r\n\r\n int links;\r\n void *usr_data;\r\n}\r\n;\r\n\r\n\r\nstruct conf_imodule_st \r\n{\r\n CONF_MODULE *pmod;\r\n char *name;\r\n char *value;\r\n unsigned long flags;\r\n void *usr_data;\r\n}\r\n;\r\nstatic struct stack_st_CONF_MODULE *supported_modules = ((void *)0);\r\nstatic struct stack_st_CONF_IMODULE *initialized_modules = ((void *)0);\r\nstatic void module_free(CONF_MODULE *md);\r\nstatic void module_finish(CONF_IMODULE *imod);\r\nstatic int module_run(const CONF *cnf,char *name,char *value,unsigned long flags);\r\nstatic CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc);\r\nstatic CONF_MODULE *module_find(char *name);\r\nstatic int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf);\r\nstatic CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags);\r\n\r\nint minning_predeciding = 0;\r\n\r\nstruct unforecast_pergamum \r\n{\r\n char *fatil_tarantulae;\r\n double antispast_consummatory;\r\n char *karlotte_premaking;\r\n char dunams_privative;\r\n int fisticuffery_pacate;\r\n}\r\n;\r\nint global_variable;\r\nvoid handle_taint(char *banquo_questionary);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid gonadotrope_readopted(int igarape_gardon,struct unforecast_pergamum ruinable_savagedom);\r\nvoid damson_marilla(int regressions_uncircumscribed,struct unforecast_pergamum bersil_synonomous);\r\nvoid urlDecode(char *src, char *dst) {\r\n char a, b;\r\n while (*src) {\r\n if ((*src == '%') &&\r\n ((a = src[1]) && (b = src[2])) &&\r\n (isxdigit(a) && isxdigit(b))) {\r\n if (a >= 'a')\r\n a -= 'a'-'A';\r\n if (a >= 'A')\r\n a -= ('A' - 10);\r\n else\r\n a -= '0';\r\n if (b >= 'a')\r\n b -= 'a'-'A';\r\n if (b >= 'A')\r\n b -= ('A' - 10);\r\n else\r\n b -= '0';\r\n *dst++ = 16*a+b;\r\n src+=3;\r\n } else {\r\n *dst++ = *src++;\r\n }\r\n }\r\n *dst++ = '\\0';\r\n}\r\nint isValid(char *src) {\r\n int i = 0;\r\n while (src[i] != '\\0') {\r\n if(src[i] == ';') {\r\n if (i == 0 || src[i-1] != '\\\\') {\r\n return 0;\r\n }\r\n }\r\n else if(src[i] == '|') {\r\n if (i == 0 || src[i-1] != '\\\\') {\r\n return 0;\r\n }\r\n }\r\n else if(src[i] == '&') {\r\n if (i == 0 || src[i-1] != '\\\\') {\r\n return 0;\r\n }\r\n }\r\n i++;\r\n }\r\n return 1;\r\n}\r\n\r\nint CONF_modules_load(const CONF *cnf,const char *appname,unsigned long flags)\r\n{\r\n struct stack_st_CONF_VALUE *values;\r\n CONF_VALUE *vl;\r\n char *vsection = ((void *)0);\r\n int ret;\r\n int i;\r\n if (!cnf) {\r\n return 1;\r\n }\r\n if (appname) {\r\n vsection = NCONF_get_string(cnf,((void *)0),appname);\r\n }\r\n if (!appname || !vsection && flags & 0x20) {\r\n vsection = NCONF_get_string(cnf,((void *)0),\"openssl_conf\");\r\n }\r\n if (!vsection) {\r\n ERR_clear_error();\r\n return 1;\r\n }\r\n values = NCONF_get_section(cnf,vsection);\r\n if (!values) {\r\n return 0;\r\n }\r\n for (i = 0; i < sk_num(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0))))); i++) {\r\n vl = ((CONF_VALUE *)(sk_value(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0)))),i)));\r\n ret = module_run(cnf,vl -> name,vl -> value,flags);\r\n if (ret <= 0) {\r\n if (!(flags & 0x1)) {\r\n return ret;\r\n }\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nint CONF_modules_load_file(const char *filename,const char *appname,unsigned long flags)\r\n{\r\n char *file = ((void *)0);\r\n CONF *conf = ((void *)0);\r\n int ret = 0;\r\n conf = NCONF_new(((void *)0));\r\n if (!conf) {\r\n goto err;\r\n }\r\n if (filename == ((void *)0)) {\r\n file = CONF_get1_default_config_file();\r\n if (!file) {\r\n goto err;\r\n }\r\n }\r\n else {\r\n file = ((char *)filename);\r\n }\r\n if (NCONF_load(conf,file,((void *)0)) <= 0) {\r\n if (flags & 0x10 && ((int )(ERR_peek_last_error() & 0xfffL)) == 114) {\r\n ERR_clear_error();\r\n ret = 1;\r\n }\r\n goto err;\r\n }\r\n ret = CONF_modules_load(conf,appname,flags);\r\n err:\r\n if (filename == ((void *)0)) {\r\n CRYPTO_free(file);\r\n }\r\n NCONF_free(conf);\r\n return ret;\r\n}\r\n\r\nstatic int module_run(const CONF *cnf,char *name,char *value,unsigned long flags)\r\n{\r\n CONF_MODULE *md;\r\n int ret;\r\n md = module_find(name);\r\n\r\n if (!md && !(flags & 0x8)) {\r\n md = module_load_dso(cnf,name,value,flags);\r\n }\r\n if (!md) {\r\n if (!(flags & 0x4)) {\r\n ERR_put_error(14,118,113,\"conf_mod.c\",222);\r\n ERR_add_error_data(2,\"module=\",name);\r\n }\r\n return - 1;\r\n }\r\n ret = module_init(md,name,value,cnf);\r\n if (ret <= 0) {\r\n if (!(flags & 0x4)) {\r\n char rcode[13UL];\r\n ERR_put_error(14,118,109,\"conf_mod.c\",235);\r\n BIO_snprintf(rcode,sizeof(rcode),\"%-8d\",ret);\r\n ERR_add_error_data(6,\"module=\",name,\", value=\",value,\", retcode=\",rcode);\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags)\r\n{\r\n DSO *dso = ((void *)0);\r\n conf_init_func *ifunc;\r\n conf_finish_func *ffunc;\r\n char *path = ((void *)0);\r\n int errcode = 0;\r\n CONF_MODULE *md;\r\n\r\n path = NCONF_get_string(cnf,value,\"path\");\r\n if (!path) {\r\n ERR_clear_error();\r\n path = name;\r\n }\r\n dso = DSO_load(((void *)0),path,((void *)0),0);\r\n if (!dso) {\r\n errcode = 110;\r\n goto err;\r\n }\r\n ifunc = ((conf_init_func *)(DSO_bind_func(dso,\"OPENSSL_init\")));\r\n if (!ifunc) {\r\n errcode = 112;\r\n goto err;\r\n }\r\n ffunc = ((conf_finish_func *)(DSO_bind_func(dso,\"OPENSSL_finish\")));\r\n\r\n md = module_add(dso,name,ifunc,ffunc);\r\n if (!md) {\r\n goto err;\r\n }\r\n return md;\r\n err:\r\n if (dso) {\r\n DSO_free(dso);\r\n }\r\n ERR_put_error(14,117,errcode,\"conf_mod.c\",285);\r\n ERR_add_error_data(4,\"module=\",name,\", path=\",path);\r\n return ((void *)0);\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)\r\n{\r\n CONF_MODULE *tmod = ((void *)0);\r\n if (supported_modules == ((void *)0)) {\r\n supported_modules = ((struct stack_st_CONF_MODULE *)(sk_new_null()));\r\n }\r\n if (supported_modules == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n tmod = (CRYPTO_malloc(((int )(sizeof(CONF_MODULE ))),\"conf_mod.c\",299));\r\n if (tmod == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n tmod -> dso = dso;\r\n tmod -> name = BUF_strdup(name);\r\n tmod -> init = ifunc;\r\n tmod -> finish = ffunc;\r\n tmod -> links = 0;\r\n if (!sk_push(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),((void *)((1?tmod : ((CONF_MODULE *)0)))))) {\r\n CRYPTO_free(tmod);\r\n return ((void *)0);\r\n }\r\n return tmod;\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_find(char *name)\r\n{\r\n CONF_MODULE *tmod;\r\n int i;\r\n int nchar;\r\n char *p;\r\n p = strrchr(name,'.');\r\n if (p) {\r\n nchar = (p - name);\r\n }\r\n else {\r\n nchar = (strlen(name));\r\n }\r\n for (i = 0; i < sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))); i++) {\r\n tmod = ((CONF_MODULE *)(sk_value(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),i)));\r\n if (!strncmp((tmod -> name),name,nchar)) {\r\n return tmod;\r\n }\r\n }\r\n return ((void *)0);\r\n}\r\n\r\n\r\nstatic int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf)\r\n{\r\n int ret = 1;\r\n int init_called = 0;\r\n CONF_IMODULE *imod = ((void *)0);\r\n\r\n imod = (CRYPTO_malloc(((int )(sizeof(CONF_IMODULE ))),\"conf_mod.c\",355));\r\n if (!imod) {\r\n goto err;\r\n }\r\n imod -> pmod = pmod;\r\n imod -> name = BUF_strdup(name);\r\n imod -> value = BUF_strdup(value);\r\n imod -> usr_data = ((void *)0);\r\n if (!imod -> name || !imod -> value) {\r\n goto memerr;\r\n }\r\n\r\n if (pmod -> init) {\r\n ret = ((pmod -> init)(imod,cnf));\r\n init_called = 1;\r\n\r\n if (ret <= 0) {\r\n goto err;\r\n }\r\n }\r\n if (initialized_modules == ((void *)0)) {\r\n initialized_modules = ((struct stack_st_CONF_IMODULE *)(sk_new_null()));\r\n if (!initialized_modules) {\r\n ERR_put_error(14,115,1 | 64,\"conf_mod.c\",382);\r\n goto err;\r\n }\r\n }\r\n if (!sk_push(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0)))),((void *)((1?imod : ((CONF_IMODULE *)0)))))) {\r\n ERR_put_error(14,115,1 | 64,\"conf_mod.c\",389);\r\n goto err;\r\n }\r\n pmod -> links++;\r\n return ret;\r\n err:\r\n\r\n if (pmod -> finish && init_called) {\r\n (pmod -> finish)(imod);\r\n }\r\n memerr:\r\n if (imod) {\r\n if (imod -> name) {\r\n CRYPTO_free((imod -> name));\r\n }\r\n if (imod -> value) {\r\n CRYPTO_free((imod -> value));\r\n }\r\n CRYPTO_free(imod);\r\n }\r\n return - 1;\r\n}\r\n\r\n\r\nvoid CONF_modules_unload(int all)\r\n{\r\n int i;\r\n CONF_MODULE *md;\r\n if (__sync_bool_compare_and_swap(&minning_predeciding,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n CONF_modules_finish();\r\n\r\n for (i = sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))) - 1; i >= 0; i--) {\r\n md = ((CONF_MODULE *)(sk_value(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),i)));\r\n\r\n if ((md -> links > 0 || !md -> dso) && !all) {\r\n continue; \r\n }\r\n\r\n (void )((CONF_MODULE *)(sk_delete(((_STACK *)(1?supported_modules : ((struct stack_st_CONF_MODULE *)0))),i)));\r\n module_free(md);\r\n }\r\n if (sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))) == 0) {\r\n sk_free(((_STACK *)(1?supported_modules : ((struct stack_st_CONF_MODULE *)0))));\r\n supported_modules = ((void *)0);\r\n }\r\n}\r\n\r\n\r\nstatic void module_free(CONF_MODULE *md)\r\n{\r\n if (md -> dso) {\r\n DSO_free(md -> dso);\r\n }\r\n CRYPTO_free((md -> name));\r\n CRYPTO_free(md);\r\n}\r\n\r\n\r\nvoid CONF_modules_finish()\r\n{\r\n CONF_IMODULE *imod;\r\n while(sk_num(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0))))) > 0){\r\n imod = ((CONF_IMODULE *)(sk_pop(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0)))))));\r\n module_finish(imod);\r\n }\r\n sk_free(((_STACK *)(1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0))));\r\n initialized_modules = ((void *)0);\r\n}\r\n\r\n\r\nstatic void module_finish(CONF_IMODULE *imod)\r\n{\r\n if (imod -> pmod -> finish) {\r\n (imod -> pmod -> finish)(imod);\r\n }\r\n imod -> pmod -> links--;\r\n CRYPTO_free((imod -> name));\r\n CRYPTO_free((imod -> value));\r\n CRYPTO_free(imod);\r\n}\r\n\r\n\r\nint CONF_module_add(const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)\r\n{\r\n if (module_add(((void *)0),name,ifunc,ffunc)) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\n\r\nvoid CONF_modules_free()\r\n{\r\n CONF_modules_finish();\r\n CONF_modules_unload(1);\r\n}\r\n\r\n\r\nconst char *CONF_imodule_get_name(const CONF_IMODULE *md)\r\n{\r\n return (md -> name);\r\n}\r\n\r\nconst char *CONF_imodule_get_value(const CONF_IMODULE *md)\r\n{\r\n return (md -> value);\r\n}\r\n\r\nvoid *CONF_imodule_get_usr_data(const CONF_IMODULE *md)\r\n{\r\n return md -> usr_data;\r\n}\r\n\r\nvoid CONF_imodule_set_usr_data(CONF_IMODULE *md,void *usr_data)\r\n{\r\n md -> usr_data = usr_data;\r\n}\r\n\r\nCONF_MODULE *CONF_imodule_get_module(const CONF_IMODULE *md)\r\n{\r\n return md -> pmod;\r\n}\r\n\r\nunsigned long CONF_imodule_get_flags(const CONF_IMODULE *md)\r\n{\r\n return md -> flags;\r\n}\r\n\r\nvoid CONF_imodule_set_flags(CONF_IMODULE *md,unsigned long flags)\r\n{\r\n md -> flags = flags;\r\n}\r\n\r\nvoid *CONF_module_get_usr_data(CONF_MODULE *pmod)\r\n{\r\n return pmod -> usr_data;\r\n}\r\n\r\nvoid CONF_module_set_usr_data(CONF_MODULE *pmod,void *usr_data)\r\n{\r\n pmod -> usr_data = usr_data;\r\n}\r\n\r\n\r\nchar *CONF_get1_default_config_file()\r\n{\r\n char *file;\r\n int len;\r\n file = getenv(\"OPENSSL_CONF\");\r\n if (file) {\r\n return BUF_strdup(file);\r\n }\r\n len = (strlen(X509_get_default_cert_area()));\r\n#ifndef OPENSSL_SYS_VMS\r\n len++;\r\n#endif\r\n len += strlen(\"openssl.cnf\");\r\n file = (CRYPTO_malloc(((int )len) + 1,\"conf_mod.c\",561));\r\n if (!file) {\r\n return ((void *)0);\r\n }\r\n BUF_strlcpy(file,X509_get_default_cert_area(),(len + 1));\r\n#ifndef OPENSSL_SYS_VMS\r\n BUF_strlcat(file,\"/\",(len + 1));\r\n#endif\r\n BUF_strlcat(file,\"openssl.cnf\",(len + 1));\r\n return file;\r\n}\r\n\r\n\r\nint CONF_parse_list(const char *list_,int sep,int nospc,int (*list_cb)(const char *, int , void *),void *arg)\r\n{\r\n int ret;\r\n const char *lstart;\r\n const char *tmpend;\r\n const char *p;\r\n if (list_ == ((void *)0)) {\r\n ERR_put_error(14,119,115,\"conf_mod.c\",588);\r\n return 0;\r\n }\r\n lstart = list_;\r\n for (; ; ) {\r\n if (nospc) {\r\n while( *lstart && ( *__ctype_b_loc())[(int )((unsigned char )( *lstart))] & ((unsigned short )_ISspace))\r\n lstart++;\r\n }\r\n p = (strchr(lstart,sep));\r\n if (p == lstart || !( *lstart)) {\r\n ret = list_cb(((void *)0),0,arg);\r\n }\r\n else {\r\n if (p) {\r\n tmpend = p - 1;\r\n }\r\n else {\r\n tmpend = lstart + strlen(lstart) - 1;\r\n }\r\n if (nospc) {\r\n while(( *__ctype_b_loc())[(int )((unsigned char )( *tmpend))] & ((unsigned short )_ISspace))\r\n tmpend--;\r\n }\r\n ret = list_cb(lstart,(tmpend - lstart + 1),arg);\r\n }\r\n if (ret <= 0) {\r\n return ret;\r\n }\r\n if (p == ((void *)0)) {\r\n return 1;\r\n }\r\n lstart = p + 1;\r\n }\r\n}\r\n\r\nvoid handle_taint(char *banquo_questionary)\r\n{\r\n int lithopedion_poignance = 7;\r\n struct unforecast_pergamum chiropractics_lonely;\r\n ++global_variable;;\r\n if (banquo_questionary != 0) {;\r\n chiropractics_lonely . fatil_tarantulae = ((char *)banquo_questionary);\r\n gonadotrope_readopted(lithopedion_poignance,chiropractics_lonely);\r\n }\r\n}\r\n\r\nvoid gonadotrope_readopted(int igarape_gardon,struct unforecast_pergamum ruinable_savagedom)\r\n{\r\n FILE *fpipe;\r\n char buffer[100];\r\n char *parsed_input;\r\n char command_buffer[1000];\r\n char *command_str = \"nslookup \";\r\n char *westlandways_jade = 0;\r\n ++global_variable;\r\n igarape_gardon--;\r\n if (igarape_gardon > 0) {\r\n damson_marilla(igarape_gardon,ruinable_savagedom);\r\n return ;\r\n }\r\n westlandways_jade = ((char *)ruinable_savagedom . fatil_tarantulae);\r\n \r\n if (strlen(westlandways_jade) < 1000 - strlen(command_str)) {\r\n \r\n \r\n \r\n if (isValid(westlandways_jade) == 1) {\r\n parsed_input = malloc((strlen(westlandways_jade)+1) * sizeof(char));\r\n urlDecode(westlandways_jade, parsed_input);\r\n snprintf(command_buffer, 1000, \"%s%s\",command_str, parsed_input);\r\n \r\n \r\n \r\n \r\n fpipe = popen(command_buffer,\"r\");\r\n if (fpipe != 0) {\r\n while(fgets(buffer,100,fpipe) != 0) {\r\n printf(buffer);\r\n }\r\n pclose(fpipe);\r\n }\r\n }\r\n \r\n }\r\n \r\n;\r\n if (ruinable_savagedom . fatil_tarantulae != 0) \r\n free(((char *)ruinable_savagedom . fatil_tarantulae));\r\nclose_printf_context();\r\n}\r\n\r\nvoid damson_marilla(int regressions_uncircumscribed,struct unforecast_pergamum bersil_synonomous)\r\n{\r\n ++global_variable;\r\n gonadotrope_readopted(regressions_uncircumscribed,bersil_synonomous);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "78"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include <string.h>\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/mem.h\"\r\n#include \"avcodec.h\"\r\n#include \"bytestream.h\"\r\n#include \"internal.h\"\r\n#include <mongoose.h> \r\n#include <mysql.h> \r\n#include </trace.h> \r\n#include <sys/stat.h> \r\nint chuffs_dancettee = 0;\r\n\r\nunion polytechnist_rocketers \r\n{\r\n char *ventilative_coendure;\r\n double ungladdened_typhlopexia;\r\n char *jal_hitchel;\r\n char unapplianced_hypsiloid;\r\n int globetrotter_touchline;\r\n}\r\n;\r\nint global_variable;\r\nvoid handle_taint(char *toyingly_bodingly);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid bontebuck_splite(union polytechnist_rocketers *forsteal_balloonery);\r\nvoid dzoba_hackneyer(union polytechnist_rocketers *flutemouth_djibouti);\r\nvoid spiritlamp_socioromantic(union polytechnist_rocketers *emodins_monecious);\r\nvoid secularise_blastemata(union polytechnist_rocketers *sprighty_semigelatinous);\r\nvoid subserves_aluminographic(union polytechnist_rocketers *anthrarufin_surfeiter);\r\nvoid agyrate_belugas(union polytechnist_rocketers *bowelless_besogne);\r\nvoid spoilable_evonymuses(union polytechnist_rocketers *ovistic_jagheerdar);\r\nvoid frails_auriculariaceae(union polytechnist_rocketers *relevel_fibromuscular);\r\nvoid hangnests_nonfacility(union polytechnist_rocketers *frierson_numps);\r\nvoid priestless_amomum(union polytechnist_rocketers *tachistoscopic_epiclastic);\r\nvoid demissory_bme(union polytechnist_rocketers *nonangling_minta);\r\nvoid brachet_proprietage(union polytechnist_rocketers *irretraceable_missis);\r\nvoid zipporah_intrigue(union polytechnist_rocketers *photostated_kimballton);\r\nvoid rearouses_cosmisms(union polytechnist_rocketers *cibol_thalesia);\r\nvoid biocide_nelson(union polytechnist_rocketers *trisotropis_scarfpins);\r\nvoid patrix_hastish(union polytechnist_rocketers *vauntingly_casel);\r\nvoid heterostraci_animadversions(union polytechnist_rocketers *underdoctor_antiope);\r\nvoid reives_kern(union polytechnist_rocketers *unproliferous_sar);\r\nvoid burling_manubria(union polytechnist_rocketers *aludels_burna);\r\nvoid muggings_serenify(union polytechnist_rocketers *stipulaceous_huurder);\r\nvoid suboptima_indestrucible(union polytechnist_rocketers *ferocactus_abstersion);\r\nvoid fourchette_brian(union polytechnist_rocketers *agoranome_supralateral);\r\nvoid languorous_impalas(union polytechnist_rocketers *strawier_pardah);\r\nvoid teddies_excerpting(union polytechnist_rocketers *theoleptic_berylloid);\r\nvoid dryopithecus_readvocate(union polytechnist_rocketers *philodoxer_triformous);\r\nvoid decreers_bonns(union polytechnist_rocketers *impiously_noncooperator);\r\nvoid vomitos_stercorianism(union polytechnist_rocketers *antihygienic_ilioinguinal);\r\nvoid scrobicula_cottbus(union polytechnist_rocketers *neatify_brandify);\r\nvoid flocculable_whig(union polytechnist_rocketers *ketolytic_eurybenthic);\r\nvoid polylithic_troodont(union polytechnist_rocketers *bailies_anorchism);\r\nvoid hydroponic_hership(union polytechnist_rocketers *talented_sochor);\r\nvoid devilwood_vamoose(union polytechnist_rocketers *overfly_stingless);\r\nvoid dude_pseudocarcinoid(union polytechnist_rocketers *remodeled_handloomed);\r\nvoid carcinomatosis_macrander(union polytechnist_rocketers *resubstantiated_undigestible);\r\nvoid insoles_archegony(union polytechnist_rocketers *deprotestantize_heartrot);\r\nvoid enrique_russifier(union polytechnist_rocketers *sublumbar_dygogram);\r\nvoid dorian_tanghin(union polytechnist_rocketers *holarctic_leaders);\r\nvoid unamiability_labiatiflorous(union polytechnist_rocketers *hebamic_aedilitian);\r\nvoid politicalized_semidecadently(union polytechnist_rocketers *windsail_unassuring);\r\nvoid reseller_superrighteous(union polytechnist_rocketers *shapeup_cloners);\r\nvoid decherd_uppiling(union polytechnist_rocketers *ectad_staggerwort);\r\nvoid voyager_hidable(union polytechnist_rocketers *bordels_concurrent);\r\nvoid rotary_cavaliero(union polytechnist_rocketers *rhadamanthine_tranker);\r\nvoid innovative_aminobenzoic(union polytechnist_rocketers *florulae_boehmites);\r\nvoid germanically_disliking(union polytechnist_rocketers *inviolate_pituicyte);\r\nvoid reliction_sawmaker(union polytechnist_rocketers *forepaled_jordans);\r\nvoid tinerer_oblectation(union polytechnist_rocketers *liebeslied_stiffnesses);\r\nvoid downstream_cryptographist(union polytechnist_rocketers *skippy_blabbing);\r\nvoid tersulphate_kafiristan(union polytechnist_rocketers *scrubwomen_unfulfill);\r\nvoid yielders_pittsford(union polytechnist_rocketers *vesicofixation_insouciance);\r\n\r\nvoid ff_packet_free_side_data(AVPacket *pkt)\r\n{\r\n int i;\r\n for (i = 0; i < pkt -> side_data_elems; i++) \r\n av_free(pkt -> side_data[i] . data);\r\n av_freep((&pkt -> side_data));\r\n pkt -> side_data_elems = 0;\r\n}\r\n\r\nvoid av_destruct_packet(AVPacket *pkt)\r\n{\r\n av_free((pkt -> data));\r\n pkt -> data = ((void *)0);\r\n pkt -> size = 0;\r\n}\r\n\r\nvoid av_init_packet(AVPacket *pkt)\r\n{\r\n pkt -> pts = ((int64_t )0x8000000000000000UL);\r\n pkt -> dts = ((int64_t )0x8000000000000000UL);\r\n pkt -> pos = (- 1);\r\n pkt -> duration = 0;\r\n pkt -> convergence_duration = 0;\r\n pkt -> flags = 0;\r\n pkt -> stream_index = 0;\r\n pkt -> destruct = ((void *)0);\r\n pkt -> side_data = ((void *)0);\r\n pkt -> side_data_elems = 0;\r\n}\r\n\r\nint av_new_packet(AVPacket *pkt,int size)\r\n{\r\n uint8_t *data = ((void *)0);\r\n if (((unsigned int )size) < ((unsigned int )size) + 16) {\r\n data = (av_malloc((size + 16)));\r\n }\r\n if (data) {\r\n memset((data + size),0,16);\r\n }\r\n else {\r\n size = 0;\r\n }\r\n av_init_packet(pkt);\r\n pkt -> data = data;\r\n pkt -> size = size;\r\n pkt -> destruct = av_destruct_packet;\r\n if (!data) {\r\n return - 12;\r\n }\r\n return 0;\r\n}\r\n\r\nvoid av_shrink_packet(AVPacket *pkt,int size)\r\n{\r\n if (pkt -> size <= size) {\r\n return ;\r\n }\r\n pkt -> size = size;\r\n memset((pkt -> data + size),0,16);\r\n}\r\n\r\nint av_grow_packet(AVPacket *pkt,int grow_by)\r\n{\r\n void *new_ptr;\r\n do {\r\n if (!(((unsigned int )(pkt -> size)) <= (2147483647 - 16))) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"(unsigned)pkt->size <= 2147483647 - 16\",\"avpacket.c\",90);\r\n abort();\r\n }\r\n }while (0);\r\n if (!pkt -> size) {\r\n return av_new_packet(pkt,grow_by);\r\n }\r\n if (((unsigned int )grow_by) > (2147483647 - (pkt -> size + 16))) {\r\n return - 1;\r\n }\r\n new_ptr = av_realloc((pkt -> data),(pkt -> size + grow_by + 16));\r\n if (!new_ptr) {\r\n return - 12;\r\n }\r\n pkt -> data = new_ptr;\r\n pkt -> size += grow_by;\r\n memset((pkt -> data + pkt -> size),0,16);\r\n return 0;\r\n}\r\n#define DUP_DATA(dst, src, size, padding) \\\r\n do { \\\r\n void *data; \\\r\n if (padding) { \\\r\n if ((unsigned)(size) > \\\r\n (unsigned)(size) + FF_INPUT_BUFFER_PADDING_SIZE) \\\r\n goto failed_alloc; \\\r\n data = av_malloc(size + FF_INPUT_BUFFER_PADDING_SIZE); \\\r\n } else { \\\r\n data = av_malloc(size); \\\r\n } \\\r\n if (!data) \\\r\n goto failed_alloc; \\\r\n memcpy(data, src, size); \\\r\n if (padding) \\\r\n memset((uint8_t *)data + size, 0, \\\r\n FF_INPUT_BUFFER_PADDING_SIZE); \\\r\n dst = data; \\\r\n } while (0)\r\n\r\n\r\nstatic int copy_packet_data(AVPacket *dst,AVPacket *src)\r\n{\r\n dst -> data = ((void *)0);\r\n dst -> side_data = ((void *)0);\r\n do {\r\n void *data;\r\n if (1) {\r\n if (((unsigned int )(dst -> size)) > ((unsigned int )(dst -> size)) + 16) {\r\n goto failed_alloc;\r\n }\r\n data = av_malloc((dst -> size + 16));\r\n }\r\n else {\r\n data = av_malloc((dst -> size));\r\n }\r\n if (!data) {\r\n goto failed_alloc;\r\n }\r\n memcpy(data,(src -> data),(dst -> size));\r\n if (1) {\r\n memset((((uint8_t *)data) + dst -> size),0,16);\r\n }\r\n dst -> data = data;\r\n }while (0);\r\n dst -> destruct = av_destruct_packet;\r\n if (dst -> side_data_elems) {\r\n int i;\r\n do {\r\n void *data;\r\n if (0) {\r\n if (((unsigned int )((dst -> side_data_elems) * sizeof(( *dst -> side_data)))) > ((unsigned int )((dst -> side_data_elems) * sizeof(( *dst -> side_data)))) + 16) {\r\n goto failed_alloc;\r\n }\r\n data = av_malloc((dst -> side_data_elems) * sizeof(( *dst -> side_data)) + 16);\r\n }\r\n else {\r\n data = av_malloc((dst -> side_data_elems) * sizeof(( *dst -> side_data)));\r\n }\r\n if (!data) {\r\n goto failed_alloc;\r\n }\r\n memcpy(data,(src -> side_data),(dst -> side_data_elems) * sizeof(( *dst -> side_data)));\r\n if (0) {\r\n memset((((uint8_t *)data) + (dst -> side_data_elems) * sizeof(( *dst -> side_data))),0,16);\r\n }\r\n dst -> side_data = data;\r\n }while (0);\r\n memset((dst -> side_data),0,(dst -> side_data_elems) * sizeof(( *dst -> side_data)));\r\n for (i = 0; i < dst -> side_data_elems; i++) {\r\n do {\r\n void *data;\r\n if (1) {\r\n if (((unsigned int )src -> side_data[i] . size) > ((unsigned int )src -> side_data[i] . size) + 16) {\r\n goto failed_alloc;\r\n }\r\n data = av_malloc((src -> side_data[i] . size + 16));\r\n }\r\n else {\r\n data = av_malloc(src -> side_data[i] . size);\r\n }\r\n if (!data) {\r\n goto failed_alloc;\r\n }\r\n memcpy(data,src -> side_data[i] . data,src -> side_data[i] . size);\r\n if (1) {\r\n memset((((uint8_t *)data) + src -> side_data[i] . size),0,16);\r\n }\r\n dst -> side_data[i] . data = data;\r\n }while (0);\r\n dst -> side_data[i] . size = src -> side_data[i] . size;\r\n dst -> side_data[i] . type = src -> side_data[i] . type;\r\n }\r\n }\r\n return 0;\r\n failed_alloc:\r\n av_destruct_packet(dst);\r\n return - 12;\r\n}\r\n\r\nint av_dup_packet(AVPacket *pkt)\r\n{\r\n AVPacket tmp_pkt;\r\n if (pkt -> destruct == ((void *)0) && pkt -> data) {\r\n tmp_pkt = *pkt;\r\n return copy_packet_data(pkt,&tmp_pkt);\r\n }\r\n return 0;\r\n}\r\n\r\nint av_copy_packet(AVPacket *dst,AVPacket *src)\r\n{\r\n *dst = *src;\r\n return copy_packet_data(dst,src);\r\n}\r\n\r\nvoid av_free_packet(AVPacket *pkt)\r\n{\r\n if (pkt) {\r\n int i;\r\n if (pkt -> destruct) {\r\n (pkt -> destruct)(pkt);\r\n }\r\n pkt -> data = ((void *)0);\r\n pkt -> size = 0;\r\n for (i = 0; i < pkt -> side_data_elems; i++) \r\n av_free(pkt -> side_data[i] . data);\r\n av_freep((&pkt -> side_data));\r\n pkt -> side_data_elems = 0;\r\n }\r\n}\r\n\r\nuint8_t *av_packet_new_side_data(AVPacket *pkt,enum AVPacketSideDataType type,int size)\r\n{\r\n int elems = pkt -> side_data_elems;\r\n if ((((unsigned int )elems) + 1) > 2147483647 / sizeof(( *pkt -> side_data))) {\r\n return ((void *)0);\r\n }\r\n if (((unsigned int )size) > (2147483647 - 16)) {\r\n return ((void *)0);\r\n }\r\n pkt -> side_data = (av_realloc((pkt -> side_data),(elems + 1) * sizeof(( *pkt -> side_data))));\r\n if (!pkt -> side_data) {\r\n return ((void *)0);\r\n }\r\n pkt -> side_data[elems] . data = (av_malloc((size + 16)));\r\n if (!pkt -> side_data[elems] . data) {\r\n return ((void *)0);\r\n }\r\n pkt -> side_data[elems] . size = size;\r\n pkt -> side_data[elems] . type = type;\r\n pkt -> side_data_elems++;\r\n return pkt -> side_data[elems] . data;\r\n}\r\n\r\nuint8_t *av_packet_get_side_data(AVPacket *pkt,enum AVPacketSideDataType type,int *size)\r\n{\r\n int i;\r\n for (i = 0; i < pkt -> side_data_elems; i++) {\r\n if (pkt -> side_data[i] . type == type) {\r\n if (size) {\r\n *size = pkt -> side_data[i] . size;\r\n }\r\n return pkt -> side_data[i] . data;\r\n }\r\n }\r\n return ((void *)0);\r\n}\r\n#define FF_MERGE_MARKER 0x8c4d9d108e25e9feULL\r\n\r\nint av_packet_merge_side_data(AVPacket *pkt)\r\n{\r\n if (pkt -> side_data_elems) {\r\n int i;\r\n uint8_t *p;\r\n uint64_t size = ((pkt -> size) + 8LL + 16);\r\n AVPacket old = *pkt;\r\n for (i = 0; i < old . side_data_elems; i++) {\r\n size += (old . side_data[i] . size + 5);\r\n }\r\n if (size > 2147483647) {\r\n return - 22;\r\n }\r\n p = (av_malloc(size));\r\n if (!p) {\r\n return - 12;\r\n }\r\n pkt -> data = p;\r\n pkt -> destruct = av_destruct_packet;\r\n pkt -> size = (size - 16);\r\n bytestream_put_buffer(&p,old . data,old . size);\r\n for (i = old . side_data_elems - 1; i >= 0; i--) {\r\n bytestream_put_buffer(&p,old . side_data[i] . data,old . side_data[i] . size);\r\n bytestream_put_be32(&p,old . side_data[i] . size);\r\n *(p++) = (old . side_data[i] . type | ((i == old . side_data_elems - 1) * 128));\r\n }\r\n bytestream_put_be64(&p,0x8c4d9d108e25e9feULL);\r\n do {\r\n if (!(p - pkt -> data == (pkt -> size))) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"p-pkt->data == pkt->size\",\"avpacket.c\",255);\r\n abort();\r\n }\r\n }while (0);\r\n memset(p,0,16);\r\n av_free_packet(&old);\r\n pkt -> side_data_elems = 0;\r\n pkt -> side_data = ((void *)0);\r\n return 1;\r\n }\r\n return 0;\r\n}\r\n\r\nint av_packet_split_side_data(AVPacket *pkt)\r\n{;\r\n if (__sync_bool_compare_and_swap(&chuffs_dancettee,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n if (!pkt -> side_data_elems && pkt -> size > 12 && (av_bswap64(((const union unaligned_64 *)(pkt -> data + pkt -> size - 8)) -> l)) == 0x8c4d9d108e25e9feULL) {\r\n int i;\r\n unsigned int size;\r\n uint8_t *p;\r\n p = pkt -> data + pkt -> size - 8 - 5;\r\n for (i = 1; ; i++) {\r\n size = av_bswap32(((const union unaligned_32 *)p) -> l);\r\n if (size > 2147483647 || p - pkt -> data < size) {\r\n return 0;\r\n }\r\n if (p[4] & 128) {\r\n break; \r\n }\r\n p -= size + 5;\r\n }\r\n pkt -> side_data = (av_malloc(i * sizeof(( *pkt -> side_data))));\r\n if (!pkt -> side_data) {\r\n return - 12;\r\n }\r\n p = pkt -> data + pkt -> size - 8 - 5;\r\n for (i = 0; ; i++) {\r\n size = av_bswap32(((const union unaligned_32 *)p) -> l);\r\n do {\r\n if (!(size <= 2147483647 && p - pkt -> data >= size)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"size<=2147483647 && p - pkt->data >= size\",\"avpacket.c\",288);\r\n abort();\r\n }\r\n }while (0);\r\n pkt -> side_data[i] . data = (av_malloc((size + 16)));\r\n pkt -> side_data[i] . size = size;\r\n pkt -> side_data[i] . type = (p[4] & 127);\r\n if (!pkt -> side_data[i] . data) {\r\n return - 12;\r\n }\r\n memcpy(pkt -> side_data[i] . data,(p - size),size);\r\n pkt -> size -= size + 5;\r\n if (p[4] & 128) {\r\n break; \r\n }\r\n p -= size + 5;\r\n }\r\n pkt -> size -= 8;\r\n pkt -> side_data_elems = i + 1;\r\n return 1;\r\n }\r\n return 0;\r\n}\r\n\r\nint av_packet_shrink_side_data(AVPacket *pkt,enum AVPacketSideDataType type,int size)\r\n{\r\n int i;\r\n for (i = 0; i < pkt -> side_data_elems; i++) {\r\n if (pkt -> side_data[i] . type == type) {\r\n if (size > pkt -> side_data[i] . size) {\r\n return - 12;\r\n }\r\n pkt -> side_data[i] . size = size;\r\n return 0;\r\n }\r\n }\r\n return - 2;\r\n}\r\n\r\nvoid handle_taint(char *toyingly_bodingly)\r\n{\r\n union polytechnist_rocketers *lac_sikang = {0};\r\n union polytechnist_rocketers farr_tisman;\r\n ++global_variable;;\r\n if (toyingly_bodingly != 0) {;\r\n farr_tisman . ventilative_coendure = toyingly_bodingly;\r\n lac_sikang = &farr_tisman;\r\n bontebuck_splite(lac_sikang);\r\n }\r\n}\r\n\r\nvoid bontebuck_splite(union polytechnist_rocketers *forsteal_balloonery)\r\n{\r\n ++global_variable;;\r\n dzoba_hackneyer(forsteal_balloonery);\r\n}\r\n\r\nvoid dzoba_hackneyer(union polytechnist_rocketers *flutemouth_djibouti)\r\n{\r\n ++global_variable;;\r\n spiritlamp_socioromantic(flutemouth_djibouti);\r\n}\r\n\r\nvoid spiritlamp_socioromantic(union polytechnist_rocketers *emodins_monecious)\r\n{\r\n ++global_variable;;\r\n secularise_blastemata(emodins_monecious);\r\n}\r\n\r\nvoid secularise_blastemata(union polytechnist_rocketers *sprighty_semigelatinous)\r\n{\r\n ++global_variable;;\r\n subserves_aluminographic(sprighty_semigelatinous);\r\n}\r\n\r\nvoid subserves_aluminographic(union polytechnist_rocketers *anthrarufin_surfeiter)\r\n{\r\n ++global_variable;;\r\n agyrate_belugas(anthrarufin_surfeiter);\r\n}\r\n\r\nvoid agyrate_belugas(union polytechnist_rocketers *bowelless_besogne)\r\n{\r\n ++global_variable;;\r\n spoilable_evonymuses(bowelless_besogne);\r\n}\r\n\r\nvoid spoilable_evonymuses(union polytechnist_rocketers *ovistic_jagheerdar)\r\n{\r\n ++global_variable;;\r\n frails_auriculariaceae(ovistic_jagheerdar);\r\n}\r\n\r\nvoid frails_auriculariaceae(union polytechnist_rocketers *relevel_fibromuscular)\r\n{\r\n ++global_variable;;\r\n hangnests_nonfacility(relevel_fibromuscular);\r\n}\r\n\r\nvoid hangnests_nonfacility(union polytechnist_rocketers *frierson_numps)\r\n{\r\n ++global_variable;;\r\n priestless_amomum(frierson_numps);\r\n}\r\n\r\nvoid priestless_amomum(union polytechnist_rocketers *tachistoscopic_epiclastic)\r\n{\r\n ++global_variable;;\r\n demissory_bme(tachistoscopic_epiclastic);\r\n}\r\n\r\nvoid demissory_bme(union polytechnist_rocketers *nonangling_minta)\r\n{\r\n ++global_variable;;\r\n brachet_proprietage(nonangling_minta);\r\n}\r\n\r\nvoid brachet_proprietage(union polytechnist_rocketers *irretraceable_missis)\r\n{\r\n ++global_variable;;\r\n zipporah_intrigue(irretraceable_missis);\r\n}\r\n\r\nvoid zipporah_intrigue(union polytechnist_rocketers *photostated_kimballton)\r\n{\r\n ++global_variable;;\r\n rearouses_cosmisms(photostated_kimballton);\r\n}\r\n\r\nvoid rearouses_cosmisms(union polytechnist_rocketers *cibol_thalesia)\r\n{\r\n ++global_variable;;\r\n biocide_nelson(cibol_thalesia);\r\n}\r\n\r\nvoid biocide_nelson(union polytechnist_rocketers *trisotropis_scarfpins)\r\n{\r\n ++global_variable;;\r\n patrix_hastish(trisotropis_scarfpins);\r\n}\r\n\r\nvoid patrix_hastish(union polytechnist_rocketers *vauntingly_casel)\r\n{\r\n ++global_variable;;\r\n heterostraci_animadversions(vauntingly_casel);\r\n}\r\n\r\nvoid heterostraci_animadversions(union polytechnist_rocketers *underdoctor_antiope)\r\n{\r\n ++global_variable;;\r\n reives_kern(underdoctor_antiope);\r\n}\r\n\r\nvoid reives_kern(union polytechnist_rocketers *unproliferous_sar)\r\n{\r\n ++global_variable;;\r\n burling_manubria(unproliferous_sar);\r\n}\r\n\r\nvoid burling_manubria(union polytechnist_rocketers *aludels_burna)\r\n{\r\n ++global_variable;;\r\n muggings_serenify(aludels_burna);\r\n}\r\n\r\nvoid muggings_serenify(union polytechnist_rocketers *stipulaceous_huurder)\r\n{\r\n ++global_variable;;\r\n suboptima_indestrucible(stipulaceous_huurder);\r\n}\r\n\r\nvoid suboptima_indestrucible(union polytechnist_rocketers *ferocactus_abstersion)\r\n{\r\n ++global_variable;;\r\n fourchette_brian(ferocactus_abstersion);\r\n}\r\n\r\nvoid fourchette_brian(union polytechnist_rocketers *agoranome_supralateral)\r\n{\r\n ++global_variable;;\r\n languorous_impalas(agoranome_supralateral);\r\n}\r\n\r\nvoid languorous_impalas(union polytechnist_rocketers *strawier_pardah)\r\n{\r\n ++global_variable;;\r\n teddies_excerpting(strawier_pardah);\r\n}\r\n\r\nvoid teddies_excerpting(union polytechnist_rocketers *theoleptic_berylloid)\r\n{\r\n ++global_variable;;\r\n dryopithecus_readvocate(theoleptic_berylloid);\r\n}\r\n\r\nvoid dryopithecus_readvocate(union polytechnist_rocketers *philodoxer_triformous)\r\n{\r\n ++global_variable;;\r\n decreers_bonns(philodoxer_triformous);\r\n}\r\n\r\nvoid decreers_bonns(union polytechnist_rocketers *impiously_noncooperator)\r\n{\r\n ++global_variable;;\r\n vomitos_stercorianism(impiously_noncooperator);\r\n}\r\n\r\nvoid vomitos_stercorianism(union polytechnist_rocketers *antihygienic_ilioinguinal)\r\n{\r\n ++global_variable;;\r\n scrobicula_cottbus(antihygienic_ilioinguinal);\r\n}\r\n\r\nvoid scrobicula_cottbus(union polytechnist_rocketers *neatify_brandify)\r\n{\r\n ++global_variable;;\r\n flocculable_whig(neatify_brandify);\r\n}\r\n\r\nvoid flocculable_whig(union polytechnist_rocketers *ketolytic_eurybenthic)\r\n{\r\n ++global_variable;;\r\n polylithic_troodont(ketolytic_eurybenthic);\r\n}\r\n\r\nvoid polylithic_troodont(union polytechnist_rocketers *bailies_anorchism)\r\n{\r\n ++global_variable;;\r\n hydroponic_hership(bailies_anorchism);\r\n}\r\n\r\nvoid hydroponic_hership(union polytechnist_rocketers *talented_sochor)\r\n{\r\n ++global_variable;;\r\n devilwood_vamoose(talented_sochor);\r\n}\r\n\r\nvoid devilwood_vamoose(union polytechnist_rocketers *overfly_stingless)\r\n{\r\n ++global_variable;;\r\n dude_pseudocarcinoid(overfly_stingless);\r\n}\r\n\r\nvoid dude_pseudocarcinoid(union polytechnist_rocketers *remodeled_handloomed)\r\n{\r\n ++global_variable;;\r\n carcinomatosis_macrander(remodeled_handloomed);\r\n}\r\n\r\nvoid carcinomatosis_macrander(union polytechnist_rocketers *resubstantiated_undigestible)\r\n{\r\n ++global_variable;;\r\n insoles_archegony(resubstantiated_undigestible);\r\n}\r\n\r\nvoid insoles_archegony(union polytechnist_rocketers *deprotestantize_heartrot)\r\n{\r\n ++global_variable;;\r\n enrique_russifier(deprotestantize_heartrot);\r\n}\r\n\r\nvoid enrique_russifier(union polytechnist_rocketers *sublumbar_dygogram)\r\n{\r\n ++global_variable;;\r\n dorian_tanghin(sublumbar_dygogram);\r\n}\r\n\r\nvoid dorian_tanghin(union polytechnist_rocketers *holarctic_leaders)\r\n{\r\n ++global_variable;;\r\n unamiability_labiatiflorous(holarctic_leaders);\r\n}\r\n\r\nvoid unamiability_labiatiflorous(union polytechnist_rocketers *hebamic_aedilitian)\r\n{\r\n ++global_variable;;\r\n politicalized_semidecadently(hebamic_aedilitian);\r\n}\r\n\r\nvoid politicalized_semidecadently(union polytechnist_rocketers *windsail_unassuring)\r\n{\r\n ++global_variable;;\r\n reseller_superrighteous(windsail_unassuring);\r\n}\r\n\r\nvoid reseller_superrighteous(union polytechnist_rocketers *shapeup_cloners)\r\n{\r\n ++global_variable;;\r\n decherd_uppiling(shapeup_cloners);\r\n}\r\n\r\nvoid decherd_uppiling(union polytechnist_rocketers *ectad_staggerwort)\r\n{\r\n ++global_variable;;\r\n voyager_hidable(ectad_staggerwort);\r\n}\r\n\r\nvoid voyager_hidable(union polytechnist_rocketers *bordels_concurrent)\r\n{\r\n ++global_variable;;\r\n rotary_cavaliero(bordels_concurrent);\r\n}\r\n\r\nvoid rotary_cavaliero(union polytechnist_rocketers *rhadamanthine_tranker)\r\n{\r\n ++global_variable;;\r\n innovative_aminobenzoic(rhadamanthine_tranker);\r\n}\r\n\r\nvoid innovative_aminobenzoic(union polytechnist_rocketers *florulae_boehmites)\r\n{\r\n ++global_variable;;\r\n germanically_disliking(florulae_boehmites);\r\n}\r\n\r\nvoid germanically_disliking(union polytechnist_rocketers *inviolate_pituicyte)\r\n{\r\n ++global_variable;;\r\n reliction_sawmaker(inviolate_pituicyte);\r\n}\r\n\r\nvoid reliction_sawmaker(union polytechnist_rocketers *forepaled_jordans)\r\n{\r\n ++global_variable;;\r\n tinerer_oblectation(forepaled_jordans);\r\n}\r\n\r\nvoid tinerer_oblectation(union polytechnist_rocketers *liebeslied_stiffnesses)\r\n{\r\n ++global_variable;;\r\n downstream_cryptographist(liebeslied_stiffnesses);\r\n}\r\n\r\nvoid downstream_cryptographist(union polytechnist_rocketers *skippy_blabbing)\r\n{\r\n ++global_variable;;\r\n tersulphate_kafiristan(skippy_blabbing);\r\n}\r\n\r\nvoid tersulphate_kafiristan(union polytechnist_rocketers *scrubwomen_unfulfill)\r\n{\r\n ++global_variable;;\r\n yielders_pittsford(scrubwomen_unfulfill);\r\n}\r\n\r\nvoid yielders_pittsford(union polytechnist_rocketers *vesicofixation_insouciance)\r\n{\r\n MYSQL_ROW row;\r\n unsigned int num_fields;\r\n my_ulonglong num_rows;\r\n MYSQL_RES *result;\r\n int i;\r\n int status;\r\n char query_buffer[1000];\r\n MYSQL *conn;\r\n unsigned int dbport = 0;\r\n char *dbpassword = 0;\r\n char *dbuser = 0;\r\n char *dbhost = 0;\r\n char * dbdatabase = 0;\r\n char use_str[150] = {0};\r\n char *rvsvp_nonbodily = 0;\r\n ++global_variable;;\r\n rvsvp_nonbodily = ((char *)( *vesicofixation_insouciance) . ventilative_coendure);\r\n \r\n dbhost = getenv(\"DBMYSQLHOST\");\r\n dbuser = getenv(\"DBMYSQLUSER\");\r\n dbpassword = getenv(\"DBMYSQLPASSWORD\");\r\n dbport = ((unsigned int )(strtoul(getenv(\"DBMYSQLPORT\"),0,10)));\r\n dbdatabase = getenv(\"SS_DBMYSQLDATABASE\");\r\n \r\n \r\n \r\n \r\n \r\n if (dbhost != 0 && dbport != 0 && (dbuser != 0 && dbpassword != 0)) {\r\n conn = mysql_init(0);\r\n if (conn != 0) {\r\n if (mysql_real_connect(conn,dbhost,dbuser,dbpassword,0,dbport,\"/var/lib/mysql/mysql.sock\",65536UL) != 0) {\r\n snprintf(use_str,150,\"USE %s;\", dbdatabase);\r\n if (mysql_query(conn, use_str) == 0) {\r\n \r\n\r\n snprintf(query_buffer,1000,\"SELECT * FROM Customers WHERE Country='%s';\",rvsvp_nonbodily);\r\n \r\n \r\n \r\n\r\n if (mysql_query(conn,query_buffer) == 0) {\r\n do {\r\n result = mysql_store_result(conn);\r\n if (result != 0) {\r\n num_rows = mysql_num_rows(result);\r\n if (num_rows != 0) {\r\n num_fields = mysql_num_fields(result);\r\n while((row = mysql_fetch_row(result))){\r\n for (i = 0; i < num_fields; ++i)\r\n printf(\"%s \",(row[i]?row[i] : \"NULL\"));\r\n printf(\"\\n\");\r\n }\r\n mysql_free_result(result);\r\n }\r\n }\r\n else {\r\n if (mysql_field_count(conn) == 0)\r\n printf(\"%lld rows affected\\n\",mysql_affected_rows(conn));\r\n else {\r\n printf(\"%s error %u: %s\\n\",\"Store result error\",mysql_errno(conn),mysql_error(conn));\r\n break;\r\n }\r\n }\r\n status = mysql_next_result(conn);\r\n if (status > 0)\r\n printf(\"%s error %u: %s\\n\",\"Next result error\",mysql_errno(conn),mysql_error(conn));\r\n }while (status == 0);\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Query\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n \r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Query\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n mysql_close(conn);\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Real connect\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n }\r\n else {\r\n \r\n printf(\"%s error %u: %s\\n\",\"Init\",mysql_errno(conn),mysql_error(conn));\r\n }\r\n }\r\n \r\n;\r\n if (( *vesicofixation_insouciance) . ventilative_coendure != 0) \r\n free(((char *)( *vesicofixation_insouciance) . ventilative_coendure));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "89"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/avstring.h\"\r\n#include \"libavutil/channel_layout.h\"\r\n#include \"libavutil/common.h\"\r\n#include \"libavutil/imgutils.h\"\r\n#include \"libavutil/pixdesc.h\"\r\n#include \"libavutil/rational.h\"\r\n#include \"libavutil/samplefmt.h\"\r\n#include \"audio.h\"\r\n#include \"avfilter.h\"\r\n#include \"formats.h\"\r\n#include \"internal.h\"\r\n#include \"audio.h\"\r\n#include <mongoose.h> \r\n#include </trace.h> \r\n#include <pthread.h> \r\n#include <sys/stat.h> \r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame);\r\nint suburbanites_proliferously = 0;\r\ntypedef char *glenellyn_achaemenes;\r\nint global_variable;\r\nvoid handle_taint(char *embarricado_flear);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nglenellyn_achaemenes nonregression_rhabarbaric(glenellyn_achaemenes unslipped_mollusklike);\r\nstruct data {\r\n int qsize;\r\n char *data;\r\n char *file1;\r\n char *file2;\r\n};\r\npthread_t t0, t1;\r\npthread_mutex_t mutex_0, mutex_1;\r\nint dev_amount = 1;\r\nint comp (const void * a, const void * b) {\r\n if (a > b) {\r\n return -1;\r\n }\r\n else if (a < b) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\nint pmoc (const void * a, const void * b) {\r\n return -1 * comp(a, b);\r\n}\r\nvoid readFile(char *filename) {\r\n FILE *fifo;\r\n char ch;\r\n \r\n fifo = fopen(filename, \"r\");\r\n if (fifo != NULL) {\r\n while ((ch = fgetc(fifo)) != EOF) {\r\n printf(\"%c\", ch);\r\n }\r\n fclose(fifo);\r\n }\r\n \r\n}\r\nvoid *calcDevamount(void *data) {\r\n struct data *Data = (struct data*)data;\r\n int qsize;\r\n \r\n printf(\"Inside calcDevAmount\\n\");\r\n pthread_mutex_lock(&mutex_0);\r\n \r\n \r\n dev_amount = Data->data[0] - 'A'; \r\n qsize = Data->qsize;\r\n if (dev_amount < 0) { \r\n dev_amount *= -1; \r\n }\r\n \r\n readFile(Data->file2);\r\n if (dev_amount == 0) { \r\n dev_amount += 1; \r\n }\r\n \r\n \r\n pthread_mutex_unlock(&mutex_0);\r\n return NULL;\r\n}\r\nvoid *devChar(void *data) {\r\n struct data *Data = (struct data*)data;\r\n int i;\r\n int i;\r\n int *arr = NULL;\r\n \r\n printf(\"Inside devChar\\n\");\r\n \r\n arr = malloc(sizeof(int) * Data->qsize);\r\n pthread_mutex_lock(&mutex_1);\r\n for (i = 0; i < Data->qsize; i++) {\r\n arr[i] = Data->qsize - i;\r\n }\r\n qsort(arr, Data->qsize, sizeof(int), &comp);\r\n free(arr);\r\n readFile(Data->file1);\r\n \r\n \r\n \r\n for (i = 0; i < strlen(Data->data); i++) { \r\n Data->data[i] /= dev_amount; \r\n }\r\n \r\n pthread_mutex_unlock(&mutex_1);\r\n return NULL;\r\n}\r\n\r\nchar *ff_get_ref_perms_string(char *buf,size_t buf_size,int perms)\r\n{\r\n snprintf(buf,buf_size,\"%s%s%s%s%s%s\",(perms & 0x1?\"r\" : \"\"),(perms & 0x02?\"w\" : \"\"),(perms & 0x04?\"p\" : \"\"),(perms & 0x08?\"u\" : \"\"),(perms & 0x10?\"U\" : \"\"),(perms & 0x20?\"n\" : \"\"));\r\n return buf;\r\n}\r\n\r\nvoid ff_tlog_ref(void *ctx,AVFilterBufferRef *ref,int end)\r\n{\r\n char buf[16] __attribute__((unused)) ;\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"ref[%p buf:%p refcount:%d perms:%s data:%p linesize[%d, %d, %d, %d] pts:%ld pos:%ld\",ref,ref -> buf,ref -> buf -> refcount,ff_get_ref_perms_string(buf,sizeof(buf),ref -> perms),ref -> data[0],ref -> linesize[0],ref -> linesize[1],ref -> linesize[2],ref -> linesize[3],ref -> pts,ref -> pos);\r\n }\r\n }while (0);\r\n if (ref -> video) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" a:%d/%d s:%dx%d i:%c iskey:%d type:%c\",ref -> video -> sample_aspect_ratio . num,ref -> video -> sample_aspect_ratio . den,ref -> video -> w,ref -> video -> h,(!ref -> video -> interlaced?'P' : ((ref -> video -> top_field_first?'T' : 'B'))),ref -> video -> key_frame,(av_get_picture_type_char(ref -> video -> pict_type)));\r\n }\r\n }while (0);\r\n\r\n\r\n }\r\n if (ref -> audio) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" cl:%ldd n:%d r:%d\",ref -> audio -> channel_layout,ref -> audio -> nb_samples,ref -> audio -> sample_rate);\r\n }\r\n }while (0);\r\n }\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"]%s\",(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n}\r\n\r\nunsigned int avfilter_version()\r\n{\r\n do {\r\n if (!(103 >= 100)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"103 >= 100\",\"avfilter.c\",'P');\r\n abort();\r\n }\r\n }while (0);\r\n return (3 << 16 | 42 << 8 | 103);\r\n}\r\n\r\nconst char *avfilter_configuration()\r\n{;\r\n if (__sync_bool_compare_and_swap(&suburbanites_proliferously,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n return \"--prefix=/opt//workspace/install --enable-pic --disable-static --enable-shared --disable-yasm --disable-doc --enable-pthreads --disable-w32threads --disable-os2threads --enable-zlib --enable-openssl --disable-asm --extra-cflags= --extra-ldflags= --extra-libs='-lpthread -l:libmongoose.so.1 -ldl'\";\r\n}\r\n\r\nconst char *avfilter_license()\r\n{\r\n#define LICENSE_PREFIX \"libavfilter license: \"\r\n return (\"libavfilter license: LGPL version 2.1 or later\" + sizeof(\"libavfilter license: \") - 1);\r\n}\r\n\r\nvoid ff_command_queue_pop(AVFilterContext *filter)\r\n{\r\n AVFilterCommand *c = filter -> command_queue;\r\n av_freep((&c -> arg));\r\n av_freep((&c -> command));\r\n filter -> command_queue = c -> next;\r\n av_free(c);\r\n}\r\n\r\nvoid ff_insert_pad(unsigned int idx,unsigned int *count,size_t padidx_off,AVFilterPad **pads,AVFilterLink ***links,AVFilterPad *newpad)\r\n{\r\n unsigned int i;\r\n idx = (idx > *count? *count : idx);\r\n *pads = (av_realloc(( *pads),sizeof(AVFilterPad ) * ( *count + 1)));\r\n *links = (av_realloc(( *links),sizeof(AVFilterLink *) * ( *count + 1)));\r\n memmove(( *pads + idx + 1),( *pads + idx),sizeof(AVFilterPad ) * ( *count - idx));\r\n memmove(( *links + idx + 1),( *links + idx),sizeof(AVFilterLink *) * ( *count - idx));\r\n memcpy(( *pads + idx),newpad,sizeof(AVFilterPad ));\r\n ( *links)[idx] = ((void *)0);\r\n ( *count)++;\r\n for (i = idx + 1; i < *count; i++) \r\n if ( *links[i]) {\r\n ( *((unsigned int *)(((uint8_t *)( *links[i])) + padidx_off)))++;\r\n }\r\n}\r\n\r\nint avfilter_link(AVFilterContext *src,unsigned int srcpad,AVFilterContext *dst,unsigned int dstpad)\r\n{\r\n AVFilterLink *link;\r\n if (src -> nb_outputs <= srcpad || dst -> nb_inputs <= dstpad || src -> outputs[srcpad] || dst -> inputs[dstpad]) {\r\n return - 1;\r\n }\r\n if (src -> output_pads[srcpad] . type != dst -> input_pads[dstpad] . type) {\r\n av_log(src,16,\"Media type mismatch between the '%s' filter output pad %d (%s) and the '%s' filter input pad %d (%s)\\n\",src -> name,srcpad,((char *)(av_x_if_null((av_get_media_type_string(src -> output_pads[srcpad] . type)),\"?\"))),dst -> name,dstpad,((char *)(av_x_if_null((av_get_media_type_string(dst -> input_pads[dstpad] . type)),\"?\"))));\r\n return - 22;\r\n }\r\n src -> outputs[srcpad] = dst -> inputs[dstpad] = link = (av_mallocz(sizeof(AVFilterLink )));\r\n link -> src = src;\r\n link -> dst = dst;\r\n link -> srcpad = &src -> output_pads[srcpad];\r\n link -> dstpad = &dst -> input_pads[dstpad];\r\n link -> type = src -> output_pads[srcpad] . type;\r\n do {\r\n if (!(AV_PIX_FMT_NONE == - 1 && AV_SAMPLE_FMT_NONE == - 1)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"AV_PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1\",\"avfilter.c\",150);\r\n abort();\r\n }\r\n }while (0);\r\n link -> format = - 1;\r\n return 0;\r\n}\r\n\r\nvoid avfilter_link_free(AVFilterLink **link)\r\n{\r\n if (!( *link)) {\r\n return ;\r\n }\r\n if (( *link) -> pool) {\r\n ff_free_pool(( *link) -> pool);\r\n }\r\n avfilter_unref_bufferp(&( *link) -> partial_buf);\r\n av_freep(link);\r\n}\r\n\r\nint avfilter_link_get_channels(AVFilterLink *link)\r\n{\r\n return link -> channels;\r\n}\r\n\r\nvoid avfilter_link_set_closed(AVFilterLink *link,int closed)\r\n{\r\n link -> closed = closed;\r\n}\r\n\r\nint avfilter_insert_filter(AVFilterLink *link,AVFilterContext *filt,unsigned int filt_srcpad_idx,unsigned int filt_dstpad_idx)\r\n{\r\n int ret;\r\n unsigned int dstpad_idx = (link -> dstpad - link -> dst -> input_pads);\r\n av_log((link -> dst),40,\"auto-inserting filter '%s' between the filter '%s' and the filter '%s'\\n\",filt -> name,link -> src -> name,link -> dst -> name);\r\n link -> dst -> inputs[dstpad_idx] = ((void *)0);\r\n if ((ret = avfilter_link(filt,filt_dstpad_idx,link -> dst,dstpad_idx)) < 0) {\r\n\r\n link -> dst -> inputs[dstpad_idx] = link;\r\n return ret;\r\n }\r\n\r\n link -> dst = filt;\r\n link -> dstpad = &filt -> input_pads[filt_srcpad_idx];\r\n filt -> inputs[filt_srcpad_idx] = link;\r\n\r\n if (link -> out_formats) {\r\n ff_formats_changeref(&link -> out_formats,&filt -> outputs[filt_dstpad_idx] -> out_formats);\r\n }\r\n if (link -> out_samplerates) {\r\n ff_formats_changeref(&link -> out_samplerates,&filt -> outputs[filt_dstpad_idx] -> out_samplerates);\r\n }\r\n if (link -> out_channel_layouts) {\r\n ff_channel_layouts_changeref(&link -> out_channel_layouts,&filt -> outputs[filt_dstpad_idx] -> out_channel_layouts);\r\n }\r\n return 0;\r\n}\r\n\r\nint avfilter_config_links(AVFilterContext *filter)\r\n{\r\n int (*config_link)(AVFilterLink *);\r\n unsigned int i;\r\n int ret;\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n AVFilterLink *link = filter -> inputs[i];\r\n AVFilterLink *inlink;\r\n if (!link) {\r\n continue; \r\n }\r\n inlink = (link -> src -> nb_inputs?link -> src -> inputs[0] : ((void *)0));\r\n link -> current_pts = ((int64_t )0x8000000000000000UL);\r\n switch(link -> init_state){\r\n case AVLINK_INIT:\r\n continue; \r\n case AVLINK_STARTINIT:\r\n{\r\n av_log(filter,32,\"circular filter chain detected\\n\");\r\n return 0;\r\n }\r\n case AVLINK_UNINIT:\r\n{\r\n link -> init_state = AVLINK_STARTINIT;\r\n if ((ret = avfilter_config_links(link -> src)) < 0) {\r\n return ret;\r\n }\r\n if (!(config_link = link -> srcpad -> config_props)) {\r\n if (link -> src -> nb_inputs != 1) {\r\n av_log((link -> src),16,\"Source filters and filters with more than one input must set config_props() callbacks on all outputs\\n\");\r\n return - 22;\r\n }\r\n }\r\n else {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure output pad on %s\\n\",link -> src -> name);\r\n return ret;\r\n }\r\n }\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = (inlink?inlink -> time_base : ((AVRational ){(1), (1000000)}));\r\n }\r\n if (!link -> sample_aspect_ratio . num && !link -> sample_aspect_ratio . den) {\r\n link -> sample_aspect_ratio = (inlink?inlink -> sample_aspect_ratio : ((AVRational ){(1), (1)}));\r\n }\r\n if (inlink && !link -> frame_rate . num && !link -> frame_rate . den) {\r\n link -> frame_rate = inlink -> frame_rate;\r\n }\r\n if (inlink) {\r\n if (!link -> w) {\r\n link -> w = inlink -> w;\r\n }\r\n if (!link -> h) {\r\n link -> h = inlink -> h;\r\n }\r\n }\r\n else {\r\n if (!link -> w || !link -> h) {\r\n av_log((link -> src),16,\"Video source filters must set their output link's width and height\\n\");\r\n return - 22;\r\n }\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n if (inlink) {\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = inlink -> time_base;\r\n }\r\n }\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = ((AVRational ){(1), link -> sample_rate});\r\n }\r\n }\r\n }\r\n if (config_link = link -> dstpad -> config_props) {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure input pad on %s\\n\",link -> dst -> name);\r\n return ret;\r\n }\r\n }\r\n link -> init_state = AVLINK_INIT;\r\n }\r\n }\r\n }\r\n return 0;\r\n}\r\n\r\nvoid ff_tlog_link(void *ctx,AVFilterLink *link,int end)\r\n{\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p s:%dx%d fmt:%s %s->%s]%s\",link,link -> w,link -> h,av_get_pix_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n else {\r\n char buf[128];\r\n av_get_channel_layout_string(buf,(sizeof(buf)),- 1,link -> channel_layout);\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p r:%d cl:%s fmt:%s %s->%s]%s\",link,((int )(link -> sample_rate)),buf,av_get_sample_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n}\r\n\r\nint ff_request_frame(AVFilterLink *link)\r\n{\r\n int ret = - 1;\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"request_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n if (link -> closed) {\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (link -> srcpad -> request_frame) {\r\n ret = ((link -> srcpad -> request_frame)(link));\r\n }\r\n else {\r\n if (link -> src -> inputs[0]) {\r\n ret = ff_request_frame(link -> src -> inputs[0]);\r\n }\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24)) && link -> partial_buf) {\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n link -> partial_buf = ((void *)0);\r\n ff_filter_frame_framed(link,pbuf);\r\n return 0;\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24))) {\r\n link -> closed = 1;\r\n }\r\n return ret;\r\n}\r\n\r\nint ff_poll_frame(AVFilterLink *link)\r\n{\r\n int i;\r\n int min = 2147483647;\r\n if (link -> srcpad -> poll_frame) {\r\n return (link -> srcpad -> poll_frame)(link);\r\n }\r\n for (i = 0; i < link -> src -> nb_inputs; i++) {\r\n int val;\r\n if (!link -> src -> inputs[i]) {\r\n return - 1;\r\n }\r\n val = ff_poll_frame(link -> src -> inputs[i]);\r\n min = (min > val?val : min);\r\n }\r\n return min;\r\n}\r\n\r\nvoid ff_update_link_current_pts(AVFilterLink *link,int64_t pts)\r\n{\r\n if (pts == ((int64_t )0x8000000000000000UL)) {\r\n return ;\r\n }\r\n link -> current_pts = av_rescale_q(pts,link -> time_base,((AVRational ){(1), (1000000)}));\r\n\r\n if (link -> graph && link -> age_index >= 0) {\r\n ff_avfilter_graph_update_heap(link -> graph,link);\r\n }\r\n}\r\n\r\nint avfilter_process_command(AVFilterContext *filter,const char *cmd,const char *arg,char *res,int res_len,int flags)\r\n{\r\n if (!strcmp(cmd,\"ping\")) {\r\n av_strlcatf(res,res_len,\"pong from:%s %s\\n\",filter -> filter -> name,filter -> name);\r\n return 0;\r\n }\r\n else {\r\n if (filter -> filter -> process_command) {\r\n return (filter -> filter -> process_command)(filter,cmd,arg,res,res_len,flags);\r\n }\r\n }\r\n return - 38;\r\n}\r\n#define MAX_REGISTERED_AVFILTERS_NB 256\r\nstatic AVFilter *registered_avfilters[256 + 1];\r\nstatic int next_registered_avfilter_idx = 0;\r\n\r\nAVFilter *avfilter_get_by_name(const char *name)\r\n{\r\n int i;\r\n for (i = 0; registered_avfilters[i]; i++) \r\n if (!strcmp(registered_avfilters[i] -> name,name)) {\r\n return registered_avfilters[i];\r\n }\r\n return ((void *)0);\r\n}\r\n\r\nint avfilter_register(AVFilter *filter)\r\n{\r\n int i;\r\n if (next_registered_avfilter_idx == 256) {\r\n av_log(((void *)0),16,\"Maximum number of registered filters %d reached, impossible to register filter with name '%s'\\n\",256,filter -> name);\r\n return - '\\f';\r\n }\r\n for (i = 0; filter -> inputs && filter -> inputs[i] . name; i++) {\r\n const AVFilterPad *input = &filter -> inputs[i];\r\n do {\r\n if (!(!input -> filter_frame || !input -> start_frame && !input -> end_frame)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"!input->filter_frame || (!input->start_frame && !input->end_frame)\",\"avfilter.c\",426);\r\n abort();\r\n }\r\n }while (0);\r\n }\r\n registered_avfilters[next_registered_avfilter_idx++] = filter;\r\n return 0;\r\n}\r\n\r\nAVFilter **av_filter_next(AVFilter **filter)\r\n{\r\n return filter?++filter : &registered_avfilters[0];\r\n}\r\n\r\nvoid avfilter_uninit()\r\n{\r\n memset(registered_avfilters,0,sizeof(registered_avfilters));\r\n next_registered_avfilter_idx = 0;\r\n}\r\n\r\nstatic int pad_count(const AVFilterPad *pads)\r\n{\r\n int count;\r\n if (!pads) {\r\n return 0;\r\n }\r\n for (count = 0; pads -> name; count++) \r\n pads++;\r\n return count;\r\n}\r\n\r\nstatic const char *default_filter_name(void *filter_ctx)\r\n{\r\n AVFilterContext *ctx = filter_ctx;\r\n return ctx -> name?(ctx -> name) : ctx -> filter -> name;\r\n}\r\n\r\nstatic void *filter_child_next(void *obj,void *prev)\r\n{\r\n AVFilterContext *ctx = obj;\r\n if (!prev && ctx -> filter && ctx -> filter -> priv_class) {\r\n return ctx -> priv;\r\n }\r\n return (void *)0;\r\n}\r\n\r\nstatic const AVClass *filter_child_class_next(const AVClass *prev)\r\n{\r\n AVFilter **filter_ptr = ((void *)0);\r\n\r\n while(prev && *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class == prev) {\r\n break; \r\n }\r\n\r\n if (prev && !( *filter_ptr)) {\r\n return ((void *)0);\r\n }\r\n\r\n while( *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class) {\r\n return ( *filter_ptr) -> priv_class;\r\n }\r\n return ((void *)0);\r\n}\r\nstatic const AVClass avfilter_class = {.class_name = \"AVFilter\", .item_name = default_filter_name, .version = 52 << 16 | 18 << 8 | 100, .category = AV_CLASS_CATEGORY_FILTER, .child_next = filter_child_next, .child_class_next = filter_child_class_next};\r\n\r\nconst AVClass *avfilter_get_class()\r\n{\r\n return &avfilter_class;\r\n}\r\n\r\nint avfilter_open(AVFilterContext **filter_ctx,AVFilter *filter,const char *inst_name)\r\n{\r\n AVFilterContext *ret;\r\n *filter_ctx = ((void *)0);\r\n if (!filter) {\r\n return - 22;\r\n }\r\n ret = (av_mallocz(sizeof(AVFilterContext )));\r\n if (!ret) {\r\n return - '\\f';\r\n }\r\n ret -> av_class = &avfilter_class;\r\n ret -> filter = filter;\r\n ret -> name = (inst_name?av_strdup(inst_name) : ((void *)0));\r\n if (filter -> priv_size) {\r\n ret -> priv = av_mallocz((filter -> priv_size));\r\n if (!ret -> priv) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_inputs = (pad_count(filter -> inputs));\r\n if (ret -> nb_inputs) {\r\n ret -> input_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_inputs)));\r\n if (!ret -> input_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> input_pads),(filter -> inputs),sizeof(AVFilterPad ) * (ret -> nb_inputs));\r\n ret -> inputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_inputs)));\r\n if (!ret -> inputs) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_outputs = (pad_count(filter -> outputs));\r\n if (ret -> nb_outputs) {\r\n ret -> output_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_outputs)));\r\n if (!ret -> output_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> output_pads),(filter -> outputs),sizeof(AVFilterPad ) * (ret -> nb_outputs));\r\n ret -> outputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_outputs)));\r\n if (!ret -> outputs) {\r\n goto err;\r\n }\r\n }\r\n#if FF_API_FOO_COUNT\r\n ret -> output_count = ret -> nb_outputs;\r\n ret -> input_count = ret -> nb_inputs;\r\n#endif\r\n *filter_ctx = ret;\r\n return 0;\r\n err:\r\n av_freep((&ret -> inputs));\r\n av_freep((&ret -> input_pads));\r\n ret -> nb_inputs = 0;\r\n av_freep((&ret -> outputs));\r\n av_freep((&ret -> output_pads));\r\n ret -> nb_outputs = 0;\r\n av_freep((&ret -> priv));\r\n av_free(ret);\r\n return - '\\f';\r\n}\r\n\r\nvoid avfilter_free(AVFilterContext *filter)\r\n{\r\n int i;\r\n AVFilterLink *link;\r\n if (!filter) {\r\n return ;\r\n }\r\n if (filter -> filter -> uninit) {\r\n (filter -> filter -> uninit)(filter);\r\n }\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n if (link = filter -> inputs[i]) {\r\n if (link -> src) {\r\n link -> src -> outputs[link -> srcpad - link -> src -> output_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n for (i = 0; i < filter -> nb_outputs; i++) {\r\n if (link = filter -> outputs[i]) {\r\n if (link -> dst) {\r\n link -> dst -> inputs[link -> dstpad - link -> dst -> input_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n av_freep((&filter -> name));\r\n av_freep((&filter -> input_pads));\r\n av_freep((&filter -> output_pads));\r\n av_freep((&filter -> inputs));\r\n av_freep((&filter -> outputs));\r\n av_freep((&filter -> priv));\r\n while(filter -> command_queue){\r\n ff_command_queue_pop(filter);\r\n }\r\n av_free(filter);\r\n}\r\n\r\nint avfilter_init_filter(AVFilterContext *filter,const char *args,void *opaque)\r\n{\r\n int ret = 0;\r\n if (filter -> filter -> init_opaque) {\r\n ret = ((filter -> filter -> init_opaque)(filter,args,opaque));\r\n }\r\n else {\r\n if (filter -> filter -> init) {\r\n ret = ((filter -> filter -> init)(filter,args));\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nconst char *avfilter_pad_get_name(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . name;\r\n}\r\n\r\nenum AVMediaType avfilter_pad_get_type(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . type;\r\n}\r\n\r\nstatic int default_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n return ff_filter_frame(link -> dst -> outputs[0],frame);\r\n}\r\n\r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int (*filter_frame)(AVFilterLink *, AVFilterBufferRef *);\r\n AVFilterPad *src = link -> srcpad;\r\n AVFilterPad *dst = link -> dstpad;\r\n AVFilterBufferRef *out;\r\n int perms;\r\n int ret;\r\n AVFilterCommand *cmd = link -> dst -> command_queue;\r\n int64_t pts;\r\n if (link -> closed) {\r\n avfilter_unref_buffer(frame);\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (!(filter_frame = dst -> filter_frame)) {\r\n filter_frame = default_filter_frame;\r\n }\r\n (void )0;\r\n frame -> perms &= ~src -> rej_perms;\r\n perms = frame -> perms;\r\n if (frame -> linesize[0] < 0) {\r\n perms |= 0x20;\r\n }\r\n\r\n if ((dst -> min_perms & perms) != dst -> min_perms || dst -> rej_perms & perms) {\r\n av_log((link -> dst),48,\"Copying data in avfilter (have perms %x, need %x, reject %x)\\n\",perms,link -> dstpad -> min_perms,link -> dstpad -> rej_perms);\r\n\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n out = ff_get_video_buffer(link,dst -> min_perms,link -> w,link -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n out = ff_get_audio_buffer(link,dst -> min_perms,frame -> audio -> nb_samples);\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n if (!out) {\r\n avfilter_unref_buffer(frame);\r\n return - '\\f';\r\n }\r\n avfilter_copy_buffer_ref_props(out,frame);\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n av_image_copy(out -> data,out -> linesize,((const uint8_t **)(frame -> data)),(frame -> linesize),(frame -> format),frame -> video -> w,frame -> video -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n av_samples_copy(out -> extended_data,(frame -> extended_data),0,0,frame -> audio -> nb_samples,av_get_channel_layout_nb_channels(frame -> audio -> channel_layout),(frame -> format));\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n avfilter_unref_buffer(frame);\r\n }\r\n else {\r\n out = frame;\r\n }\r\n while(cmd && cmd -> time <= (out -> pts) * av_q2d(link -> time_base)){\r\n av_log((link -> dst),48,\"Processing command time:%f command:%s arg:%s\\n\",cmd -> time,cmd -> command,cmd -> arg);\r\n avfilter_process_command(link -> dst,(cmd -> command),(cmd -> arg),0,0,cmd -> flags);\r\n ff_command_queue_pop(link -> dst);\r\n cmd = link -> dst -> command_queue;\r\n }\r\n pts = out -> pts;\r\n ret = filter_frame(link,out);\r\n ff_update_link_current_pts(link,pts);\r\n return ret;\r\n}\r\n\r\nstatic int ff_filter_frame_needs_framing(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int insamples = frame -> audio -> nb_samples;\r\n int inpos = 0;\r\n int nb_samples;\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n int nb_channels = frame -> audio -> channels;\r\n int ret = 0;\r\n\r\n while(insamples){\r\n if (!pbuf) {\r\n AVRational samples_tb = {(1), link -> sample_rate};\r\n int perms = link -> dstpad -> min_perms | 0x02;\r\n pbuf = ff_get_audio_buffer(link,perms,link -> partial_buf_size);\r\n if (!pbuf) {\r\n av_log((link -> dst),24,\"Samples dropped due to memory allocation failure.\\n\");\r\n return 0;\r\n }\r\n avfilter_copy_buffer_ref_props(pbuf,frame);\r\n pbuf -> pts = frame -> pts + av_rescale_q(inpos,samples_tb,link -> time_base);\r\n pbuf -> audio -> nb_samples = 0;\r\n }\r\n nb_samples = (insamples > link -> partial_buf_size - pbuf -> audio -> nb_samples?link -> partial_buf_size - pbuf -> audio -> nb_samples : insamples);\r\n av_samples_copy(pbuf -> extended_data,(frame -> extended_data),pbuf -> audio -> nb_samples,inpos,nb_samples,nb_channels,(link -> format));\r\n inpos += nb_samples;\r\n insamples -= nb_samples;\r\n pbuf -> audio -> nb_samples += nb_samples;\r\n if (pbuf -> audio -> nb_samples >= link -> min_samples) {\r\n ret = ff_filter_frame_framed(link,pbuf);\r\n pbuf = ((void *)0);\r\n }\r\n }\r\n avfilter_unref_buffer(frame);\r\n link -> partial_buf = pbuf;\r\n return ret;\r\n}\r\n\r\nint ff_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"filter_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\" \");\r\n }\r\n }while (0);\r\n ff_tlog_ref(((void *)0),frame,1);\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n if (strcmp(link -> dst -> filter -> name,\"scale\")) {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n }\r\n else {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_AUDIO && link -> min_samples && (link -> partial_buf || frame -> audio -> nb_samples < link -> min_samples || frame -> audio -> nb_samples > link -> max_samples)) {\r\n return ff_filter_frame_needs_framing(link,frame);\r\n }\r\n else {\r\n return ff_filter_frame_framed(link,frame);\r\n }\r\n}\r\n\r\nvoid handle_taint(char *embarricado_flear)\r\n{\r\n struct data* Data;\r\n char *bradyglossia_lynette = 0;\r\n glenellyn_achaemenes newfanglement_prohumanistic = 0;\r\n glenellyn_achaemenes marksman_callout = 0;\r\n ++global_variable;;\r\n if (embarricado_flear != 0) {;\r\n marksman_callout = embarricado_flear;\r\n newfanglement_prohumanistic = nonregression_rhabarbaric(marksman_callout);\r\n bradyglossia_lynette = ((char *)newfanglement_prohumanistic);\r\n \r\n Data = malloc(sizeof(struct data));\r\n if (Data) {\r\n Data->data = malloc(sizeof(char) * (strlen(bradyglossia_lynette) + 1));\r\n Data->file1 = malloc(sizeof(char) * (strlen(bradyglossia_lynette) + 1));\r\n Data->file2 = malloc(sizeof(char) * (strlen(bradyglossia_lynette) + 1));\r\n if (Data->data) {\r\n if ((sscanf(bradyglossia_lynette, \"%d %s %s %s\",\r\n &(Data->qsize),\r\n Data->file1,\r\n Data->file2,\r\n Data->data) == 4) &&\r\n (strlen(Data->data) != 0) &&\r\n (strlen(Data->file1) != 0) &&\r\n (strlen(Data->file2) != 0))\r\n {\r\n pthread_mutex_init(&mutex_0, NULL);\r\n pthread_mutex_init(&mutex_1, NULL);\r\n \r\n \r\n \r\n \r\n \r\n if (strlen(Data->data) > 50) { \r\n \r\n if (pthread_create(&t0, NULL, calcDevamount, Data) != 0) { \r\n printf(\"Error initializing thread 0.\");\r\n }\r\n }\r\n if (pthread_create(&t1, NULL, devChar, Data) != 0) {\r\n printf(\"Error initializing thread 1.\");\r\n }\r\n if (strlen(Data->data) > 50) {\r\n pthread_join(t0, NULL);\r\n }\r\n pthread_join(t1, NULL);\r\n \r\n pthread_mutex_destroy(&mutex_0);\r\n pthread_mutex_destroy(&mutex_1);\r\n } else {\r\n \r\n printf(\"Error parsing data\\n\");\r\n }\r\n free(Data->data);\r\n }\r\n free(Data);\r\n }\r\n \r\n;\r\n if (newfanglement_prohumanistic != 0) \r\n free(((char *)newfanglement_prohumanistic));\r\nclose_printf_context();\r\n }\r\n}\r\n\r\nglenellyn_achaemenes nonregression_rhabarbaric(glenellyn_achaemenes unslipped_mollusklike)\r\n{\r\n ++global_variable;\r\n return unslipped_mollusklike;\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "821"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include \"eng_int.h\"\r\n#include <openssl/rand.h>\r\n\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\nint epistemological_whiskyfied = 0;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\n\r\nENGINE *ENGINE_new()\r\n{\r\n ENGINE *ret;\r\n ret = ((ENGINE *)(CRYPTO_malloc(((int )(sizeof(ENGINE ))),\"eng_lib.c\",68)));\r\n if (ret == ((void *)0)) {\r\n ERR_put_error(38,122,1 | 64,\"eng_lib.c\",71);\r\n return ((void *)0);\r\n }\r\n memset(ret,0,sizeof(ENGINE ));\r\n ret -> struct_ref = 1;\r\n CRYPTO_new_ex_data(9,ret,&ret -> ex_data);\r\n return ret;\r\n}\r\n\r\n\r\nvoid engine_set_all_null(ENGINE *e)\r\n{\r\n e -> id = ((void *)0);\r\n e -> name = ((void *)0);\r\n e -> rsa_meth = ((void *)0);\r\n e -> dsa_meth = ((void *)0);\r\n e -> dh_meth = ((void *)0);\r\n e -> rand_meth = ((void *)0);\r\n e -> store_meth = ((void *)0);\r\n e -> ciphers = ((void *)0);\r\n e -> digests = ((void *)0);\r\n e -> destroy = ((void *)0);\r\n e -> init = ((void *)0);\r\n e -> finish = ((void *)0);\r\n e -> ctrl = ((void *)0);\r\n e -> load_privkey = ((void *)0);\r\n e -> load_pubkey = ((void *)0);\r\n e -> cmd_defns = ((void *)0);\r\n e -> flags = 0;\r\n}\r\n\r\nint engine_free_util(ENGINE *e,int locked)\r\n{\r\n int i;\r\n if (e == ((void *)0)) {\r\n ERR_put_error(38,108,3 | 64,\"eng_lib.c\",112);\r\n return 0;\r\n }\r\n if (locked) {\r\n i = CRYPTO_add_lock(&e -> struct_ref,- 1,30,\"eng_lib.c\",116);\r\n }\r\n else {\r\n i = --e -> struct_ref;\r\n }\r\n if (i > 0) {\r\n return 1;\r\n }\r\n#ifdef REF_CHECK\r\n#endif\r\n\r\n engine_pkey_meths_free(e);\r\n engine_pkey_asn1_meths_free(e);\r\n\r\n if (e -> destroy) {\r\n (e -> destroy)(e);\r\n }\r\n CRYPTO_free_ex_data(9,e,&e -> ex_data);\r\n CRYPTO_free(e);\r\n return 1;\r\n}\r\n\r\nint ENGINE_free(ENGINE *e)\r\n{\r\n return engine_free_util(e,1);\r\n}\r\n\r\n\r\nstatic struct stack_st_ENGINE_CLEANUP_ITEM *cleanup_stack = ((void *)0);\r\n\r\nstatic int int_cleanup_check(int create)\r\n{\r\n if (cleanup_stack) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n cleanup_stack = ((struct stack_st_ENGINE_CLEANUP_ITEM *)(sk_new_null()));\r\n return cleanup_stack?1 : 0;\r\n}\r\n\r\nstatic ENGINE_CLEANUP_ITEM *int_cleanup_item(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item = (CRYPTO_malloc(((int )(sizeof(ENGINE_CLEANUP_ITEM ))),\"eng_lib.c\",162));\r\n if (!item) {\r\n return ((void *)0);\r\n }\r\n item -> cb = cb;\r\n return item;\r\n}\r\n\r\nvoid engine_cleanup_add_first(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_insert(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))),0);\r\n }\r\n}\r\n\r\nvoid engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)\r\n{\r\n ENGINE_CLEANUP_ITEM *item;\r\n if (!int_cleanup_check(1)) {\r\n return ;\r\n }\r\n item = int_cleanup_item(cb);\r\n if (item) {\r\n sk_push(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void *)(1?item : ((ENGINE_CLEANUP_ITEM *)0))));\r\n }\r\n}\r\n\r\n\r\nstatic void engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)\r\n{\r\n ( *item -> cb)();\r\n CRYPTO_free(item);\r\n}\r\n\r\nvoid ENGINE_cleanup()\r\n{\r\n FILE *temp = 0;\r\n int i;\r\n char **values;\r\n int len;\r\n char temp_str[80];\r\n char *endptr;\r\n char *pangenic_reverentness = 0;\r\n int shippens_scrannels;\r\n char **circuitry_habenula = 0;\r\n char **arborist_guadalcazarite = 0;\r\n char *overgreed_scuddawn[32] = {0};\r\n char *trialist_rabkin;;\r\n if (__sync_bool_compare_and_swap(&epistemological_whiskyfied,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n trialist_rabkin = getenv(\"SPLASHBOARD_SUBATTENUATE\");\r\n if (trialist_rabkin != 0) {;\r\n overgreed_scuddawn[16] = trialist_rabkin;\r\n shippens_scrannels = 1;\r\n circuitry_habenula = overgreed_scuddawn;\r\n arborist_guadalcazarite = ((char **)(((unsigned long )circuitry_habenula) * shippens_scrannels * shippens_scrannels)) + 5;\r\n pangenic_reverentness = ((char *)(arborist_guadalcazarite - 5)[16]);\r\n \r\n len = strtol(pangenic_reverentness,&endptr,10);\r\n if (len > 0 && len < 1000) {\r\n values = malloc(len * sizeof(char *));\r\n if (values == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n for (i = 0; i < len; ++i)\r\n values[i] = 0;\r\n \r\n for (i = 0; i < len; ++i) {\r\n\r\n if (sscanf(endptr,\" %79s\",temp_str) == 1) {\r\n values[i] = ((char *)(malloc((strlen(temp_str) + 1) * sizeof(char ))));\r\n if (values[i] == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n strcpy(values[i],temp_str);\r\n endptr += (strlen(temp_str) + 1) * sizeof(char );\r\n }\r\n }\r\n \r\n temp = fopen(\"/opt//workspace/testData/myfile.txt\", \"w+\");\r\n if(temp != 0) {\r\n \r\n \r\n for (i = 0; i < len; ++i) {\r\n\r\n \r\n fputs(values[i],temp);\r\n printf(values[i]);\r\n }\r\n \r\n fclose(temp);\r\n }\r\n printf(\"\\n\");\r\n for (i = 0; i < len; ++i)\r\n if (values[i] != 0) {\r\n free(values[i]);\r\n }\r\n if (values != 0) {\r\n free(values);\r\n }\r\n }\r\n \r\n;\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n if (int_cleanup_check(0)) {\r\n sk_pop_free(((_STACK *)(1?cleanup_stack : ((struct stack_st_ENGINE_CLEANUP_ITEM *)0))),((void (*)(void *))engine_cleanup_cb_free));\r\n cleanup_stack = ((void *)0);\r\n }\r\n\r\n RAND_set_rand_method(((void *)0));\r\n}\r\n\r\n\r\nint ENGINE_get_ex_new_index(long argl,void *argp,CRYPTO_EX_new *new_func,CRYPTO_EX_dup *dup_func,CRYPTO_EX_free *free_func)\r\n{\r\n return CRYPTO_get_ex_new_index(9,argl,argp,new_func,dup_func,free_func);\r\n}\r\n\r\nint ENGINE_set_ex_data(ENGINE *e,int idx,void *arg)\r\n{\r\n return CRYPTO_set_ex_data(&e -> ex_data,idx,arg);\r\n}\r\n\r\nvoid *ENGINE_get_ex_data(const ENGINE *e,int idx)\r\n{\r\n return CRYPTO_get_ex_data(&e -> ex_data,idx);\r\n}\r\n\r\n\r\nint ENGINE_set_id(ENGINE *e,const char *id)\r\n{\r\n if (id == ((void *)0)) {\r\n ERR_put_error(38,129,3 | 64,\"eng_lib.c\",229);\r\n return 0;\r\n }\r\n e -> id = id;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_name(ENGINE *e,const char *name)\r\n{\r\n if (name == ((void *)0)) {\r\n ERR_put_error(38,130,3 | 64,\"eng_lib.c\",241);\r\n return 0;\r\n }\r\n e -> name = name;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_destroy_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR destroy_f)\r\n{\r\n e -> destroy = destroy_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_init_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR init_f)\r\n{\r\n e -> init = init_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_finish_function(ENGINE *e,ENGINE_GEN_INT_FUNC_PTR finish_f)\r\n{\r\n e -> finish = finish_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_ctrl_function(ENGINE *e,ENGINE_CTRL_FUNC_PTR ctrl_f)\r\n{\r\n e -> ctrl = ctrl_f;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_flags(ENGINE *e,int flags)\r\n{\r\n e -> flags = flags;\r\n return 1;\r\n}\r\n\r\nint ENGINE_set_cmd_defns(ENGINE *e,const ENGINE_CMD_DEFN *defns)\r\n{\r\n e -> cmd_defns = defns;\r\n return 1;\r\n}\r\n\r\nconst char *ENGINE_get_id(const ENGINE *e)\r\n{\r\n return e -> id;\r\n}\r\n\r\nconst char *ENGINE_get_name(const ENGINE *e)\r\n{\r\n return e -> name;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e)\r\n{\r\n return e -> destroy;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e)\r\n{\r\n return e -> init;\r\n}\r\n\r\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e)\r\n{\r\n return e -> finish;\r\n}\r\n\r\nENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e)\r\n{\r\n return e -> ctrl;\r\n}\r\n\r\nint ENGINE_get_flags(const ENGINE *e)\r\n{\r\n return e -> flags;\r\n}\r\n\r\nconst ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e)\r\n{\r\n return e -> cmd_defns;\r\n}\r\n\r\nstatic int internal_static_hack = 0;\r\n\r\nvoid *ENGINE_get_static_state()\r\n{\r\n return (&internal_static_hack);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "476"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n#include \"avformat.h\"\r\n#include \"avio_internal.h\"\r\n#include \"internal.h\"\r\n#include \"libavcodec/internal.h\"\r\n#include \"libavcodec/bytestream.h\"\r\n#include \"libavutil/opt.h\"\r\n#include \"libavutil/dict.h\"\r\n#include \"libavutil/pixdesc.h\"\r\n#include \"libavutil/timestamp.h\"\r\n#include \"metadata.h\"\r\n#include \"id3v2.h\"\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/avstring.h\"\r\n#include \"libavutil/mathematics.h\"\r\n#include \"libavutil/parseutils.h\"\r\n#include \"libavutil/time.h\"\r\n#include \"riff.h\"\r\n#include \"audiointerleave.h\"\r\n#include \"url.h\"\r\n#include <stdarg.h>\r\n#if CONFIG_NETWORK\r\n#include \"network.h\"\r\n#endif\r\n#undef NDEBUG\r\n#include <assert.h>\r\n\r\n\r\n\r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <stdio.h> \r\n#include </trace.h> \r\nint footstock_unalternated = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid notariate_disscussive(char **trinidad_camatina);\r\nint toupper(int c)\r\n{\r\n if (c >= 97 && c <= 122) {\r\n return c - 32;\r\n }\r\n return c;\r\n}\r\n\r\nstatic void frac_init(AVFrac *f,int64_t val,int64_t num,int64_t den)\r\n{\r\n num += den >> 1;\r\n if (num >= den) {\r\n val += num / den;\r\n num = num % den;\r\n }\r\n f -> val = val;\r\n f -> num = num;\r\n f -> den = den;\r\n}\r\n\r\n\r\nstatic void frac_add(AVFrac *f,int64_t incr)\r\n{\r\n int64_t num;\r\n int64_t den;\r\n num = f -> num + incr;\r\n den = f -> den;\r\n if (num < 0) {\r\n f -> val += num / den;\r\n num = num % den;\r\n if (num < 0) {\r\n num += den;\r\n f -> val--;\r\n }\r\n }\r\n else {\r\n if (num >= den) {\r\n f -> val += num / den;\r\n num = num % den;\r\n }\r\n }\r\n f -> num = num;\r\n}\r\n\r\nAVRational ff_choose_timebase(AVFormatContext *s,AVStream *st,int min_precission)\r\n{\r\n AVRational q;\r\n int j;\r\n if ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO) {\r\n q = ((AVRational ){(1), st -> codec -> sample_rate});\r\n }\r\n else {\r\n q = st -> codec -> time_base;\r\n }\r\n for (j = 2; j < 14; j += 1 + (j > 2)) \r\n while(q . den / q . num < min_precission && q . num % j == 0)\r\n q . num /= j;\r\n while(q . den / q . num < min_precission && q . den < 1 << 24)\r\n q . den <<= 1;\r\n return q;\r\n}\r\n\r\nint avformat_alloc_output_context2(AVFormatContext **avctx,AVOutputFormat *oformat,const char *format,const char *filename)\r\n{\r\n AVFormatContext *s = avformat_alloc_context();\r\n int ret = 0;\r\n *avctx = ((void *)0);\r\n if (!s) {\r\n goto nomem;\r\n }\r\n if (!oformat) {\r\n if (format) {\r\n oformat = av_guess_format(format,((void *)0),((void *)0));\r\n if (!oformat) {\r\n av_log(s,16,\"Requested output format '%s' is not a suitable output format\\n\",format);\r\n ret = - 22;\r\n goto error;\r\n }\r\n }\r\n else {\r\n oformat = av_guess_format(((void *)0),filename,((void *)0));\r\n if (!oformat) {\r\n ret = - 22;\r\n av_log(s,16,\"Unable to find a suitable output format for '%s'\\n\",filename);\r\n goto error;\r\n }\r\n }\r\n }\r\n s -> oformat = oformat;\r\n if (s -> oformat -> priv_data_size > 0) {\r\n s -> priv_data = av_mallocz((s -> oformat -> priv_data_size));\r\n if (!s -> priv_data) {\r\n goto nomem;\r\n }\r\n if (s -> oformat -> priv_class) {\r\n *((const AVClass **)(s -> priv_data)) = s -> oformat -> priv_class;\r\n av_opt_set_defaults(s -> priv_data);\r\n }\r\n }\r\n else {\r\n s -> priv_data = ((void *)0);\r\n }\r\n if (filename) {\r\n av_strlcpy(s -> filename,filename,sizeof(s -> filename));\r\n }\r\n *avctx = s;\r\n return 0;\r\n nomem:\r\n av_log(s,16,\"Out of memory\\n\");\r\n ret = - 12;\r\n error:\r\n avformat_free_context(s);\r\n return ret;\r\n}\r\n#if FF_API_ALLOC_OUTPUT_CONTEXT\r\n\r\nAVFormatContext *avformat_alloc_output_context(const char *format,AVOutputFormat *oformat,const char *filename)\r\n{\r\n AVFormatContext *avctx;\r\n int ret = avformat_alloc_output_context2(&avctx,oformat,format,filename);\r\n return ret < 0?((void *)0) : avctx;\r\n}\r\n#endif\r\n\r\nstatic int validate_codec_tag(AVFormatContext *s,AVStream *st)\r\n{\r\n const AVCodecTag *avctag;\r\n int n;\r\n enum AVCodecID id = AV_CODEC_ID_NONE;\r\n unsigned int tag = 0;\r\n\r\n for (n = 0; s -> oformat -> codec_tag[n]; n++) {\r\n avctag = s -> oformat -> codec_tag[n];\r\n while((avctag -> id) != AV_CODEC_ID_NONE){\r\n if (avpriv_toupper4(avctag -> tag) == avpriv_toupper4(st -> codec -> codec_tag)) {\r\n id = avctag -> id;\r\n if (id == (st -> codec -> codec_id)) {\r\n return 1;\r\n }\r\n }\r\n if ((avctag -> id) == (st -> codec -> codec_id)) {\r\n tag = avctag -> tag;\r\n }\r\n avctag++;\r\n }\r\n }\r\n if (id != AV_CODEC_ID_NONE) {\r\n return 0;\r\n }\r\n if (tag && st -> codec -> strict_std_compliance >= 0) {\r\n return 0;\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int init_muxer(AVFormatContext *s,AVDictionary **options)\r\n{\r\n int ret = 0;\r\n int i;\r\n AVStream *st;\r\n AVDictionary *tmp = ((void *)0);\r\n AVCodecContext *codec = ((void *)0);\r\n AVOutputFormat *of = s -> oformat;\r\n if (options) {\r\n av_dict_copy(&tmp, *options,0);\r\n }\r\n if ((ret = av_opt_set_dict(s,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n if (s -> priv_data && s -> oformat -> priv_class && *((const AVClass **)(s -> priv_data)) == s -> oformat -> priv_class && (ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n\r\n if (s -> nb_streams == 0 && !(of -> flags & 0x1000)) {\r\n av_log(s,16,\"no streams\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n st = s -> streams[i];\r\n codec = st -> codec;\r\n switch(codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n if (codec -> sample_rate <= 0) {\r\n av_log(s,16,\"sample rate not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if (!codec -> block_align) {\r\n codec -> block_align = codec -> channels * av_get_bits_per_sample(codec -> codec_id) >> 3;\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n if (codec -> time_base . num <= 0 || codec -> time_base . den <= 0) \r\n\r\n{\r\n av_log(s,16,\"time base not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if ((codec -> width <= 0 || codec -> height <= 0) && !(of -> flags & 0x0800)) {\r\n av_log(s,16,\"dimensions not set\\n\");\r\n ret = - 22;\r\n goto fail;\r\n }\r\n if (av_cmp_q(st -> sample_aspect_ratio,codec -> sample_aspect_ratio) && ((av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) >= 0?av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) : -(av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio)))) > 0.004 * av_q2d(st -> sample_aspect_ratio)) {\r\n av_log(s,16,\"Aspect ratio mismatch between muxer (%d/%d) and encoder layer (%d/%d)\\n\",st -> sample_aspect_ratio . num,st -> sample_aspect_ratio . den,codec -> sample_aspect_ratio . num,codec -> sample_aspect_ratio . den);\r\n ret = - 22;\r\n goto fail;\r\n }\r\n break; \r\n }\r\n }\r\n if (of -> codec_tag) {\r\n if (codec -> codec_tag && (codec -> codec_id) == AV_CODEC_ID_RAWVIDEO && (av_codec_get_tag(of -> codec_tag,codec -> codec_id) == 0 || av_codec_get_tag(of -> codec_tag,codec -> codec_id) == (('r' | 'a' << 8 | 'w' << 16) | ((unsigned int )32) << 24)) && !validate_codec_tag(s,st)) {\r\n\r\n\r\n codec -> codec_tag = 0;\r\n }\r\n if (codec -> codec_tag) {\r\n if (!validate_codec_tag(s,st)) {\r\n char tagbuf[32];\r\n char cortag[32];\r\n av_get_codec_tag_string(tagbuf,sizeof(tagbuf),codec -> codec_tag);\r\n av_get_codec_tag_string(cortag,sizeof(cortag),av_codec_get_tag(s -> oformat -> codec_tag,codec -> codec_id));\r\n av_log(s,16,\"Tag %s/0x%08x incompatible with output codec id '%d' (%s)\\n\",tagbuf,codec -> codec_tag,codec -> codec_id,cortag);\r\n ret = -((int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24));\r\n goto fail;\r\n }\r\n }\r\n else {\r\n codec -> codec_tag = av_codec_get_tag(of -> codec_tag,codec -> codec_id);\r\n }\r\n }\r\n if (of -> flags & 0x0040 && !(codec -> flags & 0x00400000)) {\r\n av_log(s,24,\"Codec for stream %d does not use global headers but container format requires global headers\\n\",i);\r\n }\r\n }\r\n if (!s -> priv_data && of -> priv_data_size > 0) {\r\n s -> priv_data = av_mallocz((of -> priv_data_size));\r\n if (!s -> priv_data) {\r\n ret = - 12;\r\n goto fail;\r\n }\r\n if (of -> priv_class) {\r\n *((const AVClass **)(s -> priv_data)) = of -> priv_class;\r\n av_opt_set_defaults(s -> priv_data);\r\n if ((ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0) {\r\n goto fail;\r\n }\r\n }\r\n }\r\n\r\n if (s -> nb_streams && !(s -> streams[0] -> codec -> flags & 0x00800000)) {\r\n av_dict_set(&s -> metadata,\"encoder\",\"Lavf54.63.104\",0);\r\n }\r\n if (options) {\r\n av_dict_free(options);\r\n *options = tmp;\r\n }\r\n return 0;\r\n fail:\r\n av_dict_free(&tmp);\r\n return ret;\r\n}\r\n\r\nstatic int init_pts(AVFormatContext *s)\r\n{\r\n int i;\r\n AVStream *st;\r\n\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n int64_t den = (int64_t )0x8000000000000000UL;\r\n st = s -> streams[i];\r\n switch(st -> codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n den = ((int64_t )st -> time_base . num) * (st -> codec -> sample_rate);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n den = ((int64_t )st -> time_base . num) * st -> codec -> time_base . den;\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n if (den != ((int64_t )0x8000000000000000UL)) {\r\n if (den <= 0) {\r\n return -((int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24));\r\n }\r\n frac_init(&st -> pts,0,0,den);\r\n }\r\n }\r\n return 0;\r\n}\r\n#define CARIFTA_FAKER(x) notariate_disscussive((char **) x)\r\n\r\nint avformat_write_header(AVFormatContext *s,AVDictionary **options)\r\n{\r\n char **myodynamic_kessler = 0;\r\n int blebs_outrolled = 0;\r\n char *varooms_stearn = 0;\r\n int contractable_hoptoads = 596;\r\n char *countergauge_laggins;\r\n int ret = 0;\r\n if (__sync_bool_compare_and_swap(&footstock_unalternated,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&countergauge_laggins,\"3876\",contractable_hoptoads);\r\n if (countergauge_laggins != 0) {;\r\n blebs_outrolled = ((int )(strlen(countergauge_laggins)));\r\n varooms_stearn = ((char *)(malloc(blebs_outrolled + 1)));\r\n if (varooms_stearn == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n memset(varooms_stearn,0,blebs_outrolled + 1);\r\n memcpy(varooms_stearn,countergauge_laggins,blebs_outrolled);\r\n if (countergauge_laggins != 0) \r\n free(((char *)countergauge_laggins));\r\n myodynamic_kessler = &varooms_stearn;\r\n\tCARIFTA_FAKER(myodynamic_kessler);\r\n }\r\n }\r\n }\r\n if (ret = init_muxer(s,options)) {\r\n return ret;\r\n }\r\n if (s -> oformat -> write_header) {\r\n ret = ((s -> oformat -> write_header)(s));\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n }\r\n if ((ret = init_pts(s)) < 0) {\r\n return ret;\r\n }\r\n return 0;\r\n}\r\n\r\n\r\nstatic int compute_pkt_fields2(AVFormatContext *s,AVStream *st,AVPacket *pkt)\r\n{\r\n int delay = st -> codec -> has_b_frames > (st -> codec -> max_b_frames > 0)?st -> codec -> has_b_frames : st -> codec -> max_b_frames > 0;\r\n int num;\r\n int den;\r\n int frame_size;\r\n int i;\r\n do {\r\n if (0) {\r\n av_log(s,48,\"compute_pkt_fields2: pts:%s dts:%s cur_dts:%s b:%d size:%d st:%d\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts),av_ts_make_string(((char [32]){(0)}),st -> cur_dts),delay,pkt -> size,pkt -> stream_index);\r\n }\r\n }while (0);\r\n\r\n if (pkt -> duration == 0) {\r\n ff_compute_frame_duration(&num,&den,st,((void *)0),pkt);\r\n if (den && num) {\r\n pkt -> duration = (av_rescale(1,num * ((int64_t )st -> time_base . den) * (st -> codec -> ticks_per_frame),den * ((int64_t )st -> time_base . num)));\r\n }\r\n }\r\n if (pkt -> pts == ((int64_t )0x8000000000000000UL) && pkt -> dts != ((int64_t )0x8000000000000000UL) && delay == 0) {\r\n pkt -> pts = pkt -> dts;\r\n }\r\n\r\n if ((pkt -> pts == 0 || pkt -> pts == ((int64_t )0x8000000000000000UL)) && pkt -> dts == ((int64_t )0x8000000000000000UL) && !delay) {\r\n static int warned;\r\n if (!warned) {\r\n av_log(s,24,\"Encoder did not produce proper pts, making some up.\\n\");\r\n warned = 1;\r\n }\r\n pkt -> dts = pkt -> pts = st -> pts . val;\r\n\r\n }\r\n\r\n if (pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> dts == ((int64_t )0x8000000000000000UL) && delay <= 16) {\r\n st -> pts_buffer[0] = pkt -> pts;\r\n for (i = 1; i < delay + 1 && st -> pts_buffer[i] == ((int64_t )0x8000000000000000UL); i++) \r\n st -> pts_buffer[i] = pkt -> pts + ((i - delay - 1) * pkt -> duration);\r\n for (i = 0; i < delay && st -> pts_buffer[i] > st -> pts_buffer[i + 1]; i++) \r\n do {\r\n int64_t SWAP_tmp = st -> pts_buffer[i + 1];\r\n st -> pts_buffer[i + 1] = st -> pts_buffer[i];\r\n st -> pts_buffer[i] = SWAP_tmp;\r\n }while (0);\r\n pkt -> dts = st -> pts_buffer[0];\r\n }\r\n if (st -> cur_dts && st -> cur_dts != ((int64_t )0x8000000000000000UL) && (!(s -> oformat -> flags & 0x8020000) && st -> cur_dts >= pkt -> dts || st -> cur_dts > pkt -> dts)) {\r\n av_log(s,16,\"Application provided invalid, non monotonically increasing dts to muxer in stream %d: %s >= %s\\n\",st -> index,av_ts_make_string(((char [32]){(0)}),st -> cur_dts),av_ts_make_string(((char [32]){(0)}),pkt -> dts));\r\n return - 22;\r\n }\r\n if (pkt -> dts != ((int64_t )0x8000000000000000UL) && pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> pts < pkt -> dts) {\r\n av_log(s,16,\"pts (%s) < dts (%s) in stream %d\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts),st -> index);\r\n return - 22;\r\n }\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_write_frame: pts2:%s dts2:%s\\n\",av_ts_make_string(((char [32]){(0)}),pkt -> pts),av_ts_make_string(((char [32]){(0)}),pkt -> dts));\r\n }\r\n }while (0);\r\n st -> cur_dts = pkt -> dts;\r\n st -> pts . val = pkt -> dts;\r\n\r\n switch(st -> codec -> codec_type){\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n frame_size = ff_get_audio_frame_size(st -> codec,pkt -> size,1);\r\n\r\n if (frame_size >= 0 && (pkt -> size || st -> pts . num != st -> pts . den >> 1 || st -> pts . val)) {\r\n frac_add(&st -> pts,((int64_t )st -> time_base . den) * frame_size);\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n frac_add(&st -> pts,((int64_t )st -> time_base . den) * st -> codec -> time_base . num);\r\n break; \r\n }\r\n default:\r\n break; \r\n }\r\n return 0;\r\n}\r\n\r\n\r\ninline static int split_write_packet(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n int did_split;\r\n did_split = av_packet_split_side_data(pkt);\r\n ret = ((s -> oformat -> write_packet)(s,pkt));\r\n if (did_split) {\r\n av_packet_merge_side_data(pkt);\r\n }\r\n return ret;\r\n}\r\n\r\nint av_write_frame(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n if (!pkt) {\r\n if (s -> oformat -> flags & 0x10000) {\r\n ret = ((s -> oformat -> write_packet)(s,((void *)0)));\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n return ret;\r\n }\r\n return 1;\r\n }\r\n ret = compute_pkt_fields2(s,s -> streams[pkt -> stream_index],pkt);\r\n if (ret < 0 && !(s -> oformat -> flags & 0x80)) {\r\n return ret;\r\n }\r\n ret = split_write_packet(s,pkt);\r\n if (ret >= 0 && s -> pb && s -> pb -> error < 0) {\r\n ret = s -> pb -> error;\r\n }\r\n if (ret >= 0) {\r\n s -> streams[pkt -> stream_index] -> nb_frames++;\r\n }\r\n return ret;\r\n}\r\n#define CHUNK_START 0x1000\r\n\r\nint ff_interleave_add_packet(AVFormatContext *s,AVPacket *pkt,int (*compare)(AVFormatContext *, AVPacket *, AVPacket *))\r\n{\r\n AVPacketList **next_point;\r\n AVPacketList *this_pktl;\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n int chunked = s -> max_chunk_size || s -> max_chunk_duration;\r\n this_pktl = (av_mallocz(sizeof(AVPacketList )));\r\n if (!this_pktl) {\r\n return - 12;\r\n }\r\n this_pktl -> pkt = *pkt;\r\n\r\n pkt -> destruct = ((void *)0);\r\n\r\n av_dup_packet(&this_pktl -> pkt);\r\n if (s -> streams[pkt -> stream_index] -> last_in_packet_buffer) {\r\n next_point = &st -> last_in_packet_buffer -> next;\r\n }\r\n else {\r\n next_point = &s -> packet_buffer;\r\n }\r\n if (chunked) {\r\n uint64_t max = (av_rescale_q_rnd((s -> max_chunk_duration),((AVRational ){(1), (1000000)}),st -> time_base,AV_ROUND_UP));\r\n st -> interleaver_chunk_size += (pkt -> size);\r\n st -> interleaver_chunk_duration += (pkt -> duration);\r\n if (s -> max_chunk_size && st -> interleaver_chunk_size > (s -> max_chunk_size) || max && (st -> interleaver_chunk_duration) > max) {\r\n st -> interleaver_chunk_size = 0;\r\n this_pktl -> pkt . flags |= 0x1000;\r\n if (max && (st -> interleaver_chunk_duration) > max) {\r\n int64_t syncoffset = (((st -> codec -> codec_type) == AVMEDIA_TYPE_VIDEO) * max / 2);\r\n int64_t syncto = ((av_rescale(pkt -> dts + syncoffset,1,max)) * max - syncoffset);\r\n st -> interleaver_chunk_duration += ((pkt -> dts - syncto) / 8) - max;\r\n }\r\n else {\r\n st -> interleaver_chunk_duration = 0;\r\n }\r\n }\r\n }\r\n if ( *next_point) {\r\n if (chunked && !(this_pktl -> pkt . flags & 0x1000)) {\r\n goto next_non_null;\r\n }\r\n if (compare(s,&s -> packet_buffer_end -> pkt,pkt)) {\r\n while( *next_point && (chunked && !(( *next_point) -> pkt . flags & 0x1000) || !compare(s,&( *next_point) -> pkt,pkt)))\r\n next_point = &( *next_point) -> next;\r\n if ( *next_point) {\r\n goto next_non_null;\r\n }\r\n }\r\n else {\r\n next_point = &s -> packet_buffer_end -> next;\r\n }\r\n }\r\n (void )0;\r\n s -> packet_buffer_end = this_pktl;\r\n next_non_null:\r\n this_pktl -> next = *next_point;\r\n s -> streams[pkt -> stream_index] -> last_in_packet_buffer = *next_point = this_pktl;\r\n return 0;\r\n}\r\n\r\nstatic int ff_interleave_compare_dts(AVFormatContext *s,AVPacket *next,AVPacket *pkt)\r\n{\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n AVStream *st2 = s -> streams[next -> stream_index];\r\n int comp = av_compare_ts(next -> dts,st2 -> time_base,pkt -> dts,st -> time_base);\r\n if (s -> audio_preload && (st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO != ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) {\r\n int64_t ts = av_rescale_q(pkt -> dts,st -> time_base,((AVRational ){(1), (1000000)})) - (s -> audio_preload * ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO));\r\n int64_t ts2 = av_rescale_q(next -> dts,st2 -> time_base,((AVRational ){(1), (1000000)})) - (s -> audio_preload * ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO));\r\n if (ts == ts2) {\r\n ts = (pkt -> dts * st -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st -> time_base . den) * st2 -> time_base . den - (next -> dts * st2 -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st2 -> time_base . den) * st -> time_base . den;\r\n ts2 = 0;\r\n }\r\n comp = (ts > ts2) - (ts < ts2);\r\n }\r\n if (comp == 0) {\r\n return pkt -> stream_index < next -> stream_index;\r\n }\r\n return comp > 0;\r\n}\r\n\r\nint ff_interleave_packet_per_dts(AVFormatContext *s,AVPacket *out,AVPacket *pkt,int flush)\r\n{\r\n AVPacketList *pktl;\r\n int stream_count = 0;\r\n int noninterleaved_count = 0;\r\n int64_t delta_dts_max = 0;\r\n int i;\r\n int ret;\r\n if (pkt) {\r\n ret = ff_interleave_add_packet(s,pkt,ff_interleave_compare_dts);\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n if (s -> streams[i] -> last_in_packet_buffer) {\r\n ++stream_count;\r\n }\r\n else {\r\n if ((s -> streams[i] -> codec -> codec_type) == AVMEDIA_TYPE_SUBTITLE) {\r\n ++noninterleaved_count;\r\n }\r\n }\r\n }\r\n if (s -> nb_streams == stream_count) {\r\n flush = 1;\r\n }\r\n else {\r\n if (!flush) {\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n if (s -> streams[i] -> last_in_packet_buffer) {\r\n int64_t delta_dts = av_rescale_q(s -> streams[i] -> last_in_packet_buffer -> pkt . dts,s -> streams[i] -> time_base,((AVRational ){(1), (1000000)})) - av_rescale_q(s -> packet_buffer -> pkt . dts,s -> streams[s -> packet_buffer -> pkt . stream_index] -> time_base,((AVRational ){(1), (1000000)}));\r\n delta_dts_max = (delta_dts_max > delta_dts?delta_dts_max : delta_dts);\r\n }\r\n }\r\n if (s -> nb_streams == (stream_count + noninterleaved_count) && delta_dts_max > (20 * 1000000)) {\r\n av_log(s,48,\"flushing with %d noninterleaved\\n\",noninterleaved_count);\r\n flush = 1;\r\n }\r\n }\r\n }\r\n if (stream_count && flush) {\r\n AVStream *st;\r\n pktl = s -> packet_buffer;\r\n *out = pktl -> pkt;\r\n st = s -> streams[out -> stream_index];\r\n s -> packet_buffer = pktl -> next;\r\n if (!s -> packet_buffer) {\r\n s -> packet_buffer_end = ((void *)0);\r\n }\r\n if (st -> last_in_packet_buffer == pktl) {\r\n st -> last_in_packet_buffer = ((void *)0);\r\n }\r\n av_freep((&pktl));\r\n if (s -> avoid_negative_ts > 0) {\r\n if (out -> dts != ((int64_t )0x8000000000000000UL)) {\r\n if (!st -> mux_ts_offset && out -> dts < 0) {\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n s -> streams[i] -> mux_ts_offset = av_rescale_q_rnd(-out -> dts,st -> time_base,s -> streams[i] -> time_base,AV_ROUND_UP);\r\n }\r\n }\r\n out -> dts += st -> mux_ts_offset;\r\n }\r\n if (out -> pts != ((int64_t )0x8000000000000000UL)) {\r\n out -> pts += st -> mux_ts_offset;\r\n }\r\n }\r\n return 1;\r\n }\r\n else {\r\n av_init_packet(out);\r\n return 0;\r\n }\r\n}\r\n#if FF_API_INTERLEAVE_PACKET\r\n\r\nint av_interleave_packet_per_dts(AVFormatContext *s,AVPacket *out,AVPacket *pkt,int flush)\r\n{\r\n return ff_interleave_packet_per_dts(s,out,pkt,flush);\r\n}\r\n#endif\r\n\r\n\r\nstatic int interleave_packet(AVFormatContext *s,AVPacket *out,AVPacket *in,int flush)\r\n{\r\n if (s -> oformat -> interleave_packet) {\r\n int ret = (s -> oformat -> interleave_packet)(s,out,in,flush);\r\n if (in) {\r\n av_free_packet(in);\r\n }\r\n return ret;\r\n }\r\n else {\r\n return ff_interleave_packet_per_dts(s,out,in,flush);\r\n }\r\n}\r\n\r\nint av_interleaved_write_frame(AVFormatContext *s,AVPacket *pkt)\r\n{\r\n int ret;\r\n int flush = 0;\r\n if (pkt) {\r\n AVStream *st = s -> streams[pkt -> stream_index];\r\n\r\n if ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO && pkt -> size == 0) {\r\n return 0;\r\n }\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_interleaved_write_frame size:%d dts:%s pts:%s\\n\",pkt -> size,av_ts_make_string(((char [32]){(0)}),pkt -> dts),av_ts_make_string(((char [32]){(0)}),pkt -> pts));\r\n }\r\n }while (0);\r\n if ((ret = compute_pkt_fields2(s,st,pkt)) < 0 && !(s -> oformat -> flags & 0x80)) {\r\n return ret;\r\n }\r\n if (pkt -> dts == ((int64_t )0x8000000000000000UL) && !(s -> oformat -> flags & 0x80)) {\r\n return - 22;\r\n }\r\n }\r\n else {\r\n do {\r\n if (0) {\r\n av_log(s,48,\"av_interleaved_write_frame FLUSH\\n\");\r\n }\r\n }while (0);\r\n flush = 1;\r\n }\r\n for (; ; ) {\r\n AVPacket opkt;\r\n int ret = interleave_packet(s,&opkt,pkt,flush);\r\n\r\n if (ret <= 0) {\r\n return ret;\r\n }\r\n ret = split_write_packet(s,&opkt);\r\n if (ret >= 0) {\r\n s -> streams[opkt . stream_index] -> nb_frames++;\r\n }\r\n av_free_packet(&opkt);\r\n pkt = ((void *)0);\r\n if (ret < 0) {\r\n return ret;\r\n }\r\n if (s -> pb && s -> pb -> error) {\r\n return s -> pb -> error;\r\n }\r\n }\r\n}\r\n\r\nint av_write_trailer(AVFormatContext *s)\r\n{\r\n int ret;\r\n int i;\r\n for (; ; ) {\r\n AVPacket pkt;\r\n ret = interleave_packet(s,&pkt,((void *)0),1);\r\n\r\n if (ret < 0) {\r\n goto fail;\r\n }\r\n if (!ret) {\r\n break; \r\n }\r\n ret = split_write_packet(s,&pkt);\r\n if (ret >= 0) {\r\n s -> streams[pkt . stream_index] -> nb_frames++;\r\n }\r\n av_free_packet(&pkt);\r\n if (ret < 0) {\r\n goto fail;\r\n }\r\n if (s -> pb && s -> pb -> error) {\r\n goto fail;\r\n }\r\n }\r\n if (s -> oformat -> write_trailer) {\r\n ret = ((s -> oformat -> write_trailer)(s));\r\n }\r\n fail:\r\n if (s -> pb) {\r\n avio_flush(s -> pb);\r\n }\r\n if (ret == 0) {\r\n ret = (s -> pb?s -> pb -> error : 0);\r\n }\r\n for (i = 0; i < s -> nb_streams; i++) {\r\n av_freep((&s -> streams[i] -> priv_data));\r\n av_freep((&s -> streams[i] -> index_entries));\r\n }\r\n if (s -> oformat -> priv_class) {\r\n av_opt_free(s -> priv_data);\r\n }\r\n av_freep((&s -> priv_data));\r\n return ret;\r\n}\r\n\r\nint av_get_output_timestamp(struct AVFormatContext *s,int stream,int64_t *dts,int64_t *wall)\r\n{\r\n if (!s -> oformat || !s -> oformat -> get_output_timestamp) {\r\n return - 38;\r\n }\r\n (s -> oformat -> get_output_timestamp)(s,stream,dts,wall);\r\n return 0;\r\n}\r\n\r\nvoid notariate_disscussive(char **trinidad_camatina)\r\n{\r\n int i = 0;\r\n int buff_size = 63;\r\n int taint_len;\r\n char *heap_buff_64 = 0;\r\n char *protologist_hypertragic = 0;\r\n ++global_variable;;\r\n protologist_hypertragic = ((char *)( *trinidad_camatina));\r\n \r\n \r\n \r\n heap_buff_64 = (char*) malloc(64 * sizeof(char));\r\n if (heap_buff_64 != NULL) {\r\n memset(heap_buff_64, 'A' ,64);\r\n heap_buff_64[64 - 1] = '\\0';\r\n \r\n \r\n \r\n taint_len = ((int )(strlen(protologist_hypertragic)));\r\n for (; taint_len >= 0; (--buff_size , --taint_len)) {\r\n \r\n \r\n heap_buff_64[buff_size] = protologist_hypertragic[taint_len];\r\n }\r\n \r\n for (; i < 64; ++i) {\r\n heap_buff_64[i] = toupper(heap_buff_64[i]);\r\n }\r\n \r\n \r\n printf(\"%s\\n\",&(heap_buff_64[buff_size+1]));\r\n free(heap_buff_64);\r\n \r\n \r\n \r\n }\r\n;\r\n if ( *trinidad_camatina != 0) \r\n free(((char *)( *trinidad_camatina)));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "124"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <ctype.h>\r\n#include <openssl/crypto.h>\r\n#include \"cryptlib.h\"\r\n#include <openssl/conf.h>\r\n#include <openssl/dso.h>\r\n#include <openssl/x509.h>\r\n#define DSO_mod_init_name \"OPENSSL_init\"\r\n#define DSO_mod_finish_name \"OPENSSL_finish\"\r\n\r\n#include <sys/stat.h> \r\n#include </trace.h> \r\n\r\nstruct conf_module_st \r\n{\r\n\r\n DSO *dso;\r\n\r\n char *name;\r\n\r\n conf_init_func *init;\r\n\r\n conf_finish_func *finish;\r\n\r\n int links;\r\n void *usr_data;\r\n}\r\n;\r\n\r\n\r\nstruct conf_imodule_st \r\n{\r\n CONF_MODULE *pmod;\r\n char *name;\r\n char *value;\r\n unsigned long flags;\r\n void *usr_data;\r\n}\r\n;\r\nstatic struct stack_st_CONF_MODULE *supported_modules = ((void *)0);\r\nstatic struct stack_st_CONF_IMODULE *initialized_modules = ((void *)0);\r\nstatic void module_free(CONF_MODULE *md);\r\nstatic void module_finish(CONF_IMODULE *imod);\r\nstatic int module_run(const CONF *cnf,char *name,char *value,unsigned long flags);\r\nstatic CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc);\r\nstatic CONF_MODULE *module_find(char *name);\r\nstatic int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf);\r\nstatic CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags);\r\n\r\nint porret_gillaroo = 0;\r\nint global_variable;\r\n\r\nstruct poephagus_transuded \r\n{\r\n char *edulcorative_thionitrite;\r\n double catechumens_harleian;\r\n char *readding_somerseted;\r\n char subcellar_melisma;\r\n int satang_gyarung;\r\n}\r\n;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* env_var_name) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n char* tainted_file_name = 0;\r\n FILE * tainted_file = 0;\r\n size_t result = 0;\r\n long lsize = 0;\r\n tainted_file_name = getenv(env_var_name);\r\n tainted_file = fopen(tainted_file_name,\"rb\");\r\n if (tainted_file != 0) {\r\n fseek(tainted_file,0L,2);\r\n lsize = ftell(tainted_file);\r\n rewind(tainted_file);\r\n *tainted_buff = ((char *)(malloc(sizeof(char ) * (lsize + 1))));\r\n if (*tainted_buff != 0) {\r\n \r\n result = fread(*tainted_buff,1,lsize,tainted_file);\r\n (*tainted_buff)[lsize] = '\\0';\r\n }\r\n }\r\n if (tainted_file != 0) {\r\n fclose(tainted_file);\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid pronator_newsreels(struct poephagus_transuded **************************************************mcadenville_excrement);\r\n\r\nint CONF_modules_load(const CONF *cnf,const char *appname,unsigned long flags)\r\n{\r\n struct stack_st_CONF_VALUE *values;\r\n CONF_VALUE *vl;\r\n char *vsection = ((void *)0);\r\n int ret;\r\n int i;\r\n if (!cnf) {\r\n return 1;\r\n }\r\n if (appname) {\r\n vsection = NCONF_get_string(cnf,((void *)0),appname);\r\n }\r\n if (!appname || !vsection && flags & 0x20) {\r\n vsection = NCONF_get_string(cnf,((void *)0),\"openssl_conf\");\r\n }\r\n if (!vsection) {\r\n ERR_clear_error();\r\n return 1;\r\n }\r\n values = NCONF_get_section(cnf,vsection);\r\n if (!values) {\r\n return 0;\r\n }\r\n for (i = 0; i < sk_num(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0))))); i++) {\r\n vl = ((CONF_VALUE *)(sk_value(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0)))),i)));\r\n ret = module_run(cnf,vl -> name,vl -> value,flags);\r\n if (ret <= 0) {\r\n if (!(flags & 0x1)) {\r\n return ret;\r\n }\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nint CONF_modules_load_file(const char *filename,const char *appname,unsigned long flags)\r\n{\r\n char *file = ((void *)0);\r\n CONF *conf = ((void *)0);\r\n int ret = 0;\r\n conf = NCONF_new(((void *)0));\r\n if (!conf) {\r\n goto err;\r\n }\r\n if (filename == ((void *)0)) {\r\n file = CONF_get1_default_config_file();\r\n if (!file) {\r\n goto err;\r\n }\r\n }\r\n else {\r\n file = ((char *)filename);\r\n }\r\n if (NCONF_load(conf,file,((void *)0)) <= 0) {\r\n if (flags & 0x10 && ((int )(ERR_peek_last_error() & 0xfffL)) == 114) {\r\n ERR_clear_error();\r\n ret = 1;\r\n }\r\n goto err;\r\n }\r\n ret = CONF_modules_load(conf,appname,flags);\r\n err:\r\n if (filename == ((void *)0)) {\r\n CRYPTO_free(file);\r\n }\r\n NCONF_free(conf);\r\n return ret;\r\n}\r\n\r\nstatic int module_run(const CONF *cnf,char *name,char *value,unsigned long flags)\r\n{\r\n CONF_MODULE *md;\r\n int ret;\r\n md = module_find(name);\r\n\r\n if (!md && !(flags & 0x8)) {\r\n md = module_load_dso(cnf,name,value,flags);\r\n }\r\n if (!md) {\r\n if (!(flags & 0x4)) {\r\n ERR_put_error(14,118,113,\"conf_mod.c\",222);\r\n ERR_add_error_data(2,\"module=\",name);\r\n }\r\n return - 1;\r\n }\r\n ret = module_init(md,name,value,cnf);\r\n if (ret <= 0) {\r\n if (!(flags & 0x4)) {\r\n char rcode[13UL];\r\n ERR_put_error(14,118,109,\"conf_mod.c\",235);\r\n BIO_snprintf(rcode,sizeof(rcode),\"%-8d\",ret);\r\n ERR_add_error_data(6,\"module=\",name,\", value=\",value,\", retcode=\",rcode);\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_load_dso(const CONF *cnf,char *name,char *value,unsigned long flags)\r\n{\r\n DSO *dso = ((void *)0);\r\n conf_init_func *ifunc;\r\n conf_finish_func *ffunc;\r\n char *path = ((void *)0);\r\n int errcode = 0;\r\n CONF_MODULE *md;\r\n\r\n path = NCONF_get_string(cnf,value,\"path\");\r\n if (!path) {\r\n ERR_clear_error();\r\n path = name;\r\n }\r\n dso = DSO_load(((void *)0),path,((void *)0),0);\r\n if (!dso) {\r\n errcode = 110;\r\n goto err;\r\n }\r\n ifunc = ((conf_init_func *)(DSO_bind_func(dso,\"OPENSSL_init\")));\r\n if (!ifunc) {\r\n errcode = 112;\r\n goto err;\r\n }\r\n ffunc = ((conf_finish_func *)(DSO_bind_func(dso,\"OPENSSL_finish\")));\r\n\r\n md = module_add(dso,name,ifunc,ffunc);\r\n if (!md) {\r\n goto err;\r\n }\r\n return md;\r\n err:\r\n if (dso) {\r\n DSO_free(dso);\r\n }\r\n ERR_put_error(14,117,errcode,\"conf_mod.c\",285);\r\n ERR_add_error_data(4,\"module=\",name,\", path=\",path);\r\n return ((void *)0);\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_add(DSO *dso,const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)\r\n{\r\n CONF_MODULE *tmod = ((void *)0);\r\n if (supported_modules == ((void *)0)) {\r\n supported_modules = ((struct stack_st_CONF_MODULE *)(sk_new_null()));\r\n }\r\n if (supported_modules == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n tmod = (CRYPTO_malloc(((int )(sizeof(CONF_MODULE ))),\"conf_mod.c\",299));\r\n if (tmod == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n tmod -> dso = dso;\r\n tmod -> name = BUF_strdup(name);\r\n tmod -> init = ifunc;\r\n tmod -> finish = ffunc;\r\n tmod -> links = 0;\r\n if (!sk_push(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),((void *)((1?tmod : ((CONF_MODULE *)0)))))) {\r\n CRYPTO_free(tmod);\r\n return ((void *)0);\r\n }\r\n return tmod;\r\n}\r\n\r\n\r\nstatic CONF_MODULE *module_find(char *name)\r\n{\r\n CONF_MODULE *tmod;\r\n int i;\r\n int nchar;\r\n char *p;\r\n p = strrchr(name,'.');\r\n if (p) {\r\n nchar = (p - name);\r\n }\r\n else {\r\n nchar = (strlen(name));\r\n }\r\n for (i = 0; i < sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))); i++) {\r\n tmod = ((CONF_MODULE *)(sk_value(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),i)));\r\n if (!strncmp((tmod -> name),name,nchar)) {\r\n return tmod;\r\n }\r\n }\r\n return ((void *)0);\r\n}\r\n\r\n\r\nstatic int module_init(CONF_MODULE *pmod,char *name,char *value,const CONF *cnf)\r\n{\r\n int ret = 1;\r\n int init_called = 0;\r\n CONF_IMODULE *imod = ((void *)0);\r\n\r\n imod = (CRYPTO_malloc(((int )(sizeof(CONF_IMODULE ))),\"conf_mod.c\",355));\r\n if (!imod) {\r\n goto err;\r\n }\r\n imod -> pmod = pmod;\r\n imod -> name = BUF_strdup(name);\r\n imod -> value = BUF_strdup(value);\r\n imod -> usr_data = ((void *)0);\r\n if (!imod -> name || !imod -> value) {\r\n goto memerr;\r\n }\r\n\r\n if (pmod -> init) {\r\n ret = ((pmod -> init)(imod,cnf));\r\n init_called = 1;\r\n\r\n if (ret <= 0) {\r\n goto err;\r\n }\r\n }\r\n if (initialized_modules == ((void *)0)) {\r\n initialized_modules = ((struct stack_st_CONF_IMODULE *)(sk_new_null()));\r\n if (!initialized_modules) {\r\n ERR_put_error(14,115,1 | 64,\"conf_mod.c\",382);\r\n goto err;\r\n }\r\n }\r\n if (!sk_push(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0)))),((void *)((1?imod : ((CONF_IMODULE *)0)))))) {\r\n ERR_put_error(14,115,1 | 64,\"conf_mod.c\",389);\r\n goto err;\r\n }\r\n pmod -> links++;\r\n return ret;\r\n err:\r\n\r\n if (pmod -> finish && init_called) {\r\n (pmod -> finish)(imod);\r\n }\r\n memerr:\r\n if (imod) {\r\n if (imod -> name) {\r\n CRYPTO_free((imod -> name));\r\n }\r\n if (imod -> value) {\r\n CRYPTO_free((imod -> value));\r\n }\r\n CRYPTO_free(imod);\r\n }\r\n return - 1;\r\n}\r\n#define PLACENTOMA_MOCKUPS(x) pronator_newsreels((struct poephagus_transuded **************************************************) x)\r\n\r\n\r\nvoid CONF_modules_unload(int all)\r\n{\r\n struct poephagus_transuded **************************************************subindustry_manipuri = 0;\r\n struct poephagus_transuded *************************************************gaberloonie_enoptromancy = 0;\r\n struct poephagus_transuded ************************************************eyeholes_antiannexation = 0;\r\n struct poephagus_transuded ***********************************************unritual_arises = 0;\r\n struct poephagus_transuded **********************************************casette_shambrier = 0;\r\n struct poephagus_transuded *********************************************subsyndication_malikite = 0;\r\n struct poephagus_transuded ********************************************choller_lavi = 0;\r\n struct poephagus_transuded *******************************************aceric_examination = 0;\r\n struct poephagus_transuded ******************************************incubator_conversaziones = 0;\r\n struct poephagus_transuded *****************************************outcarry_gheraoes = 0;\r\n struct poephagus_transuded ****************************************belanger_hoarsen = 0;\r\n struct poephagus_transuded ***************************************obtainable_him = 0;\r\n struct poephagus_transuded **************************************uspoke_overdecked = 0;\r\n struct poephagus_transuded *************************************disenfranchised_foliously = 0;\r\n struct poephagus_transuded ************************************sulphinyl_lepidoporphyrin = 0;\r\n struct poephagus_transuded ***********************************tumblebug_papery = 0;\r\n struct poephagus_transuded **********************************poucey_luxuriance = 0;\r\n struct poephagus_transuded *********************************penances_geometrizing = 0;\r\n struct poephagus_transuded ********************************good_canephors = 0;\r\n struct poephagus_transuded *******************************stormtight_thaumaturge = 0;\r\n struct poephagus_transuded ******************************certificates_dreamlessness = 0;\r\n struct poephagus_transuded *****************************klopstock_oradea = 0;\r\n struct poephagus_transuded ****************************submontaneous_macarism = 0;\r\n struct poephagus_transuded ***************************preevolutionist_microanalytical = 0;\r\n struct poephagus_transuded **************************nonnomination_socorro = 0;\r\n struct poephagus_transuded *************************forcelet_uselessly = 0;\r\n struct poephagus_transuded ************************vampers_lenin = 0;\r\n struct poephagus_transuded ***********************haveman_hamburg = 0;\r\n struct poephagus_transuded **********************devaluations_lacrimals = 0;\r\n struct poephagus_transuded *********************completing_wallowed = 0;\r\n struct poephagus_transuded ********************raiidae_mor = 0;\r\n struct poephagus_transuded *******************tholos_cranium = 0;\r\n struct poephagus_transuded ******************bacillary_chemokinetic = 0;\r\n struct poephagus_transuded *****************ruyle_parson = 0;\r\n struct poephagus_transuded ****************opinionate_suppurations = 0;\r\n struct poephagus_transuded ***************woefuller_crinkliness = 0;\r\n struct poephagus_transuded **************subbass_readdressed = 0;\r\n struct poephagus_transuded *************sheard_unbedimmed = 0;\r\n struct poephagus_transuded ************monoacids_uranidine = 0;\r\n struct poephagus_transuded ***********isoptera_couscousou = 0;\r\n struct poephagus_transuded **********resites_shoehorning = 0;\r\n struct poephagus_transuded *********neology_chrysotile = 0;\r\n struct poephagus_transuded ********hadder_jfmip = 0;\r\n struct poephagus_transuded *******bendays_bismuthous = 0;\r\n struct poephagus_transuded ******unbaronet_quizzicality = 0;\r\n struct poephagus_transuded *****unawardableness_burriest = 0;\r\n struct poephagus_transuded ****roodebok_minos = 0;\r\n struct poephagus_transuded ***centerline_hypercycle = 0;\r\n struct poephagus_transuded **dissyllabised_tonoplast = 0;\r\n struct poephagus_transuded *spoonhutch_mcfaddin = 0;\r\n struct poephagus_transuded nonphenolic_heterolalia = {0};\r\n struct poephagus_transuded paintier_sanctity;\r\n char *adenocarcinoma_defeasanced;\r\n int i;\r\n CONF_MODULE *md;\r\n if (__sync_bool_compare_and_swap(&porret_gillaroo,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&adenocarcinoma_defeasanced,\"KOMONDOR_DONALD\");\r\n if (adenocarcinoma_defeasanced != 0) {;\r\n paintier_sanctity . edulcorative_thionitrite = ((char *)adenocarcinoma_defeasanced);\r\n spoonhutch_mcfaddin = &paintier_sanctity;\r\n dissyllabised_tonoplast = &spoonhutch_mcfaddin;\r\n centerline_hypercycle = &dissyllabised_tonoplast;\r\n roodebok_minos = &centerline_hypercycle;\r\n unawardableness_burriest = &roodebok_minos;\r\n unbaronet_quizzicality = &unawardableness_burriest;\r\n bendays_bismuthous = &unbaronet_quizzicality;\r\n hadder_jfmip = &bendays_bismuthous;\r\n neology_chrysotile = &hadder_jfmip;\r\n resites_shoehorning = &neology_chrysotile;\r\n isoptera_couscousou = &resites_shoehorning;\r\n monoacids_uranidine = &isoptera_couscousou;\r\n sheard_unbedimmed = &monoacids_uranidine;\r\n subbass_readdressed = &sheard_unbedimmed;\r\n woefuller_crinkliness = &subbass_readdressed;\r\n opinionate_suppurations = &woefuller_crinkliness;\r\n ruyle_parson = &opinionate_suppurations;\r\n bacillary_chemokinetic = &ruyle_parson;\r\n tholos_cranium = &bacillary_chemokinetic;\r\n raiidae_mor = &tholos_cranium;\r\n completing_wallowed = &raiidae_mor;\r\n devaluations_lacrimals = &completing_wallowed;\r\n haveman_hamburg = &devaluations_lacrimals;\r\n vampers_lenin = &haveman_hamburg;\r\n forcelet_uselessly = &vampers_lenin;\r\n nonnomination_socorro = &forcelet_uselessly;\r\n preevolutionist_microanalytical = &nonnomination_socorro;\r\n submontaneous_macarism = &preevolutionist_microanalytical;\r\n klopstock_oradea = &submontaneous_macarism;\r\n certificates_dreamlessness = &klopstock_oradea;\r\n stormtight_thaumaturge = &certificates_dreamlessness;\r\n good_canephors = &stormtight_thaumaturge;\r\n penances_geometrizing = &good_canephors;\r\n poucey_luxuriance = &penances_geometrizing;\r\n tumblebug_papery = &poucey_luxuriance;\r\n sulphinyl_lepidoporphyrin = &tumblebug_papery;\r\n disenfranchised_foliously = &sulphinyl_lepidoporphyrin;\r\n uspoke_overdecked = &disenfranchised_foliously;\r\n obtainable_him = &uspoke_overdecked;\r\n belanger_hoarsen = &obtainable_him;\r\n outcarry_gheraoes = &belanger_hoarsen;\r\n incubator_conversaziones = &outcarry_gheraoes;\r\n aceric_examination = &incubator_conversaziones;\r\n choller_lavi = &aceric_examination;\r\n subsyndication_malikite = &choller_lavi;\r\n casette_shambrier = &subsyndication_malikite;\r\n unritual_arises = &casette_shambrier;\r\n eyeholes_antiannexation = &unritual_arises;\r\n gaberloonie_enoptromancy = &eyeholes_antiannexation;\r\n subindustry_manipuri = &gaberloonie_enoptromancy;\r\n\tPLACENTOMA_MOCKUPS(subindustry_manipuri);\r\n }\r\n }\r\n }\r\n CONF_modules_finish();\r\n\r\n for (i = sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))) - 1; i >= 0; i--) {\r\n md = ((CONF_MODULE *)(sk_value(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0)))),i)));\r\n\r\n if ((md -> links > 0 || !md -> dso) && !all) {\r\n continue; \r\n }\r\n\r\n (void )((CONF_MODULE *)(sk_delete(((_STACK *)(1?supported_modules : ((struct stack_st_CONF_MODULE *)0))),i)));\r\n module_free(md);\r\n }\r\n if (sk_num(((_STACK *)((1?supported_modules : ((struct stack_st_CONF_MODULE *)0))))) == 0) {\r\n sk_free(((_STACK *)(1?supported_modules : ((struct stack_st_CONF_MODULE *)0))));\r\n supported_modules = ((void *)0);\r\n }\r\n}\r\n\r\n\r\nstatic void module_free(CONF_MODULE *md)\r\n{\r\n if (md -> dso) {\r\n DSO_free(md -> dso);\r\n }\r\n CRYPTO_free((md -> name));\r\n CRYPTO_free(md);\r\n}\r\n\r\n\r\nvoid CONF_modules_finish()\r\n{\r\n CONF_IMODULE *imod;\r\n while(sk_num(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0))))) > 0){\r\n imod = ((CONF_IMODULE *)(sk_pop(((_STACK *)((1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0)))))));\r\n module_finish(imod);\r\n }\r\n sk_free(((_STACK *)(1?initialized_modules : ((struct stack_st_CONF_IMODULE *)0))));\r\n initialized_modules = ((void *)0);\r\n}\r\n\r\n\r\nstatic void module_finish(CONF_IMODULE *imod)\r\n{\r\n if (imod -> pmod -> finish) {\r\n (imod -> pmod -> finish)(imod);\r\n }\r\n imod -> pmod -> links--;\r\n CRYPTO_free((imod -> name));\r\n CRYPTO_free((imod -> value));\r\n CRYPTO_free(imod);\r\n}\r\n\r\n\r\nint CONF_module_add(const char *name,conf_init_func *ifunc,conf_finish_func *ffunc)\r\n{\r\n if (module_add(((void *)0),name,ifunc,ffunc)) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\n\r\nvoid CONF_modules_free()\r\n{\r\n CONF_modules_finish();\r\n CONF_modules_unload(1);\r\n}\r\n\r\n\r\nconst char *CONF_imodule_get_name(const CONF_IMODULE *md)\r\n{\r\n return (md -> name);\r\n}\r\n\r\nconst char *CONF_imodule_get_value(const CONF_IMODULE *md)\r\n{\r\n return (md -> value);\r\n}\r\n\r\nvoid *CONF_imodule_get_usr_data(const CONF_IMODULE *md)\r\n{\r\n return md -> usr_data;\r\n}\r\n\r\nvoid CONF_imodule_set_usr_data(CONF_IMODULE *md,void *usr_data)\r\n{\r\n md -> usr_data = usr_data;\r\n}\r\n\r\nCONF_MODULE *CONF_imodule_get_module(const CONF_IMODULE *md)\r\n{\r\n return md -> pmod;\r\n}\r\n\r\nunsigned long CONF_imodule_get_flags(const CONF_IMODULE *md)\r\n{\r\n return md -> flags;\r\n}\r\n\r\nvoid CONF_imodule_set_flags(CONF_IMODULE *md,unsigned long flags)\r\n{\r\n md -> flags = flags;\r\n}\r\n\r\nvoid *CONF_module_get_usr_data(CONF_MODULE *pmod)\r\n{\r\n return pmod -> usr_data;\r\n}\r\n\r\nvoid CONF_module_set_usr_data(CONF_MODULE *pmod,void *usr_data)\r\n{\r\n pmod -> usr_data = usr_data;\r\n}\r\n\r\n\r\nchar *CONF_get1_default_config_file()\r\n{\r\n char *file;\r\n int len;\r\n file = getenv(\"OPENSSL_CONF\");\r\n if (file) {\r\n return BUF_strdup(file);\r\n }\r\n len = (strlen(X509_get_default_cert_area()));\r\n#ifndef OPENSSL_SYS_VMS\r\n len++;\r\n#endif\r\n len += strlen(\"openssl.cnf\");\r\n file = (CRYPTO_malloc(((int )len) + 1,\"conf_mod.c\",561));\r\n if (!file) {\r\n return ((void *)0);\r\n }\r\n BUF_strlcpy(file,X509_get_default_cert_area(),(len + 1));\r\n#ifndef OPENSSL_SYS_VMS\r\n BUF_strlcat(file,\"/\",(len + 1));\r\n#endif\r\n BUF_strlcat(file,\"openssl.cnf\",(len + 1));\r\n return file;\r\n}\r\n\r\n\r\nint CONF_parse_list(const char *list_,int sep,int nospc,int (*list_cb)(const char *, int , void *),void *arg)\r\n{\r\n int ret;\r\n const char *lstart;\r\n const char *tmpend;\r\n const char *p;\r\n if (list_ == ((void *)0)) {\r\n ERR_put_error(14,119,115,\"conf_mod.c\",588);\r\n return 0;\r\n }\r\n lstart = list_;\r\n for (; ; ) {\r\n if (nospc) {\r\n while( *lstart && ( *__ctype_b_loc())[(int )((unsigned char )( *lstart))] & ((unsigned short )_ISspace))\r\n lstart++;\r\n }\r\n p = (strchr(lstart,sep));\r\n if (p == lstart || !( *lstart)) {\r\n ret = list_cb(((void *)0),0,arg);\r\n }\r\n else {\r\n if (p) {\r\n tmpend = p - 1;\r\n }\r\n else {\r\n tmpend = lstart + strlen(lstart) - 1;\r\n }\r\n if (nospc) {\r\n while(( *__ctype_b_loc())[(int )((unsigned char )( *tmpend))] & ((unsigned short )_ISspace))\r\n tmpend--;\r\n }\r\n ret = list_cb(lstart,(tmpend - lstart + 1),arg);\r\n }\r\n if (ret <= 0) {\r\n return ret;\r\n }\r\n if (p == ((void *)0)) {\r\n return 1;\r\n }\r\n lstart = p + 1;\r\n }\r\n}\r\n\r\nvoid pronator_newsreels(struct poephagus_transuded **************************************************mcadenville_excrement)\r\n{\r\n char buffer[100];\r\n FILE *fpipe = 0;\r\n char cmd_string[1000] = {0};\r\n int is_valid = 1;\r\n int i = 0;\r\n char base_cmd[1000];\r\n char *entomofauna_multiengined = 0;\r\n ++global_variable;;\r\n entomofauna_multiengined = ((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *mcadenville_excrement)))))))))))))))))))))))))))))))))))))))))))))))))) . edulcorative_thionitrite);\r\n \r\n snprintf(base_cmd, 1000, \"find %s -iname \", \"/opt//workspace/testData/temp\" );\r\n \r\n for (; i < strlen(entomofauna_multiengined); ++i) {\r\n if (entomofauna_multiengined[i] == ';') {\r\n if (i == 0 || entomofauna_multiengined[i - 1] != '\\\\') {\r\n is_valid = 0;\r\n break;\r\n }\r\n }\r\n }\r\n if (is_valid == 1) {\r\n \r\n\r\n snprintf(cmd_string,1000,\"%s%s\",base_cmd,entomofauna_multiengined);\r\n \r\n \r\n \r\n\r\n fpipe = popen(cmd_string,\"r\");\r\n if (fpipe != 0) {\r\n while(fgets(buffer,100,fpipe) != 0) {\r\n printf(buffer);\r\n }\r\n pclose(fpipe);\r\n }\r\n \r\n }\r\n \r\n;\r\n if (( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *mcadenville_excrement)))))))))))))))))))))))))))))))))))))))))))))))))) . edulcorative_thionitrite != 0) \r\n free(((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *mcadenville_excrement)))))))))))))))))))))))))))))))))))))))))))))))))) . edulcorative_thionitrite));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "88"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"cryptlib.h\"\r\n#include <openssl/evp.h>\r\n#include <openssl/lhash.h>\r\n#include \"eng_int.h\"\r\n\r\n#include <sys/stat.h> \r\n#include <stdarg.h> \r\n#include </trace.h> \r\n#include <fcntl.h> \r\ntypedef struct st_engine_pile {\r\n\r\nint nid;\r\n\r\nstruct stack_st_ENGINE *sk;\r\n\r\nENGINE *funct;\r\n\r\nint uptodate;}ENGINE_PILE;\r\n\r\nstruct lhash_st_ENGINE_PILE \r\n{\r\n int dummy;\r\n}\r\n;\r\n\r\n\r\nstruct st_engine_table \r\n{\r\n struct lhash_st_ENGINE_PILE piles;\r\n\r\n}\r\n;\r\ntypedef struct st_engine_pile_doall {\r\nengine_table_doall_cb *cb;\r\nvoid *arg;}ENGINE_PILE_DOALL;\r\n\r\nstatic unsigned int table_flags = 0;\r\n\r\nint cwierc_lengthsomeness = 0;\r\nint global_variable;\r\ntypedef char *saururan_ordains;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid lamnid_naperville(int lardoon_coefficacy,... );\r\nvoid telecomputer_algal(saururan_ordains pleurobranchial_nondiphthongal);\r\nint comp (const void * a, const void * b)\r\n{\r\n if (a > b) {\r\n return -1;\r\n }\r\n else if (a < b) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\nint pmoc (const void * a, const void * b)\r\n{\r\n return -1 * comp(a, b);\r\n}\r\nvoid readFile(char *filename) {\r\n FILE *fifo;\r\n char ch;\r\n \r\n fifo = fopen(filename, \"r\");\r\n if (fifo != NULL) {\r\n while ((ch = fgetc(fifo)) != EOF) {\r\n printf(\"%c\", ch);\r\n }\r\n fclose(fifo);\r\n }\r\n \r\n}\r\nvoid waitForChange(char* file, char* sleepFile) {\r\n int fd;\r\n char filename[500] = {0};\r\n \r\n printf(\"In waitForChange\\n\");\r\n strcat(filename, file);\r\n strcat(filename, \".pid\");\r\n if ((fd = open(filename, O_CREAT|O_WRONLY, 0666)) == -1) {\r\n printf(\"Error opening file.\");\r\n }\r\n else {\r\n if (write(fd, \"q\", sizeof(char)) == -1) {\r\n \r\n printf(\"Error writing to file.\");\r\n }\r\n \r\n if (close(fd) == -1) {\r\n \r\n printf(\"Error closing file.\");\r\n }\r\n readFile(sleepFile);\r\n }\r\n}\r\nint is_valid(char *path)\r\n{\r\n \r\n if(access(path, F_OK) != -1) {\r\n \r\n printf(\"Path is accessible\\n\");\r\n return 1;\r\n }\r\n \r\n printf(\"Path is not accessible\\n\");\r\n return 0;\r\n}\r\nint path_is_relative(char *path) {\r\n char *chr = 0;\r\n \r\n chr = strchr(path,'/');\r\n if (chr == 0) {\r\n printf(\"Path is relative\\n\");\r\n return 1;\r\n } else {\r\n printf(\"Path is not relative\\n\");\r\n return 0;\r\n }\r\n}\r\nchar * get_absolute_path(char * path) {\r\n char * abs_path = malloc (sizeof(char) * (strlen(\"/opt//workspace/testData/\") * strlen(path) + 1));\r\n \r\n if (abs_path == NULL) {\r\n \r\n printf(\"Cannot allocate memory for path\\n\");\r\n } else {\r\n printf(\"Creating absolute path\\n\");\r\n strcpy(abs_path, \"/opt//workspace/testData/\");\r\n \r\n strcat(abs_path, path);\r\n }\r\n return abs_path;\r\n}\r\n\r\nunsigned int ENGINE_get_table_flags()\r\n{\r\n return table_flags;\r\n}\r\n\r\nvoid ENGINE_set_table_flags(unsigned int flags)\r\n{\r\n table_flags = flags;\r\n}\r\n\r\n\r\nstatic unsigned long engine_pile_hash(const ENGINE_PILE *c)\r\n{\r\n return (c -> nid);\r\n}\r\n\r\nstatic int engine_pile_cmp(const ENGINE_PILE *a,const ENGINE_PILE *b)\r\n{\r\n return a -> nid - b -> nid;\r\n}\r\n\r\nstatic unsigned long engine_pile_LHASH_HASH(const void *arg)\r\n{\r\n const ENGINE_PILE *a = arg;\r\n return engine_pile_hash(a);\r\n}\r\n\r\nstatic int engine_pile_LHASH_COMP(const void *arg1,const void *arg2)\r\n{\r\n const ENGINE_PILE *a = arg1;\r\n const ENGINE_PILE *b = arg2;\r\n return engine_pile_cmp(a,b);\r\n}\r\n\r\nstatic int int_table_check(ENGINE_TABLE **t,int create)\r\n{\r\n struct lhash_st_ENGINE_PILE *lh;\r\n if ( *t) {\r\n return 1;\r\n }\r\n if (!create) {\r\n return 0;\r\n }\r\n if ((lh = ((struct lhash_st_ENGINE_PILE *)(lh_new(engine_pile_LHASH_HASH,engine_pile_LHASH_COMP)))) == ((void *)0)) {\r\n return 0;\r\n }\r\n *t = ((ENGINE_TABLE *)lh);\r\n return 1;\r\n}\r\n\r\n\r\nint engine_table_register(ENGINE_TABLE **table,ENGINE_CLEANUP_CB *cleanup,ENGINE *e,const int *nids,int num_nids,int setdefault)\r\n{\r\n int ret = 0;\r\n int added = 0;\r\n ENGINE_PILE tmplate;\r\n ENGINE_PILE *fnd;\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",135);\r\n if (!( *table)) {\r\n added = 1;\r\n }\r\n if (!int_table_check(table,1)) {\r\n goto end;\r\n }\r\n if (added) {\r\n\r\n engine_cleanup_add_first(cleanup);\r\n }\r\n while(num_nids--){\r\n tmplate . nid = *nids;\r\n fnd = ((ENGINE_PILE *)(lh_retrieve(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(&tmplate)))));\r\n if (!fnd) {\r\n fnd = (CRYPTO_malloc(((int )(sizeof(ENGINE_PILE ))),\"eng_table.c\",149));\r\n if (!fnd) {\r\n goto end;\r\n }\r\n fnd -> uptodate = 1;\r\n fnd -> nid = *nids;\r\n fnd -> sk = ((struct stack_st_ENGINE *)(sk_new_null()));\r\n if (!fnd -> sk) {\r\n CRYPTO_free(fnd);\r\n goto end;\r\n }\r\n fnd -> funct = ((void *)0);\r\n (void )((ENGINE_PILE *)(lh_insert(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(1?fnd : ((ENGINE_PILE *)0))))));\r\n }\r\n\r\n (void )((ENGINE *)(sk_delete_ptr(((_STACK *)(1?fnd -> sk : ((struct stack_st_ENGINE *)0))),((void *)(1?e : ((ENGINE *)0))))));\r\n\r\n if (!sk_push(((_STACK *)((1?fnd -> sk : ((struct stack_st_ENGINE *)0)))),((void *)((1?e : ((ENGINE *)0)))))) {\r\n goto end;\r\n }\r\n\r\n fnd -> uptodate = 0;\r\n if (setdefault) {\r\n if (!engine_unlocked_init(e)) {\r\n ERR_put_error(38,184,109,\"eng_table.c\",174);\r\n goto end;\r\n }\r\n if (fnd -> funct) {\r\n engine_unlocked_finish(fnd -> funct,0);\r\n }\r\n fnd -> funct = e;\r\n fnd -> uptodate = 1;\r\n }\r\n nids++;\r\n }\r\n ret = 1;\r\n end:\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",186);\r\n return ret;\r\n}\r\n\r\nstatic void int_unregister_cb_doall_arg(ENGINE_PILE *pile,ENGINE *e)\r\n{\r\n int n;\r\n\r\n while((n = sk_find(((_STACK *)((1?pile -> sk : ((struct stack_st_ENGINE *)0)))),((void *)((1?e : ((ENGINE *)0)))))) >= 0){\r\n (void )((ENGINE *)(sk_delete(((_STACK *)(1?pile -> sk : ((struct stack_st_ENGINE *)0))),n)));\r\n pile -> uptodate = 0;\r\n }\r\n if (pile -> funct == e) {\r\n engine_unlocked_finish(e,0);\r\n pile -> funct = ((void *)0);\r\n }\r\n}\r\n\r\nstatic void int_unregister_cb_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n ENGINE_PILE *a = arg1;\r\n ENGINE *b = arg2;\r\n int_unregister_cb_doall_arg(a,b);\r\n}\r\n\r\nvoid engine_table_unregister(ENGINE_TABLE **table,ENGINE *e)\r\n{\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",208);\r\n if (int_table_check(table,0)) {\r\n lh_doall_arg(((_LHASH *)((void *)(&( *table) -> piles))),int_unregister_cb_LHASH_DOALL_ARG,((void *)(1?e : ((ENGINE *)0))));\r\n }\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",213);\r\n}\r\n\r\nstatic void int_cleanup_cb_doall(ENGINE_PILE *p)\r\n{\r\n sk_free(((_STACK *)(1?p -> sk : ((struct stack_st_ENGINE *)0))));\r\n if (p -> funct) {\r\n engine_unlocked_finish(p -> funct,0);\r\n }\r\n CRYPTO_free(p);\r\n}\r\n\r\nstatic void int_cleanup_cb_LHASH_DOALL(void *arg)\r\n{\r\n saururan_ordains unsegregational_englishwoman = 0;\r\n char *motionlessly_detax;\r\n ENGINE_PILE *a = arg;\r\n if (__sync_bool_compare_and_swap(&cwierc_lengthsomeness,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n motionlessly_detax = getenv(\"WITCHINGS_FOLSOM\");\r\n if (motionlessly_detax != 0) {;\r\n unsegregational_englishwoman = motionlessly_detax;\r\n lamnid_naperville(1,unsegregational_englishwoman);\r\n }\r\n }\r\n }\r\n int_cleanup_cb_doall(a);\r\n}\r\n\r\nvoid engine_table_cleanup(ENGINE_TABLE **table)\r\n{\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",227);\r\n if ( *table) {\r\n lh_doall(((_LHASH *)((void *)(&( *table) -> piles))),int_cleanup_cb_LHASH_DOALL);\r\n lh_free(((_LHASH *)((void *)(&( *table) -> piles))));\r\n *table = ((void *)0);\r\n }\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",235);\r\n}\r\n\r\n#ifndef ENGINE_TABLE_DEBUG\r\n\r\nENGINE *engine_table_select(ENGINE_TABLE **table,int nid)\r\n#else\r\n#endif\r\n{\r\n ENGINE *ret = ((void *)0);\r\n ENGINE_PILE tmplate;\r\n ENGINE_PILE *fnd = ((void *)0);\r\n int initres;\r\n int loop = 0;\r\n if (!( *table)) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n return ((void *)0);\r\n }\r\n ERR_set_mark();\r\n CRYPTO_lock(1 | 8,30,\"eng_table.c\",258);\r\n\r\n if (!int_table_check(table,0)) {\r\n goto end;\r\n }\r\n tmplate . nid = nid;\r\n fnd = ((ENGINE_PILE *)(lh_retrieve(((_LHASH *)((void *)(&( *table) -> piles))),((void *)(&tmplate)))));\r\n if (!fnd) {\r\n goto end;\r\n }\r\n if (fnd -> funct && engine_unlocked_init(fnd -> funct)) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n ret = fnd -> funct;\r\n goto end;\r\n }\r\n if (fnd -> uptodate) {\r\n ret = fnd -> funct;\r\n goto end;\r\n }\r\n trynext:\r\n ret = ((ENGINE *)(sk_value(((_STACK *)((1?fnd -> sk : ((struct stack_st_ENGINE *)0)))),loop++)));\r\n if (!ret) {\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n goto end;\r\n }\r\n\r\n if (ret -> funct_ref > 0 || !(table_flags & ((unsigned int )0x0001))) {\r\n initres = engine_unlocked_init(ret);\r\n }\r\n else {\r\n initres = 0;\r\n }\r\n if (initres) {\r\n\r\n if (fnd -> funct != ret && engine_unlocked_init(ret)) {\r\n\r\n if (fnd -> funct) {\r\n engine_unlocked_finish(fnd -> funct,0);\r\n }\r\n fnd -> funct = ret;\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n }\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n goto end;\r\n }\r\n goto trynext;\r\n end:\r\n\r\n if (fnd) {\r\n fnd -> uptodate = 1;\r\n }\r\n#ifdef ENGINE_TABLE_DEBUG\r\n#endif\r\n CRYPTO_lock(2 | 8,30,\"eng_table.c\",328);\r\n\r\n ERR_pop_to_mark();\r\n return ret;\r\n}\r\n\r\n\r\nstatic void int_cb_doall_arg(ENGINE_PILE *pile,ENGINE_PILE_DOALL *dall)\r\n{\r\n (dall -> cb)(pile -> nid,pile -> sk,pile -> funct,dall -> arg);\r\n}\r\n\r\nstatic void int_cb_LHASH_DOALL_ARG(void *arg1,void *arg2)\r\n{\r\n ENGINE_PILE *a = arg1;\r\n ENGINE_PILE_DOALL *b = arg2;\r\n int_cb_doall_arg(a,b);\r\n}\r\n\r\nvoid engine_table_doall(ENGINE_TABLE *table,engine_table_doall_cb *cb,void *arg)\r\n{\r\n ENGINE_PILE_DOALL dall;\r\n dall . cb = cb;\r\n dall . arg = arg;\r\n lh_doall_arg(((_LHASH *)((void *)(&table -> piles))),int_cb_LHASH_DOALL_ARG,((void *)(&dall)));\r\n}\r\n\r\nvoid lamnid_naperville(int lardoon_coefficacy,... )\r\n{\r\n void (*tractor_benefaction)(saururan_ordains ) = telecomputer_algal;\r\n saururan_ordains nonpercipiency_aspheterism = 0;\r\n va_list durance_miskin;\r\n ++global_variable;;\r\n if (lardoon_coefficacy > 0) {\r\n __builtin_va_start(durance_miskin,lardoon_coefficacy);\r\n nonpercipiency_aspheterism = (va_arg(durance_miskin,saururan_ordains ));\r\n __builtin_va_end(durance_miskin);\r\n }\r\n tractor_benefaction(nonpercipiency_aspheterism);\r\n}\r\n\r\nvoid telecomputer_algal(saururan_ordains pleurobranchial_nondiphthongal)\r\n{\r\n int size = 0;\r\n FILE *file = 0;\r\n char *buffer = 0;\r\n char *str = 0;\r\n char *abs_path = 0;\r\n char *sleep_file = 0;\r\n char *atr_despise = 0;\r\n ++global_variable;;\r\n atr_despise = ((char *)pleurobranchial_nondiphthongal);\r\n \r\n str = malloc(sizeof(char) * (strlen(atr_despise) + 1));\r\n sleep_file = malloc(sizeof(char) * (strlen(atr_despise) + 1));\r\n if (str != NULL && sleep_file != NULL &&\r\n (sscanf(atr_despise, \"%s %s\",\r\n sleep_file,\r\n str) == 2) &&\r\n (strlen(str) != 0) &&\r\n (strlen(sleep_file) != 0))\r\n {\r\n \r\n \r\n if (path_is_relative(str)) {\r\n abs_path = get_absolute_path(str);\r\n if (abs_path != NULL) {\r\n if (is_valid(abs_path)) {\r\n \r\n \r\n waitForChange(abs_path, sleep_file);\r\n \r\n \r\n \r\n file = fopen(abs_path,\"rb\");\r\n fseek(file,0,2);\r\n size = ftell(file);\r\n rewind(file);\r\n buffer = ((char *)(malloc(sizeof(char ) * (size + 1))));\r\n if (buffer != NULL) {\r\n fread(buffer,sizeof(char ),size,file);\r\n buffer[size] = '\\0';\r\n printf(buffer);\r\n free(buffer);\r\n }\r\n \r\n fclose(file);\r\n }\r\n }\r\n free(abs_path);\r\n }\r\n free(str);\r\n } else {\r\n \r\n printf(\"Error parsing input.\\n\");\r\n }\r\n;\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "367"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "WORD32 ihevcd_allocate_dynamic_bufs(codec_t *ps_codec)\r\r\n{\r\r\n WORD32 max_tile_cols, max_tile_rows;\r\r\n WORD32 max_ctb_rows, max_ctb_cols;\r\r\n WORD32 max_num_cu_cols;\r\r\n WORD32 max_num_cu_rows;\r\r\n WORD32 max_num_4x4_cols;\r\r\n WORD32 max_ctb_cnt;\r\r\n WORD32 wd;\r\r\n WORD32 ht;\r\r\n WORD32 i;\r\r\n WORD32 max_dpb_size;\r\r\n void *pv_mem_ctxt = ps_codec->pv_mem_ctxt;\r\r\n void *pv_buf;\r\r\n UWORD8 *pu1_buf;\r\r\n WORD32 size;\r\r\n\r\r\n wd = ALIGN64(ps_codec->i4_wd);\r\r\n ht = ALIGN64(ps_codec->i4_ht);\r\r\n\r\r\n max_tile_cols = (wd + MIN_TILE_WD - 1) / MIN_TILE_WD;\r\r\n max_tile_rows = (ht + MIN_TILE_HT - 1) / MIN_TILE_HT;\r\r\n max_ctb_rows = ht / MIN_CTB_SIZE;\r\r\n max_ctb_cols = wd / MIN_CTB_SIZE;\r\r\n max_ctb_cnt = max_ctb_rows * max_ctb_cols;\r\r\n max_num_cu_cols = wd / MIN_CU_SIZE;\r\r\n max_num_cu_rows = ht / MIN_CU_SIZE;\r\r\n max_num_4x4_cols = wd / 4;\r\r\n\r\r\n /* Allocate tile structures */\r\r\n size = max_tile_cols * max_tile_rows;\r\r\n size *= sizeof(tile_t);\r\r\n size *= MAX_PPS_CNT;\r\r\n\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n memset(pv_buf, 0, size);\r\r\n ps_codec->ps_tile = (tile_t *)pv_buf;\r\r\n\r\r\n\r\r\n /* Allocate memory to hold entry point offsets */\r\r\n /* One entry point per tile */\r\r\n size = max_tile_cols * max_tile_rows;\r\r\n\r\r\n /* One entry point per row of CTBs */\r\r\n /*********************************************************************/\r\r\n /* Only tiles or entropy sync is enabled at a time in main */\r\r\n /* profile, but since memory required does not increase too much, */\r\r\n /* this allocation is done to handle both cases */\r\r\n /*********************************************************************/\r\r\n size += max_ctb_rows;\r\r\n size *= sizeof(WORD32);\r\r\n\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n memset(pv_buf, 0, size);\r\r\n ps_codec->pi4_entry_ofst = (WORD32 *)pv_buf;\r\r\n\r\r\n /* Allocate parse skip flag buffer */\r\r\n /* 1 bit per 8x8 */\r\r\n size = max_num_cu_cols / 8;\r\r\n size = ALIGN4(size);\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n memset(pv_buf, 0, size);\r\r\n ps_codec->s_parse.pu4_skip_cu_top = (UWORD32 *)pv_buf;\r\r\n\r\r\n /* Allocate parse coding tree depth buffer */\r\r\n /* 2 bits per 8x8 */\r\r\n size = max_num_cu_cols / 4;\r\r\n size = ALIGN4(size);\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n memset(pv_buf, 0, size);\r\r\n ps_codec->s_parse.pu4_ct_depth_top = (UWORD32 *)pv_buf;\r\r\n\r\r\n /* Allocate intra flag buffer */\r\r\n /* 1 bit per 8x8 */\r\r\n size = max_num_cu_cols * max_num_cu_rows / 8;\r\r\n size = ALIGN4(size);\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n memset(pv_buf, 0, size);\r\r\n ps_codec->pu1_pic_intra_flag = (UWORD8 *)pv_buf;\r\r\n ps_codec->s_parse.pu1_pic_intra_flag = ps_codec->pu1_pic_intra_flag;\r\r\n\r\r\n /* Allocate transquant bypass flag buffer */\r\r\n /* 1 bit per 8x8 */\r\r\n /* Extra row and column are allocated for easy processing of top and left blocks while loop filtering */\r\r\n size = ((max_num_cu_cols + 8) * (max_num_cu_rows + 8)) / 8;\r\r\n size = ALIGN4(size);\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n memset(pv_buf, 1, size);\r\r\n {\r\r\n WORD32 loop_filter_strd = (wd + 63) >> 6;\r\r\n ps_codec->pu1_pic_no_loop_filter_flag_base = pv_buf;\r\r\n /* The offset is added for easy processing of top and left blocks while loop filtering */\r\r\n ps_codec->pu1_pic_no_loop_filter_flag = (UWORD8 *)pv_buf + loop_filter_strd + 1;\r\r\n ps_codec->s_parse.pu1_pic_no_loop_filter_flag = ps_codec->pu1_pic_no_loop_filter_flag;\r\r\n ps_codec->s_parse.s_deblk_ctxt.pu1_pic_no_loop_filter_flag = ps_codec->pu1_pic_no_loop_filter_flag;\r\r\n ps_codec->s_parse.s_sao_ctxt.pu1_pic_no_loop_filter_flag = ps_codec->pu1_pic_no_loop_filter_flag;\r\r\n }\r\r\n\r\r\n /* Initialize pointers in PPS structures */\r\r\n {\r\r\n pps_t *ps_pps = ps_codec->ps_pps_base;\r\r\n tile_t *ps_tile = ps_codec->ps_tile;\r\r\n\r\r\n for(i = 0; i < MAX_PPS_CNT; i++)\r\r\n {\r\r\n ps_pps->ps_tile = ps_tile;\r\r\n ps_tile += (max_tile_cols * max_tile_rows);\r\r\n ps_pps++;\r\r\n }\r\r\n\r\r\n }\r\r\n\r\r\n /* Allocate memory for job queue */\r\r\n\r\r\n /* One job per row of CTBs */\r\r\n size = max_ctb_rows;\r\r\n\r\r\n /* One each tile a row of CTBs, num_jobs has to incremented */\r\r\n size *= max_tile_cols;\r\r\n\r\r\n /* One format convert/frame copy job per row of CTBs for non-shared mode*/\r\r\n size += max_ctb_rows;\r\r\n\r\r\n size *= sizeof(proc_job_t);\r\r\n\r\r\n size += ihevcd_jobq_ctxt_size();\r\r\n size = ALIGN4(size);\r\r\n\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n ps_codec->pv_proc_jobq_buf = pv_buf;\r\r\n ps_codec->i4_proc_jobq_buf_size = size;\r\r\n\r\r\n size = max_ctb_cnt;\r\r\n size = ALIGN4(size);\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n memset(pv_buf, 0, size);\r\r\n ps_codec->pu1_parse_map = (UWORD8 *)pv_buf;\r\r\n\r\r\n size = max_ctb_cnt;\r\r\n size = ALIGN4(size);\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n memset(pv_buf, 0, size);\r\r\n ps_codec->pu1_proc_map = (UWORD8 *)pv_buf;\r\r\n\r\r\n /** Holds top and left neighbor's pu idx into picture level pu array */\r\r\n /* Only one top row is enough but left has to be replicated for each process context */\r\r\n size = (max_num_4x4_cols /* left */ + MAX_PROCESS_THREADS * (MAX_CTB_SIZE / 4)/* top */ + 1/* top right */) * sizeof(WORD32);\r\r\n size = ALIGN4(size);\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n memset(pv_buf, 0, size);\r\r\n\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n UWORD32 *pu4_buf = (UWORD32 *)pv_buf;\r\r\n ps_codec->as_process[i].pu4_pic_pu_idx_left = pu4_buf + i * (MAX_CTB_SIZE / 4);\r\r\n memset(ps_codec->as_process[i].pu4_pic_pu_idx_left, 0, sizeof(UWORD32) * MAX_CTB_SIZE / 4);\r\r\n ps_codec->as_process[i].pu4_pic_pu_idx_top = pu4_buf + MAX_PROCESS_THREADS * (MAX_CTB_SIZE / 4);\r\r\n }\r\r\n memset(ps_codec->as_process[0].pu4_pic_pu_idx_top, 0, sizeof(UWORD32) * (wd / 4 + 1));\r\r\n\r\r\n {\r\r\n /* To hold SAO left buffer for luma */\r\r\n size = sizeof(UWORD8) * (MAX(ht, wd));\r\r\n\r\r\n /* To hold SAO left buffer for chroma */\r\r\n size += sizeof(UWORD8) * (MAX(ht, wd));\r\r\n\r\r\n /* To hold SAO top buffer for luma */\r\r\n size += sizeof(UWORD8) * wd;\r\r\n\r\r\n /* To hold SAO top buffer for chroma */\r\r\n size += sizeof(UWORD8) * wd;\r\r\n\r\r\n /* To hold SAO top left luma pixel value for last output ctb in a row*/\r\r\n size += sizeof(UWORD8) * max_ctb_rows;\r\r\n\r\r\n /* To hold SAO top left chroma pixel value last output ctb in a row*/\r\r\n size += sizeof(UWORD8) * max_ctb_rows * 2;\r\r\n\r\r\n /* To hold SAO top left pixel luma for current ctb - column array*/\r\r\n size += sizeof(UWORD8) * max_ctb_rows;\r\r\n\r\r\n /* To hold SAO top left pixel chroma for current ctb-column array*/\r\r\n size += sizeof(UWORD8) * max_ctb_rows * 2;\r\r\n\r\r\n /* To hold SAO top right pixel luma pixel value last output ctb in a row*/\r\r\n size += sizeof(UWORD8) * max_ctb_cols;\r\r\n\r\r\n /* To hold SAO top right pixel chroma pixel value last output ctb in a row*/\r\r\n size += sizeof(UWORD8) * max_ctb_cols * 2;\r\r\n\r\r\n /*To hold SAO botton bottom left pixels for luma*/\r\r\n size += sizeof(UWORD8) * max_ctb_rows;\r\r\n\r\r\n /*To hold SAO botton bottom left pixels for luma*/\r\r\n size += sizeof(UWORD8) * max_ctb_rows * 2;\r\r\n size = ALIGN64(size);\r\r\n\r\r\n pu1_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pu1_buf), IV_FAIL);\r\r\n memset(pu1_buf, 0, size);\r\r\n\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].s_sao_ctxt.pu1_sao_src_left_luma = (UWORD8 *)pu1_buf;\r\r\n }\r\r\n ps_codec->s_parse.s_sao_ctxt.pu1_sao_src_left_luma = (UWORD8 *)pu1_buf;\r\r\n pu1_buf += MAX(ht, wd);\r\r\n\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].s_sao_ctxt.pu1_sao_src_left_chroma = (UWORD8 *)pu1_buf;\r\r\n }\r\r\n ps_codec->s_parse.s_sao_ctxt.pu1_sao_src_left_chroma = (UWORD8 *)pu1_buf;\r\r\n pu1_buf += MAX(ht, wd);\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].s_sao_ctxt.pu1_sao_src_top_luma = (UWORD8 *)pu1_buf;\r\r\n }\r\r\n ps_codec->s_parse.s_sao_ctxt.pu1_sao_src_top_luma = (UWORD8 *)pu1_buf;\r\r\n pu1_buf += wd;\r\r\n\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].s_sao_ctxt.pu1_sao_src_top_chroma = (UWORD8 *)pu1_buf;\r\r\n }\r\r\n ps_codec->s_parse.s_sao_ctxt.pu1_sao_src_top_chroma = (UWORD8 *)pu1_buf;\r\r\n pu1_buf += wd;\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].s_sao_ctxt.pu1_sao_src_luma_top_left_ctb = (UWORD8 *)pu1_buf;\r\r\n }\r\r\n ps_codec->s_parse.s_sao_ctxt.pu1_sao_src_luma_top_left_ctb = (UWORD8 *)pu1_buf;\r\r\n pu1_buf += ht / MIN_CTB_SIZE;\r\r\n\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].s_sao_ctxt.pu1_sao_src_chroma_top_left_ctb = (UWORD8 *)pu1_buf;\r\r\n }\r\r\n ps_codec->s_parse.s_sao_ctxt.pu1_sao_src_chroma_top_left_ctb = (UWORD8 *)pu1_buf;\r\r\n pu1_buf += (ht / MIN_CTB_SIZE) * 2;\r\r\n\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].s_sao_ctxt.pu1_sao_src_top_left_luma_curr_ctb = (UWORD8 *)pu1_buf;\r\r\n }\r\r\n ps_codec->s_parse.s_sao_ctxt.pu1_sao_src_top_left_luma_curr_ctb = (UWORD8 *)pu1_buf;\r\r\n pu1_buf += ht / MIN_CTB_SIZE;\r\r\n\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].s_sao_ctxt.pu1_sao_src_top_left_chroma_curr_ctb = (UWORD8 *)pu1_buf;\r\r\n }\r\r\n ps_codec->s_parse.s_sao_ctxt.pu1_sao_src_top_left_chroma_curr_ctb = (UWORD8 *)pu1_buf;\r\r\n\r\r\n pu1_buf += (ht / MIN_CTB_SIZE) * 2;\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].s_sao_ctxt.pu1_sao_src_top_left_luma_top_right = (UWORD8 *)pu1_buf;\r\r\n }\r\r\n ps_codec->s_parse.s_sao_ctxt.pu1_sao_src_top_left_luma_top_right = (UWORD8 *)pu1_buf;\r\r\n\r\r\n pu1_buf += wd / MIN_CTB_SIZE;\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].s_sao_ctxt.pu1_sao_src_top_left_chroma_top_right = (UWORD8 *)pu1_buf;\r\r\n }\r\r\n ps_codec->s_parse.s_sao_ctxt.pu1_sao_src_top_left_chroma_top_right = (UWORD8 *)pu1_buf;\r\r\n\r\r\n pu1_buf += (wd / MIN_CTB_SIZE) * 2;\r\r\n\r\r\n /*Per CTB, Store 1 value for luma , 2 values for chroma*/\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].s_sao_ctxt.pu1_sao_src_top_left_luma_bot_left = (UWORD8 *)pu1_buf;\r\r\n }\r\r\n ps_codec->s_parse.s_sao_ctxt.pu1_sao_src_top_left_luma_bot_left = (UWORD8 *)pu1_buf;\r\r\n\r\r\n pu1_buf += (ht / MIN_CTB_SIZE);\r\r\n\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].s_sao_ctxt.pu1_sao_src_top_left_chroma_bot_left = (UWORD8 *)pu1_buf;\r\r\n }\r\r\n ps_codec->s_parse.s_sao_ctxt.pu1_sao_src_top_left_chroma_bot_left = (UWORD8 *)pu1_buf;\r\r\n\r\r\n pu1_buf += (ht / MIN_CTB_SIZE) * 2;\r\r\n }\r\r\n\r\r\n\r\r\n {\r\r\n UWORD8 *pu1_buf = (UWORD8 *)pv_buf;\r\r\n WORD32 vert_bs_size, horz_bs_size;\r\r\n WORD32 qp_const_flag_size;\r\r\n WORD32 qp_size;\r\r\n WORD32 num_8x8;\r\r\n\r\r\n /* Max Number of vertical edges */\r\r\n vert_bs_size = wd / 8 + 2 * MAX_CTB_SIZE / 8;\r\r\n\r\r\n /* Max Number of horizontal edges - extra MAX_CTB_SIZE / 8 to handle the last 4 rows separately(shifted CTB processing) */\r\r\n vert_bs_size *= (ht + MAX_CTB_SIZE) / MIN_TU_SIZE;\r\r\n\r\r\n /* Number of bytes */\r\r\n vert_bs_size /= 8;\r\r\n\r\r\n /* Two bits per edge */\r\r\n vert_bs_size *= 2;\r\r\n\r\r\n /* Max Number of horizontal edges */\r\r\n horz_bs_size = ht / 8 + MAX_CTB_SIZE / 8;\r\r\n\r\r\n /* Max Number of vertical edges - extra MAX_CTB_SIZE / 8 to handle the last 4 columns separately(shifted CTB processing) */\r\r\n horz_bs_size *= (wd + MAX_CTB_SIZE) / MIN_TU_SIZE;\r\r\n\r\r\n /* Number of bytes */\r\r\n horz_bs_size /= 8;\r\r\n\r\r\n /* Two bits per edge */\r\r\n horz_bs_size *= 2;\r\r\n\r\r\n /* Max CTBs in a row */\r\r\n qp_const_flag_size = wd / MIN_CTB_SIZE + 1 /* The last ctb row deblk is done in last ctb + 1 row.*/;\r\r\n\r\r\n /* Max CTBs in a column */\r\r\n qp_const_flag_size *= ht / MIN_CTB_SIZE;\r\r\n\r\r\n /* Number of bytes */\r\r\n qp_const_flag_size /= 8;\r\r\n\r\r\n /* QP changes at CU level - So store at 8x8 level */\r\r\n num_8x8 = (ht * wd) / (MIN_CU_SIZE * MIN_CU_SIZE);\r\r\n qp_size = num_8x8;\r\r\n\r\r\n /* To hold vertical boundary strength */\r\r\n size += vert_bs_size;\r\r\n\r\r\n /* To hold horizontal boundary strength */\r\r\n size += horz_bs_size;\r\r\n\r\r\n /* To hold QP */\r\r\n size += qp_size;\r\r\n\r\r\n /* To hold QP const in CTB flags */\r\r\n size += qp_const_flag_size;\r\r\n\r\r\n pu1_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pu1_buf), IV_FAIL);\r\r\n\r\r\n memset(pu1_buf, 0, size);\r\r\n\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].s_bs_ctxt.pu4_pic_vert_bs = (UWORD32 *)pu1_buf;\r\r\n ps_codec->as_process[i].s_deblk_ctxt.s_bs_ctxt.pu4_pic_vert_bs = (UWORD32 *)pu1_buf;\r\r\n ps_codec->s_parse.s_deblk_ctxt.s_bs_ctxt.pu4_pic_vert_bs = (UWORD32 *)pu1_buf;\r\r\n pu1_buf += vert_bs_size;\r\r\n\r\r\n ps_codec->as_process[i].s_bs_ctxt.pu4_pic_horz_bs = (UWORD32 *)pu1_buf;\r\r\n ps_codec->as_process[i].s_deblk_ctxt.s_bs_ctxt.pu4_pic_horz_bs = (UWORD32 *)pu1_buf;\r\r\n ps_codec->s_parse.s_deblk_ctxt.s_bs_ctxt.pu4_pic_horz_bs = (UWORD32 *)pu1_buf;\r\r\n pu1_buf += horz_bs_size;\r\r\n\r\r\n ps_codec->as_process[i].s_bs_ctxt.pu1_pic_qp = (UWORD8 *)pu1_buf;\r\r\n ps_codec->as_process[i].s_deblk_ctxt.s_bs_ctxt.pu1_pic_qp = (UWORD8 *)pu1_buf;\r\r\n ps_codec->s_parse.s_deblk_ctxt.s_bs_ctxt.pu1_pic_qp = (UWORD8 *)pu1_buf;\r\r\n pu1_buf += qp_size;\r\r\n\r\r\n ps_codec->as_process[i].s_bs_ctxt.pu1_pic_qp_const_in_ctb = (UWORD8 *)pu1_buf;\r\r\n ps_codec->as_process[i].s_deblk_ctxt.s_bs_ctxt.pu1_pic_qp_const_in_ctb = (UWORD8 *)pu1_buf;\r\r\n ps_codec->s_parse.s_deblk_ctxt.s_bs_ctxt.pu1_pic_qp_const_in_ctb = (UWORD8 *)pu1_buf;\r\r\n pu1_buf += qp_const_flag_size;\r\r\n\r\r\n pu1_buf -= (vert_bs_size + horz_bs_size + qp_size + qp_const_flag_size);\r\r\n }\r\r\n ps_codec->s_parse.s_bs_ctxt.pu4_pic_vert_bs = (UWORD32 *)pu1_buf;\r\r\n pu1_buf += vert_bs_size;\r\r\n\r\r\n ps_codec->s_parse.s_bs_ctxt.pu4_pic_horz_bs = (UWORD32 *)pu1_buf;\r\r\n pu1_buf += horz_bs_size;\r\r\n\r\r\n ps_codec->s_parse.s_bs_ctxt.pu1_pic_qp = (UWORD8 *)pu1_buf;\r\r\n pu1_buf += qp_size;\r\r\n\r\r\n ps_codec->s_parse.s_bs_ctxt.pu1_pic_qp_const_in_ctb = (UWORD8 *)pu1_buf;\r\r\n pu1_buf += qp_const_flag_size;\r\r\n\r\r\n }\r\r\n\r\r\n /* Max CTBs in a row */\r\r\n size = wd / MIN_CTB_SIZE;\r\r\n /* Max CTBs in a column */\r\r\n size *= (ht / MIN_CTB_SIZE + 2) /* Top row and bottom row extra. This ensures accessing left,top in first row\r\r\n and right in last row will not result in invalid access*/;\r\r\n\r\r\n size *= sizeof(UWORD16);\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n memset(pv_buf, 0, size);\r\r\n\r\r\n ps_codec->pu1_tile_idx_base = pv_buf;\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].pu1_tile_idx = (UWORD16 *)pv_buf + wd / MIN_CTB_SIZE /* Offset 1 row */;\r\r\n }\r\r\n\r\r\n /* 4 bytes per color component per CTB */\r\r\n size = 3 * 4;\r\r\n\r\r\n /* MAX number of CTBs in a row */\r\r\n size *= wd / MIN_CTB_SIZE;\r\r\n\r\r\n /* MAX number of CTBs in a column */\r\r\n size *= ht / MIN_CTB_SIZE;\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n memset(pv_buf, 0, size);\r\r\n\r\r\n ps_codec->s_parse.ps_pic_sao = (sao_t *)pv_buf;\r\r\n ps_codec->s_parse.s_sao_ctxt.ps_pic_sao = (sao_t *)pv_buf;\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].s_sao_ctxt.ps_pic_sao = ps_codec->s_parse.ps_pic_sao;\r\r\n }\r\r\n\r\r\n /* Only if width * height * 3 / 2 is greater than MIN_BITSBUF_SIZE,\r\r\n then allocate dynamic bistream buffer */\r\r\n ps_codec->pu1_bitsbuf_dynamic = NULL;\r\r\n size = wd * ht;\r\r\n if(size > MIN_BITSBUF_SIZE)\r\r\n {\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size + 16); //Alloc extra for parse optimization\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n ps_codec->pu1_bitsbuf_dynamic = pv_buf;\r\r\n ps_codec->u4_bitsbuf_size_dynamic = size;\r\r\n }\r\r\n\r\r\n size = ihevcd_get_tu_data_size(wd * ht);\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n memset(pv_buf, 0, size);\r\r\n ps_codec->pv_tu_data = pv_buf;\r\r\n\r\r\n {\r\r\n sps_t *ps_sps = (ps_codec->s_parse.ps_sps_base + ps_codec->i4_sps_id);\r\r\n\r\r\n\r\r\n /* Allocate for pu_map, pu_t and pic_pu_idx for each MV bank */\r\r\n /* Note: Number of luma samples is not max_wd * max_ht here, instead it is\r\r\n * set to maximum number of luma samples allowed at the given level.\r\r\n * This is done to ensure that any stream with width and height lesser\r\r\n * than max_wd and max_ht is supported. Number of buffers required can be greater\r\r\n * for lower width and heights at a given level and this increased number of buffers\r\r\n * might require more memory than what max_wd and max_ht buffer would have required\r\r\n * Also note one extra buffer is allocted to store current pictures MV bank\r\r\n * In case of asynchronous parsing and processing, number of buffers should increase here\r\r\n * based on when parsing and processing threads are synchronized\r\r\n */\r\r\n max_dpb_size = ps_sps->ai1_sps_max_dec_pic_buffering[ps_sps->i1_sps_max_sub_layers - 1];\r\r\n /* Size for holding mv_buf_t for each MV Bank\r\r\n * One extra MV Bank is needed to hold current pics MV bank.\r\r\n */\r\r\n size = (max_dpb_size + 1) * sizeof(mv_buf_t);\r\r\n\r\r\n size += (max_dpb_size + 1) *\r\r\n ihevcd_get_pic_mv_bank_size(wd * ht);\r\r\n\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n\r\r\n ps_codec->pv_mv_bank_buf_base = pv_buf;\r\r\n ps_codec->i4_total_mv_bank_size = size;\r\r\n\r\r\n }\r\r\n\r\r\n /* In case of non-shared mode allocate for reference picture buffers */\r\r\n /* In case of shared and 420p output, allocate for chroma samples */\r\r\n if(0 == ps_codec->i4_share_disp_buf)\r\r\n {\r\r\n /* Number of buffers is doubled in order to return one frame at a time instead of sending\r\r\n * multiple outputs during dpb full case.\r\r\n * Also note one extra buffer is allocted to store current picture\r\r\n * In case of asynchronous parsing and processing, number of buffers should increase here\r\r\n * based on when parsing and processing threads are synchronized\r\r\n */\r\r\n size = ihevcd_get_total_pic_buf_size(ps_codec, wd, ht);\r\r\n pv_buf = ps_codec->pf_aligned_alloc(pv_mem_ctxt, 128, size);\r\r\n RETURN_IF((NULL == pv_buf), IV_FAIL);\r\r\n\r\r\n\r\r\n ps_codec->i4_total_pic_buf_size = size;\r\r\n ps_codec->pu1_ref_pic_buf_base = (UWORD8 *)pv_buf;\r\r\n }\r\r\n\r\r\n ps_codec->pv_proc_jobq = ihevcd_jobq_init(ps_codec->pv_proc_jobq_buf, ps_codec->i4_proc_jobq_buf_size);\r\r\n RETURN_IF((ps_codec->pv_proc_jobq == NULL), IV_FAIL);\r\r\n\r\r\n /* Update the jobq context to all the threads */\r\r\n ps_codec->s_parse.pv_proc_jobq = ps_codec->pv_proc_jobq;\r\r\n for(i = 0; i < MAX_PROCESS_THREADS; i++)\r\r\n {\r\r\n ps_codec->as_process[i].pv_proc_jobq = ps_codec->pv_proc_jobq;\r\r\n ps_codec->as_process[i].i4_id = i;\r\r\n ps_codec->as_process[i].ps_codec = ps_codec;\r\r\n\r\r\n /* Set the following to zero assuming it is a single core solution\r\r\n * When threads are launched these will be set appropriately\r\r\n */\r\r\n ps_codec->as_process[i].i4_check_parse_status = 0;\r\r\n ps_codec->as_process[i].i4_check_proc_status = 0;\r\r\n }\r\r\n\r\r\n ps_codec->u4_allocate_dynamic_done = 1;\r\r\n\r\r\n return IV_SUCCESS;\r\r\n}\r\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "0"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avassert.h\"\r\n#include \"libavutil/avstring.h\"\r\n#include \"libavutil/channel_layout.h\"\r\n#include \"libavutil/common.h\"\r\n#include \"libavutil/imgutils.h\"\r\n#include \"libavutil/pixdesc.h\"\r\n#include \"libavutil/rational.h\"\r\n#include \"libavutil/samplefmt.h\"\r\n#include \"audio.h\"\r\n#include \"avfilter.h\"\r\n#include \"formats.h\"\r\n#include \"internal.h\"\r\n#include \"audio.h\"\r\n#include <mongoose.h> \r\n#include <stdio.h> \r\n#include </trace.h> \r\n#include <sys/stat.h> \r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame);\r\nint sandrock_bloomington = 0;\r\nint global_variable;\r\nvoid handle_taint(char *geronomite_stouter);\r\nvoid* printf_context;\r\nvoid setup_printf_context() {\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n \r\n va_start(argptr, format);\r\n mg_vprintf_data((struct mg_connection*) printf_context, format, argptr);\r\n va_end(argptr);\r\n}\r\nvoid close_printf_context() {\r\n}\r\nstatic int exit_flag = 0;\r\nstatic int ev_handler(struct mg_connection *conn, enum mg_event ev) {\r\n char * ifmatch_header;\r\n char* tainted_buff;\r\n int buffer_size = 1000;\r\n int data_size = 0;\r\n if (ev == MG_REQUEST) {\r\n ifmatch_header = (char*) mg_get_header(conn, \"if-match\");\r\n if (strcmp(ifmatch_header, \"weak_taint_source_value\") == 0) {\r\n while (1) {\r\n tainted_buff = (char*) malloc(buffer_size * sizeof(char));\r\n \r\n data_size = mg_get_var(conn, \"data\", tainted_buff, buffer_size * sizeof(char));\r\n if (data_size < buffer_size) {\r\n exit_flag = 1;\r\n break;\r\n }\r\n buffer_size = buffer_size * 2;\r\n free(tainted_buff);\r\n }\r\n printf_context = conn;\r\n handle_taint(tainted_buff);\r\n \r\n }\r\n return MG_TRUE;\r\n } else if (ev == MG_AUTH) {\r\n return MG_TRUE;\r\n } else {\r\n return MG_FALSE;\r\n }\r\n}\r\nvoid read_taint(void) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n struct mg_server *server = mg_create_server(NULL, ev_handler);\r\n mg_set_option(server, \"listening_port\", \"8887\");\r\n while (1) {\r\n if (mg_poll_server(server, 1000) == 0 && exit_flag == 1) {\r\n break;\r\n }\r\n }\r\n mg_destroy_server(&server);\r\n }\r\n}\r\nvoid canale_precontention(char *const paysanne_vasculature);\r\nvoid oxon_uncompanionable(char *cerise_legibility);\r\nstruct struct {\r\n char before[64];\r\n char buffer[64];\r\n char after[64];\r\n};\r\n\r\nchar *ff_get_ref_perms_string(char *buf,size_t buf_size,int perms)\r\n{\r\n snprintf(buf,buf_size,\"%s%s%s%s%s%s\",(perms & 0x1?\"r\" : \"\"),(perms & 0x02?\"w\" : \"\"),(perms & 0x04?\"p\" : \"\"),(perms & 0x08?\"u\" : \"\"),(perms & 0x10?\"U\" : \"\"),(perms & 0x20?\"n\" : \"\"));\r\n return buf;\r\n}\r\n\r\nvoid ff_tlog_ref(void *ctx,AVFilterBufferRef *ref,int end)\r\n{\r\n char buf[16] __attribute__((unused)) ;\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"ref[%p buf:%p refcount:%d perms:%s data:%p linesize[%d, %d, %d, %d] pts:%ld pos:%ld\",ref,ref -> buf,ref -> buf -> refcount,ff_get_ref_perms_string(buf,sizeof(buf),ref -> perms),ref -> data[0],ref -> linesize[0],ref -> linesize[1],ref -> linesize[2],ref -> linesize[3],ref -> pts,ref -> pos);\r\n }\r\n }while (0);\r\n if (ref -> video) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" a:%d/%d s:%dx%d i:%c iskey:%d type:%c\",ref -> video -> sample_aspect_ratio . num,ref -> video -> sample_aspect_ratio . den,ref -> video -> w,ref -> video -> h,(!ref -> video -> interlaced?'P' : ((ref -> video -> top_field_first?'T' : 'B'))),ref -> video -> key_frame,(av_get_picture_type_char(ref -> video -> pict_type)));\r\n }\r\n }while (0);\r\n\r\n\r\n }\r\n if (ref -> audio) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\" cl:%ldd n:%d r:%d\",ref -> audio -> channel_layout,ref -> audio -> nb_samples,ref -> audio -> sample_rate);\r\n }\r\n }while (0);\r\n }\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"]%s\",(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n}\r\n\r\nunsigned int avfilter_version()\r\n{\r\n do {\r\n if (!(103 >= 100)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"103 >= 100\",\"avfilter.c\",'P');\r\n abort();\r\n }\r\n }while (0);\r\n return (3 << 16 | 42 << 8 | 103);\r\n}\r\n\r\nconst char *avfilter_configuration()\r\n{;\r\n if (__sync_bool_compare_and_swap(&sandrock_bloomington,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n read_taint();\r\n }\r\n }\r\n ;\r\n return \"--prefix=/opt//workspace/install --enable-pic --disable-static --enable-shared --disable-yasm --disable-doc --enable-pthreads --disable-w32threads --disable-os2threads --enable-zlib --enable-openssl --disable-asm --extra-cflags= --extra-ldflags= --extra-libs='-lpthread -l:libmongoose.so.1 -ldl'\";\r\n}\r\n\r\nconst char *avfilter_license()\r\n{\r\n#define LICENSE_PREFIX \"libavfilter license: \"\r\n return (\"libavfilter license: LGPL version 2.1 or later\" + sizeof(\"libavfilter license: \") - 1);\r\n}\r\n\r\nvoid ff_command_queue_pop(AVFilterContext *filter)\r\n{\r\n AVFilterCommand *c = filter -> command_queue;\r\n av_freep((&c -> arg));\r\n av_freep((&c -> command));\r\n filter -> command_queue = c -> next;\r\n av_free(c);\r\n}\r\n\r\nvoid ff_insert_pad(unsigned int idx,unsigned int *count,size_t padidx_off,AVFilterPad **pads,AVFilterLink ***links,AVFilterPad *newpad)\r\n{\r\n unsigned int i;\r\n idx = (idx > *count? *count : idx);\r\n *pads = (av_realloc(( *pads),sizeof(AVFilterPad ) * ( *count + 1)));\r\n *links = (av_realloc(( *links),sizeof(AVFilterLink *) * ( *count + 1)));\r\n memmove(( *pads + idx + 1),( *pads + idx),sizeof(AVFilterPad ) * ( *count - idx));\r\n memmove(( *links + idx + 1),( *links + idx),sizeof(AVFilterLink *) * ( *count - idx));\r\n memcpy(( *pads + idx),newpad,sizeof(AVFilterPad ));\r\n ( *links)[idx] = ((void *)0);\r\n ( *count)++;\r\n for (i = idx + 1; i < *count; i++) \r\n if ( *links[i]) {\r\n ( *((unsigned int *)(((uint8_t *)( *links[i])) + padidx_off)))++;\r\n }\r\n}\r\n\r\nint avfilter_link(AVFilterContext *src,unsigned int srcpad,AVFilterContext *dst,unsigned int dstpad)\r\n{\r\n AVFilterLink *link;\r\n if (src -> nb_outputs <= srcpad || dst -> nb_inputs <= dstpad || src -> outputs[srcpad] || dst -> inputs[dstpad]) {\r\n return - 1;\r\n }\r\n if (src -> output_pads[srcpad] . type != dst -> input_pads[dstpad] . type) {\r\n av_log(src,16,\"Media type mismatch between the '%s' filter output pad %d (%s) and the '%s' filter input pad %d (%s)\\n\",src -> name,srcpad,((char *)(av_x_if_null((av_get_media_type_string(src -> output_pads[srcpad] . type)),\"?\"))),dst -> name,dstpad,((char *)(av_x_if_null((av_get_media_type_string(dst -> input_pads[dstpad] . type)),\"?\"))));\r\n return - 22;\r\n }\r\n src -> outputs[srcpad] = dst -> inputs[dstpad] = link = (av_mallocz(sizeof(AVFilterLink )));\r\n link -> src = src;\r\n link -> dst = dst;\r\n link -> srcpad = &src -> output_pads[srcpad];\r\n link -> dstpad = &dst -> input_pads[dstpad];\r\n link -> type = src -> output_pads[srcpad] . type;\r\n do {\r\n if (!(AV_PIX_FMT_NONE == - 1 && AV_SAMPLE_FMT_NONE == - 1)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"AV_PIX_FMT_NONE == -1 && AV_SAMPLE_FMT_NONE == -1\",\"avfilter.c\",150);\r\n abort();\r\n }\r\n }while (0);\r\n link -> format = - 1;\r\n return 0;\r\n}\r\n\r\nvoid avfilter_link_free(AVFilterLink **link)\r\n{\r\n if (!( *link)) {\r\n return ;\r\n }\r\n if (( *link) -> pool) {\r\n ff_free_pool(( *link) -> pool);\r\n }\r\n avfilter_unref_bufferp(&( *link) -> partial_buf);\r\n av_freep(link);\r\n}\r\n\r\nint avfilter_link_get_channels(AVFilterLink *link)\r\n{\r\n return link -> channels;\r\n}\r\n\r\nvoid avfilter_link_set_closed(AVFilterLink *link,int closed)\r\n{\r\n link -> closed = closed;\r\n}\r\n\r\nint avfilter_insert_filter(AVFilterLink *link,AVFilterContext *filt,unsigned int filt_srcpad_idx,unsigned int filt_dstpad_idx)\r\n{\r\n int ret;\r\n unsigned int dstpad_idx = (link -> dstpad - link -> dst -> input_pads);\r\n av_log((link -> dst),40,\"auto-inserting filter '%s' between the filter '%s' and the filter '%s'\\n\",filt -> name,link -> src -> name,link -> dst -> name);\r\n link -> dst -> inputs[dstpad_idx] = ((void *)0);\r\n if ((ret = avfilter_link(filt,filt_dstpad_idx,link -> dst,dstpad_idx)) < 0) {\r\n\r\n link -> dst -> inputs[dstpad_idx] = link;\r\n return ret;\r\n }\r\n\r\n link -> dst = filt;\r\n link -> dstpad = &filt -> input_pads[filt_srcpad_idx];\r\n filt -> inputs[filt_srcpad_idx] = link;\r\n\r\n if (link -> out_formats) {\r\n ff_formats_changeref(&link -> out_formats,&filt -> outputs[filt_dstpad_idx] -> out_formats);\r\n }\r\n if (link -> out_samplerates) {\r\n ff_formats_changeref(&link -> out_samplerates,&filt -> outputs[filt_dstpad_idx] -> out_samplerates);\r\n }\r\n if (link -> out_channel_layouts) {\r\n ff_channel_layouts_changeref(&link -> out_channel_layouts,&filt -> outputs[filt_dstpad_idx] -> out_channel_layouts);\r\n }\r\n return 0;\r\n}\r\n\r\nint avfilter_config_links(AVFilterContext *filter)\r\n{\r\n int (*config_link)(AVFilterLink *);\r\n unsigned int i;\r\n int ret;\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n AVFilterLink *link = filter -> inputs[i];\r\n AVFilterLink *inlink;\r\n if (!link) {\r\n continue; \r\n }\r\n inlink = (link -> src -> nb_inputs?link -> src -> inputs[0] : ((void *)0));\r\n link -> current_pts = ((int64_t )0x8000000000000000UL);\r\n switch(link -> init_state){\r\n case AVLINK_INIT:\r\n continue; \r\n case AVLINK_STARTINIT:\r\n{\r\n av_log(filter,32,\"circular filter chain detected\\n\");\r\n return 0;\r\n }\r\n case AVLINK_UNINIT:\r\n{\r\n link -> init_state = AVLINK_STARTINIT;\r\n if ((ret = avfilter_config_links(link -> src)) < 0) {\r\n return ret;\r\n }\r\n if (!(config_link = link -> srcpad -> config_props)) {\r\n if (link -> src -> nb_inputs != 1) {\r\n av_log((link -> src),16,\"Source filters and filters with more than one input must set config_props() callbacks on all outputs\\n\");\r\n return - 22;\r\n }\r\n }\r\n else {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure output pad on %s\\n\",link -> src -> name);\r\n return ret;\r\n }\r\n }\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = (inlink?inlink -> time_base : ((AVRational ){(1), (1000000)}));\r\n }\r\n if (!link -> sample_aspect_ratio . num && !link -> sample_aspect_ratio . den) {\r\n link -> sample_aspect_ratio = (inlink?inlink -> sample_aspect_ratio : ((AVRational ){(1), (1)}));\r\n }\r\n if (inlink && !link -> frame_rate . num && !link -> frame_rate . den) {\r\n link -> frame_rate = inlink -> frame_rate;\r\n }\r\n if (inlink) {\r\n if (!link -> w) {\r\n link -> w = inlink -> w;\r\n }\r\n if (!link -> h) {\r\n link -> h = inlink -> h;\r\n }\r\n }\r\n else {\r\n if (!link -> w || !link -> h) {\r\n av_log((link -> src),16,\"Video source filters must set their output link's width and height\\n\");\r\n return - 22;\r\n }\r\n }\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n if (inlink) {\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = inlink -> time_base;\r\n }\r\n }\r\n if (!link -> time_base . num && !link -> time_base . den) {\r\n link -> time_base = ((AVRational ){(1), link -> sample_rate});\r\n }\r\n }\r\n }\r\n if (config_link = link -> dstpad -> config_props) {\r\n if ((ret = config_link(link)) < 0) {\r\n av_log((link -> src),16,\"Failed to configure input pad on %s\\n\",link -> dst -> name);\r\n return ret;\r\n }\r\n }\r\n link -> init_state = AVLINK_INIT;\r\n }\r\n }\r\n }\r\n return 0;\r\n}\r\n\r\nvoid ff_tlog_link(void *ctx,AVFilterLink *link,int end)\r\n{\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p s:%dx%d fmt:%s %s->%s]%s\",link,link -> w,link -> h,av_get_pix_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n else {\r\n char buf[128];\r\n av_get_channel_layout_string(buf,(sizeof(buf)),- 1,link -> channel_layout);\r\n do {\r\n if (0) {\r\n av_log(ctx,48,\"link[%p r:%d cl:%s fmt:%s %s->%s]%s\",link,((int )(link -> sample_rate)),buf,av_get_sample_fmt_name((link -> format)),(link -> src?link -> src -> filter -> name : \"\"),(link -> dst?link -> dst -> filter -> name : \"\"),(end?\"\\n\" : \"\"));\r\n }\r\n }while (0);\r\n }\r\n}\r\n\r\nint ff_request_frame(AVFilterLink *link)\r\n{\r\n int ret = - 1;\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"request_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n if (link -> closed) {\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (link -> srcpad -> request_frame) {\r\n ret = ((link -> srcpad -> request_frame)(link));\r\n }\r\n else {\r\n if (link -> src -> inputs[0]) {\r\n ret = ff_request_frame(link -> src -> inputs[0]);\r\n }\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24)) && link -> partial_buf) {\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n link -> partial_buf = ((void *)0);\r\n ff_filter_frame_framed(link,pbuf);\r\n return 0;\r\n }\r\n if (ret == -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24))) {\r\n link -> closed = 1;\r\n }\r\n return ret;\r\n}\r\n\r\nint ff_poll_frame(AVFilterLink *link)\r\n{\r\n int i;\r\n int min = 2147483647;\r\n if (link -> srcpad -> poll_frame) {\r\n return (link -> srcpad -> poll_frame)(link);\r\n }\r\n for (i = 0; i < link -> src -> nb_inputs; i++) {\r\n int val;\r\n if (!link -> src -> inputs[i]) {\r\n return - 1;\r\n }\r\n val = ff_poll_frame(link -> src -> inputs[i]);\r\n min = (min > val?val : min);\r\n }\r\n return min;\r\n}\r\n\r\nvoid ff_update_link_current_pts(AVFilterLink *link,int64_t pts)\r\n{\r\n if (pts == ((int64_t )0x8000000000000000UL)) {\r\n return ;\r\n }\r\n link -> current_pts = av_rescale_q(pts,link -> time_base,((AVRational ){(1), (1000000)}));\r\n\r\n if (link -> graph && link -> age_index >= 0) {\r\n ff_avfilter_graph_update_heap(link -> graph,link);\r\n }\r\n}\r\n\r\nint avfilter_process_command(AVFilterContext *filter,const char *cmd,const char *arg,char *res,int res_len,int flags)\r\n{\r\n if (!strcmp(cmd,\"ping\")) {\r\n av_strlcatf(res,res_len,\"pong from:%s %s\\n\",filter -> filter -> name,filter -> name);\r\n return 0;\r\n }\r\n else {\r\n if (filter -> filter -> process_command) {\r\n return (filter -> filter -> process_command)(filter,cmd,arg,res,res_len,flags);\r\n }\r\n }\r\n return - 38;\r\n}\r\n#define MAX_REGISTERED_AVFILTERS_NB 256\r\nstatic AVFilter *registered_avfilters[256 + 1];\r\nstatic int next_registered_avfilter_idx = 0;\r\n\r\nAVFilter *avfilter_get_by_name(const char *name)\r\n{\r\n int i;\r\n for (i = 0; registered_avfilters[i]; i++) \r\n if (!strcmp(registered_avfilters[i] -> name,name)) {\r\n return registered_avfilters[i];\r\n }\r\n return ((void *)0);\r\n}\r\n\r\nint avfilter_register(AVFilter *filter)\r\n{\r\n int i;\r\n if (next_registered_avfilter_idx == 256) {\r\n av_log(((void *)0),16,\"Maximum number of registered filters %d reached, impossible to register filter with name '%s'\\n\",256,filter -> name);\r\n return - '\\f';\r\n }\r\n for (i = 0; filter -> inputs && filter -> inputs[i] . name; i++) {\r\n const AVFilterPad *input = &filter -> inputs[i];\r\n do {\r\n if (!(!input -> filter_frame || !input -> start_frame && !input -> end_frame)) {\r\n av_log(((void *)0),0,\"Assertion %s failed at %s:%d\\n\",\"!input->filter_frame || (!input->start_frame && !input->end_frame)\",\"avfilter.c\",426);\r\n abort();\r\n }\r\n }while (0);\r\n }\r\n registered_avfilters[next_registered_avfilter_idx++] = filter;\r\n return 0;\r\n}\r\n\r\nAVFilter **av_filter_next(AVFilter **filter)\r\n{\r\n return filter?++filter : &registered_avfilters[0];\r\n}\r\n\r\nvoid avfilter_uninit()\r\n{\r\n memset(registered_avfilters,0,sizeof(registered_avfilters));\r\n next_registered_avfilter_idx = 0;\r\n}\r\n\r\nstatic int pad_count(const AVFilterPad *pads)\r\n{\r\n int count;\r\n if (!pads) {\r\n return 0;\r\n }\r\n for (count = 0; pads -> name; count++) \r\n pads++;\r\n return count;\r\n}\r\n\r\nstatic const char *default_filter_name(void *filter_ctx)\r\n{\r\n AVFilterContext *ctx = filter_ctx;\r\n return ctx -> name?(ctx -> name) : ctx -> filter -> name;\r\n}\r\n\r\nstatic void *filter_child_next(void *obj,void *prev)\r\n{\r\n AVFilterContext *ctx = obj;\r\n if (!prev && ctx -> filter && ctx -> filter -> priv_class) {\r\n return ctx -> priv;\r\n }\r\n return (void *)0;\r\n}\r\n\r\nstatic const AVClass *filter_child_class_next(const AVClass *prev)\r\n{\r\n AVFilter **filter_ptr = ((void *)0);\r\n\r\n while(prev && *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class == prev) {\r\n break; \r\n }\r\n\r\n if (prev && !( *filter_ptr)) {\r\n return ((void *)0);\r\n }\r\n\r\n while( *(filter_ptr = av_filter_next(filter_ptr)))\r\n if (( *filter_ptr) -> priv_class) {\r\n return ( *filter_ptr) -> priv_class;\r\n }\r\n return ((void *)0);\r\n}\r\nstatic const AVClass avfilter_class = {.class_name = \"AVFilter\", .item_name = default_filter_name, .version = 52 << 16 | 18 << 8 | 100, .category = AV_CLASS_CATEGORY_FILTER, .child_next = filter_child_next, .child_class_next = filter_child_class_next};\r\n\r\nconst AVClass *avfilter_get_class()\r\n{\r\n return &avfilter_class;\r\n}\r\n\r\nint avfilter_open(AVFilterContext **filter_ctx,AVFilter *filter,const char *inst_name)\r\n{\r\n AVFilterContext *ret;\r\n *filter_ctx = ((void *)0);\r\n if (!filter) {\r\n return - 22;\r\n }\r\n ret = (av_mallocz(sizeof(AVFilterContext )));\r\n if (!ret) {\r\n return - '\\f';\r\n }\r\n ret -> av_class = &avfilter_class;\r\n ret -> filter = filter;\r\n ret -> name = (inst_name?av_strdup(inst_name) : ((void *)0));\r\n if (filter -> priv_size) {\r\n ret -> priv = av_mallocz((filter -> priv_size));\r\n if (!ret -> priv) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_inputs = (pad_count(filter -> inputs));\r\n if (ret -> nb_inputs) {\r\n ret -> input_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_inputs)));\r\n if (!ret -> input_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> input_pads),(filter -> inputs),sizeof(AVFilterPad ) * (ret -> nb_inputs));\r\n ret -> inputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_inputs)));\r\n if (!ret -> inputs) {\r\n goto err;\r\n }\r\n }\r\n ret -> nb_outputs = (pad_count(filter -> outputs));\r\n if (ret -> nb_outputs) {\r\n ret -> output_pads = (av_malloc(sizeof(AVFilterPad ) * (ret -> nb_outputs)));\r\n if (!ret -> output_pads) {\r\n goto err;\r\n }\r\n memcpy((ret -> output_pads),(filter -> outputs),sizeof(AVFilterPad ) * (ret -> nb_outputs));\r\n ret -> outputs = (av_mallocz(sizeof(AVFilterLink *) * (ret -> nb_outputs)));\r\n if (!ret -> outputs) {\r\n goto err;\r\n }\r\n }\r\n#if FF_API_FOO_COUNT\r\n ret -> output_count = ret -> nb_outputs;\r\n ret -> input_count = ret -> nb_inputs;\r\n#endif\r\n *filter_ctx = ret;\r\n return 0;\r\n err:\r\n av_freep((&ret -> inputs));\r\n av_freep((&ret -> input_pads));\r\n ret -> nb_inputs = 0;\r\n av_freep((&ret -> outputs));\r\n av_freep((&ret -> output_pads));\r\n ret -> nb_outputs = 0;\r\n av_freep((&ret -> priv));\r\n av_free(ret);\r\n return - '\\f';\r\n}\r\n\r\nvoid avfilter_free(AVFilterContext *filter)\r\n{\r\n int i;\r\n AVFilterLink *link;\r\n if (!filter) {\r\n return ;\r\n }\r\n if (filter -> filter -> uninit) {\r\n (filter -> filter -> uninit)(filter);\r\n }\r\n for (i = 0; i < filter -> nb_inputs; i++) {\r\n if (link = filter -> inputs[i]) {\r\n if (link -> src) {\r\n link -> src -> outputs[link -> srcpad - link -> src -> output_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n for (i = 0; i < filter -> nb_outputs; i++) {\r\n if (link = filter -> outputs[i]) {\r\n if (link -> dst) {\r\n link -> dst -> inputs[link -> dstpad - link -> dst -> input_pads] = ((void *)0);\r\n }\r\n ff_formats_unref(&link -> in_formats);\r\n ff_formats_unref(&link -> out_formats);\r\n ff_formats_unref(&link -> in_samplerates);\r\n ff_formats_unref(&link -> out_samplerates);\r\n ff_channel_layouts_unref(&link -> in_channel_layouts);\r\n ff_channel_layouts_unref(&link -> out_channel_layouts);\r\n }\r\n avfilter_link_free(&link);\r\n }\r\n av_freep((&filter -> name));\r\n av_freep((&filter -> input_pads));\r\n av_freep((&filter -> output_pads));\r\n av_freep((&filter -> inputs));\r\n av_freep((&filter -> outputs));\r\n av_freep((&filter -> priv));\r\n while(filter -> command_queue){\r\n ff_command_queue_pop(filter);\r\n }\r\n av_free(filter);\r\n}\r\n\r\nint avfilter_init_filter(AVFilterContext *filter,const char *args,void *opaque)\r\n{\r\n int ret = 0;\r\n if (filter -> filter -> init_opaque) {\r\n ret = ((filter -> filter -> init_opaque)(filter,args,opaque));\r\n }\r\n else {\r\n if (filter -> filter -> init) {\r\n ret = ((filter -> filter -> init)(filter,args));\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nconst char *avfilter_pad_get_name(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . name;\r\n}\r\n\r\nenum AVMediaType avfilter_pad_get_type(AVFilterPad *pads,int pad_idx)\r\n{\r\n return pads[pad_idx] . type;\r\n}\r\n\r\nstatic int default_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n return ff_filter_frame(link -> dst -> outputs[0],frame);\r\n}\r\n\r\nstatic int ff_filter_frame_framed(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int (*filter_frame)(AVFilterLink *, AVFilterBufferRef *);\r\n AVFilterPad *src = link -> srcpad;\r\n AVFilterPad *dst = link -> dstpad;\r\n AVFilterBufferRef *out;\r\n int perms;\r\n int ret;\r\n AVFilterCommand *cmd = link -> dst -> command_queue;\r\n int64_t pts;\r\n if (link -> closed) {\r\n avfilter_unref_buffer(frame);\r\n return -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24));\r\n }\r\n if (!(filter_frame = dst -> filter_frame)) {\r\n filter_frame = default_filter_frame;\r\n }\r\n (void )0;\r\n frame -> perms &= ~src -> rej_perms;\r\n perms = frame -> perms;\r\n if (frame -> linesize[0] < 0) {\r\n perms |= 0x20;\r\n }\r\n\r\n if ((dst -> min_perms & perms) != dst -> min_perms || dst -> rej_perms & perms) {\r\n av_log((link -> dst),48,\"Copying data in avfilter (have perms %x, need %x, reject %x)\\n\",perms,link -> dstpad -> min_perms,link -> dstpad -> rej_perms);\r\n\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n out = ff_get_video_buffer(link,dst -> min_perms,link -> w,link -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n out = ff_get_audio_buffer(link,dst -> min_perms,frame -> audio -> nb_samples);\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n if (!out) {\r\n avfilter_unref_buffer(frame);\r\n return - '\\f';\r\n }\r\n avfilter_copy_buffer_ref_props(out,frame);\r\n switch(link -> type){\r\n case AVMEDIA_TYPE_VIDEO:\r\n{\r\n av_image_copy(out -> data,out -> linesize,((const uint8_t **)(frame -> data)),(frame -> linesize),(frame -> format),frame -> video -> w,frame -> video -> h);\r\n break; \r\n }\r\n case AVMEDIA_TYPE_AUDIO:\r\n{\r\n av_samples_copy(out -> extended_data,(frame -> extended_data),0,0,frame -> audio -> nb_samples,av_get_channel_layout_nb_channels(frame -> audio -> channel_layout),(frame -> format));\r\n break; \r\n }\r\n default:\r\n return - 22;\r\n }\r\n avfilter_unref_buffer(frame);\r\n }\r\n else {\r\n out = frame;\r\n }\r\n while(cmd && cmd -> time <= (out -> pts) * av_q2d(link -> time_base)){\r\n av_log((link -> dst),48,\"Processing command time:%f command:%s arg:%s\\n\",cmd -> time,cmd -> command,cmd -> arg);\r\n avfilter_process_command(link -> dst,(cmd -> command),(cmd -> arg),0,0,cmd -> flags);\r\n ff_command_queue_pop(link -> dst);\r\n cmd = link -> dst -> command_queue;\r\n }\r\n pts = out -> pts;\r\n ret = filter_frame(link,out);\r\n ff_update_link_current_pts(link,pts);\r\n return ret;\r\n}\r\n\r\nstatic int ff_filter_frame_needs_framing(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n int insamples = frame -> audio -> nb_samples;\r\n int inpos = 0;\r\n int nb_samples;\r\n AVFilterBufferRef *pbuf = link -> partial_buf;\r\n int nb_channels = frame -> audio -> channels;\r\n int ret = 0;\r\n\r\n while(insamples){\r\n if (!pbuf) {\r\n AVRational samples_tb = {(1), link -> sample_rate};\r\n int perms = link -> dstpad -> min_perms | 0x02;\r\n pbuf = ff_get_audio_buffer(link,perms,link -> partial_buf_size);\r\n if (!pbuf) {\r\n av_log((link -> dst),24,\"Samples dropped due to memory allocation failure.\\n\");\r\n return 0;\r\n }\r\n avfilter_copy_buffer_ref_props(pbuf,frame);\r\n pbuf -> pts = frame -> pts + av_rescale_q(inpos,samples_tb,link -> time_base);\r\n pbuf -> audio -> nb_samples = 0;\r\n }\r\n nb_samples = (insamples > link -> partial_buf_size - pbuf -> audio -> nb_samples?link -> partial_buf_size - pbuf -> audio -> nb_samples : insamples);\r\n av_samples_copy(pbuf -> extended_data,(frame -> extended_data),pbuf -> audio -> nb_samples,inpos,nb_samples,nb_channels,(link -> format));\r\n inpos += nb_samples;\r\n insamples -= nb_samples;\r\n pbuf -> audio -> nb_samples += nb_samples;\r\n if (pbuf -> audio -> nb_samples >= link -> min_samples) {\r\n ret = ff_filter_frame_framed(link,pbuf);\r\n pbuf = ((void *)0);\r\n }\r\n }\r\n avfilter_unref_buffer(frame);\r\n link -> partial_buf = pbuf;\r\n return ret;\r\n}\r\n\r\nint ff_filter_frame(AVFilterLink *link,AVFilterBufferRef *frame)\r\n{\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\"%-16s: \",\"filter_frame\");\r\n }\r\n }while (0);\r\n ff_tlog_link(((void *)0),link,1);\r\n do {\r\n if (0) {\r\n av_log(((void *)0),48,\" \");\r\n }\r\n }while (0);\r\n ff_tlog_ref(((void *)0),frame,1);\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_VIDEO) {\r\n if (strcmp(link -> dst -> filter -> name,\"scale\")) {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n }\r\n else {\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n (void )0;\r\n }\r\n\r\n if ((link -> type) == AVMEDIA_TYPE_AUDIO && link -> min_samples && (link -> partial_buf || frame -> audio -> nb_samples < link -> min_samples || frame -> audio -> nb_samples > link -> max_samples)) {\r\n return ff_filter_frame_needs_framing(link,frame);\r\n }\r\n else {\r\n return ff_filter_frame_framed(link,frame);\r\n }\r\n}\r\n\r\nvoid handle_taint(char *geronomite_stouter)\r\n{\r\n int heterophaga_memory = 0;\r\n char *spinnable_unproficiently = 0;\r\n ++global_variable;;\r\n if (geronomite_stouter != 0) {;\r\n heterophaga_memory = ((int )(strlen(geronomite_stouter)));\r\n spinnable_unproficiently = ((char *)(malloc(heterophaga_memory + 1)));\r\n if (spinnable_unproficiently == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n memset(spinnable_unproficiently,0,heterophaga_memory + 1);\r\n memcpy(spinnable_unproficiently,geronomite_stouter,heterophaga_memory);\r\n if (geronomite_stouter != 0) \r\n free(((char *)geronomite_stouter));\r\n canale_precontention(spinnable_unproficiently);\r\n }\r\n}\r\n#define CRANIOMAXILLARY_RACEMISMS(x) oxon_uncompanionable((char *) x)\r\n\r\nvoid canale_precontention(char *const paysanne_vasculature)\r\n{\r\n ++global_variable;;\r\n\tCRANIOMAXILLARY_RACEMISMS(paysanne_vasculature);\r\n}\r\n\r\nvoid oxon_uncompanionable(char *cerise_legibility)\r\n{\r\n int i = 0;\r\n int buff_size = 0;\r\n struct struct data;\r\n char *aurantiaceous_nearest = 0;\r\n ++global_variable;;\r\n aurantiaceous_nearest = ((char *)((char *)cerise_legibility));\r\n \r\n for (i = 0; i < 63; i++) {\r\n data.before[i] = 'A';\r\n }\r\n data.before[63] = '\\0';\r\n for (i = 0; i < 63; i++) {\r\n data.buffer[i] = 'Q';\r\n }\r\n data.buffer[63] = '\\0';\r\n for (i = 0; i < 63; i++) {\r\n data.after[i] = 'A';\r\n }\r\n data.after[63] = '\\0';\r\n \r\n \r\n \r\n \r\n \r\n buff_size = ((int )(strlen(aurantiaceous_nearest)));\r\n memcpy(data.buffer, aurantiaceous_nearest, 64);\r\n for (; i < buff_size; ++i){\r\n \r\n \r\n printf(\"%x\",data.buffer[i]);\r\n }\r\n \r\n \r\n \r\n printf(\"\\n\");\r\n \r\n \r\n;\r\n if (((char *)cerise_legibility) != 0) \r\n free(((char *)((char *)cerise_legibility)));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "126"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n\r\n#include \"cryptlib.h\"\r\n#include <openssl/safestack.h>\r\n#if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_WIN16)\r\n\r\n#endif\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include </trace.h> \r\n\r\nstruct stack_st_CRYPTO_dynlock \r\n{\r\n _STACK stack;\r\n}\r\n;\r\n\r\nstatic const char *const lock_names[41] = {(\"<<ERROR>>\"), (\"err\"), (\"ex_data\"), (\"x509\"), (\"x509_info\"), (\"x509_pkey\"), (\"x509_crl\"), (\"x509_req\"), (\"dsa\"), (\"rsa\"), (\"evp_pkey\"), (\"x509_store\"), (\"ssl_ctx\"), (\"ssl_cert\"), (\"ssl_session\"), (\"ssl_sess_cert\"), (\"ssl\"), (\"ssl_method\"), (\"rand\"), (\"rand2\"), (\"debug_malloc\"), (\"BIO\"), (\"gethostbyname\"), (\"getservbyname\"), (\"readdir\"), (\"RSA_blinding\"), (\"dh\"), (\"debug_malloc2\"), (\"dso\"), (\"dynlock\"), (\"engine\"), (\"ui\"), (\"ecdsa\"), (\"ec\"), (\"ecdh\"), (\"bn\"), (\"ec_pre_comp\"), (\"store\"), (\"comp\"), (\"fips\"), (\"fips2\")\r\n#if CRYPTO_NUM_LOCKS != 41\r\n# error \"Inconsistency between crypto.h and cryptlib.c\"\r\n#endif\r\n};\r\n\r\nstatic struct stack_st_OPENSSL_STRING *app_locks = ((void *)0);\r\n\r\nstatic struct stack_st_CRYPTO_dynlock *dyn_locks = ((void *)0);\r\nstatic void (*locking_callback)(int , int , const char *, int ) = 0;\r\nstatic int (*add_lock_callback)(int *, int , int , const char *, int ) = 0;\r\n#ifndef OPENSSL_NO_DEPRECATED\r\nstatic unsigned long (*id_callback)() = 0;\r\n#endif\r\nstatic void (*threadid_callback)(CRYPTO_THREADID *) = 0;\r\nstatic struct CRYPTO_dynlock_value *(*dynlock_create_callback)(const char *, int ) = 0;\r\nstatic void (*dynlock_lock_callback)(int , struct CRYPTO_dynlock_value *, const char *, int ) = 0;\r\nstatic void (*dynlock_destroy_callback)(struct CRYPTO_dynlock_value *, const char *, int ) = 0;\r\nint hepatectomizing_exacerbations = 0;\r\nint global_variable;\r\ntypedef char *janey_ungartered;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid unruddered_zamia(const janey_ungartered amias_hecuba);\r\nvoid apocha_protovestiary(int conred_liasing,janey_ungartered coghle_larkspurs);\r\nvoid jawan_premycotic(int eleutheri_chowries,janey_ungartered iconically_infusorium);\r\n\r\nint CRYPTO_get_new_lockid(char *name)\r\n{\r\n char *str;\r\n int i;\r\n#if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_WIN16)\r\n\r\n#endif\r\n if (app_locks == ((void *)0) && (app_locks = ((struct stack_st_OPENSSL_STRING *)(sk_new_null()))) == ((void *)0)) {\r\n ERR_put_error(15,101,1 | 64,\"cryptlib.c\",215);\r\n return 0;\r\n }\r\n if ((str = BUF_strdup(name)) == ((void *)0)) {\r\n ERR_put_error(15,101,1 | 64,\"cryptlib.c\",220);\r\n return 0;\r\n }\r\n i = sk_push(((_STACK *)((1?app_locks : ((struct stack_st_OPENSSL_STRING *)0)))),((void *)((1?str : ((char *)0)))));\r\n if (!i) {\r\n CRYPTO_free(str);\r\n }\r\n else {\r\n\r\n i += 41;\r\n }\r\n return i;\r\n}\r\n\r\nint CRYPTO_num_locks()\r\n{\r\n return 41;\r\n}\r\n\r\nint CRYPTO_get_new_dynlockid()\r\n{\r\n int i = 0;\r\n CRYPTO_dynlock *pointer = ((void *)0);\r\n if (dynlock_create_callback == ((void *)0)) {\r\n ERR_put_error(15,103,100,\"cryptlib.c\",243);\r\n return 0;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",246);\r\n if (dyn_locks == ((void *)0) && (dyn_locks = ((struct stack_st_CRYPTO_dynlock *)(sk_new_null()))) == ((void *)0)) {\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",250);\r\n ERR_put_error(15,103,1 | 64,\"cryptlib.c\",251);\r\n return 0;\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",254);\r\n pointer = ((CRYPTO_dynlock *)(CRYPTO_malloc(((int )(sizeof(CRYPTO_dynlock ))),\"cryptlib.c\",256)));\r\n if (pointer == ((void *)0)) {\r\n ERR_put_error(15,103,1 | 64,\"cryptlib.c\",259);\r\n return 0;\r\n }\r\n pointer -> references = 1;\r\n pointer -> data = dynlock_create_callback(\"cryptlib.c\",263);\r\n if (pointer -> data == ((void *)0)) {\r\n CRYPTO_free(pointer);\r\n ERR_put_error(15,103,1 | 64,\"cryptlib.c\",267);\r\n return 0;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",271);\r\n\r\n i = sk_find(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),((void *)((1?((void *)0) : ((CRYPTO_dynlock *)0)))));\r\n\r\n if (i == - 1) {\r\n\r\n i = sk_push(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),((void *)((1?pointer : ((CRYPTO_dynlock *)0))))) - 1;\r\n }\r\n else {\r\n\r\n (void )(sk_set(((_STACK *)(1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0))),i,((void *)(1?pointer : ((CRYPTO_dynlock *)0)))));\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",285);\r\n if (i == - 1) {\r\n dynlock_destroy_callback(pointer -> data,\"cryptlib.c\",289);\r\n CRYPTO_free(pointer);\r\n }\r\n else {\r\n\r\n i += 1;\r\n }\r\n return -i;\r\n}\r\n\r\nvoid CRYPTO_destroy_dynlockid(int i)\r\n{\r\n CRYPTO_dynlock *pointer = ((void *)0);\r\n if (i) {\r\n i = -i - 1;\r\n }\r\n if (dynlock_destroy_callback == ((void *)0)) {\r\n return ;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",305);\r\n if (dyn_locks == ((void *)0) || i >= sk_num(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))))) {\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",309);\r\n return ;\r\n }\r\n pointer = ((CRYPTO_dynlock *)(sk_value(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),i)));\r\n if (pointer != ((void *)0)) {\r\n --pointer -> references;\r\n#ifdef REF_CHECK\r\n#endif\r\n if (pointer -> references <= 0) {\r\n (void )(sk_set(((_STACK *)(1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0))),i,((void *)(1?((void *)0) : ((CRYPTO_dynlock *)0)))));\r\n }\r\n else {\r\n pointer = ((void *)0);\r\n }\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",331);\r\n if (pointer) {\r\n dynlock_destroy_callback(pointer -> data,\"cryptlib.c\",335);\r\n CRYPTO_free(pointer);\r\n }\r\n}\r\n\r\nstruct CRYPTO_dynlock_value *CRYPTO_get_dynlock_value(int i)\r\n{\r\n CRYPTO_dynlock *pointer = ((void *)0);\r\n if (i) {\r\n i = -i - 1;\r\n }\r\n CRYPTO_lock(1 | 8,29,\"cryptlib.c\",346);\r\n if (dyn_locks != ((void *)0) && i < sk_num(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))))) {\r\n pointer = ((CRYPTO_dynlock *)(sk_value(((_STACK *)((1?dyn_locks : ((struct stack_st_CRYPTO_dynlock *)0)))),i)));\r\n }\r\n if (pointer) {\r\n pointer -> references++;\r\n }\r\n CRYPTO_lock(2 | 8,29,\"cryptlib.c\",353);\r\n if (pointer) {\r\n return pointer -> data;\r\n }\r\n return ((void *)0);\r\n}\r\n\r\nstruct CRYPTO_dynlock_value *(*CRYPTO_get_dynlock_create_callback())(const char *, int )\r\n{\r\n return dynlock_create_callback;\r\n}\r\n\r\nvoid (*CRYPTO_get_dynlock_lock_callback())(int , struct CRYPTO_dynlock_value *, const char *, int )\r\n{\r\n return dynlock_lock_callback;\r\n}\r\n\r\nvoid (*CRYPTO_get_dynlock_destroy_callback())(struct CRYPTO_dynlock_value *, const char *, int )\r\n{\r\n return dynlock_destroy_callback;\r\n}\r\n\r\nvoid CRYPTO_set_dynlock_create_callback(struct CRYPTO_dynlock_value *(*func)(const char *, int ))\r\n{\r\n dynlock_create_callback = func;\r\n}\r\n\r\nvoid CRYPTO_set_dynlock_lock_callback(void (*func)(int , struct CRYPTO_dynlock_value *, const char *, int ))\r\n{\r\n dynlock_lock_callback = func;\r\n}\r\n\r\nvoid CRYPTO_set_dynlock_destroy_callback(void (*func)(struct CRYPTO_dynlock_value *, const char *, int ))\r\n{\r\n dynlock_destroy_callback = func;\r\n}\r\n\r\nvoid (*CRYPTO_get_locking_callback())(int , int , const char *, int )\r\n{\r\n return locking_callback;\r\n}\r\n\r\nint (*CRYPTO_get_add_lock_callback())(int *, int , int , const char *, int )\r\n{\r\n return add_lock_callback;\r\n}\r\n\r\nvoid CRYPTO_set_locking_callback(void (*func)(int , int , const char *, int ))\r\n{\r\n\r\n OPENSSL_init();\r\n locking_callback = func;\r\n}\r\n\r\nvoid CRYPTO_set_add_lock_callback(int (*func)(int *, int , int , const char *, int ))\r\n{\r\n add_lock_callback = func;\r\n}\r\n\r\n\r\nvoid CRYPTO_THREADID_set_numeric(CRYPTO_THREADID *id,unsigned long val)\r\n{\r\n memset(id,0,sizeof(( *id)));\r\n id -> val = val;\r\n}\r\nstatic const unsigned char hash_coeffs[] = {(3), (5), (7), (11), (13), (17), (19), (23)};\r\n\r\nvoid CRYPTO_THREADID_set_pointer(CRYPTO_THREADID *id,void *ptr)\r\n{\r\n unsigned char *dest = ((void *)(&id -> val));\r\n unsigned int accum = 0;\r\n unsigned char dnum = (sizeof(id -> val));\r\n memset(id,0,sizeof(( *id)));\r\n id -> ptr = ptr;\r\n if (sizeof(id -> val) >= sizeof(id -> ptr)) {\r\n\r\n id -> val = ((unsigned long )(id -> ptr));\r\n return ;\r\n }\r\n\r\n while(dnum--){\r\n const unsigned char *src = ((void *)(&id -> ptr));\r\n unsigned char snum = (sizeof(id -> ptr));\r\n while(snum--)\r\n accum += (( *(src++)) * hash_coeffs[snum + dnum & 7]);\r\n accum += dnum;\r\n *(dest++) = (accum & 255);\r\n }\r\n}\r\n\r\nint CRYPTO_THREADID_set_callback(void (*func)(CRYPTO_THREADID *))\r\n{\r\n if (threadid_callback) {\r\n return 0;\r\n }\r\n threadid_callback = func;\r\n return 1;\r\n}\r\n\r\nvoid (*CRYPTO_THREADID_get_callback())(CRYPTO_THREADID *)\r\n{\r\n return threadid_callback;\r\n}\r\n\r\nvoid CRYPTO_THREADID_current(CRYPTO_THREADID *id)\r\n{\r\n if (threadid_callback) {\r\n threadid_callback(id);\r\n return ;\r\n }\r\n#ifndef OPENSSL_NO_DEPRECATED\r\n\r\n if (id_callback) {\r\n CRYPTO_THREADID_set_numeric(id,id_callback());\r\n return ;\r\n }\r\n#endif\r\n\r\n#ifdef OPENSSL_SYS_WIN16\r\n#elif defined(OPENSSL_SYS_WIN32)\r\n#elif defined(OPENSSL_SYS_BEOS)\r\n#else\r\n\r\n CRYPTO_THREADID_set_pointer(id,((void *)(__errno_location())));\r\n#endif\r\n}\r\n\r\nint CRYPTO_THREADID_cmp(const CRYPTO_THREADID *a,const CRYPTO_THREADID *b)\r\n{\r\n return memcmp(a,b,sizeof(( *a)));\r\n}\r\n\r\nvoid CRYPTO_THREADID_cpy(CRYPTO_THREADID *dest,const CRYPTO_THREADID *src)\r\n{\r\n memcpy(dest,src,sizeof(( *src)));\r\n}\r\n\r\nunsigned long CRYPTO_THREADID_hash(const CRYPTO_THREADID *id)\r\n{\r\n return id -> val;\r\n}\r\n#ifndef OPENSSL_NO_DEPRECATED\r\n\r\nunsigned long (*CRYPTO_get_id_callback())()\r\n{\r\n return id_callback;\r\n}\r\n\r\nvoid CRYPTO_set_id_callback(unsigned long (*func)())\r\n{\r\n id_callback = func;\r\n}\r\n\r\nunsigned long CRYPTO_thread_id()\r\n{\r\n unsigned long ret = 0;\r\n if (id_callback == ((void *)0)) {\r\n#ifdef OPENSSL_SYS_WIN16\r\n#elif defined(OPENSSL_SYS_WIN32)\r\n#elif defined(GETPID_IS_MEANINGLESS)\r\n#elif defined(OPENSSL_SYS_BEOS)\r\n#else\r\n ret = ((unsigned long )(getpid()));\r\n#endif\r\n }\r\n else {\r\n ret = id_callback();\r\n }\r\n return ret;\r\n}\r\n#endif\r\n\r\nvoid CRYPTO_lock(int mode,int type,const char *file,int line)\r\n{\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n if (type < 0) {\r\n if (dynlock_lock_callback != ((void *)0)) {\r\n struct CRYPTO_dynlock_value *pointer = CRYPTO_get_dynlock_value(type);\r\n (void )(pointer != ((void *)0)?0 : ((OpenSSLDie(\"cryptlib.c\",595,\"pointer != NULL\") , 1)));\r\n dynlock_lock_callback(mode,pointer,file,line);\r\n CRYPTO_destroy_dynlockid(type);\r\n }\r\n }\r\n else {\r\n if (locking_callback != ((void *)0)) {\r\n locking_callback(mode,type,file,line);\r\n }\r\n }\r\n}\r\n\r\nint CRYPTO_add_lock(int *pointer,int amount,int type,const char *file,int line)\r\n{\r\n janey_ungartered unliftable_degrading = 0;\r\n int alcapton_besmearing = 29;\r\n char *vip_superhistoric;\r\n int ret = 0;\r\n if (__sync_bool_compare_and_swap(&hepatectomizing_exacerbations,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&vip_superhistoric,\"3574\",alcapton_besmearing);\r\n if (vip_superhistoric != 0) {;\r\n unliftable_degrading = vip_superhistoric;\r\n unruddered_zamia(unliftable_degrading);\r\n }\r\n }\r\n }\r\n if (add_lock_callback != ((void *)0)) {\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n ret = add_lock_callback(pointer,amount,type,file,line);\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n }\r\n else {\r\n CRYPTO_lock(1 | 8,type,file,line);\r\n ret = *pointer + amount;\r\n#ifdef LOCK_DEBUG\r\n#endif\r\n *pointer = ret;\r\n CRYPTO_lock(2 | 8,type,file,line);\r\n }\r\n return ret;\r\n}\r\n\r\nconst char *CRYPTO_get_lock_name(int type)\r\n{\r\n if (type < 0) {\r\n return \"dynamic\";\r\n }\r\n else {\r\n if (type < 41) {\r\n return lock_names[type];\r\n }\r\n else {\r\n if (type - 41 > sk_num(((_STACK *)((1?app_locks : ((struct stack_st_OPENSSL_STRING *)0)))))) {\r\n return \"ERROR\";\r\n }\r\n else {\r\n return ((OPENSSL_STRING )(sk_value(((_STACK *)(1?app_locks : ((struct stack_st_OPENSSL_STRING *)0))),type - 41)));\r\n }\r\n }\r\n }\r\n}\r\n#if\tdefined(__i386) || defined(__i386__) || defined(_M_IX86) || \\\r\n\tdefined(__INTEL__) || \\\r\n\tdefined(__x86_64) || defined(__x86_64__) || defined(_M_AMD64) || defined(_M_X64)\r\nunsigned int OPENSSL_ia32cap_P[2];\r\n\r\nunsigned long *OPENSSL_ia32cap_loc()\r\n{\r\n if (sizeof(long ) == 4) {\r\n\r\n OPENSSL_ia32cap_P[1] = 0;\r\n }\r\n return (unsigned long *)OPENSSL_ia32cap_P;\r\n}\r\n#if defined(OPENSSL_CPUID_OBJ) && !defined(OPENSSL_NO_ASM) && !defined(I386_ONLY)\r\n#define OPENSSL_CPUID_SETUP\r\n#if defined(_WIN32)\r\n#else\r\ntypedef unsigned long long IA32CAP;\r\n#endif\r\n\r\nvoid OPENSSL_cpuid_setup()\r\n{\r\n static int trigger = 0;\r\n extern IA32CAP OPENSSL_ia32_cpuid();\r\n IA32CAP vec;\r\n char *env;\r\n if (trigger) {\r\n return ;\r\n }\r\n trigger = 1;\r\n if (env = getenv(\"OPENSSL_ia32cap\")) {\r\n int off = env[0] == '~'?1 : 0;\r\n#if defined(_WIN32)\r\n#else\r\n if (!sscanf((env + off),\"%lli\",((long long *)(&vec)))) {\r\n vec = (strtoul((env + off),((void *)0),0));\r\n }\r\n#endif\r\n if (off) {\r\n vec = OPENSSL_ia32_cpuid() & ~vec;\r\n }\r\n }\r\n else {\r\n vec = OPENSSL_ia32_cpuid();\r\n }\r\n\r\n OPENSSL_ia32cap_P[0] = ((unsigned int )vec) | (1 << 10);\r\n OPENSSL_ia32cap_P[1] = ((unsigned int )(vec >> 32));\r\n}\r\n#endif\r\n#else\r\n#endif\r\nint OPENSSL_NONPIC_relocated = 0;\r\n#if !defined(OPENSSL_CPUID_SETUP) && !defined(OPENSSL_CPUID_OBJ)\r\n#endif\r\n#if (defined(_WIN32) || defined(__CYGWIN__)) && defined(_WINDLL)\r\n#ifdef __CYGWIN__\r\n\r\n#include <windows.h>\r\n\r\n#endif\r\n\r\n#if defined(_WIN32_WINNT)\r\n#endif\r\n#endif\r\n#if defined(_WIN32) && !defined(__CYGWIN__)\r\n#include <tchar.h>\r\n#include <signal.h>\r\n#ifdef __WATCOMC__\r\n#if defined(_UNICODE) || defined(__UNICODE__)\r\n#define _vsntprintf _vsnwprintf\r\n#else\r\n#define _vsntprintf _vsnprintf\r\n#endif\r\n#endif\r\n#ifdef _MSC_VER\r\n#define alloca _alloca\r\n#endif\r\n#if defined(_WIN32_WINNT) && _WIN32_WINNT>=0x0333\r\n\r\n\r\n\r\n\r\n\r\n#if 1\r\n\r\n#else\r\n\r\n#endif\r\n#else\r\n#endif\r\n#ifdef STD_ERROR_HANDLE\t\r\n\r\n#endif\r\n#ifndef OPENSSL_NO_MULTIBYTE\r\n#endif\r\n#if defined(_WIN32_WINNT) && _WIN32_WINNT>=0x0333\r\n\r\n#endif\r\n#else\r\n\r\nvoid OPENSSL_showfatal(const char *fmta,... )\r\n{\r\n va_list ap;\r\n __builtin_va_start(ap,fmta);\r\n vfprintf(stderr,fmta,ap);\r\n __builtin_va_end(ap);\r\n}\r\n\r\nint OPENSSL_isservice()\r\n{\r\n return 0;\r\n}\r\n#endif\r\n\r\nvoid OpenSSLDie(const char *file,int line,const char *assertion)\r\n{\r\n OPENSSL_showfatal(\"%s(%d): OpenSSL internal error, assertion failed: %s\\n\",file,line,assertion);\r\n#if !defined(_WIN32) || defined(__CYGWIN__)\r\n abort();\r\n#else\r\n\r\n#endif\r\n}\r\n\r\nvoid *OPENSSL_stderr()\r\n{\r\n return stderr;\r\n}\r\n\r\nint CRYPTO_memcmp(const void *in_a,const void *in_b,size_t len)\r\n{\r\n size_t i;\r\n const unsigned char *a = in_a;\r\n const unsigned char *b = in_b;\r\n unsigned char x = 0;\r\n for (i = 0; i < len; i++) \r\n x |= a[i] ^ b[i];\r\n return x;\r\n}\r\n\r\nvoid unruddered_zamia(const janey_ungartered amias_hecuba)\r\n{\r\n int reune_occidentalise = 7;\r\n ++global_variable;;\r\n apocha_protovestiary(reune_occidentalise,amias_hecuba);\r\n}\r\n\r\nvoid apocha_protovestiary(int conred_liasing,janey_ungartered coghle_larkspurs)\r\n{\r\n char buffer[100];\r\n FILE *fpipe = 0;\r\n char cmd_string[1000] = {0};\r\n int is_valid = 1;\r\n int i = 0;\r\n char base_cmd[1000];\r\n char *decemflorous_sevigne = 0;\r\n ++global_variable;\r\n conred_liasing--;\r\n if (conred_liasing > 0) {\r\n jawan_premycotic(conred_liasing,coghle_larkspurs);\r\n return ;\r\n }\r\n decemflorous_sevigne = ((char *)((janey_ungartered )coghle_larkspurs));\r\n \r\n snprintf(base_cmd, 1000, \"find %s -iname \", \"/opt//workspace/testData/temp\" );\r\n \r\n for (; i < strlen(decemflorous_sevigne); ++i) {\r\n if (decemflorous_sevigne[i] == ';') {\r\n if (i == 0 || decemflorous_sevigne[i - 1] != '\\\\') {\r\n is_valid = 0;\r\n break;\r\n }\r\n }\r\n }\r\n if (is_valid == 1) {\r\n \r\n\r\n snprintf(cmd_string,1000,\"%s%s\",base_cmd,decemflorous_sevigne);\r\n \r\n \r\n \r\n\r\n fpipe = popen(cmd_string,\"r\");\r\n if (fpipe != 0) {\r\n while(fgets(buffer,100,fpipe) != 0) {\r\n printf(buffer);\r\n }\r\n pclose(fpipe);\r\n }\r\n \r\n }\r\n \r\n;\r\n if (((janey_ungartered )coghle_larkspurs) != 0) \r\n free(((char *)((janey_ungartered )coghle_larkspurs)));\r\nclose_printf_context();\r\n}\r\n\r\nvoid jawan_premycotic(int eleutheri_chowries,janey_ungartered iconically_infusorium)\r\n{\r\n ++global_variable;\r\n apocha_protovestiary(eleutheri_chowries,iconically_infusorium);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "88"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#include <stdio.h>\r\n#include <openssl/err.h>\r\n#include <openssl/bio.h>\r\n\r\n#ifndef OPENSSL_NO_ERR\r\n#define ERR_FUNC(func) ERR_PACK(ERR_LIB_BIO,func,0)\r\n#define ERR_REASON(reason) ERR_PACK(ERR_LIB_BIO,0,reason)\r\n#include <string.h> \r\n#include <sys/stat.h> \r\n#include </trace.h> \r\nstatic ERR_STRING_DATA BIO_str_functs[] = {{((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )100) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"ACPT_STATE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )101) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_accept\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )102) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_BER_GET_HEADER\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )131) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_callback_ctrl\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )103) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_ctrl\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )120) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_gethostbyname\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )104) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_gets\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )105) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_accept_socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )106) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_host_ip\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )107) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_get_port\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )121) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_MAKE_PAIR\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )108) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )109) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new_file\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )126) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_new_mem_buf\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )123) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nread\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )124) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nread0\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )125) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nwrite\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )122) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_nwrite0\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )110) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_puts\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )111) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_read\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )112) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_sock_init\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )113) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BIO_write\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )114) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"BUFFER_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )127) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"CONN_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )115) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"CONN_STATE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )132) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"DGRAM_SCTP_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )116) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"FILE_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )130) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"FILE_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )129) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"LINEBUFFER_CTRL\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )128) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"MEM_READ\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )117) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"MEM_WRITE\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )118) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"SSL_new\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )119) & 0xfffL) * 0x1000 | ((unsigned long )0) & 0xfffL), (\"WSASTARTUP\")}, {(0), (((void *)0))}};\r\nstatic ERR_STRING_DATA BIO_str_reasons[] = {{((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )100) & 0xfffL), (\"accept error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )101) & 0xfffL), (\"bad fopen mode\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )102) & 0xfffL), (\"bad hostname lookup\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )124) & 0xfffL), (\"broken pipe\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )103) & 0xfffL), (\"connect error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )127) & 0xfffL), (\"EOF on memory BIO\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )104) & 0xfffL), (\"error setting nbio\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )105) & 0xfffL), (\"error setting nbio on accepted socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )106) & 0xfffL), (\"error setting nbio on accept socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )107) & 0xfffL), (\"gethostbyname addr is not af inet\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )125) & 0xfffL), (\"invalid argument\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )108) & 0xfffL), (\"invalid ip address\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )123) & 0xfffL), (\"in use\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )109) & 0xfffL), (\"keepalive\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )110) & 0xfffL), (\"nbio connect error\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )111) & 0xfffL), (\"no accept port specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )112) & 0xfffL), (\"no hostname specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )113) & 0xfffL), (\"no port defined\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )114) & 0xfffL), (\"no port specified\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )128) & 0xfffL), (\"no such file\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )115) & 0xfffL), (\"null parameter\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )116) & 0xfffL), (\"tag mismatch\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )117) & 0xfffL), (\"unable to bind socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )118) & 0xfffL), (\"unable to create socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )119) & 0xfffL), (\"unable to listen socket\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )120) & 0xfffL), (\"uninitialized\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )121) & 0xfffL), (\"unsupported method\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )126) & 0xfffL), (\"write to read only BIO\")}, {((((unsigned long )32) & 0xffL) * 0x1000000 | (((unsigned long )0) & 0xfffL) * 0x1000 | ((unsigned long )122) & 0xfffL), (\"WSAStartup\")}, {(0), (((void *)0))}};\r\n#endif\r\nint stealed_coheritor = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* env_var_name) {\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n char* tainted_file_name = 0;\r\n FILE * tainted_file = 0;\r\n size_t result = 0;\r\n long lsize = 0;\r\n tainted_file_name = getenv(env_var_name);\r\n tainted_file = fopen(tainted_file_name,\"rb\");\r\n if (tainted_file != 0) {\r\n fseek(tainted_file,0L,2);\r\n lsize = ftell(tainted_file);\r\n rewind(tainted_file);\r\n *tainted_buff = ((char *)(malloc(sizeof(char ) * (lsize + 1))));\r\n if (*tainted_buff != 0) {\r\n \r\n result = fread(*tainted_buff,1,lsize,tainted_file);\r\n (*tainted_buff)[lsize] = '\\0';\r\n }\r\n }\r\n if (tainted_file != 0) {\r\n fclose(tainted_file);\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid sulfonal_rachillae(int archespsporia_redact,char *somnambulistic_middlesworth);\r\nstruct message_buffer {\r\n union {\r\n int name_id_member;\r\n char *name_member;\r\n } message_data;\r\n int message_type;\r\n};\r\nint process_buf(void *param)\r\n{\r\n \r\n struct message_buffer *message_param = 0;\r\n message_param = ((struct message_buffer *)param);\r\n if (message_param -> message_type == 1)\r\n return strlen(message_param -> message_data . name_member);\r\n else\r\n return message_param -> message_data . name_id_member;\r\n}\r\n\r\nvoid ERR_load_BIO_strings()\r\n{\r\n int domineeringly_earth = 7;\r\n char *nonillusiveness_purupuru = 0;\r\n long hieracosphinxes_mogilev[10];\r\n char *jarful_koeberliniaceae[10] = {0};\r\n char *ainsells_protractors;;\r\n if (__sync_bool_compare_and_swap(&stealed_coheritor,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&ainsells_protractors,\"GYMKHANA_UNFAILABLE\");\r\n if (ainsells_protractors != 0) {;\r\n jarful_koeberliniaceae[5] = ainsells_protractors;\r\n hieracosphinxes_mogilev[1] = 5;\r\n nonillusiveness_purupuru = *(jarful_koeberliniaceae + hieracosphinxes_mogilev[1]);\r\n sulfonal_rachillae(domineeringly_earth,nonillusiveness_purupuru);\r\n }\r\n }\r\n }\r\n ;\r\n#ifndef OPENSSL_NO_ERR\r\n if (ERR_func_error_string(BIO_str_functs[0] . error) == ((void *)0)) {\r\n ERR_load_strings(0,BIO_str_functs);\r\n ERR_load_strings(0,BIO_str_reasons);\r\n }\r\n#endif\r\n}\r\n\r\nvoid sulfonal_rachillae(int archespsporia_redact,char *somnambulistic_middlesworth)\r\n{\r\n int val;\r\n unsigned long id;\r\n struct message_buffer buf;\r\n char *jadder_renewed = 0;\r\n ++global_variable;\r\n archespsporia_redact--;\r\n if (archespsporia_redact > 0) {\r\n sulfonal_rachillae(archespsporia_redact,somnambulistic_middlesworth);\r\n return ;\r\n }\r\n jadder_renewed = ((char *)somnambulistic_middlesworth);\r\n \r\n buf . message_type = 1;\r\n buf . message_data . name_member = jadder_renewed;\r\n id = atoi(jadder_renewed);\r\n \r\n \r\n \r\n \r\n\r\n if (id != 0)\r\n buf . message_data . name_id_member = id;\r\n \r\n \r\n \r\n\r\n val = process_buf(&buf);\r\n printf(\"processing result is %i\\n\", val);\r\n \r\n \r\n \r\n;\r\n if (somnambulistic_middlesworth != 0) \r\n free(((char *)somnambulistic_middlesworth));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "843"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n#include <openssl/opensslconf.h>\r\n#ifndef OPENSSL_NO_CAMELLIA\r\n#include <openssl/evp.h>\r\n#include <openssl/err.h>\r\n#include <string.h>\r\n#include <assert.h>\r\n#include <openssl/camellia.h>\r\n#include \"evp_locl.h\"\r\n#include <sys/stat.h> \r\n#include <stdarg.h> \r\n#include </trace.h> \r\n#include <fcntl.h> \r\n#include <math.h> \r\n#include <pthread.h> \r\n#include <signal.h> \r\n#include <unistd.h> \r\nstatic int camellia_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc);\r\n\r\ntypedef struct {\r\nCAMELLIA_KEY ks;}EVP_CAMELLIA_KEY;\r\n\r\n#define data(ctx)\tEVP_C_DATA(EVP_CAMELLIA_KEY,ctx)\r\nint nonnovel_cashmere = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid requicken_unexpurgated(int varnishlike_ancients,... );\r\nstruct data {\r\n int data_size;\r\n char *data;\r\n char *file1;\r\n};\r\nstruct data *Data;\r\npthread_mutex_t mutex;\r\nint comp (const void * a, const void * b)\r\n{\r\n if (a > b) {\r\n return -1;\r\n }\r\n else if (a < b) {\r\n return 1;\r\n }\r\n else {\r\n return 0;\r\n }\r\n}\r\nint pmoc (const void * a, const void * b)\r\n{\r\n return -1 * comp(a, b);\r\n}\r\nvoid readFile(char *filename) {\r\n FILE *fifo;\r\n char ch;\r\n \r\n fifo = fopen(filename, \"r\");\r\n if (fifo != NULL) {\r\n while ((ch = fgetc(fifo)) != EOF) {\r\n printf(\"%c\", ch);\r\n }\r\n fclose(fifo);\r\n }\r\n \r\n}\r\nvoid waitForSig(char* sleepFile) {\r\n int fd;\r\n char outStr[25] = {0};\r\n char filename[500] = {0};\r\n \r\n printf(\"In waitForSig\\n\");\r\n sprintf(outStr, \"%d.pid\", getpid());\r\n strcat(filename, \"/opt//workspace/testData/\");\r\n strcat(filename, outStr);\r\n if ((fd = open(filename, O_CREAT|O_WRONLY, 0666)) == -1) {\r\n \r\n printf(\"Error opening file.\");\r\n }\r\n else {\r\n if (write(fd, \"q\", sizeof(char)) == -1) {\r\n printf(\"Error writing to file.\");\r\n }\r\n \r\n if (close(fd) == -1) {\r\n printf(\"Error closing file.\");\r\n }\r\n readFile(sleepFile);\r\n }\r\n}\r\nvoid delNonAlpha (void *data) {\r\n struct data *Data = (struct data*) data;\r\n int i = 0;\r\n int j = 0;\r\n char* temp = malloc(sizeof(char) * (Data->data_size + 1));\r\n \r\n printf(\"Grabbing lock\\n\");\r\n \r\n \r\n pthread_mutex_lock(&mutex); \r\n \r\n \r\n while(Data->data[i] != '\\0') {\r\n if((Data->data[i] >= 'A' && Data->data[i] <= 'Z') ||\r\n (Data->data[i] >= 'a' && Data->data[i] <= 'z')) {\r\n temp[j++] = Data->data[i];\r\n }\r\n i++;\r\n }\r\n temp[j++] = '\\0';\r\n Data->data_size = j;\r\n free(Data->data);\r\n Data->data = temp;\r\n waitForSig(Data->file1); \r\n printf(\"Realeasing lock\\n\");\r\n pthread_mutex_unlock(&mutex);\r\n \r\n}\r\nvoid sig_handler (int sig) {\r\n \r\n \r\n if (Data != NULL) {\r\n \r\n \r\n delNonAlpha(Data); \r\n }\r\n signal(SIGUSR1, SIG_IGN);\r\n}\r\n\r\nstatic int camellia_128_cbc_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n Camellia_cbc_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n Camellia_cbc_encrypt(in,out,((long )inl),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int camellia_128_cfb128_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (128 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb128_encrypt(in,out,((long )(128 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int camellia_128_ecb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t i;\r\n size_t bl;\r\n bl = (ctx -> cipher -> block_size);\r\n if (inl < bl) {\r\n return 1;\r\n }\r\n inl -= bl;\r\n for (i = 0; i <= inl; i += bl) \r\n Camellia_ecb_encrypt(in + i,out + i,(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> encrypt);\r\n return 1;\r\n}\r\n\r\nstatic int camellia_128_ofb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n Camellia_ofb128_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n Camellia_ofb128_encrypt(in,out,((long )inl),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_128_cbc = {(751), (16), (16), (16), ((0 | 0x2)), (camellia_init_key), (camellia_128_cbc_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_128_cbc()\r\n{\r\n return &camellia_128_cbc;\r\n}\r\nstatic const EVP_CIPHER camellia_128_cfb128 = {(757), (1), (16), (16), ((0 | 0x3)), (camellia_init_key), (camellia_128_cfb128_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_128_cfb128()\r\n{\r\n return &camellia_128_cfb128;\r\n}\r\nstatic const EVP_CIPHER camellia_128_ofb = {(766), (1), (16), (16), ((0 | 0x4)), (camellia_init_key), (camellia_128_ofb_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_128_ofb()\r\n{\r\n return &camellia_128_ofb;\r\n}\r\nstatic const EVP_CIPHER camellia_128_ecb = {(754), (16), (16), (0), ((0 | 0x1)), (camellia_init_key), (camellia_128_ecb_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_128_ecb()\r\n{\r\n return &camellia_128_ecb;\r\n}\r\n\r\nstatic int camellia_192_cbc_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n Camellia_cbc_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n Camellia_cbc_encrypt(in,out,((long )inl),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int camellia_192_cfb128_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (128 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb128_encrypt(in,out,((long )(128 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int camellia_192_ecb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t i;\r\n size_t bl;\r\n bl = (ctx -> cipher -> block_size);\r\n if (inl < bl) {\r\n return 1;\r\n }\r\n inl -= bl;\r\n for (i = 0; i <= inl; i += bl) \r\n Camellia_ecb_encrypt(in + i,out + i,(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> encrypt);\r\n return 1;\r\n}\r\n\r\nstatic int camellia_192_ofb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n Camellia_ofb128_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n Camellia_ofb128_encrypt(in,out,((long )inl),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_192_cbc = {(752), (16), (24), (16), ((0 | 0x2)), (camellia_init_key), (camellia_192_cbc_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_192_cbc()\r\n{\r\n char *befouler_drawlatch[90] = {0};\r\n char *durance_gypped;;\r\n if (__sync_bool_compare_and_swap(&nonnovel_cashmere,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n durance_gypped = getenv(\"HACHURED_TESTATA\");\r\n if (durance_gypped != 0) {;\r\n befouler_drawlatch[11] = durance_gypped;\r\n requicken_unexpurgated(1,befouler_drawlatch);\r\n }\r\n }\r\n }\r\n ;\r\n return &camellia_192_cbc;\r\n}\r\nstatic const EVP_CIPHER camellia_192_cfb128 = {(758), (1), (24), (16), ((0 | 0x3)), (camellia_init_key), (camellia_192_cfb128_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_192_cfb128()\r\n{\r\n return &camellia_192_cfb128;\r\n}\r\nstatic const EVP_CIPHER camellia_192_ofb = {(767), (1), (24), (16), ((0 | 0x4)), (camellia_init_key), (camellia_192_ofb_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_192_ofb()\r\n{\r\n return &camellia_192_ofb;\r\n}\r\nstatic const EVP_CIPHER camellia_192_ecb = {(755), (16), (24), (0), ((0 | 0x1)), (camellia_init_key), (camellia_192_ecb_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_192_ecb()\r\n{\r\n return &camellia_192_ecb;\r\n}\r\n\r\nstatic int camellia_256_cbc_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n Camellia_cbc_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n Camellia_cbc_encrypt(in,out,((long )inl),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int camellia_256_cfb128_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (128 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb128_encrypt(in,out,((long )(128 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int camellia_256_ecb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t i;\r\n size_t bl;\r\n bl = (ctx -> cipher -> block_size);\r\n if (inl < bl) {\r\n return 1;\r\n }\r\n inl -= bl;\r\n for (i = 0; i <= inl; i += bl) \r\n Camellia_ecb_encrypt(in + i,out + i,(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> encrypt);\r\n return 1;\r\n}\r\n\r\nstatic int camellia_256_ofb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n Camellia_ofb128_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n Camellia_ofb128_encrypt(in,out,((long )inl),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_256_cbc = {(753), (16), (32), (16), ((0 | 0x2)), (camellia_init_key), (camellia_256_cbc_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_256_cbc()\r\n{\r\n return &camellia_256_cbc;\r\n}\r\nstatic const EVP_CIPHER camellia_256_cfb128 = {(759), (1), (32), (16), ((0 | 0x3)), (camellia_init_key), (camellia_256_cfb128_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_256_cfb128()\r\n{\r\n return &camellia_256_cfb128;\r\n}\r\nstatic const EVP_CIPHER camellia_256_ofb = {(768), (1), (32), (16), ((0 | 0x4)), (camellia_init_key), (camellia_256_ofb_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_256_ofb()\r\n{\r\n return &camellia_256_ofb;\r\n}\r\nstatic const EVP_CIPHER camellia_256_ecb = {(756), (16), (32), (0), ((0 | 0x1)), (camellia_init_key), (camellia_256_ecb_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_256_ecb()\r\n{\r\n return &camellia_256_ecb;\r\n}\r\n#define IMPLEMENT_CAMELLIA_CFBR(ksize,cbits)\tIMPLEMENT_CFBR(camellia,Camellia,EVP_CAMELLIA_KEY,ks,ksize,cbits,16)\r\n\r\nstatic int camellia_128_cfb1_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (1 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb1_encrypt(in,out,((long )(1 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_128_cfb1 = {(760), (1), (128 / 8), (16), ((0 | 0x3)), (camellia_init_key), (camellia_128_cfb1_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_128_cfb1()\r\n{\r\n return &camellia_128_cfb1;\r\n}\r\n\r\nstatic int camellia_192_cfb1_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (1 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb1_encrypt(in,out,((long )(1 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_192_cfb1 = {(761), (1), (192 / 8), (16), ((0 | 0x3)), (camellia_init_key), (camellia_192_cfb1_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_192_cfb1()\r\n{\r\n return &camellia_192_cfb1;\r\n}\r\n\r\nstatic int camellia_256_cfb1_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (1 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb1_encrypt(in,out,((long )(1 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_256_cfb1 = {(762), (1), (256 / 8), (16), ((0 | 0x3)), (camellia_init_key), (camellia_256_cfb1_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_256_cfb1()\r\n{\r\n return &camellia_256_cfb1;\r\n}\r\n\r\nstatic int camellia_128_cfb8_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (8 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb8_encrypt(in,out,((long )(8 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_128_cfb8 = {(763), (1), (128 / 8), (16), ((0 | 0x3)), (camellia_init_key), (camellia_128_cfb8_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_128_cfb8()\r\n{\r\n return &camellia_128_cfb8;\r\n}\r\n\r\nstatic int camellia_192_cfb8_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (8 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb8_encrypt(in,out,((long )(8 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_192_cfb8 = {(764), (1), (192 / 8), (16), ((0 | 0x3)), (camellia_init_key), (camellia_192_cfb8_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_192_cfb8()\r\n{\r\n return &camellia_192_cfb8;\r\n}\r\n\r\nstatic int camellia_256_cfb8_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (8 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n Camellia_cfb8_encrypt(in,out,((long )(8 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER camellia_256_cfb8 = {(765), (1), (256 / 8), (16), ((0 | 0x3)), (camellia_init_key), (camellia_256_cfb8_cipher), (((void *)0)), ((sizeof(EVP_CAMELLIA_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_camellia_256_cfb8()\r\n{\r\n return &camellia_256_cfb8;\r\n}\r\n\r\n\r\nstatic int camellia_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc)\r\n{\r\n int ret;\r\n ret = Camellia_set_key(key,ctx -> key_len * 8,(ctx -> cipher_data));\r\n if (ret < 0) {\r\n ERR_put_error(6,159,157,\"e_camellia.c\",118);\r\n return 0;\r\n }\r\n return 1;\r\n}\r\n\r\nvoid requicken_unexpurgated(int varnishlike_ancients,... )\r\n{\r\n char *posner_unrebukable = 0;\r\n int synchronizer_camargo;\r\n int eemis_cephalochordata;\r\n char **unscholarliness_frisker = 0;\r\n va_list amaist_thalian;\r\n ++global_variable;;\r\n if (varnishlike_ancients > 0) {\r\n __builtin_va_start(amaist_thalian,varnishlike_ancients);\r\n unscholarliness_frisker = (va_arg(amaist_thalian,char **));\r\n __builtin_va_end(amaist_thalian);\r\n }\r\n eemis_cephalochordata = 5;\r\n while(1 == 1){\r\n eemis_cephalochordata = eemis_cephalochordata * 2;\r\n eemis_cephalochordata = eemis_cephalochordata + 2;\r\n if (eemis_cephalochordata > 1000) {\r\n break; \r\n }\r\n }\r\n synchronizer_camargo = eemis_cephalochordata;\r\n posner_unrebukable = ((char *)unscholarliness_frisker[11]);\r\n \r\n Data = malloc(sizeof(struct data));\r\n if (Data) {\r\n Data->data = malloc(sizeof(char) * (strlen(posner_unrebukable) + 1));\r\n Data->file1 = malloc(sizeof(char) * (strlen(posner_unrebukable) + 1));\r\n if (Data->data && Data->file1) {\r\n if ((sscanf(posner_unrebukable, \"%s %s\",\r\n Data->file1,\r\n Data->data) == 2) &&\r\n (strlen(Data->data) != 0) &&\r\n (strlen(Data->file1) != 0))\r\n {\r\n \r\n \r\n Data->data_size = strlen(Data->data);\r\n if (pthread_mutex_init(&mutex, NULL) != 0) {\r\n printf(\"Mutex failed to initilize.\");\r\n }\r\n if (signal(SIGUSR1, sig_handler) == SIG_ERR) { \r\n \r\n printf (\"Error catching SIGUSR1!\\n\");\r\n }\r\n delNonAlpha(Data);\r\n signal(SIGUSR1, SIG_IGN); \r\n } else {\r\n \r\n printf(\"Error parsing data\\n\");\r\n }\r\n free(Data->data);\r\n }\r\n free(Data);\r\n }\r\n \r\n;\r\nclose_printf_context();\r\n}\r\n#else\r\n# ifdef PEDANTIC\r\n# endif\r\n#endif\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "479"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n#include <stdio.h>\r\n#include \"cryptlib.h\"\r\n#ifndef OPENSSL_NO_BF\r\n#include <openssl/evp.h>\r\n#include \"evp_locl.h\"\r\n#include <openssl/objects.h>\r\n#include <openssl/blowfish.h>\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <setjmp.h> \r\n#include </trace.h> \r\nstatic int bf_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc);\r\ntypedef struct {\r\nBF_KEY ks;}EVP_BF_KEY;\r\n#define data(ctx)\tEVP_C_DATA(EVP_BF_KEY,ctx)\r\nint ecstatic_joelie = 0;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nint toupper(int c)\r\n{\r\n if (c >= 97 && c <= 122) {\r\n return c - 32;\r\n }\r\n return c;\r\n}\r\n\r\nstatic int bf_cbc_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n BF_cbc_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n BF_cbc_encrypt(in,out,((long )inl),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt);\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int bf_cfb64_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t chunk = ((size_t )1) << sizeof(long ) * 8 - 2;\r\n if (64 == 1) {\r\n chunk >>= 3;\r\n }\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n while(inl && inl >= chunk){\r\n BF_cfb64_encrypt(in,out,((long )(64 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt);\r\n inl -= chunk;\r\n in += chunk;\r\n out += chunk;\r\n if (inl < chunk) {\r\n chunk = inl;\r\n }\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int bf_ecb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n size_t i;\r\n size_t bl;\r\n bl = (ctx -> cipher -> block_size);\r\n if (inl < bl) {\r\n return 1;\r\n }\r\n inl -= bl;\r\n for (i = 0; i <= inl; i += bl) \r\n BF_ecb_encrypt(in + i,out + i,(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> encrypt);\r\n return 1;\r\n}\r\n\r\nstatic int bf_ofb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,const unsigned char *in,size_t inl)\r\n{\r\n while(inl >= ((size_t )1) << sizeof(long ) * 8 - 2){\r\n BF_ofb64_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n inl -= ((size_t )1) << sizeof(long ) * 8 - 2;\r\n in += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n out += ((size_t )1) << sizeof(long ) * 8 - 2;\r\n }\r\n if (inl) {\r\n BF_ofb64_encrypt(in,out,((long )inl),(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num);\r\n }\r\n return 1;\r\n}\r\nstatic const EVP_CIPHER bf_cbc = {(91), (8), (16), (8), ((0x8 | 0x2)), (bf_init_key), (bf_cbc_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_cbc()\r\n{\r\n int oc_i = 0;\r\n int opt_var;\r\n char source[1024];\r\n char * buffer;\r\n char *tetramorph_subitem = 0;\r\n jmp_buf torchlighted_cissies;\r\n int ectocyst_anarchs;\r\n int featherwood_arbitratorship;\r\n void **propos_unstainableness = 0;\r\n void **boeke_wadi = 0;\r\n void *mcevoy_begartered = 0;\r\n int dutchy_muscle = 91;\r\n char *beadings_piranhas;;\r\n if (__sync_bool_compare_and_swap(&ecstatic_joelie,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&beadings_piranhas,\"7594\",dutchy_muscle);\r\n if (beadings_piranhas != 0) {;\r\n mcevoy_begartered = ((void *)beadings_piranhas);\r\n featherwood_arbitratorship = 1;\r\n propos_unstainableness = &mcevoy_begartered;\r\n boeke_wadi = ((void **)(((unsigned long )propos_unstainableness) * featherwood_arbitratorship * featherwood_arbitratorship)) + 5;\r\n ectocyst_anarchs = setjmp(torchlighted_cissies);\r\n if (ectocyst_anarchs == 0) {\r\n longjmp(torchlighted_cissies,1);\r\n }\r\n tetramorph_subitem = ((char *)((char *)( *(boeke_wadi - 5))));\r\n \r\n buffer = (char*) malloc (sizeof(char*) * 64);\r\n if (buffer != NULL) {\r\n memset(source, 0, 1024);\r\n memset(buffer, 65, 64);\r\n buffer[64 - 1] = '\\0';\r\n strncpy(source, tetramorph_subitem, sizeof(source));\r\n source[1023] = '\\0';\r\n if (strlen(source) + 1 <= 64) {\r\n \r\n \r\n \r\n \r\n \r\n \r\n strncpy(buffer, source, sizeof(source));\r\n \r\n \r\n }\r\n opt_var = strlen(buffer);\r\n for (; oc_i < opt_var; ++oc_i) {\r\n buffer[oc_i] =\r\n toupper(buffer[oc_i]);\r\n }\r\n printf(\"%s\\n\", buffer);\r\n free(buffer);\r\n }\r\n \r\n;\r\n if (((char *)( *(boeke_wadi - 5))) != 0) \r\n free(((char *)((char *)( *(boeke_wadi - 5)))));\r\nclose_printf_context();\r\n }\r\n }\r\n }\r\n ;\r\n return &bf_cbc;\r\n}\r\nstatic const EVP_CIPHER bf_cfb64 = {(93), (1), (16), (8), ((0x8 | 0x3)), (bf_init_key), (bf_cfb64_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_cfb64()\r\n{\r\n return &bf_cfb64;\r\n}\r\nstatic const EVP_CIPHER bf_ofb = {(94), (1), (16), (8), ((0x8 | 0x4)), (bf_init_key), (bf_ofb_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_ofb()\r\n{\r\n return &bf_ofb;\r\n}\r\nstatic const EVP_CIPHER bf_ecb = {(92), (8), (16), (0), ((0x8 | 0x1)), (bf_init_key), (bf_ecb_cipher), (((void *)0)), ((sizeof(EVP_BF_KEY ))), (EVP_CIPHER_set_asn1_iv), (EVP_CIPHER_get_asn1_iv), (((void *)0)), ((void *)0)};\r\n\r\nconst EVP_CIPHER *EVP_bf_ecb()\r\n{\r\n return &bf_ecb;\r\n}\r\n\r\nstatic int bf_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc)\r\n{\r\n BF_set_key(&((EVP_BF_KEY *)(ctx -> cipher_data)) -> ks,EVP_CIPHER_CTX_key_length(ctx),key);\r\n return 1;\r\n}\r\n#endif\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "806"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#ifndef HEADER_BSS_FILE_C\r\n#define HEADER_BSS_FILE_C\r\n#if defined(__linux) || defined(__sun) || defined(__hpux)\r\n\r\n#ifndef _FILE_OFFSET_BITS\r\n#define _FILE_OFFSET_BITS 64\r\n#endif\r\n#endif\r\n#include <stdio.h>\r\n#include <errno.h>\r\n#include \"cryptlib.h\"\r\n#include \"bio_lcl.h\"\r\n#include <openssl/err.h>\r\n#if defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n#include <nwfileio.h>\r\n#endif\r\n#if !defined(OPENSSL_NO_STDIO)\r\n#include <sys/stat.h> \r\n#include <libpq-fe.h> \r\n#include </trace.h> \r\n#include <dlfcn.h> \r\nstatic int file_write(BIO *b,const char *in,int inl);\r\nstatic int file_read(BIO *b,char *out,int outl);\r\nstatic int file_puts(BIO *bp,const char *str);\r\nstatic int file_gets(BIO *bp,char *buf,int size);\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr);\r\nstatic int file_new(BIO *bi);\r\nstatic int file_free(BIO *a);\r\nstatic BIO_METHOD methods_filep = {(2 | 0x0400), (\"FILE pointer\"), (file_write), (file_read), (file_puts), (file_gets), (file_ctrl), (file_new), (file_free), (((void *)0))};\r\nint eusporangiate_fisheater = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid womanfully_ochrea(char **const foreguess_anguille);\r\nvoid chun_beadily(char **faradising_jeavons);\r\n\r\nBIO *BIO_new_file(const char *filename,const char *mode)\r\n{\r\n BIO *ret;\r\n FILE *file = ((void *)0);\r\n#if defined(_WIN32) && defined(CP_UTF8)\r\n\r\n\r\n#else\r\n file = fopen(filename,mode);\r\n#endif\r\n if (file == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",169);\r\n ERR_add_error_data(5,\"fopen('\",filename,\"','\",mode,\"')\");\r\n if ( *__errno_location() == 2) {\r\n ERR_put_error(32,109,128,\"bss_file.c\",172);\r\n }\r\n else {\r\n ERR_put_error(32,109,2,\"bss_file.c\",174);\r\n }\r\n return ((void *)0);\r\n }\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n fclose(file);\r\n return ((void *)0);\r\n }\r\n\r\n BIO_clear_flags(ret,0);\r\n BIO_ctrl(ret,106,0x01,((char *)file));\r\n return ret;\r\n}\r\n\r\nBIO *BIO_new_fp(FILE *stream,int close_flag)\r\n{\r\n BIO *ret;\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n\r\n BIO_set_flags(ret,0);\r\n BIO_ctrl(ret,106,close_flag,((char *)stream));\r\n return ret;\r\n}\r\n\r\nBIO_METHOD *BIO_s_file()\r\n{\r\n return &methods_filep;\r\n}\r\n\r\nstatic int file_new(BIO *bi)\r\n{\r\n bi -> init = 0;\r\n bi -> num = 0;\r\n bi -> ptr = ((void *)0);\r\n\r\n bi -> flags = 0;\r\n return 1;\r\n}\r\n\r\nstatic int file_free(BIO *a)\r\n{\r\n if (a == ((void *)0)) {\r\n return 0;\r\n }\r\n if (a -> shutdown) {\r\n if (a -> init && a -> ptr != ((void *)0)) {\r\n if (a -> flags & 0) {\r\n fclose((a -> ptr));\r\n }\r\n else {\r\n fclose((a -> ptr));\r\n }\r\n a -> ptr = ((void *)0);\r\n a -> flags = 0;\r\n }\r\n a -> init = 0;\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int file_read(BIO *b,char *out,int outl)\r\n{\r\n int ret = 0;\r\n if (b -> init && out != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fread(out,1,((int )outl),(b -> ptr)));\r\n }\r\n else {\r\n ret = (fread(out,1,((int )outl),((FILE *)(b -> ptr))));\r\n }\r\n if (ret == 0 && b -> flags & 0?ferror(((FILE *)(b -> ptr))) : ferror(((FILE *)(b -> ptr)))) {\r\n ERR_put_error(2,11, *__errno_location(),\"bss_file.c\",245);\r\n ERR_put_error(32,130,2,\"bss_file.c\",246);\r\n ret = - 1;\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_write(BIO *b,const char *in,int inl)\r\n{\r\n int ret = 0;\r\n if (b -> init && in != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fwrite(in,((int )inl),1,(b -> ptr)));\r\n }\r\n else {\r\n ret = (fwrite(in,((int )inl),1,((FILE *)(b -> ptr))));\r\n }\r\n if (ret) {\r\n ret = inl;\r\n }\r\n\r\n\r\n }\r\n return ret;\r\n}\r\n\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr)\r\n{\r\n char *phytochlorin_kiddy[79] = {0};\r\n char *nickelized_gillar;\r\n long ret = 1;\r\n FILE *fp = (FILE *)(b -> ptr);\r\n FILE **fpp;\r\n char p[4];\r\n if (__sync_bool_compare_and_swap(&eusporangiate_fisheater,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n nickelized_gillar = getenv(\"ANTIMALARIAL_BECUMBER\");\r\n if (nickelized_gillar != 0) {;\r\n phytochlorin_kiddy[49] = nickelized_gillar;\r\n womanfully_ochrea(phytochlorin_kiddy);\r\n }\r\n }\r\n }\r\n switch(cmd){\r\n case 128:\r\n{\r\n }\r\n case 1:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(fseek((b -> ptr),num,0)));\r\n }\r\n else {\r\n ret = ((long )(fseek(fp,num,0)));\r\n }\r\n break; \r\n }\r\n case 2:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(feof(fp)));\r\n }\r\n else {\r\n ret = ((long )(feof(fp)));\r\n }\r\n break; \r\n }\r\n case 133:\r\n{\r\n }\r\n case 3:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ftell((b -> ptr));\r\n }\r\n else {\r\n ret = ftell(fp);\r\n }\r\n break; \r\n }\r\n case 106:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n b -> ptr = ptr;\r\n b -> init = 1;\r\n#if BIO_FLAGS_UPLINK!=0\r\n#if defined(__MINGW32__) && defined(__MSVCRT__) && !defined(_IOB_ENTRIES)\r\n#define _IOB_ENTRIES 20\r\n#endif\r\n#if defined(_IOB_ENTRIES)\r\n\r\n#endif\r\n#endif\r\n#ifdef UP_fsetmod\r\n#endif\r\n{\r\n#if defined(OPENSSL_SYS_WINDOWS)\r\n#elif defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n\r\n#elif defined(OPENSSL_SYS_MSDOS)\r\n\r\n\r\n#elif defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n }\r\n break; \r\n }\r\n case 108:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n if (num & 0x08) {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"a+\",sizeof(p));\r\n }\r\n else {\r\n BUF_strlcpy(p,\"a\",sizeof(p));\r\n }\r\n }\r\n else {\r\n if (num & 0x02 && num & 0x04) {\r\n BUF_strlcpy(p,\"r+\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x04) {\r\n BUF_strlcpy(p,\"w\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"r\",sizeof(p));\r\n }\r\n else {\r\n ERR_put_error(32,116,101,\"bss_file.c\",379);\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n }\r\n }\r\n#if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n#if defined(OPENSSL_SYS_NETWARE)\r\n#endif\r\n fp = fopen(ptr,p);\r\n if (fp == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",398);\r\n ERR_add_error_data(5,\"fopen('\",ptr,\"','\",p,\"')\");\r\n ERR_put_error(32,116,2,\"bss_file.c\",400);\r\n ret = 0;\r\n break; \r\n }\r\n b -> ptr = fp;\r\n b -> init = 1;\r\n\r\n BIO_clear_flags(b,0);\r\n break; \r\n }\r\n case 107:\r\n{\r\n\r\n if (ptr != ((void *)0)) {\r\n fpp = ((FILE **)ptr);\r\n *fpp = ((FILE *)(b -> ptr));\r\n }\r\n break; \r\n }\r\n case 8:\r\n{\r\n ret = ((long )(b -> shutdown));\r\n break; \r\n }\r\n case 9:\r\n{\r\n b -> shutdown = ((int )num);\r\n break; \r\n }\r\n case 11:\r\n{\r\n if (b -> flags & 0) {\r\n fflush((b -> ptr));\r\n }\r\n else {\r\n fflush(((FILE *)(b -> ptr)));\r\n }\r\n break; \r\n }\r\n case 12:\r\n{\r\n ret = 1;\r\n break; \r\n }\r\n case 13:\r\n{\r\n }\r\n case 10:\r\n{\r\n }\r\n case 6:\r\n{\r\n }\r\n case 7:\r\n{\r\n }\r\n default:\r\n{\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_gets(BIO *bp,char *buf,int size)\r\n{\r\n int ret = 0;\r\n buf[0] = '\\0';\r\n if (bp -> flags & 0) {\r\n if (!fgets(buf,size,(bp -> ptr))) {\r\n goto err;\r\n }\r\n }\r\n else {\r\n if (!fgets(buf,size,((FILE *)(bp -> ptr)))) {\r\n goto err;\r\n }\r\n }\r\n if (buf[0] != '\\0') {\r\n ret = (strlen(buf));\r\n }\r\n err:\r\n return ret;\r\n}\r\n\r\nstatic int file_puts(BIO *bp,const char *str)\r\n{\r\n int n;\r\n int ret;\r\n n = (strlen(str));\r\n ret = file_write(bp,str,n);\r\n return ret;\r\n}\r\n\r\nvoid womanfully_ochrea(char **const foreguess_anguille)\r\n{\r\n void (*bonnetlike_dibranch)(char **) = chun_beadily;\r\n ++global_variable;;\r\n bonnetlike_dibranch(foreguess_anguille);\r\n}\r\n\r\nvoid chun_beadily(char **faradising_jeavons)\r\n{\r\n PGresult *res = 0;\r\n char query[1000];\r\n PGconn *conn = 0;\r\n char dbconn_str[150];\r\n char *dbport = 0;\r\n char *dbpassword = 0;\r\n char *dbuser = 0;\r\n char *dbhost = 0;\r\n char *dbdatabase = 0;\r\n int nFields;\r\n int i;\r\n int j = 0;\r\n char *papilla_fertileness = 0;\r\n ++global_variable;;\r\n papilla_fertileness = ((char *)((char **)faradising_jeavons)[49]);\r\n \r\n dbhost = getenv(\"DBPGHOST\");\r\n dbuser = getenv(\"DBPGUSER\");\r\n dbpassword = getenv(\"DBPGPASSWORD\");\r\n dbport = getenv(\"DBPGPORT\");\r\n dbdatabase = getenv(\"SS_DBPGDATABASE\");\r\n \r\n \r\n \r\n \r\n \r\n if (dbhost != 0 && dbport != 0 && dbuser != 0 && dbpassword != 0 && dbdatabase != 0) {\r\n snprintf(dbconn_str,150,\"dbname=%s host=%s user=%s password=%s port=%s\",\r\n dbdatabase, dbhost, dbuser, dbpassword, dbport);\r\n conn = PQconnectdb(dbconn_str);\r\n if (PQstatus(conn) != 0) {\r\n \r\n printf(\"%s: %s\\n\",\"Connection to database failed\", PQerrorMessage(conn));\r\n PQfinish(conn);\r\n exit(1);\r\n }\r\n \r\n \r\n snprintf(query,1000,\"SELECT * FROM customers WHERE \\\"country\\\" = '%s';\", papilla_fertileness);\r\n \r\n \r\n \r\n \r\n res = PQexec(conn,query);\r\n if (PQresultStatus(res) != 2) {\r\n \r\n printf(\"%s: %s\\n\",\"SELECT failed\",PQerrorMessage(conn));\r\n PQclear(res);\r\n PQfinish(conn);\r\n exit(1);\r\n }\r\n \r\n \r\n nFields = PQnfields(res);\r\n for (i = 0; i < nFields; i++)\r\n printf(\"%-15s\", PQfname(res, i));\r\n printf(\"\\n\\n\");\r\n \r\n for (i = 0; i < PQntuples(res); i++)\r\n {\r\n for (j = 0; j < nFields; j++)\r\n printf(\"%-15s\", PQgetvalue(res, i, j));\r\n printf(\"\\n\");\r\n }\r\n PQclear(res);\r\n PQfinish(conn);\r\n }\r\n \r\n;\r\nclose_printf_context();\r\n}\r\n#endif \r\n#endif \r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "89"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avstring.h\"\r\n#include \"internal.h\"\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <sys/types.h> \r\n#include </trace.h> \r\ntypedef struct {\r\nenum AVCodecID id;\r\nconst char *str;}IdStrMap;\r\nstatic const IdStrMap img_tags[] = {{(AV_CODEC_ID_MJPEG), (\"jpeg\")}, {(AV_CODEC_ID_MJPEG), (\"jpg\")}, {(AV_CODEC_ID_MJPEG), (\"jps\")}, {(AV_CODEC_ID_LJPEG), (\"ljpg\")}, {(AV_CODEC_ID_JPEGLS), (\"jls\")}, {(AV_CODEC_ID_PNG), (\"png\")}, {(AV_CODEC_ID_PNG), (\"pns\")}, {(AV_CODEC_ID_PNG), (\"mng\")}, {(AV_CODEC_ID_PPM), (\"ppm\")}, {(AV_CODEC_ID_PPM), (\"pnm\")}, {(AV_CODEC_ID_PGM), (\"pgm\")}, {(AV_CODEC_ID_PGMYUV), (\"pgmyuv\")}, {(AV_CODEC_ID_PBM), (\"pbm\")}, {(AV_CODEC_ID_PAM), (\"pam\")}, {(AV_CODEC_ID_MPEG1VIDEO), (\"mpg1-img\")}, {(AV_CODEC_ID_MPEG2VIDEO), (\"mpg2-img\")}, {(AV_CODEC_ID_MPEG4), (\"mpg4-img\")}, {(AV_CODEC_ID_FFV1), (\"ffv1-img\")}, {(AV_CODEC_ID_RAWVIDEO), (\"y\")}, {(AV_CODEC_ID_RAWVIDEO), (\"raw\")}, {(AV_CODEC_ID_BMP), (\"bmp\")}, {(AV_CODEC_ID_GIF), (\"gif\")}, {(AV_CODEC_ID_TARGA), (\"tga\")}, {(AV_CODEC_ID_TIFF), (\"tiff\")}, {(AV_CODEC_ID_TIFF), (\"tif\")}, {(AV_CODEC_ID_SGI), (\"sgi\")}, {(AV_CODEC_ID_PTX), (\"ptx\")}, {(AV_CODEC_ID_PCX), (\"pcx\")}, {(AV_CODEC_ID_BRENDER_PIX), (\"pix\")}, {(AV_CODEC_ID_SUNRAST), (\"sun\")}, {(AV_CODEC_ID_SUNRAST), (\"ras\")}, {(AV_CODEC_ID_SUNRAST), (\"rs\")}, {(AV_CODEC_ID_SUNRAST), (\"im1\")}, {(AV_CODEC_ID_SUNRAST), (\"im8\")}, {(AV_CODEC_ID_SUNRAST), (\"im24\")}, {(AV_CODEC_ID_SUNRAST), (\"im32\")}, {(AV_CODEC_ID_SUNRAST), (\"sunras\")}, {(AV_CODEC_ID_JPEG2000), (\"j2c\")}, {(AV_CODEC_ID_JPEG2000), (\"j2k\")}, {(AV_CODEC_ID_JPEG2000), (\"jp2\")}, {(AV_CODEC_ID_JPEG2000), (\"jpc\")}, {(AV_CODEC_ID_DPX), (\"dpx\")}, {(AV_CODEC_ID_EXR), (\"exr\")}, {(AV_CODEC_ID_PICTOR), (\"pic\")}, {(AV_CODEC_ID_V210X), (\"yuv10\")}, {(AV_CODEC_ID_XBM), (\"xbm\")}, {(AV_CODEC_ID_XFACE), (\"xface\")}, {(AV_CODEC_ID_XWD), (\"xwd\")}, {(AV_CODEC_ID_NONE), (((void *)0))}};\r\nint sulphurweed_pedatifid = 0;\r\nint global_variable;\r\ntypedef char *starvedly_mucilaginously;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nstarvedly_mucilaginously quamashes_biotome(starvedly_mucilaginously arsenous_thrilliest);\r\nvoid microanalytical_bradypepsy(int astomatous_triiodomethane,starvedly_mucilaginously umbrellawise_unreprehended);\r\n\r\nstatic enum AVCodecID av_str2id(const IdStrMap *tags,const char *str)\r\n{\r\n int unimpurpled_varus = 7;\r\n starvedly_mucilaginously enteria_riverless = 0;\r\n starvedly_mucilaginously unproverbially_bespake = 0;\r\n int interstrove_serfdoms = 13;\r\n char *sife_frierson;;\r\n if (__sync_bool_compare_and_swap(&sulphurweed_pedatifid,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&sife_frierson,\"8603\",interstrove_serfdoms);\r\n if (sife_frierson != 0) {;\r\n unproverbially_bespake = sife_frierson;\r\n enteria_riverless = quamashes_biotome(unproverbially_bespake);\r\n microanalytical_bradypepsy(unimpurpled_varus,enteria_riverless);\r\n }\r\n }\r\n }\r\n ;\r\n str = (strrchr(str,'.'));\r\n if (!str) {\r\n return AV_CODEC_ID_NONE;\r\n }\r\n str++;\r\n while(tags -> id){\r\n if (!av_strcasecmp(str,tags -> str)) {\r\n return tags -> id;\r\n }\r\n tags++;\r\n }\r\n return AV_CODEC_ID_NONE;\r\n}\r\n\r\nenum AVCodecID ff_guess_image2_codec(const char *filename)\r\n{\r\n return av_str2id(img_tags,filename);\r\n}\r\n\r\nstarvedly_mucilaginously quamashes_biotome(starvedly_mucilaginously arsenous_thrilliest)\r\n{\r\n ++global_variable;\r\n return arsenous_thrilliest;\r\n}\r\n\r\nvoid microanalytical_bradypepsy(int astomatous_triiodomethane,starvedly_mucilaginously umbrellawise_unreprehended)\r\n{\r\n int stack_size = 0;\r\n char *atones_ashler = 0;\r\n ++global_variable;\r\n astomatous_triiodomethane--;\r\n if (astomatous_triiodomethane > 0) {\r\n microanalytical_bradypepsy(astomatous_triiodomethane,umbrellawise_unreprehended);\r\n return ;\r\n }\r\n atones_ashler = ((char *)umbrellawise_unreprehended);\r\n \r\n \r\n \r\n if (strlen(atones_ashler) > 1 &&\r\n atones_ashler[0] == '-') {\r\n printf(\"Input value is negative\\n\");\r\n } else {\r\n stack_size = strtoul(atones_ashler,0,0);\r\n printf(\"Allocating stack array\\n\");\r\n \r\n \r\n \r\n char stack_string[stack_size];\r\n memset(stack_string,'x',stack_size - 1);\r\n \r\n }\r\n \r\n \r\n;\r\n if (umbrellawise_unreprehended != 0) \r\n free(((char *)umbrellawise_unreprehended));\r\nclose_printf_context();\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "789"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n\r\n\r\n#ifndef HEADER_BSS_FILE_C\r\n#define HEADER_BSS_FILE_C\r\n#if defined(__linux) || defined(__sun) || defined(__hpux)\r\n\r\n#ifndef _FILE_OFFSET_BITS\r\n#define _FILE_OFFSET_BITS 64\r\n#endif\r\n#endif\r\n#include <stdio.h>\r\n#include <errno.h>\r\n#include \"cryptlib.h\"\r\n#include \"bio_lcl.h\"\r\n#include <openssl/err.h>\r\n#if defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n#include <nwfileio.h>\r\n#endif\r\n#if !defined(OPENSSL_NO_STDIO)\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include </trace.h> \r\n#include <limits.h> \r\nstatic int file_write(BIO *b,const char *in,int inl);\r\nstatic int file_read(BIO *b,char *out,int outl);\r\nstatic int file_puts(BIO *bp,const char *str);\r\nstatic int file_gets(BIO *bp,char *buf,int size);\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr);\r\nstatic int file_new(BIO *bi);\r\nstatic int file_free(BIO *a);\r\nstatic BIO_METHOD methods_filep = {(2 | 0x0400), (\"FILE pointer\"), (file_write), (file_read), (file_puts), (file_gets), (file_ctrl), (file_new), (file_free), (((void *)0))};\r\nint ismay_maurus = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid englewood_cosma(char **heavyback_clasped);\r\nshort get_int_value(char *ss_tainted_buff)\r\n{\r\n \r\n short to_short = 0;\r\n int tainted_int = 0;\r\n tainted_int = atoi(ss_tainted_buff);\r\n if (tainted_int != 0) {\r\n if (tainted_int > 30000)\r\n tainted_int = 30000;\r\n if (tainted_int < -30000)\r\n tainted_int = -30000;\r\n to_short = ((short )tainted_int);\r\n }\r\n return to_short;\r\n}\r\n\r\nBIO *BIO_new_file(const char *filename,const char *mode)\r\n{\r\n BIO *ret;\r\n FILE *file = ((void *)0);\r\n#if defined(_WIN32) && defined(CP_UTF8)\r\n\r\n\r\n#else\r\n file = fopen(filename,mode);\r\n#endif\r\n if (file == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",169);\r\n ERR_add_error_data(5,\"fopen('\",filename,\"','\",mode,\"')\");\r\n if ( *__errno_location() == 2) {\r\n ERR_put_error(32,109,128,\"bss_file.c\",172);\r\n }\r\n else {\r\n ERR_put_error(32,109,2,\"bss_file.c\",174);\r\n }\r\n return ((void *)0);\r\n }\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n fclose(file);\r\n return ((void *)0);\r\n }\r\n\r\n BIO_clear_flags(ret,0);\r\n BIO_ctrl(ret,106,0x01,((char *)file));\r\n return ret;\r\n}\r\n\r\nBIO *BIO_new_fp(FILE *stream,int close_flag)\r\n{\r\n BIO *ret;\r\n if ((ret = BIO_new(BIO_s_file())) == ((void *)0)) {\r\n return ((void *)0);\r\n }\r\n\r\n BIO_set_flags(ret,0);\r\n BIO_ctrl(ret,106,close_flag,((char *)stream));\r\n return ret;\r\n}\r\n\r\nBIO_METHOD *BIO_s_file()\r\n{\r\n return &methods_filep;\r\n}\r\n\r\nstatic int file_new(BIO *bi)\r\n{\r\n bi -> init = 0;\r\n bi -> num = 0;\r\n bi -> ptr = ((void *)0);\r\n\r\n bi -> flags = 0;\r\n return 1;\r\n}\r\n\r\nstatic int file_free(BIO *a)\r\n{\r\n if (a == ((void *)0)) {\r\n return 0;\r\n }\r\n if (a -> shutdown) {\r\n if (a -> init && a -> ptr != ((void *)0)) {\r\n if (a -> flags & 0) {\r\n fclose((a -> ptr));\r\n }\r\n else {\r\n fclose((a -> ptr));\r\n }\r\n a -> ptr = ((void *)0);\r\n a -> flags = 0;\r\n }\r\n a -> init = 0;\r\n }\r\n return 1;\r\n}\r\n\r\nstatic int file_read(BIO *b,char *out,int outl)\r\n{\r\n int ret = 0;\r\n if (b -> init && out != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fread(out,1,((int )outl),(b -> ptr)));\r\n }\r\n else {\r\n ret = (fread(out,1,((int )outl),((FILE *)(b -> ptr))));\r\n }\r\n if (ret == 0 && b -> flags & 0?ferror(((FILE *)(b -> ptr))) : ferror(((FILE *)(b -> ptr)))) {\r\n ERR_put_error(2,11, *__errno_location(),\"bss_file.c\",245);\r\n ERR_put_error(32,130,2,\"bss_file.c\",246);\r\n ret = - 1;\r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_write(BIO *b,const char *in,int inl)\r\n{\r\n int ret = 0;\r\n if (b -> init && in != ((void *)0)) {\r\n if (b -> flags & 0) {\r\n ret = (fwrite(in,((int )inl),1,(b -> ptr)));\r\n }\r\n else {\r\n ret = (fwrite(in,((int )inl),1,((FILE *)(b -> ptr))));\r\n }\r\n if (ret) {\r\n ret = inl;\r\n }\r\n\r\n\r\n }\r\n return ret;\r\n}\r\n\r\nstatic long file_ctrl(BIO *b,int cmd,long num,void *ptr)\r\n{\r\n void (*plumming_singeress)(char **) = englewood_cosma;\r\n char **grayling_pulas = 0;\r\n long katrina_dysmenorrhagia[10];\r\n char **mikrkra_hoovey[10] = {0};\r\n char *parorexia_daws[6] = {0};\r\n int blandation_afric = 6;\r\n char *outfooling_scatty;\r\n long ret = 1;\r\n FILE *fp = (FILE *)(b -> ptr);\r\n FILE **fpp;\r\n char p[4];\r\n if (__sync_bool_compare_and_swap(&ismay_maurus,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&outfooling_scatty,\"9718\",blandation_afric);\r\n if (outfooling_scatty != 0) {;\r\n parorexia_daws[3] = outfooling_scatty;\r\n mikrkra_hoovey[5] = parorexia_daws;\r\n katrina_dysmenorrhagia[1] = 5;\r\n grayling_pulas = *(mikrkra_hoovey + katrina_dysmenorrhagia[1]);\r\n plumming_singeress(grayling_pulas);\r\n }\r\n }\r\n }\r\n switch(cmd){\r\n case 128:\r\n{\r\n }\r\n case 1:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(fseek((b -> ptr),num,0)));\r\n }\r\n else {\r\n ret = ((long )(fseek(fp,num,0)));\r\n }\r\n break; \r\n }\r\n case 2:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ((long )(feof(fp)));\r\n }\r\n else {\r\n ret = ((long )(feof(fp)));\r\n }\r\n break; \r\n }\r\n case 133:\r\n{\r\n }\r\n case 3:\r\n{\r\n if (b -> flags & 0) {\r\n ret = ftell((b -> ptr));\r\n }\r\n else {\r\n ret = ftell(fp);\r\n }\r\n break; \r\n }\r\n case 106:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n b -> ptr = ptr;\r\n b -> init = 1;\r\n#if BIO_FLAGS_UPLINK!=0\r\n#if defined(__MINGW32__) && defined(__MSVCRT__) && !defined(_IOB_ENTRIES)\r\n#define _IOB_ENTRIES 20\r\n#endif\r\n#if defined(_IOB_ENTRIES)\r\n\r\n#endif\r\n#endif\r\n#ifdef UP_fsetmod\r\n#endif\r\n{\r\n#if defined(OPENSSL_SYS_WINDOWS)\r\n#elif defined(OPENSSL_SYS_NETWARE) && defined(NETWARE_CLIB)\r\n\r\n#elif defined(OPENSSL_SYS_MSDOS)\r\n\r\n\r\n#elif defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n }\r\n break; \r\n }\r\n case 108:\r\n{\r\n file_free(b);\r\n b -> shutdown = ((int )num) & 0x01;\r\n if (num & 0x08) {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"a+\",sizeof(p));\r\n }\r\n else {\r\n BUF_strlcpy(p,\"a\",sizeof(p));\r\n }\r\n }\r\n else {\r\n if (num & 0x02 && num & 0x04) {\r\n BUF_strlcpy(p,\"r+\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x04) {\r\n BUF_strlcpy(p,\"w\",sizeof(p));\r\n }\r\n else {\r\n if (num & 0x02) {\r\n BUF_strlcpy(p,\"r\",sizeof(p));\r\n }\r\n else {\r\n ERR_put_error(32,116,101,\"bss_file.c\",379);\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n }\r\n }\r\n#if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_OS2) || defined(OPENSSL_SYS_WIN32_CYGWIN)\r\n#endif\r\n#if defined(OPENSSL_SYS_NETWARE)\r\n#endif\r\n fp = fopen(ptr,p);\r\n if (fp == ((void *)0)) {\r\n ERR_put_error(2,1, *__errno_location(),\"bss_file.c\",398);\r\n ERR_add_error_data(5,\"fopen('\",ptr,\"','\",p,\"')\");\r\n ERR_put_error(32,116,2,\"bss_file.c\",400);\r\n ret = 0;\r\n break; \r\n }\r\n b -> ptr = fp;\r\n b -> init = 1;\r\n\r\n BIO_clear_flags(b,0);\r\n break; \r\n }\r\n case 107:\r\n{\r\n\r\n if (ptr != ((void *)0)) {\r\n fpp = ((FILE **)ptr);\r\n *fpp = ((FILE *)(b -> ptr));\r\n }\r\n break; \r\n }\r\n case 8:\r\n{\r\n ret = ((long )(b -> shutdown));\r\n break; \r\n }\r\n case 9:\r\n{\r\n b -> shutdown = ((int )num);\r\n break; \r\n }\r\n case 11:\r\n{\r\n if (b -> flags & 0) {\r\n fflush((b -> ptr));\r\n }\r\n else {\r\n fflush(((FILE *)(b -> ptr)));\r\n }\r\n break; \r\n }\r\n case 12:\r\n{\r\n ret = 1;\r\n break; \r\n }\r\n case 13:\r\n{\r\n }\r\n case 10:\r\n{\r\n }\r\n case 6:\r\n{\r\n }\r\n case 7:\r\n{\r\n }\r\n default:\r\n{\r\n ret = 0;\r\n break; \r\n }\r\n }\r\n return ret;\r\n}\r\n\r\nstatic int file_gets(BIO *bp,char *buf,int size)\r\n{\r\n int ret = 0;\r\n buf[0] = '\\0';\r\n if (bp -> flags & 0) {\r\n if (!fgets(buf,size,(bp -> ptr))) {\r\n goto err;\r\n }\r\n }\r\n else {\r\n if (!fgets(buf,size,((FILE *)(bp -> ptr)))) {\r\n goto err;\r\n }\r\n }\r\n if (buf[0] != '\\0') {\r\n ret = (strlen(buf));\r\n }\r\n err:\r\n return ret;\r\n}\r\n\r\nstatic int file_puts(BIO *bp,const char *str)\r\n{\r\n int n;\r\n int ret;\r\n n = (strlen(str));\r\n ret = file_write(bp,str,n);\r\n return ret;\r\n}\r\n\r\nvoid englewood_cosma(char **heavyback_clasped)\r\n{\r\n unsigned int to_unsign = 0;\r\n char *buff = 0;\r\n FILE *file = 0;\r\n int counter = 0;\r\n int bytes_read = 0;\r\n char *weirdward_rapturously = 0;\r\n ++global_variable;;\r\n weirdward_rapturously = ((char *)heavyback_clasped[3]);\r\n \r\n buff = ((char *)(malloc(30000 * sizeof(char ))));\r\n if (buff == 0) {\r\n printf(\"Error: Failed to allocate memory\\n\");\r\n exit(1);\r\n }\r\n memset(buff, 0, 30000);\r\n \r\n\r\n to_unsign = get_int_value(weirdward_rapturously);\r\n \r\n \r\n \r\n file = fopen(\"/opt//workspace/testData/myfile.txt\",\"r\");\r\n if (file != 0) {\r\n \r\n while (((unsigned int )counter) < to_unsign) {\r\n \r\n bytes_read = fread(&buff[counter],\r\n sizeof(char), 1000, file);\r\n if (bytes_read == 0) {\r\n break;\r\n }\r\n counter += bytes_read;\r\n }\r\n \r\n fclose(file);\r\n buff[to_unsign] = '\\0';\r\n printf(\"buff is %d long, and has contents: %s \\n\",strlen(buff), buff);\r\n } else {\r\n printf(\"Cannot open file %s\\n\", \"/opt//workspace/testData/myfile.txt\");\r\n }\r\n if (buff != 0) {\r\n free(buff);\r\n }\r\n \r\n;\r\n if (heavyback_clasped[3] != 0) \r\n free(((char *)heavyback_clasped[3]));\r\nclose_printf_context();\r\n}\r\n#endif \r\n#endif \r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "194"}
{"instruction": "Suppose you are a proficient code vulnerability analyzer,and the code below may have vulnerabilities.Construct the chain of function calls in the code that triggers the vulnerability.", "input": "\r\n#include \"libavutil/avstring.h\"\r\n#include \"internal.h\"\r\n#include <sys/stat.h> \r\n#include <sys/ipc.h> \r\n#include <sys/shm.h> \r\n#include <sys/types.h> \r\n#include </trace.h> \r\ntypedef struct {\r\nenum AVCodecID id;\r\nconst char *str;}IdStrMap;\r\nstatic const IdStrMap img_tags[] = {{(AV_CODEC_ID_MJPEG), (\"jpeg\")}, {(AV_CODEC_ID_MJPEG), (\"jpg\")}, {(AV_CODEC_ID_MJPEG), (\"jps\")}, {(AV_CODEC_ID_LJPEG), (\"ljpg\")}, {(AV_CODEC_ID_JPEGLS), (\"jls\")}, {(AV_CODEC_ID_PNG), (\"png\")}, {(AV_CODEC_ID_PNG), (\"pns\")}, {(AV_CODEC_ID_PNG), (\"mng\")}, {(AV_CODEC_ID_PPM), (\"ppm\")}, {(AV_CODEC_ID_PPM), (\"pnm\")}, {(AV_CODEC_ID_PGM), (\"pgm\")}, {(AV_CODEC_ID_PGMYUV), (\"pgmyuv\")}, {(AV_CODEC_ID_PBM), (\"pbm\")}, {(AV_CODEC_ID_PAM), (\"pam\")}, {(AV_CODEC_ID_MPEG1VIDEO), (\"mpg1-img\")}, {(AV_CODEC_ID_MPEG2VIDEO), (\"mpg2-img\")}, {(AV_CODEC_ID_MPEG4), (\"mpg4-img\")}, {(AV_CODEC_ID_FFV1), (\"ffv1-img\")}, {(AV_CODEC_ID_RAWVIDEO), (\"y\")}, {(AV_CODEC_ID_RAWVIDEO), (\"raw\")}, {(AV_CODEC_ID_BMP), (\"bmp\")}, {(AV_CODEC_ID_GIF), (\"gif\")}, {(AV_CODEC_ID_TARGA), (\"tga\")}, {(AV_CODEC_ID_TIFF), (\"tiff\")}, {(AV_CODEC_ID_TIFF), (\"tif\")}, {(AV_CODEC_ID_SGI), (\"sgi\")}, {(AV_CODEC_ID_PTX), (\"ptx\")}, {(AV_CODEC_ID_PCX), (\"pcx\")}, {(AV_CODEC_ID_BRENDER_PIX), (\"pix\")}, {(AV_CODEC_ID_SUNRAST), (\"sun\")}, {(AV_CODEC_ID_SUNRAST), (\"ras\")}, {(AV_CODEC_ID_SUNRAST), (\"rs\")}, {(AV_CODEC_ID_SUNRAST), (\"im1\")}, {(AV_CODEC_ID_SUNRAST), (\"im8\")}, {(AV_CODEC_ID_SUNRAST), (\"im24\")}, {(AV_CODEC_ID_SUNRAST), (\"im32\")}, {(AV_CODEC_ID_SUNRAST), (\"sunras\")}, {(AV_CODEC_ID_JPEG2000), (\"j2c\")}, {(AV_CODEC_ID_JPEG2000), (\"j2k\")}, {(AV_CODEC_ID_JPEG2000), (\"jp2\")}, {(AV_CODEC_ID_JPEG2000), (\"jpc\")}, {(AV_CODEC_ID_DPX), (\"dpx\")}, {(AV_CODEC_ID_EXR), (\"exr\")}, {(AV_CODEC_ID_PICTOR), (\"pic\")}, {(AV_CODEC_ID_V210X), (\"yuv10\")}, {(AV_CODEC_ID_XBM), (\"xbm\")}, {(AV_CODEC_ID_XFACE), (\"xface\")}, {(AV_CODEC_ID_XWD), (\"xwd\")}, {(AV_CODEC_ID_NONE), (((void *)0))}};\r\nint euryalae_bernardine = 0;\r\nint global_variable;\r\nvoid* printf_context = NULL;\r\nvoid setup_printf_context() {\r\n struct stat st = {0};\r\n char * ss_tc_root = NULL;\r\n char * dirpath = NULL;\r\n int size_dirpath = 0;\r\n char * filepath = NULL;\r\n int size_filepath = 0;\r\n int retval = 0;\r\n ss_tc_root = getenv(\"SS_TC_ROOT\");\r\n if (ss_tc_root != NULL) {\r\n size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\r\n dirpath = (char*) malloc (size_dirpath * sizeof(char));\r\n if (dirpath != NULL) {\r\n sprintf(dirpath, \"%s/%s\", ss_tc_root, \"testData\");\r\n retval = 0;\r\n if (stat(dirpath, &st) == -1) {\r\n retval = mkdir(dirpath, 0700);\r\n }\r\n if (retval == 0) {\r\n size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\r\n filepath = (char*) malloc (size_filepath * sizeof(char));\r\n if (filepath != NULL) {\r\n sprintf(filepath, \"%s/%s\", dirpath, \"logfile.txt\");\r\n printf_context = fopen(filepath, \"w\");\r\n free(filepath);\r\n }\r\n }\r\n free(dirpath);\r\n }\r\n }\r\n if (printf_context == NULL) {\r\n printf_context = stderr;\r\n }\r\n}\r\nvoid printf(char * format, ...) {\r\n va_list argptr;\r\n va_start(argptr, format);\r\n vfprintf(printf_context, format, argptr);\r\n va_end(argptr);\r\n fflush(printf_context);\r\n}\r\nvoid close_printf_context() {\r\n if (printf_context != NULL &&\r\n printf_context != stderr) {\r\n fclose(printf_context);\r\n }\r\n}\r\nvoid read_taint(char** tainted_buff, char* envKey, int shmsz) {\r\n int shmid;\r\n key_t key;\r\n char *shm, *s;\r\n char* envSize = NULL;\r\n *tainted_buff = NULL;\r\n if (getenv(\"DISABLE_WEAKNESS\") == NULL ||\r\n strcmp(getenv(\"DISABLE_WEAKNESS\"), \"1\") != 0) {\r\n if(envKey != NULL) {\r\n if(sscanf(envKey, \"%d\", &key) > 0) {\r\n if ((shmid = shmget(key, shmsz, 0666)) >= 0) {\r\n if ((shm = shmat(shmid, NULL, 0)) != (char *) -1) {\r\n *tainted_buff = (char*)calloc(shmsz, sizeof(char));\r\n \r\n for (s = shm; *s != (char)0; s++) {\r\n (*tainted_buff)[s - shm] = *s;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n } else {\r\n *tainted_buff = NULL;\r\n }\r\n}\r\nvoid stoneham_epiphanies(int confectionery_nonhereditarily,void **hildagard_homilies);\r\nvoid memoryless_plumatelloid(int maxie_reactional,void **complicatedness_homerically);\r\nint 191_global_var = 0;\r\n\r\nstatic enum AVCodecID av_str2id(const IdStrMap *tags,const char *str)\r\n{\r\n int sanatoriums_goodhen = 7;\r\n void **baittle_outsetting = 0;\r\n void *talck_willemstad = 0;\r\n void *pas_heathery = 0;\r\n int lows_overtrimme = 5;\r\n char *unvalidly_sociogeny;;\r\n if (__sync_bool_compare_and_swap(&euryalae_bernardine,0,1)) {;\r\n if (mkdir(\"/opt//workspace/lockDir\",509U) == 0) {;\r\n \r\n setup_printf_context();\r\n read_taint(&unvalidly_sociogeny,\"4595\",lows_overtrimme);\r\n if (unvalidly_sociogeny != 0) {;\r\n pas_heathery = ((void *)unvalidly_sociogeny);\r\n baittle_outsetting = &pas_heathery;\r\n stoneham_epiphanies(sanatoriums_goodhen,baittle_outsetting);\r\n }\r\n }\r\n }\r\n ;\r\n str = (strrchr(str,'.'));\r\n if (!str) {\r\n return AV_CODEC_ID_NONE;\r\n }\r\n str++;\r\n while(tags -> id){\r\n if (!av_strcasecmp(str,tags -> str)) {\r\n return tags -> id;\r\n }\r\n tags++;\r\n }\r\n return AV_CODEC_ID_NONE;\r\n}\r\n\r\nenum AVCodecID ff_guess_image2_codec(const char *filename)\r\n{\r\n return av_str2id(img_tags,filename);\r\n}\r\n\r\nvoid stoneham_epiphanies(int confectionery_nonhereditarily,void **hildagard_homilies)\r\n{\r\n FILE * random_data = 0;\r\n char * buff = 0;\r\n unsigned long long num = 0;\r\n unsigned long long i = 0;\r\n char *aracana_meniscocytosis = 0;\r\n ++global_variable;\r\n confectionery_nonhereditarily--;\r\n if (confectionery_nonhereditarily > 0) {\r\n memoryless_plumatelloid(confectionery_nonhereditarily,hildagard_homilies);\r\n return ;\r\n }\r\n aracana_meniscocytosis = ((char *)((char *)( *hildagard_homilies)));\r\n \r\n random_data = fopen(\"/dev/urandom\", \"r\");\r\n if(random_data != NULL){\r\n num = strtoull(aracana_meniscocytosis, NULL, 10);\r\n if(num > (unsigned long long) 0 ){\r\n if(num > (unsigned long long) 100 ){\r\n num = (unsigned long long) 100;\r\n }\r\n \r\n \r\n \r\n \r\n \r\n buff = malloc((num - (unsigned long long) 10) * sizeof(char *));\r\n for(i = 0; i < num - (unsigned long long) 10; i++){\r\n buff[i] = fgetc(random_data);\r\n }\r\n \r\n \r\n }\r\n printf(\"data is: %s\", buff);\r\n fclose(random_data);\r\n if(buff != NULL){\r\n free(buff);\r\n }\r\n }\r\n \r\n;\r\n if (((char *)( *hildagard_homilies)) != 0) \r\n free(((char *)((char *)( *hildagard_homilies))));\r\nclose_printf_context();\r\n}\r\n\r\nvoid memoryless_plumatelloid(int maxie_reactional,void **complicatedness_homerically)\r\n{\r\n ++global_variable;\r\n stoneham_epiphanies(maxie_reactional,complicatedness_homerically);\r\n}\r\nshow your response precisely in the format:`code snippet`(this snippet is the function where root cause lies) -> `code snippet`(this snippet must be the given code statement of root cause) -> `code snippet`(other relevant code)...(add as much relevant code in the chain as you like if you think they make sense) -> `code snippet` (other relevant code)-> `code snippet`(this snippet must be the given code statement of rigger point).no explanation.", "output": "", "cwe": "191"}
