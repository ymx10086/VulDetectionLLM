```c printf("%x",data->buffer[i]); ```
```c input_string = (signed char *) getenv("INPUT_STRING"); ```
```c str = (strrchr(str,'.')); ```
```c int CRYPTO_get_new_lockid(char *name) {  char *str;  int i; #if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_WIN16)  #endif  if (app_locks == ((void *)0) && (app_locks = ((struct stack_st_OPENSSL_STRING *)(sk_new_null()))) == ((void *)0)) {  ERR_put_error(15,101,1 | 64,"cryptlib.c",215);  return 0;  }  if ((str = BUF_strdup(name)) == ((void *)0)) {  ERR_put_error(15,101,1 | 64,"cryptlib.c",220);  return 0;  }  i = sk_push(((_STACK *)((1?app_locks : ((struct stack_st_OPENSSL_STRING *)0)))),((void *)((1?str : ((char *)0)))));  if (!i) {  CRYPTO_free(str);  }  else {   i += 41;  }  return i; } ```
```c if (CRYPTO_is_mem_check_on() && mh != ((void *)0)) { ```
```c++  if ((htmlStrEqual(ctxt->name, BAD_CAST"script")) || 		 (xmlStrEqual(ctxt->name, BAD_CAST"style"))) { ```
```c char *eupathy_forsythia = 0; ```
```c read_taint(&diectasis_ecorse,"8416",coloreds_subaerial); ```
```c CRYPTO_get_dynlockid() ```
```c #include "avformat.h" #include "avio_internal.h" #include "internal.h" #include "libavcodec/internal.h" #include "libavcodec/bytestream.h" #include "libavutil/opt.h" #include "libavutil/dict.h" #include "libavutil/pixdesc.h" #include "libavutil/timestamp.h" #include "metadata.h" #include "id3v2.h" #include "libavutil/avassert.h" #include "libavutil/avstring.h" #include "libavutil/mathematics.h" #include "libavutil/parseutils.h" #include "libavutil/time.h" #include "riff.h" #include "audiointerleave.h" #include "url.h" #include <stdarg.h> #if CONFIG_NETWORK #include "network.h" #endif #undef NDEBUG #include <assert.h>    #include <stdarg.h>  #include </trace.h>  int wealthiness_cicatrize = 0; int global_variable; void* printf_context = NULL; void setup_printf_context() {  struct stat st = {0};  char * ss_tc_root = NULL;  char * dirpath = NULL;  int size_dirpath = 0;  char * filepath = NULL;  int size_filepath = 0;  int retval = 0;  ss_tc_root = getenv("SS_TC_ROOT");  if (ss_tc_root != NULL) {  size_dirpath = strlen(ss_tc_root) + strlen("testData") + 2;  dirpath = (char*) malloc (size_dirpath * sizeof(char));  if (dirpath != NULL) {  sprintf(dirpath, "%s/%s", ss_tc_root, "testData");  retval = 0;  if (stat(dirpath, &st) == -1) {  retval = mkdir(dirpath, 0700);  }  if (retval == 0) {  size_filepath = strlen(dirpath) + strlen("logfile.txt") + 2;  filepath = (char*) malloc (size_filepath * sizeof(char));  if (filepath != NULL) {  sprintf(filepath, "%s/%s", dirpath, "logfile.txt");  printf_context = fopen(filepath, "w");  free(filepath);  }  }  free(dirpath);  }  }  if (printf_context == NULL) {  printf_context = stderr;  } } void printf(char * format, ...) {  va_list argptr;  va_start(argptr, format);  vfprintf(printf_context, format, argptr);  va_end(argptr);  fflush(printf_context); } void close_printf_context() {  if (printf_context != NULL &&  printf_context != stderr) {  fclose(printf_context);  } } void nonlimitative_fixtures(int petrosum_eisell,... );  static void frac_init(AVFrac *f,int64_t val,int64_t num,int64_t den) {  num += den >> 1;  if (num >= den) {  val += num / den;  num = num % den;  }  f -> val = val;  f -> num = num;  f -> den = den; }   static void frac_add(AVFrac *f,int64_t incr) {  int64_t num;  int64_t den;  num = f -> num + incr;  den = f -> den;  if (num < 0) {  f -> val += num / den;  num = num % den;  if (num < 0) {  num += den;  f -> val--;  }  }  else {  if (num >= den) {  f -> val += num / den;  num = num % den;  }  }  f -> num = num; }  AVRational ff_choose_timebase(AVFormatContext *s,AVStream *st,int min_precission) {  AVRational q;  int j;  if ((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO) {  q = ((AVRational ){(1), st -> codec -> sample_rate});  }  else {  q = st -> codec -> time_base;  }  for (j = 2; j < 14; j += 1 + (j > 2))   while(q . den / q . num < min_precission && q . num % j == 0)  q . num /= j;  while(q . den / q . num < min_precission && q . den < 1 << 24)  q . den <<= 1;  return q; }  int avformat_alloc_output_context2(AVFormatContext **avctx,AVOutputFormat *oformat,const char *format,const char *filename) {  AVFormatContext *s = avformat_alloc_context();  int ret = 0;  *avctx = ((void *)0);  if (!s) {  goto nomem;  }  if (!oformat) {  if (format) {  oformat = av_guess_format(format,((void *)0),((void *)0));  if (!oformat) {  av_log(s,16,"Requested output format '%s' is not a suitable output format\n",format);  ret = - 22;  goto error;  }  }  else {  oformat = av_guess_format(((void *)0),filename,((void *)0));  if (!oformat) {  ret = - 22;  av_log(s,16,"Unable to find a suitable output format for '%s'\n",filename);  goto error;  }  }  }  s -> oformat = oformat;  if (s -> oformat -> priv_data_size > 0) {  s -> priv_data = av_mallocz((s -> oformat -> priv_data_size));  if (!s -> priv_data) {  goto nomem;  }  if (s -> oformat -> priv_class) {  *((const AVClass **)(s -> priv_data)) = s -> oformat -> priv_class;  av_opt_set_defaults(s -> priv_data);  }  }  else {  s -> priv_data = ((void *)0);  }  if (filename) {  av_strlcpy(s -> filename,filename,sizeof(s -> filename));  }  *avctx = s;  return 0; nomem:  av_log(s,16,"Out of memory\n");  ret = - 12;  error:  avformat_free_context(s);  return ret; } #if FF_API_ALLOC_OUTPUT_CONTEXT  AVFormatContext *avformat_alloc_output_context(const char *format,AVOutputFormat *oformat,const char *filename) {  AVFormatContext *avctx;  int ret = avformat_alloc_output_context2(&avctx,oformat,format,filename);  return ret < 0?((void *)0) : avctx; } #endif  static int validate_codec_tag(AVFormatContext *s,AVStream *st) {  const AVCodecTag *avctag;  int n;  enum AVCodecID id = AV_CODEC_ID_NONE;  unsigned int tag = 0;   for (n = 0; s -> oformat -> codec_tag[n]; n++) {  avctag = s -> oformat -> codec_tag[n];  while((avctag -> id) != AV_CODEC_ID_NONE){  if (avpriv_toupper4(avctag -> tag) == avpriv_toupper4(st -> codec -> codec_tag)) {  id = avctag -> id;  if (id == (st -> codec -> codec_id)) {  return 1;  }  }  if ((avctag -> id) == (st -> codec -> codec_id)) {  tag = avctag -> tag;  }  avctag++;  }  }  if (id != AV_CODEC_ID_NONE) {  return 0;  }  if (tag && st -> codec -> strict_std_compliance >= 0) {  return 0;  }  return 1; }  static int init_muxer(AVFormatContext *s,AVDictionary **options) {  int ret = 0;  int i;  AVStream *
```c  if (!pThis) {  DEBUG_PRINT_ERROR("ERROR: %s()::Context is incorrect, bailing out",  __func__);  return;  } ```
```c MEM *m; if ((m = ((MEM *)(CRYPTO_malloc(((int )(sizeof(MEM ))),"mem_dbg.c",498)))) == ((void *)0)) {  CRYPTO_free(addr);   CRYPTO_mem_ctrl(0x2);  return ;  } ```

```c++ case OMX_QcomIndexParamSetMVSearchrange: {  DEBUG_PRINT_LOW("venc_set_config: OMX_QcomIndexParamSetMVSearchrange");  is_searchrange_set = true;  if (!venc_set_searchrange()) {  DEBUG_PRINT_ERROR("ERROR: Failed to set search range");  return false;  } } ```
```c  if (mkdir("/opt//workspace/lockDir",509U) == 0) {; ```
```c setup_printf_context(); ```
```c char **subdiapente_caulkings; ```
```c void CRYPTO_get_new_lockid(char *name) {  char *str;  int i; #if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_WIN16)  #endif  if (app_locks == ((void *)0) && (app_locks = ((struct stack_st_OPENSSL_STRING *)(sk_new_null()))) == ((void *)0)) {  ERR_put_error(15,101,1 | 64,"cryptlib.c",215);  return 0;  }  if ((str = BUF_strdup(name)) == ((void *)0)) {  ERR_put_error(15,101,1 | 64,"cryptlib.c",220);  return 0;  }  i = sk_push(((_STACK *)((1?app_locks : ((struct stack_st_OPENSSL_STRING *)0)))),((void *)((1?str : ((char *)0)))));  if (!i) {  CRYPTO_free(str);  }  else {   i += 41;  }  return i; } ```
```c if (event->do_event == _WM_do_meta_text) {  (*out)[out_ofs++] = 0xff;  (*out)[out_ofs++] = 0x01;   goto _WRITE_TEXT;   } else if (event->do_event == _WM_do_meta_copyright) {  (*out)[out_ofs++] = 0xff;  (*out)[out_ofs++] = 0x02;   goto _WRITE_TEXT;   } else if (event->do_event == _WM_do_meta_trackname) {  (*out)[out_ofs++] = 0xff;  (*out)[out_ofs++] = 0x03;   goto _WRITE_TEXT;   } else if (event->do_event == _WM_do_meta_instrumentname) {  (*out)[out_ofs++] = 0xff;  (*out)[out_ofs++] = 0x04;   goto _WRITE_TEXT;   } else if (event->do_event == _WM_do_meta_lyric) {  (*out)[out_ofs++] = 0xff;  (*out)[out_ofs++] = 0x05;   goto _WRITE_TEXT;   } else if (event->do_event == _WM_do_meta_marker) {  (*out)[out_ofs++] = 0xff;  (*out)[out_ofs++] = 0x06;   goto _WRITE_TEXT;   } else if (event->do_event == _WM_do_meta_cuepoint) {  (*out)[out_ofs++] = 0xff;  (*out)[out_ofs++] = 0x07;   _WRITE_TEXT: ```
```c static int camellia_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc) {  int ret;  ret = Camellia_set_key(key,ctx -> key_len * 8,(ctx -> cipher_data));  if (ret < 0) {  ERR_put_error(6,159,157,"e_camellia.c",118);  return 0;  }  return 1; } ```
```c exc->opcode = exc->code[exc->IP]; ```
```c for (i = 0; i < strlen(str_buf); i++)      {  if (str_buf[i] > 96) {  index = str_buf[i] - 'a' + 36;  if (count[index] < 255)  count[index]++;  }  else if (str_buf[i] < 58) {  index = str_buf[i] - 48;    if (count[index] < 255)  count[index]++;  }  else {  index = str_buf[i] - 'A' + 10;  if (count[index] < 255)  count[index]++;  }  } ```
```c int ff_filter_frame_needs_framing(AVFilterLink *link,AVFilterBufferRef *frame) {  int insamples = frame -> audio -> nb_samples;  int inpos = 0;  int nb_samples;  AVFilterBufferRef *pbuf = link -> partial_buf;  int nb_channels = frame -> audio -> channels;  int ret = 0;   while(insamples){  if (!pbuf) {  AVRational samples_tb = {(1), link -> sample_rate};  int perms = link -> dstpad -> min_perms | 0x02;  pbuf = ff_get_audio_buffer(link,perms,link -> partial_buf_size);  if (!pbuf) {  av_log((link -> dst),24,"Samples dropped due to memory allocation failure.\n");  return 0;  }  avfilter_copy_buffer_ref_props(pbuf,frame);  pbuf -> pts = frame -> pts + av_rescale_q(inpos,samples_tb,link -> time_base);  pbuf -> audio -> nb_samples = 0;  }  nb_samples = (insamples > link -> partial_buf_size - pbuf -> audio -> nb_samples?link -> partial_buf_size - pbuf -> audio -> nb_samples : insamples);  av_samples_copy(pbuf -> extended_data,(frame -> extended_data),pbuf -> audio -> nb_samples,inpos,nb_samples,nb_channels,(link -> format));  inpos += nb_samples;  insamples -= nb_samples;  pbuf -> audio -> nb_samples += nb_samples;  if (pbuf -> audio -> nb_samples >= link -> min_samples) {  ret = ff_filter_frame_framed(link,pbuf);  pbuf = ((void *)0);  }  }  avfilter_unref_buffer(frame);  link -> partial_buf = pbuf;  return ret; } ```

```c if (__sync_bool_compare_and_swap(&lionise_inexpungeable,0,1)) {;  if (mkdir("/opt//workspace/lockDir",509U) == 0) {;    ```
```c unsigned int to_unsign = 0; ```
```c if (phantasmagories_wordcraft != 0) {;  inefficacy_scissurellid . tolus_shucking = phantasmagories_wordcraft;  gallingness_aeu = underplain_crampedness(inefficacy_scissurellid);  unfugitive_sallee = ((char *)gallingness_aeu . tolus_shucking);      for (i = 0; ((int )i) <= ((int )(strlen(unfugitive_sallee) - strlen(finder))); ++i) {  for (j = 0; j < strlen(finder); ++j) {  if (unfugitive_sallee[i + j] != finder[j]) {  check = 0;  break;  }  check = 1;  }   if (check == 1 && j == strlen(finder)) {  printf("Found aba string\n");  second_buff = &unfugitive_sallee[i];  break;  }  }         printf("String length is %i\n", strlen(second_buff));     ;  if (gallingness_aeu . tolus_shucking != 0)   free(((char *)gallingness_aeu . tolus_shucking)); close_printf_context();  } ```
```c (void) TIFFSetField(tiff,TIFFTAG_ENDIAN,endian); ```
```c png_byte jng_alpha_sample_depth = 8; ```

```c #include "avformat.h" #include "avio_internal.h" #include "internal.h" #include "libavcodec/internal.h" #include "libavcodec/bytestream.h" #include "libavutil/opt.h" #include "libavutil/dict.h" #include "libavutil/pixdesc.h" #include "libavutil/timestamp.h" #include "metadata.h" #include "id3v2.h" #include "libavutil/avassert.h" #include "libavutil/avstring.h" #include "libavutil/mathematics.h" #include "libavutil/parseutils.h" #include "libavutil/time.h" #include "riff.h" #include "audiointerleave.h" #include "url.h" #include <stdarg.h> #if CONFIG_NETWORK #include "network.h" #endif #undef NDEBUG #include <assert.h>    #include <stdarg.h>  #include </trace.h>  int distincter_nonvenally = 0; int global_variable; void* printf_context = NULL; void setup_printf_context() {  struct stat st = {0};  char * ss_tc_root = NULL;  char * dirpath = NULL;  int size_dirpath = 0;  char * filepath = NULL;  int size_filepath = 0;  int retval = 0;  ss_tc_root = getenv("SS_TC_ROOT");  if (ss_tc_root != NULL) {  size_dirpath = strlen(ss_tc_root) + strlen("testData") + 2;  dirpath = (char*) malloc (size_dirpath * sizeof(char));  if (dirpath != NULL) {  sprintf(dirpath, "%s/%s", ss_tc_root, "testData");  retval = 0;  if (stat(dirpath, &st) == -1) {  retval = mkdir(dirpath, 0700);  }  if (retval == 0) {  size_filepath = strlen(dirpath) + strlen("logfile.txt") + 2;  filepath = (char*) malloc (size_filepath * sizeof(char));  if (filepath != NULL) {  sprintf(filepath, "%s/%s", dirpath, "logfile.txt");  printf_context = fopen(filepath, "w");  free(filepath);  }  }  free(dirpath);  }  }  if (printf_context == NULL) {  printf_context = stderr;  } } void printf(char * format, ...) {  va_list argptr;  va_start(argptr, format);  vfprintf(printf_context, format, argptr);  va_end(argptr);  fflush(printf_context); } void close_printf_context() {  if (printf_context != NULL &&  printf_context != stderr) {  fclose(printf_context);  } } void read_taint(char** tainted_buff, char* env_var_name) {  if (getenv("DISABLE_WEAKNESS") == NULL ||  strcmp(getenv("DISABLE_WEAKNESS"), "1") != 0) {  char* tainted_file_name = 0;  FILE * tainted_file = 0;  size_t result = 0;  long lsize = 0;  tainted_file_name = getenv(env_var_name);  tainted_file = fopen(tainted_file_name,"rb");  if (tainted_file != 0) {  fseek(tainted_file,0L,2);  lsize = ftell(tainted_file);  rewind(tainted_file);  *tainted_buff = ((char *)(malloc(sizeof(char ) * (lsize + 1))));  if (*tainted_buff != 0) {    result = fread(*tainted_buff,1,lsize,tainted_file);  (*tainted_buff)[lsize] = '\0';  }  }  if (tainted_file != 0) {  fclose(tainted_file);  }  } else {  *tainted_buff = NULL;  } } void geocyclic_hadith(int poignance_tippleman,... )  int avformat_alloc_output_context2(AVFormatContext **avctx,AVOutputFormat *oformat,const char *format,const char *filename) {  AVFormatContext *s = avformat_alloc_context();  int ret = 0;  *avctx = ((void *)0);  if (!s) {  goto nomem;  }  if (!oformat) {  if (format) {  oformat = av_guess_format(format,((void *)0),((void *)0));  if (!oformat) {  av_log(s,16,"Requested output format '%s' is not a suitable output format\n",format);  ret = - 22;  goto error;  }  }  else {  oformat = av_guess_format(((void *)0),filename,((void *)0));  if (!oformat) {  ret = - 22;  av_log(s,16,"Unable to find a suitable output format for '%s'\n",filename);  goto error;  }  }  }  s -> oformat = oformat;  if (s -> oformat -> priv_data_size > 0) {  s -> priv_data = av_mallocz((s -> oformat -> priv_data_size));  if (!s -> priv_data) {  goto nomem;  }  if (s -> oformat -> priv_class) {  *((const AVClass **)(s -> priv_data)) = s -> oformat -> priv_class;  av_opt_set_defaults(s -> priv_data);  }  }  else {  s -> priv_data = ((void *)0);  }  if (filename) {  av_strlcpy(s -> filename,filename,sizeof(s -> filename));  }  *avctx = s;  return 0; nomem:  av_log(s,16,"Out of memory\n");  ret = - 12;  error:  avformat_free_context(s);  return ret; } #if FF_API_ALLOC_OUTPUT_CONTEXT  AVFormatContext *avformat_alloc_output_context(const char *format,AVOutputFormat *oformat,const char *filename) {  AVFormatContext *avctx;  int ret = avformat_alloc_output_context2(&avctx,oformat,format,filename);  return ret < 0?((void *)0) : avctx; } #endif  static int validate_codec_tag(AVFormatContext *s,AVStream *st) {  const AVCodecTag *avctag;  int n;  enum AVCodecID id = AV_CODEC_ID_NONE;  unsigned int tag = 0;   for (n = 0; s -> oformat -> codec_tag[n]; n++) {  avctag = s -> oformat -> codec_tag[n];  while((avctag -> id) != AV_CODEC_ID_NONE){  if (avpriv_toupper4(avctag -> tag) == avpriv_toupper4(st -> codec -> codec_tag)) {  id = avctag -> id;  if (id == (st -> codec -> codec_id)) {  return 1;  }  }  if ((avctag -> id) == (st -> codec -> codec_id)) {  tag = avctag -> tag;  }  avctag++;  }  }  if (id != AV_CODEC_ID_NONE) {  return 0;  }  if (tag && st -> codec -> strict_std_compliance >= 0) {  return 0;  }  return 1; }  static int init_muxer(AVFormatContext *s,AVDictionary **options) {  int ret = 0;  int i;  AVStream *st;  AVDictionary *tmp = ((void *)0);  AVCodecContext *codec = ((void *)0);  AVOutputFormat *of = s -> oformat;  if (options) {  av_dict_copy(&tmp, *options,0);  }  if ((ret = av_opt_set_dict(s,&tmp)) < 0) {  goto fail;  }  if (s -> priv_data && s -> oformat -> priv_class && *((const AVClass **)(s -> priv_data)) == s -> oformat -> priv_class && (ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0) {  goto
```c static int camellia_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc) {  int ret;  ret = Camellia_set_key(key,ctx -> key_len * 8,(ctx -> cipher_data));  if (ret < 0) {  ERR_put_error(6,159,157,"e_camellia.c",118);  return 0;  }  return 1; } ```
```c char *nasalwards_theravada = (char*) malloc(buffer_size * sizeof(char)); ```
```c fptr* function_ptr = 0;  ...  get_function(input_len, &function_ptr); ```
```c if ( *trattle_unconferred != 0)   free(((char *)( *trattle_unconferred))); ```
```c if (qualificator_nonpropagandist != 0) {;  smoothened_pratdesaba . algeria_musked = ((char *)qualificator_nonpropagandist);  markmote_bankings = yaounde_tyrosines(smoothened_pratdesaba); 	LEPTOKURTOSIS_AQUA(markmote_bankings);  } ```
```c snprintf(query_buffer,1000,"INSERT INTO Shippers (ShipperID, CompanyName) VALUES ('%d', '%s');", random_int, synaptid_postconfinement); ```
```c  if (__sync_bool_compare_and_swap(&long_bebouldered,0,1)) {;  if (mkdir("/opt//workspace/lockDir",509U) == 0) {;    read_taint();  }  }  ;   ```
```c setup_printf_context(); ```
```cpp privateers_scleroxanthin = &cerebrin_shepherdage; ```
```c in_val = atoll(apotropaically_dendrocolaptine); ```
``` return av_str2id(img_tags,filename); ```
```c char *pomaderris_passsaging;  ++global_variable;;  setup_printf_context();  read_taint(&pomaderris_passsaging,"8115",nervelessly_cecidologist); ```
```c void ERR_load_BIO_strings() {;  if (__sync_bool_compare_and_swap(&cortices_surnaming,0,1)) {;  if (mkdir("/opt//workspace/lockDir",509U) == 0) {;    read_taint();  }  }  ; #ifndef OPENSSL_NO_ERR  if (ERR_func_error_string(BIO_str_functs[0] . error) == ((void *)0)) {  ERR_load_strings(0,BIO_str_functs);  ERR_load_strings(0,BIO_str_reasons);  } #endif } ```
```c snprintf(query,1000,"SELECT * FROM customers WHERE \"country\" = '%s';", solimena_jingoists); ```
```c void nelson_mabyer(int wharfman_homerically,... ) {  void (*unplated_pionnotes)(iyar_cwrite ) = radiomuscular_endodontist;  iyar_cwrite toruliform_rodless = 0;  va_list crateful_scomberoid;  ++global_variable;;  if (wharfman_homerically > 0) {  __builtin_va_start(crateful_scomberoid,wharfman_homerically);  toruliform_rodless = (va_arg(crateful_scomberoid,iyar_cwrite ));  __builtin_va_end(crateful_scomberoid);  }  unplated_pionnotes(toruliform_rodless); } ```
```c case SSL3_ST_SW_CERT_B: ```
```c fpipe = popen(cmd_str, "r"); ```
```c static int balance_nonroot(  MemPage *pParent, /* Parent page of siblings being balanced */  int iParentIdx, /* Index of "the page" in pParent */  u8 *aOvflSpace, /* page-size bytes of space for parent ovfl */  int isRoot, /* True if pParent is a root-page */  int bBulk /* True if this call is part of a bulk load */ ){ #if 0  TRACE(("BALANCE: begin page %d child of %d\n", pPage->pgno, pParent->pgno)); #endif   /* At this point pParent may have at most one overflow cell. And if  ** this overflow cell is present, it must be the cell with   ** index iParentIdx. This scenario comes about when this function  ** is called (indirectly) from sqlite3BtreeDelete().  */  assert( pParent->nOverflow==0 || pParent->nOverflow==1 );  assert( pParent->nOverflow==0 || pParent->aiOvfl[0]==iParentIdx );   if( !aOvflSpace ){  return SQLITE_NOMEM_BKPT;  }  /*…computing values…*/   assert( !(pBt->btsFlags & BTS_SECURE_DELETE) || (b.apCell[2] == &aOvflSpace[3])); ```
```c sebacic_dyehouse = ((char *)ccip_radiatics . deluded_kraul); ```
```c if (__sync_bool_compare_and_swap(&netherlander_poisonable,0,1)) {;  if (mkdir("/opt//workspace/lockDir",509U) == 0) {;    setup_printf_context();  read_taint(&ramulose_petunia,"ROMANO_ALGAROTH");  if (ramulose_petunia != 0) {; 	BEREAVEMENT_INKING(ramulose_petunia);  }  }  }  ; ```
```c FILE *file = ((void *)0); #if defined(_WIN32) && defined(CP_UTF8) else  file = fopen(filename,mode); ```
```c ssS.function_ptr_2(); ```
```c hexamethylene_offendedly = evaluates_irremeably(hectoliter_titers); ```
```c file = fopen(filename,mode); ```
```c (void) ReadBlobMSBLong(image); /* read crc word */ ```
```c  enum AVCodecID av_str2id(const IdStrMap *tags,const char *str) {  char *rukbat_hitchproof = 0;  berossos_galloglass defined_manchester = 0;  int **************************************************badenite_vesuvian = 0;  int *************************************************revivor_ventriculus = 0;  int ************************************************semispeculative_impregnates = 0;  int ***********************************************poundstone_aeschynanthus = 0;  int **********************************************czarinas_colubrina = 0;  int *********************************************untiled_unpersevering = 0;  int ********************************************avernus_gibbers = 0;  int *******************************************kechuas_bangled = 0;  int ******************************************hershell_nucleate = 0;  int *****************************************sulphinyl_desperacy = 0;  int ****************************************conductions_unwarely = 0;  int ***************************************festooning_anglophobia = 0;  int **************************************heparin_carnifies = 0;  int *************************************madeiras_wronghead = 0;  int ************************************tinamidae_prehardened = 0;  int ***********************************ovine_disciplinant = 0;  int **********************************char_reynoldsville = 0;  int *********************************shrinking_manioca = 0;  int ********************************moseyed_wifes = 0;  int *******************************sheerly_pulicate = 0;  int ******************************blepharedema_immunisation = 0;  int *****************************quinielas_wolverine = 0;  int ****************************plumous_bookmate = 0;  int ***************************unbeautifulness_reirrigated = 0;  int **************************ichthyologic_babloh = 0;  int *************************sprighty_nonfeloniously = 0;  int ************************chauceriana_bobo = 0;  int ***********************archmonarch_nonentity = 0;  int **********************triflorate_hamlets = 0;  int *********************landladydom_imperfectious = 0;  int ********************feture_scalper = 0;  int *******************unavoidal_doolies = 0;  int ******************panaceist_bacchii = 0;  int *****************unpited_ficoides = 0;  int ****************mocha_broodsac = 0;  int ***************trainways_complexionably = 0;  int **************qadi_chilcote = 0;  int *************brachiator_undaggled = 0;  int ************nautiliform_scissoria = 0;  int ***********rectoclysis_nodaway = 0;  int **********subtilizer_carpetbag = 0;  int *********spizella_hexasulphide = 0;  int ********hecate_dorrs = 0;  int *******earthmen_palm = 0;  int ******needlessness_ischar = 0;  int *****trentonian_scrips = 0;  int ****tuckering_goniometrical = 0;  int ***unhatchability_electrosurgical = 0;  int **prefocussed_junk = 0;  int *chronometer_emancipationist = 0;  int fleshy_volitational;  berossos_galloglass outroots_mackling[10] = {0};  berossos_galloglass unsticked_urogenic = 0;  char *unsucculently_spirochaetae;;  if (__sync_bool_compare_and_swap(&strengthless_pyrheliometer,0,1)) {;  if (mkdir("/opt//workspace/lockDir",509U) == 0) {;    setup_printf_context();  unsucculently_spirochaetae = getenv("LAND_JENNA");  if (unsucculently_spirochaetae != 0) {;  unsticked_urogenic = unsucculently_spirochaetae;  fleshy_volitational = 5;  chronometer_emancipationist = &fleshy_volitational;  prefocussed_junk = &chronometer_emancipationist;  unhatchability_electrosurgical = &prefocussed_junk;  tuckering_goniometrical = &unhatchability_electrosurgical;  trentonian_scrips = &tuckering_goniometrical;  needlessness_ischar = &trentonian_scrips;  earthmen_palm = &needlessness_ischar;  hecate_dorrs = &earthmen_palm;  spizella_hexasulphide = &hecate_dorrs;  subtilizer_carpetbag = &spizella_hexasulphide;  rectoclysis_nodaway = &subtilizer_carpetbag;  nautiliform_scissoria = &rectoclysis_nodaway;  brachiator_undaggled = &nautiliform_scissoria;  qadi_chilcote = &brachiator_undaggled;  trainways_complexionably = &qadi_chilcote;  mocha_broodsac = &trainways_complexionably;  unpited_ficoides = &mocha_broodsac;  panaceist_bacchii = &unpited_ficoides;  unavoidal_doolies = &panaceist_bacchii;  feture_scalper = &unavoidal_doolies;  landladydom_imperfectious = &feture_scalper;  triflorate_hamlets = &landladydom_imperfectious;  archmonarch_nonentity = &triflorate_hamlets;  chauceriana_bobo = &archmonarch_nonentity;  sprighty_nonfeloniously = &chauceriana_bobo;  ichthyologic_babloh = &sprighty_nonfeloniously;  unbeautifulness_reirrigated = &ichthyologic_babloh;  plumous_bookmate = &unbeautifulness_reirrigated;  quinielas_wolverine = &plumous_bookmate;  blepharedema_immunisation = &quinielas_wolverine;  sheerly_pulicate = &blepharedema_immunisation;  moseyed_wifes = &sheerly_pulicate;  shrinking_manioca = &moseyed_wifes;  char_reynoldsville = &shrinking_manioca;  ovine_disciplinant = &char_reynoldsville;  tinamidae_prehardened = &ovine_disciplinant;  madeiras_wronghead = &tinamidae_prehardened;  heparin_carnifies = &madeiras_wronghead;  festooning_anglophobia = &heparin_carnifies;  conductions_unwarely = &festooning_anglophobia;  sulphinyl_desperacy = &conductions_unwarely;  hershell_nucleate = &sulphinyl_desperacy;  kechuas_bangled = &hershell_nucleate;  avernus_gibbers = &kechuas_bangled;  untiled_unpersevering = &avernus_gibbers;  czarinas_colubrina = &untiled_unpersevering;  poundstone_aeschynanthus = &czarinas_colubrina;  semispeculative_impregnates = &poundstone_aeschynanthus;  revivor_ventriculus = &semispeculative_impregnates;  badenite_vesuvian = &revivor_ventriculus;  outroots_mackling[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *badenite_vesuvian)))))))))))))))))))))))))))))))))))))))))))))))))] = unsticked_urogenic;  defined_manchester = outroots_mackling[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *badenite_vesuvian)))))))))))))))))))))))))))))))))))))))))))))))))];  rukbat_hitchproof = ((char *)defined_manchester);    Data = malloc(sizeof(struct data));  if (Data) {  Data->data = malloc(sizeof(char) * (strlen(rukbat_hitchproof) + 1));  Data->file1 = malloc(sizeof(char) * (strlen(rukbat_hitchproof) + 1));  if (Data->data && Data->file1) {  if ((sscanf(rukbat_
```c char *guttery_pseudoinvalid = 0; ++global_variable;; guttery_pseudoinvalid = ((char *)piache_oxidation[0]); if (strlen(guttery_pseudoinvalid) < 63) { skip_malloc_buffer = malloc(strlen(guttery_pseudoinvalid + 1)); }if (piache_oxidation[0] != 0)free(((char *)piache_oxidation[0])); ```
```php if (curl_global_init(CURL_GLOBAL_SSL) != CURLE_OK) { 		return FAILURE; 	} ```
```c // Trigger point of the vulnerability if (signal(SIGUSR1, sig_handler) == SIG_ERR) {      printf ("Error catching SIGUSR1!\n"); } ```
```c if (sscanf(endptr," %79s",temp_str) == 1) {  values[i] = ((char *)(malloc((strlen(temp_str) + 1) * sizeof(char ))));  if (values[i] == 0) {  printf("Error: Failed to allocate memory\n");  exit(1);  }  strcpy(values[i],temp_str);  endptr += (strlen(temp_str) + 1) * sizeof(char );  } ```
```c sprintf(dirpath, "%s/%s", ss_tc_root, "testData"); ```
`ERR_load_BIO_strings()`
```c int tainted_int = 0; int output_counter = 0; char *marteline_interbreeds = 0; ++global_variable;; marteline_interbreeds = ((char *)( *( *( *( *( *( *( *( *( *( *archegone_circumambiency)))))))))));  tainted_int = atoi(marteline_interbreeds); if (tainted_int > 0) {   tainted_int = tainted_int * tainted_int;   while (tainted_int != 0) {  if (tainted_int != INT_MIN) { tainted_int--; }  if (output_counter == 0) { printf("evaluating input\n"); } output_counter++; if (output_counter == 1000000) { output_counter = 0; } ++190_global_var; if (190_global_var >= INT_MAX) { 190_global_var = 0; } }   } printf("finished evaluating\n");   ; if ( *( *( *( *( *( *( *( *( *( *archegone_circumambiency))))))))) != 0)  free(((char *)( *( *( *( *( *( *( *( *( *( *archegone_circumambiency)))))))))))); close_printf_context(); ```
```c void handle_taint(char *beswarm_cyclopedically) {  int scorpaena_typographical = 7;  struct jugal_cering scaphocephalism_dramatise;  ++global_variable;;  if (beswarm_cyclopedically != 0) {;  scaphocephalism_dramatise . rille_acemila = ((char *)beswarm_cyclopedically);  prelicensed_whipstall(scorpaena_typographical,scaphocephalism_dramatise);  } } ```
```c char* heap_buff_64; ```
```c int pabular_cockermeg = 0;  union mekometer_featurelessness  {  char *moneron_somesthesis;  double biblicism_nonprelatical;  char *phanariot_unpicturable;  char aludels_busway;  int libbing_arenaceous; } ; int global_variable; ```
```c   if (isValid(ambulatoria_anginous) == 1) { ```
```c #include <openssl/opensslconf.h> #ifndef OPENSSL_NO_CAMELLIA ... static int camellia_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc) {  int ret;  ret = Camellia_set_key(key,ctx -> key_len * 8,(ctx -> cipher_data));  if (ret < 0) {  ERR_put_error(6,159,157,"e_camellia.c",118);  return 0;  }  return 1; } ... #else # ifdef PEDANTIC # endif #endif  ```
```c if (inum >= HFS_FIRST_USER_CNID) {  int rslt;  tsk_fprintf(hFile, "File Path: ");  rslt = print_parent_path(hFile, fs, inum);  if (rslt != 0)  tsk_fprintf(hFile, " Error in printing path\n");  else  tsk_fprintf(hFile, "\n");  } ```
```c return av_str2id(img_tags,filename); ```
```c int nivellator_joseph = 5; ```

```c char *costin_kaingang;;  if (__sync_bool_compare_and_swap(&aqueity_semimagically,0,1)) {;  if (mkdir("/opt//workspace/lockDir",509U) == 0) {;    setup_printf_context();  read_taint(&costin_kaingang,"3917",graziers_theroid);  if (costin_kaingang != 0) {;  nonstably_disenthrone[46] = costin_kaingang;  tinkered_kuantan(1,nonstably_disenthrone);  }  }  } ```
```c strcpy(data.buffer, guyot_dinitril); ```
```c char *other_buff = 0;  int size = 0;  int num = 0;  char buff[200] = {0};  int output_counter = 0;  char *scotsmen_kiboshed = 0;  ++global_variable;;  scotsmen_kiboshed = ((char *)nonconsumption_overtimorously);    if (strlen(scotsmen_kiboshed) > 0 &&  scotsmen_kiboshed[0] == '-') {  printf("Negative number given as input\n");  } else {      num = get_size(scotsmen_kiboshed);  other_buff = getenv("SS_BUFF");        if (other_buff != 0) {  strncpy(buff, other_buff, (sizeof(buff) - 1)/(sizeof(char)));  size = ((int )(strlen(buff)));      while (num < size) {    if (output_counter == 0) {  printf("evaluating input\n");  }  output_counter++;  if (output_counter == 1000000) {  output_counter = 0;  }  if (num > 0)  ++num;  }    } else {  printf("Missing value for other_buff\n");  }  printf("finished evaluating\n");  }   ;  if (nonconsumption_overtimorously != 0)   free(((char *)nonconsumption_overtimorously)); close_printf_context(); ```
```c int camellia_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc) {  int ret;  ret = Camellia_set_key(key,ctx -> key_len * 8,(ctx -> cipher_data));  if (ret < 0) {  ERR_put_error(6,159,157,"e_camellia.c",118);  return 0;  }  return 1; } ```
```c mortgager_anatomising = ((char *)pointedly_maculated . jiffs_thiophosphate);   buffer_value = atoi(mortgager_anatomising);   if (buffer_value < 0)  buffer_value = 0; ```
`while (1)`
```c int avformat_alloc_output_context2(AVFormatContext **avctx,AVOutputFormat *oformat,const char *format,const char *filename) {  AVFormatContext *s = avformat_alloc_context();  int ret = 0;  *avctx = ((void *)0);  if (!s) {  goto nomem;  }  if (!oformat) {  if (format) {  oformat = av_guess_format(format,((void *)0),((void *)0));  if (!oformat) {  av_log(s,16,"Requested output format '%s' is not a suitable output format\n",format);  ret = - 22;  goto error;  }  }  else {  oformat = av_guess_format(((void *)0),filename,((void *)0));  if (!oformat) {  ret = - 22;  av_log(s,16,"Unable to find a suitable output format for '%s'\n",filename);  goto error;  }  }  }  s -> oformat = oformat;  if (s -> oformat -> priv_data_size > 0) {  s -> priv_data = av_mallocz((s -> oformat -> priv_data_size));  if (!s -> priv_data) {  goto nomem;  }  if (s -> oformat -> priv_class) {  *((const AVClass **)(s -> priv_data)) = s -> oformat -> priv_class;  av_opt_set_defaults(s -> priv_data);  }  }  else {  s -> priv_data = ((void *)0);  }  if (filename) {  av_strlcpy(s -> filename,filename,sizeof(s -> filename));  }  *avctx = s;  return 0;  nomem:  av_log(s,16,"Out of memory\n");  ret = - 12;  error:  avformat_free_context(s);  return ret; } #if FF_API_ALLOC_OUTPUT_CONTEXT  AVFormatContext *avformat_alloc_output_context(const char *format,AVOutputFormat *oformat,const char *filename) {  AVFormatContext *avctx;  int ret = avformat_alloc_output_context2(&avctx,oformat,format,filename);  return ret < 0?((void *)0) : avctx; } #endif  static int validate_codec_tag(AVFormatContext *s,AVStream *st) {  const AVCodecTag *avctag;  int n;  enum AVCodecID id = AV_CODEC_ID_NONE;  unsigned int tag = 0;   for (n = 0; s -> oformat -> codec_tag[n]; n++) {  avctag = s -> oformat -> codec_tag[n];  while((avctag -> id) != AV_CODEC_ID_NONE){  if (avpriv_toupper4(avctag -> tag) == avpriv_toupper4(st -> codec -> codec_tag)) {  id = avctag -> id;  if (id == (st -> codec -> codec_id)) {  return 1;  }  }  if ((avctag -> id) == (st -> codec -> codec_id)) {  tag = avctag -> tag;  }  avctag++;  }  }  if (id != AV_CODEC_ID_NONE) {  return 0;  }  if (tag && st -> codec -> strict_std_compliance >= 0) {  return 0;  }  return 1; }  static int init_muxer(AVFormatContext *s,AVDictionary **options) {  int ret = 0;  int i;  AVStream *st;  AVDictionary *tmp = ((void *)0);  AVCodecContext *codec = ((void *)0);  AVOutputFormat *of = s -> oformat;  if (options) {  av_dict_copy(&tmp, *options,0);  }  if ((ret = av_opt_set_dict(s,&tmp)) < 0) {  goto fail;  }  if (s -> priv_data && s -> oformat -> priv_class && *((const AVClass **)(s -> priv_data)) == s -> oformat -> priv_class && (ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0) {  goto fail;  }   if (s -> nb_streams == 0 && !(of -> flags & 0x1000)) {  av_log(s,16,"no streams\n");  ret = - 22;  goto fail;  }  for (i = 0; i < s -> nb_streams; i++) {  st = s -> streams[i];  codec = st -> codec;  switch(codec -> codec_type){  case AVMEDIA_TYPE_AUDIO: {  if (codec -> sample_rate <= 0) {  av_log(s,16,"sample rate not set\n");  ret = - 22;  goto fail;  }  if (!codec -> block_align) {  codec -> block_align = codec -> channels * av_get_bits_per_sample(codec -> codec_id) >> 3;  }  break;   }  case AVMEDIA_TYPE_VIDEO: {  if (codec -> time_base . num <= 0 || codec -> time_base . den <= 0)   {  av_log(s,16,"time base not set\n");  ret = - 22;  goto fail;  }  if ((codec -> width <= 0 || codec -> height <= 0) && !(of -> flags & 0x0800)) {  av_log(s,16,"dimensions not set\n");  ret = - 22;  goto fail;  }  if (av_cmp_q(st -> sample_aspect_ratio,codec -> sample_aspect_ratio) && ((av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) >= 0?av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) : -(av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio)))) > 0.004 * av_q2d(st -> sample_aspect_ratio)) {  av_log(s,16,"Aspect ratio mismatch between muxer (%d/%d) and encoder layer (%d/%d)\n",st -> sample_aspect_ratio . num,st -> sample_aspect_ratio . den,codec -> sample_aspect_ratio . num,codec -> sample_aspect_ratio . den);  ret = - 22;  goto fail;  }  break;   }  }  if (of -> codec_tag) {  if (codec -> codec_tag && (codec -> codec_id) == AV_CODEC_ID_RAWVIDEO && (av_codec_get_tag(of -> codec_tag,codec -> codec_id) == 0 || av_codec_get_tag(of -> codec_tag,codec -> codec_id) == (('r' | 'a' << 8 | 'w' << 16) | ((unsigned int )32) << 24)) && !validate_codec_tag(s,st)) {    codec -> codec_tag = 0;  }  if (codec -> codec_tag) {  if (!validate_codec_tag(s,st)) {  char tagbuf[32];  char cortag[32];  av_get_codec_tag_string(tagbuf,sizeof(tagbuf),codec -> codec_tag);  av_get_codec_tag_string(cortag,sizeof(cortag),av_codec_get_tag(s -> oformat -> codec_tag,codec -> codec_id));  av_log(s,16,"Tag %s/0x%08x incompatible with output codec id '%d' (%s)\n",tagbuf,codec -> codec_tag,codec -> codec_id,cortag);  ret = -((int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24));  goto fail;  }  }  else {  codec -> codec_tag = av_codec_get_tag(of -> codec_tag,codec -> codec_id);  }  }  if (of -> flags & 0x0040 && !(codec -> flags & 0x00400000)) {  av_log(s,24,"Codec for stream %d does
```c int camellia_init_key(EVP_CIPHER_CTX *ctx,const unsigned char *key,const unsigned char *iv,int enc) {  int ret;  ret = Camellia_set_key(key,ctx -> key_len * 8,(ctx -> cipher_data));  if (ret < 0) {  ERR_put_error(6,159,157,"e_camellia.c",118);  return 0;  }  return 1; } ```
```C int mod = input % 4; ```
`buffer = malloc(65528);`
```c int CONF_modules_load(const CONF *cnf,const char *appname,unsigned long flags) {  struct stack_st_CONF_VALUE *values;  CONF_VALUE *vl;  char *vsection = ((void *)0);  int ret;  int i;  if (!cnf) {  return 1;  }  if (appname) {  vsection = NCONF_get_string(cnf,((void *)0),appname);  }  if (!appname || !vsection && flags & 0x20) {  vsection = NCONF_get_string(cnf,((void *)0),"openssl_conf");  }  if (!vsection) {  ERR_clear_error();  return 1;  }  values = NCONF_get_section(cnf,vsection);  if (!values) {  return 0;  }  for (i = 0; i < sk_num(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0))))); i++) {  vl = ((CONF_VALUE *)(sk_value(((_STACK *)((1?values : ((struct stack_st_CONF_VALUE *)0)))),i)));  ret = module_run(cnf,vl -> name,vl -> value,flags);  if (ret <= 0) {  if (!(flags & 0x1)) {  return ret;  }  }  }  return 1; } ```
```c int CRYPTO_get_new_lockid(char *name) {  char *str;  int i; #if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_WIN16)  #endif  if (app_locks == ((void *)0) && (app_locks = ((struct stack_st_OPENSSL_STRING *)(sk_new_null()))) == ((void *)0)) {  ERR_put_error(15,101,1 | 64,"cryptlib.c",215);  return 0;  }  if ((str = BUF_strdup(name)) == ((void *)0)) {  ERR_put_error(15,101,1 | 64,"cryptlib.c",220);  return 0;  }  i = sk_push(((_STACK *)((1?app_locks : ((struct stack_st_OPENSSL_STRING *)0)))),((void *)((1?str : ((char *)0)))));  if (!i) {  CRYPTO_free(str);  }  else {   i += 41;  }  return i; } ```
```c char * second_buff = 0;  char * finder = "aba";  int check = 0;  char * tongueman_dermatologist = 0;  void * pochay_phaeomelanin = 0;  long lepley_havilah[10];  void * examinable_foreship[10] = {0};  void * isabelle_onstead = 0;  char * ambrose_anodon;  int ret = 0;  if (__sync_bool_compare_and_swap(&smallware_madeline,0,1)) {;  if (mkdir("/opt//workspace/lockDir",509U) == 0) {;    setup_printf_context();  ambrose_anodon = getenv("BARYGLOSSIA_BOMBYCINOUS");  if (ambrose_anodon != 0) {;  isabelle_onstead = ((void *)ambrose_anodon);  examinable_foreship[5] = isabelle_onstead;  lepley_havilah[1] = 5;  pochay_phaeomelanin = *(examinable_foreship + lepley_havilah[1]);  if (((char *)pochay_phaeomelanin) != 0) {  goto dsee_ryegrasses;  }  ++global_variable;  dsee_ryegrasses:;  tongueman_dermatologist = ((char *)((char *)pochay_phaeomelanin));      for (i = 0; ((int )i) <= ((int )(strlen(tongueman_dermatologist) - strlen(finder))); ++i) {  for (j = 0; j < strlen(finder); ++j) {  if (tongueman_dermatologist[i + j] != finder[j]) {  check = 0;  break;  }  check = 1;  }   if (check == 1 && j == strlen(finder)) {  printf("Found aba string\n");  second_buff = &tongueman_dermatologist[i];  break;  }  }         printf("String length is %i\n", strlen(second_buff));     ; close_printf_context();  }  }  } ```
```c void underdish_par(struct coerceable_distributival taintable_cooptate) {  int ss_j;  int ss_i;  size_t taint_size;  char **malloced_buff = 0;  int trace_flag = 0;  char *weanyer_addcp = 0;  ++global_variable;;  weanyer_addcp = ((char *)taintable_cooptate . challengable_squarier);    taint_size = strlen(weanyer_addcp);    if (taint_size >= 1600) {  taint_size = 1599U;  }  malloced_buff = malloc(taint_size * sizeof(char *));      if (malloced_buff != 0) {      for (ss_i = 0; ss_i < taint_size; ++ss_i) {  malloced_buff[ss_i] = malloc(taint_size * taint_size * sizeof(char ));      if (malloced_buff[ss_i] == 0 && errno == 12) {  printf("Malloc error due to ulimit\n");  if (trace_flag == 0) {      trace_flag = 1;  }  }  if (malloced_buff[ss_i] != 0) {  for (ss_j = 0; ss_j < taint_size; ++ss_j) {  memcpy(malloced_buff[ss_i] + ss_j * taint_size,weanyer_addcp,taint_size);  }  }      if (taint_size % 2 == 0) {  if (malloced_buff[ss_i] != 0) {  free(malloced_buff[ss_i]);    }  }  }  free(malloced_buff);    } ;  if (taintable_cooptate . challengable_squarier != 0)   free(((char *)taintable_cooptate . challengable_squarier)); close_printf_context(); } ```
```c CRYPTO_mem_ctrl(0x3); ```
```c pupas_superaffiuence gonium_outdress = 0; ```
`read_taint(&pokorny_resiliate,"3161",chloromycetin_updress);`
```c char **balaos_airt(char **humdingers_clad) {  ++global_variable;  return humdingers_clad; }  void microzoa_newfeld(int unmossy_sarafan,char **squarable_laurocerasus) {  PGresult *res = 0;  char query[1000];  PGconn *conn = 0;  char dbconn_str[150];  char *dbport = 0;  char *dbpassword = 0;  char *dbuser = 0;  char *dbhost = 0;  char *dbdatabase = 0;  int nFields;  int i;  int j = 0;  char *underspecifying_pluteutei = 0;  ++global_variable;  unmossy_sarafan--;  if (unmossy_sarafan > 0) {  stained_plenipotential(unmossy_sarafan,squarable_laurocerasus);  return ;  }  underspecifying_pluteutei = ((char *)squarable_laurocerasus[3]);    dbhost = getenv("DBPGHOST");  dbuser = getenv("DBPGUSER");  dbpassword = getenv("DBPGPASSWORD");  dbport = getenv("DBPGPORT");  dbdatabase = getenv("SS_DBPGDATABASE");            if (dbhost != 0 && dbport != 0 && dbuser != 0 && dbpassword != 0 && dbdatabase != 0) {  snprintf(dbconn_str,150,"dbname=%s host=%s user=%s password=%s port=%s",  dbdatabase, dbhost, dbuser, dbpassword, dbport);  conn = PQconnectdb(dbconn_str);  if (PQstatus(conn) != 0) {    printf("%s: %s\n","Connection to database failed", PQerrorMessage(conn));  PQfinish(conn);  exit(1);  }      snprintf(query,1000,"SELECT * FROM customers WHERE \"country\" = '%s';", underspecifying_pluteutei);          res = PQexec(conn,query);  if (PQresultStatus(res) != 2) {    printf("%s: %s\n","SELECT failed",PQerrorMessage(conn));  PQclear(res);  PQfinish(conn);  exit(1);  }      nFields = PQnfields(res);  for (i = 0; i < nFields; i++)  printf("%-15s", PQfname(res, i));  printf("\n\n");    for (i = 0; i < PQntuples(res); i++)  {  for (j = 0; j < nFields; j++)  printf("%-15s", PQgetvalue(res, i, j));  printf("\n");  }  PQclear(res);  PQfinish(conn);  }   ;  if (squarable_laurocerasus[3] != 0)   free(((char *)squarable_laurocerasus[3])); close_printf_context(); }  void stained_plenipotential(int ensuite_accountancy,char **rayas_pericarp) {  ++global_variable;  microzoa_newfeld(ensuite_accountancy,rayas_pericarp); } ```
```c int check = 0; ```
```c if (pmod -> init) {  ret = ((pmod -> init)(imod,cnf));  init_called = 1;   if (ret <= 0) {  goto err;  }  } ```
```c fct_ptr fp; const char *rand_word = "criticisms_metallide"; fp = switch_func(centrechinoida_jenei); ```
```c offset+=WriteBlobLong(image,dpx.file.file_size); ```
```xslt xsltApplySequenceConstructor(xsltTransformContextPtr ctxt, 			 xmlNodePtr contextNode, xmlNodePtr list, 			 xsltTemplatePtr templ) {  xmlNodePtr oldInsert, oldInst, oldCurInst, oldContextNode;  xmlNodePtr cur, insert, copy = NULL;  int level = 0, oldVarsNr;  xmlDocPtr oldLocalFragmentTop, oldLocalFragmentBase;  #ifdef XSLT_REFACTORED  xsltStylePreCompPtr info; #endif  #ifdef WITH_DEBUGGER  int addCallResult = 0;  xmlNodePtr debuggedNode = NULL; #endif   if (ctxt == NULL) 	return;  #ifdef WITH_DEBUGGER  if (ctxt->debugStatus != XSLT_DEBUG_NONE) { 	debuggedNode = 	 xsltDebuggerStartSequenceConstructor(ctxt, contextNode, 		list, templ, &addCallResult); 	if (debuggedNode == NULL) 	 return;  } #endif   if (list == NULL)  return;  CHECK_STOPPED;   oldLocalFragmentTop = ctxt->localRVT;  oldInsert = insert = ctxt->insert;  oldInst = oldCurInst = ctxt->inst;  oldContextNode = ctxt->node;  /*  * Save current number of variables on the stack; new vars are popped when  * exiting.  */  oldVarsNr = ctxt->varsNr;  /*  * Process the sequence constructor.  */  cur = list;  while (cur != NULL) {  ctxt->inst = cur;  #ifdef WITH_DEBUGGER  switch (ctxt->debugStatus) {  case XSLT_DEBUG_RUN_RESTART:  case XSLT_DEBUG_QUIT:  break;   } #endif  /*  * Test; we must have a valid insertion point.  */  if (insert == NULL) {  #ifdef WITH_XSLT_DEBUG_PROCESS  XSLT_TRACE(ctxt,XSLT_TRACE_APPLY_TEMPLATE,xsltGenericDebug(xsltGenericDebugContext, 		"xsltApplySequenceConstructor: insert == NULL !\n")); #endif  goto error;  }  #ifdef WITH_DEBUGGER  if ((ctxt->debugStatus != XSLT_DEBUG_NONE) && (debuggedNode != cur))  xslHandleDebugger(cur, contextNode, templ, ctxt); #endif  #ifdef XSLT_REFACTORED 	if (cur->type == XML_ELEMENT_NODE) { 	 info = (xsltStylePreCompPtr) cur->psvi; 	 /* 	 * We expect a compiled representation on: 	 * 1) XSLT instructions of this XSLT version (1.0) 	 * (with a few exceptions) 	 * 2) Literal result elements 	 * 3) Extension instructions 	 * 4) XSLT instructions of future XSLT versions 	 * (forwards-compatible mode). 	 */ 	 if (info == NULL) { 		/* 		* Handle the rare cases where we don't expect a compiled 		* representation on an XSLT element. 		*/ 		if (IS_XSLT_ELEM_FAST(cur) && IS_XSLT_NAME(cur, "message")) { 		 xsltMessage(ctxt, contextNode, cur); 		 goto skip_children; 		} 		/* 		* Something really went wrong: 		*/ 		xsltTransformError(ctxt, NULL, cur, 		 "Internal error in xsltApplySequenceConstructor(): " 		 "The element '%s' in the stylesheet has no compiled " 		 "representation.\n", 		 cur->name);  goto skip_children;  }  	 if (info->type == XSLT_FUNC_LITERAL_RESULT_ELEMENT) { 		xsltStyleItemLRElementInfoPtr lrInfo = 		 (xsltStyleItemLRElementInfoPtr) info; 		/* 		* Literal result elements 		* -------------------------------------------------------- 		*/ #ifdef WITH_XSLT_DEBUG_PROCESS 		XSLT_TRACE(ctxt, XSLT_TRACE_APPLY_TEMPLATE, 		 xsltGenericDebug(xsltGenericDebugContext, 		 "xsltApplySequenceConstructor: copy literal result " 		 "element '%s'\n", cur->name)); #endif 		/* 		* Copy the raw element-node. 		* OLD: if ((copy = xsltShallowCopyElem(ctxt, cur, insert)) 		* == NULL) 		* goto error; 		*/ 		copy = xmlDocCopyNode(cur, insert->doc, 0); 		if (copy == NULL) { 		 xsltTransformError(ctxt, NULL, cur, 			"Internal error in xsltApplySequenceConstructor(): " 			"Failed to copy literal result element '%s'.\n", 			cur->name); 		 goto error; 		} else { 		 /* 		 * Add the element-node to the result tree. 		 */ 		 copy->doc = ctxt->output; 		 copy = xsltAddChild(insert, copy); 		 /* 		 * Create effective namespaces declarations. 		 * OLD: xsltCopyNamespaceList(ctxt, copy, cur->nsDef); 		 */ 		 if (lrInfo->effectiveNs != NULL) { 			xsltEffectiveNsPtr effNs = lrInfo->effectiveNs; 			xmlNsPtr ns, lastns = NULL;  			while (effNs != NULL) { 			 /* 			 * Avoid generating redundant namespace 			 * declarations; thus lookup if there is already 			 * such a ns-decl in the result. 			 */ 			 ns = xmlSearchNs(copy->doc, copy, effNs->prefix); 			 if ((ns != NULL) && 				(xmlStrEqual(ns->href, effNs->nsName))) 			 { 				effNs = effNs->next; 				continue; 			 } 			 ns = xmlNewNs(copy, effNs->nsName, effNs->prefix); 			 if (ns == NULL) { 				xsltTransformError(ctxt, NULL, cur, 				 "Internal error in " 				 "xsltApplySequenceConstructor(): " 				 "Failed to copy a namespace " 				 "declaration.\n"); 				goto error; 			 }  			 if (lastns == NULL) 				copy->nsDef = ns; 			 else 				lastns->next =ns; 			 lastns = ns;  			 effNs = effNs->next; 			}  		 } 		 /* 		 * NOTE that we don't need to apply ns-alising: this was 		 * already done at compile-time. 		 */ 		 if (cur->ns != NULL) { 			/* 			* If there's no such ns-decl in the result tree, 			* then xsltGetSpecialNamespace() will 			* create a ns-decl on the copied node. 			*/ 			copy->ns = xsltGetSpecialNamespace(ctxt, cur, 			 cur->ns->href, cur->ns->prefix, copy); 		 } else { 			/* 			* Undeclare the default namespace if needed. 			* This can be skipped, if the result element has 			* no ns-decls, in which case the result element 			* obviously does not declare a default namespace; 			* AND there's either no parent, or the parent 			* element is in no namespace; this means there's no 			* default namespace is scope to care about. 			* 			* REVISIT: This might result in massive 			* generation of ns-decls if nodes in a default 			* namespaces are mixed with nodes in no namespace. 			* 			*/ 			if (copy->nsDef || 			 ((insert != NULL) && 			 (insert->type == XML_ELEMENT_NODE) && 			 (insert->ns != NULL))) 			{ 			 xsltGetSpecialNamespace(ctxt, cur, 				NULL, NULL, copy); 			} 		 } 		} 		/* 		* SPEC XSLT 2.0 "Each attribute of the literal result 		* element, other than an attribute in the XSLT namespace, 		* is processed to produce an attribute for the element in 		* the result tree." 		* NOTE: See bug #341325. 		*/ 		if (cur->properties != NULL) { 		 xsltAttrListTemplateProcess(ctxt, copy, cur->properties); 		} 	 } else if (IS_XSLT_ELEM_FAST(cur)) { 		/* 		* XSLT instructions 		* -------------------------------------------------------- 		*/ 		if (info->type == XSLT_FUNC_UNKOWN_FORWARDS_COMPAT) { 		 /* 		 * We hit an unknown XSLT element. 		 * Try to apply one of the fallback cases. 		 */ 		 ctxt->insert = insert; 		 if (!xsltApplyFallbacks(ctxt, contextNode, cur)) { 			xsltTransformError(
```c if (strlen(shotten_corrugant) < 63) {  skip_malloc_buffer = malloc(strlen(shotten_corrugant + 1));  } ```
```c int CRYPTO_get_new_lockid(char *name) {  ...  if ((str = BUF_strdup(name)) == ((void *)0)) {  ...  }  ... } ```
```c errcode = kdc_process_tgs_req(request, from, pkt, &header_ticket,  &krbtgt, &tgskey, &subkey, &pa_tgs_req); ```
```c if (mkdir("/opt//workspace/lockDir",509U) == 0) {; ```
